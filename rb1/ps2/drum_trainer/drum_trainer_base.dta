;;;
;;; base main panel for the drum trainer
;;;
#define DRUM_TRAINER_MAIN_PANEL_BASE
(
   ;;
   ;; properties
   ;;
   (file {gamemode get assets})
   (player_num -1)


   ;;
   ;; bpm constants
   ;;
   (bpm_interval_inc  20)
   (bpm_interval_dec -20)
   (bpm_max          300)
   (bpm_min           40)


   ;;
   ;; sfx constants
   ;;
   (drum_faders
      (
         1.fade
         2.fade
         3.fade
         4.fade
         5.fade
      )
   )
   (drum_sfx
      (
         (
            kick.cue
            snare.cue
            hat.cue
            ride.cue
            crash.cue
            drum_trainer_kit_d
         )
         (
            1c.cue
            2c.cue
            3c.cue
            4c.cue
            5c.cue
            drum_trainer_kit_c
         )
      )
   )


   ;;
   ;; metagame
   ;; 
   (enter
      {set $skip_intro TRUE}
      {set [current_bpm] [default_bpm]}
      {set [current_beat] [default_beat]}
      {set [current_running_beat] [default_beat]}
      {set [current_drums] [default_drums]}
      {set [current_metronome] [default_metronome]}
      {set [current_score] 0}
      {set [current_best] 0}
      {set [change_beat_buffer] 0}
      {$this set_restart_on_loop [restart_on_loop]}
      {$this set_num_loops [default_loops]}
      {if [show_tab_data]
         {$this populate_tab_data [current_beat] [fills_only_tab]}}
      {$this start_beat [current_bpm] [current_beat]}
      {$this start_score}
      {$this update_all_labels}
      {{{get_track_panel} find scoreboard} set_showing FALSE}
      {{{get_track_panel} find crowd_meter} set_showing FALSE}
      {{{get_track_panel} find player_hud_top.grp} set_showing FALSE}
      {{{get_track_panel} find popup_help_01} set intro_disabled TRUE}
      {{{get_track_panel} find popup_help_01} set popup_help_disabled TRUE}
      {if [hide_beat_markers]
         {{{{get_track_panel} get_track 0} find beat_markers.grp} set_showing FALSE}}
      {{beatmatch active_player 0} add_sink $this}
      {{beatmatch active_player 0} set_crowd_rating_active FALSE}
      {if [fills_always_on]
         {{beatmatch active_player 0} fill_band_energy}
         {script_task kTaskSeconds (delay .1) (script {{beatmatch active_player 0} fill_band_energy})}
         {{beatmatch active_player 0} disable_fills_deploy_band_energy}}
      {if [fills_forced]
         {{beatmatch active_player 0} force_solo TRUE}}
      {if {! {gamemode get dont_show_gems_in_solos}}
         {beatmatch set_fake_hit_gems_in_solo TRUE}}
   )
   (pre_exit
      {set [player_num] -1}
      {set $skip_intro FALSE}
      {{beatmatch active_player 0} remove_sink $this}
      {{beatmatch active_player 0} set_crowd_rating_active TRUE}
      {if [fills_always_on]
         {{beatmatch active_player 0} empty_band_energy}
         {{beatmatch active_player 0} enable_fills_deploy_band_energy}}
      {if [fills_forced]
         {{beatmatch active_player 0} force_solo FALSE}}
      {if {! {gamemode get dont_show_gems_in_solos}}
         {beatmatch set_fake_hit_gems_in_solo FALSE}}
   )
   (exit
      {synth stop_all_sfx}
   )
   (pause
      {beatmatch set_time_paused TRUE}
      {game set_paused TRUE}
      {{gamemode get game_panel} set_paused TRUE}
   )
   (unpause
      {beatmatch set_time_paused FALSE}
      {game set_paused FALSE}
      {{gamemode get game_panel} set_paused FALSE}
   )


   ;;
   ;; score
   ;;
   (set_score ($score)
      {if [has_score]
         {score.lbl set_localized {sprintf {localize drum_trainer_score} $score}}
         {if {! {== [current_score] $score}}
            {set [current_score] $score}
            {update_score.trig trigger}}
      }
   )
   (set_best ($score)
      {if {<= [current_best] $score}
         {best.lbl set_localized {sprintf {localize drum_trainer_best} $score}}}
      {if {< [current_best] $score}
         {set [current_best] $score}
         {update_best.trig trigger}}
   )
   (update_score
      {$this set_score {int {/ {* 100.0 [current_hits]} [current_notes]}}}
      {$this set_best  {int {/ {* 100.0 [current_hits]} [current_notes]}}}
   )
   (loop_score
      {set [current_hits] 0}
      {set [current_total] 0}
      {$this update_score}
   )
   (start_score
      {if [has_score]
         {set [current_notes] {* 4 {$this get_num_notes [current_beat]}}}
         {set [current_best] 0}
         {$this loop_score}
      }
   )


   ;;
   ;; midi playback
   ;;
   (drum_trainer_mute ($slot)
      {{elem [drum_faders] $slot} set_val kDbSilence}
   )
   (drum_trainer_unmute ($slot)
      {{elem [drum_faders] $slot} set_val 0.0}
   )
   (drum_trainer_play ($slot)
      {{elem {elem [drum_sfx] [current_drums]} $slot} play}
   )


   ;;
   ;; metronome
   ;;
   (play_metronome
      {metronome.cue play}
   )


   ;;
   ;; labels
   ;;
   (update_name_label
      {name.lbl set_localized {localize {$this get_beat_name [current_beat]}}}
   )
   (update_kit_label
      {kit.lbl set_localized {localize {$this get_current_kit_name}}}
   )
   (update_bpm_label
      {bpm.lbl set_localized {sprintf {localize drum_trainer_bpm} [current_bpm]}}
   )
   (update_all_labels
      {$this update_name_label}
      {$this update_kit_label}
      {$this update_bpm_label}
   )


   ;;
   ;; handlers
   ;;
   (any_gem
      {set [current_total] {+ [current_total] 1}}
      {if {< [current_notes] [current_total]}
         {$this loop_score}}
   )
   (hit
      {if [has_score]
         {set [current_hits] {+ [current_hits] 1}}
         {$this any_gem}
         {$this update_score}
      }
   )
   (miss
      {if [has_score]
         {$this any_gem}
      }
   )
   (pass
      {if [has_score]
         {$this any_gem}
      }
   )
   (button_down_msg ($button $player_num)
      {if {! {&& {== $player_num [player_num]}
                 {== {game debug_get_force_controller $player_num}
                     kControllerNone}}}
         {switch $button
            (kPad_DLeft
               {if [enable_button_left]
                  {button_left.trig trigger}
                  {script_task kTaskSeconds (delay .2) (script {$this dec_beat})}
               }
            )
            (kPad_DRight
               {if [enable_button_right]
                  {button_right.trig trigger}
                  {script_task kTaskSeconds (delay .2) (script {$this inc_beat})}
               }
            )
            (kPad_DUp
               {if [enable_button_up]
                  {button_up.trig trigger}
                  {script_task kTaskSeconds (delay .2) (script {$this inc_bpm})}
               }
            )
            (kPad_DDown
               {if [enable_button_down]
                  {button_down.trig trigger}
                  {script_task kTaskSeconds (delay .2) (script {$this dec_bpm})}
               }
            )
            (kPad_Select
               {if [enable_button_drums]
                  {button_drums.trig trigger}
                  {script_task kTaskSeconds (delay .2) (script {$this inc_drums})}
               }
            )
         }
      }
   )
   

   ;;
   ;; changing the bpm
   ;;
   (change_bpm ($amount)
      {set [current_bpm] {+ [current_bpm] $amount}}
      {if {> [current_bpm] [bpm_max]}
         {set [current_bpm] [bpm_max]}}
      {if {< [current_bpm] [bpm_min]}
         {set [current_bpm] [bpm_min]}}
      {$this set_horizon_bpm [current_bpm]}
      {$this update_bpm_label}
   )
   (inc_bpm
      {if {< [current_bpm] [bpm_max]}
         {$this change_bpm [bpm_interval_inc]}}
   )
   (dec_bpm
      {if {> [current_bpm] [bpm_min]}
         {$this change_bpm [bpm_interval_dec]}}
   )


   ;;
   ;; changing the beat
   ;;
   (actual_change_beat
      {set [change_beat_buffer] {- [change_beat_buffer] 1}}
      {if {&& {== [change_beat_buffer] 0}
              {! {== [current_running_beat] [current_beat]}}}
         {set [current_running_beat] [current_beat]}
         {if_else [restart_beat_on_change]
            {do
               {$this start_beat_no_jump [current_bpm] [current_beat]}
               {$this start_score}
            }
            {$this do_change_beat [current_beat]}
         }
      }
   )
   (change_beat ($amount)
      {set [current_beat] {mod {+ [current_beat] $amount} {$this get_num_beats}}}
      {if [show_tab_data]
         {$this populate_tab_data [current_beat] [fills_only_tab]}}
      {$this update_name_label}
      {set [change_beat_buffer] {+ [change_beat_buffer] 1}}
      {if_else [delay_change_beat]
         {script_task kTaskSeconds (delay 1.1) (script {$this actual_change_beat})}
         {$this actual_change_beat}}
   )
   (inc_beat
      {$this change_beat 1}
   )
   (dec_beat
      {$this change_beat -1}
   )


   ;;
   ;; changing the drumkits
   ;;
   (get_kit_name ($index)
      {elem {elem [drum_sfx] $index} 5}
   )
   (get_current_kit_name
      {$this get_kit_name [current_drums]}
   )
   (change_drums ($amount)
      {set [current_drums] {mod {+ [current_drums] $amount} {size [drum_sfx]}}}
      {$this update_kit_label}
   )
   (inc_drums
      {$this change_drums 1}
   )


   ;;
   ;; variables
   ;;
   (current_beat           -1)
   (current_running_beat   -1)
   (current_drums          -1)
   (current_bpm            -1)
   (current_notes          -1)
   (current_metronome      -1)
   (current_hits            0)
   (current_total           0)
   (current_score           0)
   (current_best            0)
   (change_beat_buffer      0)
)


;;;
;;; panels for the drum trainer main screen
;;;
#define DRUM_TRAINER_MAIN_SCREEN_PANELS
(
   game
   world_panel
   coop_track_panel
)


;;;
;;; base main screen for the drum trainer
;;;
#define DRUM_TRAINER_MAIN_SCREEN_BASE
(
   ;;
   ;; redirect this function to the panel
   ;;
   (drum_trainer_button_down_msg ($button $player_num)
      {{gamemode get game_panel} button_down_msg $button $player_num}
   )


   ;;
   ;; normal game screen handlers
   ;;
   GAME_SCREEN_HANDLERS
   
   (BUTTON_DOWN_MSG
      {do
         ($track_sym {{game get_player_config $player_num} get_track_sym})
         ($my_player {beatmatch player $player_num})

         {if 
            {&&
               {== $button kPad_Start} ;handle the start button here
               {!= none $track_sym}    ;disallow anyone who's not in the game
               {! {game is_game_over}} ;disallow pausing once the game is over
               {== {session state} kNetInGame}
               $my_player
               {$my_player can_pause}
            }
               {pause_panel set player_number $player_num}
               {drum_trainer_pause_panel set player_number $player_num}
               {band_ui_sink set_net_sync FALSE}
               {ui push_screen {gamemode get pause_screen}}
         }
      }
      {$this drum_trainer_button_down_msg $button $player_num}
      kDataUnhandled
   )
)
