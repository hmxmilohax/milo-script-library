;;;
;;; pause panel for a mic being disconnected for the tutorial
;;;
{new UIPanel tutorials_pause_mic_panel
   ;;
   ;; properties
   ;;
   (file "tutorial_pause_mic_og.milo")


   ;;
   ;; constructor
   ;;
   (enter
      {$this set_focus pause_resume.btn}
      {talk01.mnm set_frame 1}
      {$this enable mics_player_name01.lbl}
      {mics_player_name01.lbl set_localized {localize tutorial_pause_mic_name}}
      {$this on_mics_change}
   )


   ;;
   ;; poll to show mic volume
   ;;
#ifdef HX_XBOX
   (poll
      {talk01.mnm set_frame
         {if_else {tutorials_state_panel is_mic_talking} 1 0}}
   )
#endif


   ;;
   ;; on microphones changed
   ;;
   (on_mics_change
      {if_else {tutorials_state_panel is_mic_disconnected}
         {do
            {$this disable pause_resume.btn}
            {$this set_focus pause_quit.btn}
         }
         {do
            {$this enable pause_resume.btn}
            {$this set_focus pause_resume.btn}
         }
      }  
   )
}


;;;
;;; pause screen for a mic being disconnected for the tutorial
;;;
{new UIScreen tutorials_pause_mic_screen
   ;;
   ;; properties
   ;;
   (panels tutorials_pause_mic_panel helpbar)
   (focus  tutorials_pause_mic_panel)
   (helpbar ('' helpbar_select))
   (allow_back FALSE)
   (animate_transition FALSE)


   ;;
   ;; handler for a microphone change
   ;;
   (microphones_changed ($vocalists_mic_changed)
      {tutorials_pause_mic_panel on_mics_change}
   )


   ;;
   ;; pauses the game
   ;;
   (pre_enter
      {set [is_quitting] FALSE}
      {tutorials_state_panel pause}
   )
   (enter
      {set [is_quitting] FALSE}
      {set [is_done] FALSE}
   )


   ;;
   ;; destructor
   ;;
   (exit
      {if {! [is_quitting]}
         {tutorials_state_panel unpause}
      }
   )


   ;;
   ;; resumes the tutorial
   ;;
   (resume_tutorial
      {ui pop_screen}
   )


   ;;
   ;; quits the tutorial
   ;;
   (quit_tutorial
      {set [is_quitting] TRUE}
      {tutorials_state_panel reset_tutorial}
      {gamemode set main_screen main_screen}
      {ui goto_screen meta_loading_tutorial_main_screen};reset
   )


   ;;
   ;; handler for selecting a menu item
   ;;
   (SELECT_MSG
      {if_else {&& {== $player_num {{gamemode get main_panel} get_tutorial_player}}
                   {! [is_done]}}
         {do
            {set [is_done] TRUE}            
            {switch $component
               (pause_resume.btn
                  {script_task kTaskUISeconds (delay 0.8) (script {$this resume_tutorial})}
               )
               (pause_quit.btn
                  {script_task kTaskUISeconds (delay 0.8) (script {$this quit_tutorial})}
               )
            }
            kDataUnhandled
         }
         TRUE
      }
   )


   ;;
   ;; handler for pressing a button
   ;;
   (BUTTON_DOWN_MSG
      {if_else {&& {== $player_num {{gamemode get main_panel} get_tutorial_player}}
                   {! [is_done]}}
         {do
            kDataUnhandled
         }
         TRUE
      }
   )


   ;;
   ;; handler for releasing a button
   ;;
   (BUTTON_UP_MSG
      {if_else {&& {== $player_num {{gamemode get main_panel} get_tutorial_player}}
                   {! [is_done]}}
         {do
            kDataUnhandled
         }
         TRUE
      }
   )


   ;;
   ;; variables
   ;;
   (is_quitting FALSE)
   (is_done     FALSE)
}

; REA - add a new controller discon panel here
{new UIPanel tutorials_pause_controller_panel
   (file ../ui/pause_discon_og.milo)

   (enter
      {do
         {$this disable {$this find pause_resume.btn}}
         {$this on_joypad_change}
      }
   )

   QUIT_DIALOG_SET_UP_BUTTONS

   (BUTTON_DOWN_MSG
      {do
         {if   {&&   {! {game missing_controllers}}
                     {== $button kPad_Start}
               }
               {ui pop_screen}
         }
         kDataUnhandled
      }
   )

   (SELECT_MSG
      {switch $component
         (pause_resume.btn
            {ui pop_screen}
         )
         (pause_quit.btn
            {$this on_quit}
         )
      }
   )

   (JOYPAD_CONNECT_MSG
		{$this on_joypad_change}
   )
	
	(on_joypad_change
	   {if_else {game missing_controllers}
         {do
            {$this update_labels}
            {$this disable {$this find pause_resume.btn}}
         }
         ;else
         {do
            {$this set_focus {$this find pause_resume.btn}}
         }
      }
	)
	

   (update_labels
      {do
         ($missing_controllers {game missing_controllers})
         ($who "") ;who's controller(s) are we missing?
         ($i 0)
			($total 0)
         {foreach $j (1 2 4 8 16 32 64 128) ; REA - check up to player 8 for PS2
            {if {& $j $missing_controllers}
               ;TODO if the string isn't empty, then add an " And " in there.
               {set $who 
                  {if_else {== "" $who}
                     {set $who {{game get_player_config $i} get player_name}}
                     {sprintf {localize controller_who} $who 
                        {{game get_player_config $i} get player_name}
                     }
                  }
               }
					{++ $total}
            }
            {++ $i}
         }
			{if {== $total 1} ; REA add possessive for one player
				{set $who {sprintf {localize controller_possessive} $who}}
			}

			{{$this find pause_controller_title.lbl} set text_token no_controller}
         {{$this find pause_controller_msg.lbl} set_localized
            {sprintf {localize controller_loss_msg} $who}
         }
      }
   )
	
   (on_quit
      {ui goto_screen meta_loading_quit_early_screen}
   )
}


{new UIScreen tutorials_pause_controller_screen
   (panels tutorials_pause_controller_panel helpbar)
   (focus tutorials_pause_controller_panel)
   (helpbar ('' helpbar_continue))
}