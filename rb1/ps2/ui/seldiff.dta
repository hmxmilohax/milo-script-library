;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Coop (Quickplay/Tour) select difficulty screen
#define SELDIFF_PANEL_HANDLERS
(
   (unload
      ; clear is_ready for all players, in case we backed out
      {session set_all_local_ready_status FALSE}
   )
)
   
{new UIPanel seldiff_panel
		#ifdef HX_XBOX
			(file "seldiff.milo")
		#else
		 #ifdef HX_EE
			(file "seldiff_og.milo")
		 #else
			(file "seldiff_wii.milo")
		 #endif
		#endif
		
   SELDIFF_PANEL_HANDLERS
   LIMIT_TO_SESSION
   (enter
      {do ($perf {tour performer})
         {song.lbl set_localized
            {if_else $perf
               {tour event_display_name}
               {song_mgr song_name {game get_song}}
            }
         }
         {by_line.lbl set_localized
            {if_else $perf
               {tour event_description}
               {song_mgr by_line {game get_song}}
            }
         }
      }
   )
}

{new UIPanel seldiff_solo_panel
	#ifdef HX_XBOX
   		(file "seldiff_solo.milo")
   	#else
   	  #ifdef HX_EE
   		(file "seldiff_solo_og.milo")
   	  #else
   		(file "seldiff_solo_wii.milo")
   	  #endif
   	#endif
   
   SELDIFF_PANEL_HANDLERS
   LIMIT_TO_SESSION
   (enter
      {do ($perf {tour performer})
         {song.lbl set_localized
            {if_else $perf
               {tour event_display_name}
               {song_mgr song_name {game get_song}}
            }
         }
         {by_line.lbl set_localized
            {if_else $perf
               {tour event_description}
               {song_mgr by_line {game get_song}}
            }
         }
      }
   )
}

#define SELDIFF_SCREEN_PANELS
(
   (slots COOP_SLOTS_ORDER)
   (type
      (player_num {gamecfg get_player_num_from_slot_num [slot_num]})  ; required
      (slot_num 0)    ; required
      (slot none)     ; required
      (option '')     ; required
      (current_option ; required
         {cond
            ({! {$this is_active}}
               inactive
            )
            ({&& {$this is_guitar_slot} {! {$this is_track_set}}}
               part_select
            )
            ({&& {$this is_guitar_slot} {! {$this is_other_track_set}}}
               part_select_wait
            )
            ({! {{$this player_config} is_ready}}
               diff_select
            )
            ; default
            diff_selected
         }
      )

      (enter
         {if {$this is_active}
            {do
               ($pcfg {$this player_config})

               {if {&& 
                     {$pcfg is_local_player}
                     {$pcfg get_char}
                   }
                  ; then
                  {switch {{$pcfg get_char} get_instrument}
                     (drum
                        {$pcfg set_track_type kTrackDrum}
                     )
                     (vocals
                        {$pcfg set_track_type kTrackVocals}
                     )
                     ;; Make sure guitar/bass not set...
                     {$pcfg set_track_type kTrackNone}
                  }
               }
            }
         }
      )

      (update         ; required
         {$this set_showing {$this is_active}}
         {if {$this showing}
            {do
               ($pcfg  {$this player_config})
               ($ready {$pcfg is_ready})
               ($diff  {$pcfg get_difficulty_sym})
               ; BWT min difficulty, based on event
               ($min_diff
                  {if_else {tour performer}
                     {{tour event} get min_difficulty}
                     kDifficultyEasy
                  }
               )
               
               {instrument.lbl set_localized
                  {if_else {== {$pcfg get_track_type} kTrackNone}
                     {cnv_instrumenttoicon [slot]}
                     {{$pcfg get_char} track_icon {$pcfg get_track_sym}}
                  }
               }
#ifdef HX_XBOX
               {unless {gamemode is_solo}
                  {{seldiff_panel find {sprintf "remote%i.mnm" [slot_num]}}
                     set_frame 
                     {! {gamecfg is_player_local [player_num]}} ; 0 or 1
                  }
               }
#endif
               {player.lbl set_localized
                  {$pcfg intro_name}
               }

               {if_else
                  {&&
                     {$this is_guitar_slot}
                     {||
                        {! {$this is_track_set}}
                        {! {$this is_other_track_set}}
                     }
                  }
                  ; then
                  {do
                     {seldiff.grp set_showing FALSE}
                     {selpart.grp set_showing TRUE}
                  }
                  ; else
                  {do
                     {seldiff.grp set_showing TRUE}
                     {selpart.grp set_showing FALSE}
                  }
               }

               {if {seldiff.grp showing}
                  {$this iterate BandButton $b
                     {if_else {== {$b get text_token} $diff}
                        {do
                           {$this set_focus $b}
                           {$b set_showing TRUE}
                        }
                        {$b set_showing {! $ready}}
                     }
                  }
                  {ready.lbl set_showing $ready}
               }
               
               ; disable difficulties below min difficulty
               {do ($diff 0)
                  {foreach $diff_sym (DIFF_SYMBOLS)
                     {if {< $diff $min_diff}
                        {$this disable {sprint $diff_sym ".btn"}}
                     }
                     {++ $diff}
                  }
               }

               ; update part selection
               {if {selpart.grp showing}
                  {if_else {$this is_track_set}
                     {do ($track {$pcfg get_track_type})
                        {guitar.grp set_showing {== $track kTrackGuitar}}
                        {bass.grp set_showing {== $track kTrackBass}}

                        {if_else {! {$this is_other_track_set}}
                           {waiting_part.lbl set_showing TRUE}
                           ; else
                           {waiting_part.lbl set_showing FALSE}
                        }
                     }
                     ; else
                     {do
                        {guitar.grp set_showing TRUE}
                        {bass.grp set_showing TRUE}
                        {waiting_part.lbl set_showing FALSE}

                        ;; set focus if it isn't already set
                        {if
                           {&&
                              {!= {$this focus_name} guitar.btn}
                              {!= {$this focus_name} bass.btn}
                           }
                           {$this set_focus guitar.btn}
                        }
                     }
                  }
               }
            }
         }
      )
      (is_ready       ; required
         {||
            {! {game is_player_participating [player_num]}}
            {{$this player_config} is_ready}
         }
      )
      (is_active
         {&&
            {!= [player_num] -1}
            {gamecfg is_player_participating [player_num]}
         }
      )
      (is_guitar_slot
         {== [slot] guitar}
      )
      (is_track_set
         {!=
            {{$this player_config} get_track_type}
            kTrackNone
         }
      )
      (player_config
         {gamecfg get_player_config [player_num]}
      )
      (is_other_track_set
         {do ($ret TRUE)
            {gamecfg foreach_player_config $pcfg
               {if
                  {&&
                     {$pcfg is_participating}
                     {!= {$pcfg get player_num} [player_num]}
                     ;{$pcfg get_char}
                     {== {{$pcfg get_char} get_instrument} guitar}
                     {== {$pcfg get_track_type} kTrackNone}
                  }
                  ; then
                  {set $ret FALSE}
               }
            }
            $ret
         }
      )

      (send_focus_msg TRUE)
   )

   (options
      (inactive
         (BUTTON_DOWN_MSG
            TRUE
         )
      )
      (part_select
         (FOCUS_MSG
            {if [send_focus_msg]
               {band_ui_sink send_net_focus [player_num] $new_focus}
            }
         )
         (net_focus ($player_num $new_focus_name)
            {set [send_focus_msg] FALSE}
            {$this set_focus {$this find $new_focus_name}}
            {set [send_focus_msg] TRUE}
         )

         (SELECT_MSG
            {switch $component
               (guitar.btn
                  {{$this player_config} set_track_type kTrackGuitar}
               )
               (bass.btn
                  {{$this player_config} set_track_type kTrackBass}
               )
            }
            {{ui current_screen} verify_player_change [player_num]}
            {{ui current_screen} export_all update}
            kDataUnhandled
         )
      )
      (part_select_wait
         (BUTTON_DOWN_MSG
            {switch $button
               ((kPad_X kPad_Tri)
                  {synth play button_back}
               )
            }
            TRUE
         )
      )
      (diff_select
         (FOCUS_MSG
            {if {gamecfg is_player_local [player_num]}
               {{$this player_config} set_difficulty
                  {switch {$new_focus name}
                     (easy.btn easy)
                     (medium.btn medium)
                     (hard.btn hard)
                     (expert.btn expert)
                     ; default (should never get here)
                     none
                  }
               }
            }
            kDataUnhandled  ; type wants it
         )
         (SELECT_MSG
            {if_else {gamemode get is_practice}
            #ifdef HX_XBOX
               {ui goto_screen practice_preloading_screen}
            #else
               {goto_practice_selection_screen}
            #endif
               ;else not practice mode
               {{$this player_config} set_ready TRUE}
            }
            {{ui current_screen} update $this}
            kDataUnhandled  ; screen wants it
         )
			(BUTTON_DOWN_MSG
            {if_else {&& {$this is_guitar_slot} {== $button kPad_Tri}}
				   {do ; return to part select
				        {synth play button_back}   ;MTC
						{{$this player_config} set_track_type kTrackNone}
						{{ui current_screen} verify_player_change [player_num]}
	               {{ui current_screen} export_all update}
						TRUE
					}
					;else
					kDataUnhandled 
				}
			)
      )
      (diff_selected
         (BUTTON_DOWN_MSG
            {if {== $button kPad_Tri}
               {synth play button_back}
               {{$this player_config} set_ready FALSE}
               {{ui current_screen} update $this}
            }
            TRUE
         )
      )
   )
)

#define SELDIFF_SCREEN_HANDLERS
(
   ;; Currently this just verifies that duplicate track types have not
   ;;   been selected (and if they have, it fixes them).
   (verify_player_change ($player_num)
      {do
         ($g0_pcfg 0)
         ($g1_pcfg 0)

         {gamecfg foreach_player_config $pcfg
            {if
               {&&
                  {$pcfg is_participating}
                  {$pcfg get_char}
                  {== {{$pcfg get_char} get_instrument} guitar}
               }
               ; then
               ; if we already filled in g0, then fill in g1
               {if_else $g0_pcfg
                  {set $g1_pcfg $pcfg}
                  ; else fill in g0
                  {set $g0_pcfg $pcfg}
               }
            }
         }
         
         {if
            {&&
               $g0_pcfg
               $g1_pcfg
               {||
                  {== {$g0_pcfg get player_num} $player_num}
                  {== {$g1_pcfg get player_num} $player_num}
               }

               ; if the guitar track types are set identically...
               {!= {$g0_pcfg get_track_type} kTrackNone}
               {!= {$g1_pcfg get_track_type} kTrackNone}
               {== {$g0_pcfg get_track_type} {$g1_pcfg get_track_type}}
               
               ; The machine that has g0_pcfg as a local player gets to randomly pick the instruments
               {$g0_pcfg is_local_player}
            }
            ; then

            ;; randomly pick
            {do
               ($g0_track_type kTrackNone)
               ($g1_track_type kTrackNone)
               
               {if_else {random 0 1}
                  {do
                     {set $g0_track_type kTrackBass}
                     {set $g1_track_type kTrackGuitar}
                  }
                  ; else
                  {do
                     {set $g0_track_type kTrackGuitar}
                     {set $g1_track_type kTrackBass}
                  }
               }

               {if_else {$g0_pcfg is_local_player}
                  {$g0_pcfg set_track_type $g0_track_type}
                  ; else
                  {session send_to_player {$g0_pcfg get player_num}
                     {`
                        (ui reassign_player_track_type_msg
                           {, {$g0_pcfg get player_num}}
                           {, $g0_track_type}
                        )
                     }
                     kNetReliable
                  }
               }

               {if_else {$g1_pcfg is_local_player}
                  {$g1_pcfg set_track_type $g1_track_type}
                  ; else
                  {session send_to_player {$g1_pcfg get player_num}
                     {`
                        (ui reassign_player_track_type_msg
                           {, {$g1_pcfg get player_num}}
                           {, $g1_track_type}
                        )
                     }
                     kNetReliable
                  }
               }
            }
         }
      }
   )

   (reassign_player_track_type_msg ($player_num $track_type)
      {do
         ($pcfg {gamecfg get_player_config $player_num})
         
         {if {$pcfg is_local_player}
            {$pcfg set_track_type $track_type}
         }
      }
   )

   (REMOTE_PLAYER_CHANGED_MSG
      ;; check for duplicate guitar track types
      {$this verify_player_change $player_num}

      {$this export_all update}
   )
)

{new MultiFocusScreen qp_seldiff_screen
   (panels meta postsong_sfx_panel movie_panel seldiff_panel helpbar)
   (helpbar (helpbar_back helpbar_select))
   (player_panels
      (panel seldiff_panel)
      SELDIFF_SCREEN_PANELS
   )
   SELDIFF_SCREEN_HANDLERS

   ; only the player local to leader can go back
   ; remote players should get the remote exit prompt
   (BUTTON_DOWN_MSG
      {if_else {&& {game is_player_participating $player_num}
                   {== $button kPad_Tri}}
         {if_else {is_leader_local}
            {ui goto_screen qp_selsong_screen FALSE TRUE}
            {band_ui_sink show_remote_exit}
         }
         ; else
         kDataUnhandled
      }
   )
   
   (start_loading_msg
      {$this export_all update} ; so we update display
      {gamecfg set_active_roster TRUE}
      {ui goto_screen loading_screen}
   )
}

{new MultiFocusScreen qp_seldiff_solo_screen
   (panels meta postsong_sfx_panel movie_panel seldiff_solo_panel helpbar)
   (helpbar (helpbar_back helpbar_select))
   (player_panels
      (panel seldiff_solo_panel)
      SELDIFF_SCREEN_PANELS
   )
   SELDIFF_SCREEN_HANDLERS

   (BUTTON_DOWN_MSG
      {if_else {&& {game is_player_participating $player_num}
                   {== $button kPad_Tri}}
         ; then
         {if_else {gamemode get is_practice}
            {ui goto_screen practice_selsong_screen FALSE TRUE} ;force=FALSE, back=TRUE
            {ui goto_screen qp_selsong_screen FALSE TRUE}
         }
         ; else
         kDataUnhandled
      }
   )
   
   (start_loading_msg
      {gamecfg set_active_roster TRUE}
      {ui goto_screen loading_screen}
   )

   ;set some stuff in case we're in practice mode
   (enter
      {do
         ($player_num {gamecfg get leader_num})
         ($pcfg {gamecfg get_player_config $player_num})
         {switch {$pcfg get_controller_type}
            (kControllerVocals
               {practice_panel set_in_vocal_mode TRUE}
            )
            (kControllerDrum
               {practice_panel set_in_vocal_mode FALSE}
            )
            (kControllerGuitar
               {practice_panel set_in_vocal_mode FALSE}
            )
         }
      }
      kDataUnhandled
   )
}




{new MultiFocusScreen tour_band_seldiff_screen
   (panels meta movie_panel seldiff_panel helpbar)
   (helpbar (helpbar_back helpbar_select))
   (player_panels
      (panel seldiff_panel)
      SELDIFF_SCREEN_PANELS
   )
   SELDIFF_SCREEN_HANDLERS
   
   ; only the local to leader players can go back
   (BUTTON_DOWN_MSG
      {if_else {&& {game is_player_participating $player_num}
                   {== $button kPad_Tri}}
         {if_else {is_leader_local}
            {ui goto_screen tour_band_event_screen FALSE TRUE}
            {band_ui_sink show_remote_exit}
         }
         {do
           kDataUnhandled
         }
      }
   )   
   
   (start_loading_msg
      {$this export_all update} ; so we update display
      {gamecfg set_active_roster TRUE}
      {ui goto_screen
         ;{if_else {{tour performer} new_moment}
           ;tour_active_moment_screen
           loading_screen
         ;}
      }      
   )
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HTH Unsplit (score duel) select difficulty screen
{new UIPanel qp_hth_seldiff_panel
	
	#ifdef HX_XBOX
		(file "qp_hth_seldiff.milo")
   #else
		(file "qp_hth_seldiff_og.milo")
	 #endif
   
   LIMIT_TO_LEADER_SESSION

   (enter
      ; these labels aren't in our proxy
      {{$this find_self song.lbl} set_localized
         {song_mgr song_name {game get_song}}
      }
      {{$this find_self by_line.lbl} set_localized
         {song_mgr by_line {game get_song}}
      }
      
      ; just hide these labels, I guess?
      {player.lbl set_showing FALSE}
      {waiting_part.lbl set_showing FALSE}
      {ready.lbl set_showing FALSE}
      
      ; set focus before sending remote player messages
      {do ($leader {gamecfg get_player_config {game get leader_num}})
         {$this set_focus
            {if_else {== {$leader get_track_type} kTrackNone}
               guitar.btn
               {sprint {$leader get_difficulty_sym} ".btn"}
            }
         }
      }
            
      {session add_sink $this}
      {$this update}
   )
   
   (exit
      {session remove_sink $this}   
   )
   
   (REMOTE_PLAYER_CHANGED_MSG
      {$this update}   
   )
   
   (update
      {do ($leader {gamecfg get_player_config {game get leader_num}})
          ($has_part {!= {$leader get_track_type} kTrackNone})
         {selpart.grp set_showing {! $has_part}}
         {seldiff.grp set_showing $has_part}
         
         {if $has_part
            {instrument.lbl set_localized 
               {cnv_instrumenttoicon 
                  {$leader get_track_sym}
               }
            }
         }
      }
   )
   
   (BUTTON_DOWN_MSG
      {do ($leader {gamecfg get_player_config {game get leader_num}})
         {if_else {&& {== $button kPad_Tri} 
                      {!= {$leader get_track_type} kTrackNone}
                      {gamemode get allow_bass}
                      {== {{$leader get_char} get_instrument} guitar}
                  }
            {do
               {session send_to_all (synth play button_back) kNetReliable}
               {synth play button_back}
               ; set focus before reverting track state
               {$this set_focus {sprint {$leader get_track_sym} ".btn"}}
               {$this update_track none}
               {$this update}
            }
            kDataUnhandled
         }
      }
   )
   
   (update_track ($track)
      {game foreach_player_config $pcfg
         {if {$pcfg is_participating}
            {if_else {$pcfg is_local_player}
               {$pcfg set_track_type $track} 
               {do ($player_num {$pcfg get player_num})
                  {session send_to_player $player_num
                     {` ({game get_player_config {, $player_num}}
                        set_track_type {, $track })
                     }
                     kNetReliable
                  }
               }
            }
         }
      }  
   )

   (SELECT_MSG
      {do ($leader {gamecfg get_player_config {game get leader_num}})
         {if_else {== {$leader get_track_type} kTrackNone}
            {do ($track {basename {$component name}})
               ; focus on difficulty
               {$this set_focus {sprint {$leader get_difficulty_sym} ".btn"}}
               ; update everyone's track
               {$this update_track $track}
               ; update local display state
               {$this update}
            }
            {do ($diff {basename {$component name}})
               {game foreach_player_config $pcfg
                  {if {$pcfg is_participating}
                     {if_else {$pcfg is_local_player}
                        {$pcfg set_difficulty $diff} 
                        ; else, HACK to work in net game
                        {do ($player_num {$pcfg get player_num})
                           {session send_to_player $player_num
                              {` ({game get_player_config {, $player_num}}
                                 set_difficulty {, $diff })
                              }
                              kNetReliable
                           }
                        }
                     }
                  }
               }
               {ui goto_screen loading_screen}
            }
         }
      }
   )
}

{new UIScreen qp_hth_seldiff_screen
   (panels meta postsong_sfx_panel movie_panel qp_hth_seldiff_panel helpbar)
   (focus qp_hth_seldiff_panel)
   (helpbar 
      {if_else {is_leader_local}
         (helpbar_back helpbar_select)
         (helpbar_back)
      }
   )
   HELPBAR_WAITING_FOR_LEADER
   (back qp_selsong_screen)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; HTH Split (tug of war) select difficulty screen
{new UIPanel hth_split_seldiff_panel
#ifndef HX_XBOX
   (file "seldiff_hth_og.milo")
#else
   (file "seldiff_hth.milo")
#endif
   ;LIMIT_TO_LEADER_SESSION - allow non-leader to select per spec

   (enter
      {song.lbl set_localized
         {song_mgr song_name {game get_song}}
      }
      {by_line.lbl set_localized
         {song_mgr by_line {game get_song}}
      }
   )
}

{new MultiFocusScreen hth_split_seldiff_screen
   (panels meta postsong_sfx_panel movie_panel hth_split_seldiff_panel helpbar)
   (helpbar (helpbar_back helpbar_select))
   (back
      {if_else {gamecfg has_participating_guitar_controller}
         qp_hth_seltrack_screen
         qp_selsong_screen
      }
   )

   (player_panels
      (panel hth_split_seldiff_panel)
      (slots none none)
      (type
         (player_num {gamecfg get_player_num_from_slot_num [slot_num]})  ; required
         (slot_num 0)    ; required
         (slot none)     ; required
         (option '')     ; required
         (current_option ; required
            {cond
               ({! {$this is_active}} inactive)
               ({{$this player_config} is_ready} selected)
               select
            }
         )

         (update         ; required
            {$this set_showing {$this is_active}}
            {if {$this showing}
               {do ($pcfg {$this player_config})
                  {instrument.lbl set_localized
                     {{$pcfg get_char} track_icon {$pcfg get_track_sym}}
                  }
                  ; fade out remote players
                  {{hth_split_seldiff_panel find {sprintf "remote%i.mnm" [slot_num]}} 
                     set_frame 
                     {! {gamecfg is_player_local [player_num]}} ; 0 or 1
                  }
                  {player.lbl set_localized {$pcfg intro_name}}
                  {do
                     ($ready {$pcfg is_ready})
                     ($diff  {$pcfg get_difficulty_sym})

                     {$this iterate BandButton $b
                        {if_else {== {$b name} {sprintf "%s.btn" $diff}}
                           {do
                              {$this set_focus $b}
                              {$b set_showing TRUE}
                           }
                           {$b set_showing {! $ready}}
                        }
                     }
                     {ready.lbl set_showing $ready}
                  }
               }
            }
         )
         (is_ready ; required
            {||
               {! {game is_player_participating [player_num]}}
               {{$this player_config} is_ready}
            }
         )
         (is_active
            {&&
               {!= [player_num] -1}
               {gamecfg is_player_participating [player_num]}
               ;; This next check is for when the network hasn't propagated
               ;;   the track data yet...
               {!= {{$this player_config} get_track_type} kTrackNone}
            }
         )
         (player_config
            {gamecfg get_player_config [player_num]}
         )
      )
      (options
         (select
            (FOCUS_MSG
               {if {gamecfg is_player_local [player_num]}
                  {{$this player_config} set_difficulty
                     {switch {$new_focus name}
                        (easy.btn easy)
                        (medium.btn medium)
                        (hard.btn hard)
                        (expert.btn expert)
                        ; default (should never get here)
                        none
                     }
                  }
               }
               kDataUnhandled  ; type wants it
            )
            (SELECT_MSG
               {{$this player_config} set_ready TRUE}
               {{ui current_screen} update $this}
               kDataUnhandled  ; screen wants it
            )
         )
         (selected
            (BUTTON_DOWN_MSG
               {if {== $button kPad_Tri}
                  {{game get_player_config [player_num]} set_ready FALSE}
                  {{ui current_screen} update $this}
               }
               TRUE
            )
         )
         (inactive
            (BUTTON_DOWN_MSG
               TRUE
            )
         )
      )
   )
   
   (start_loading_msg
      {$this export_all update} ; so we update display
      {gamecfg set_active_roster TRUE}
      {ui goto_screen loading_screen}
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HTH Ranked select difficulty screen
{new UIPanel qp_hth_seldiff_ranked_panel
#ifdef HX_XBOX
   (file "qp_hth_seldiff.milo")
#else
   (file "qp_hth_seldiff_og.milo")
#endif
   (player_num {local_to_leader_player_num})
   (focus easy.btn)
   (reset_focus TRUE)

   (enter
      ;; TODO: remove these ?
      {track.lbl set_showing FALSE}
      {leader.lbl set_showing FALSE}
   )

   ; TEMP, until leader UI control is worked out better
   (BUTTON_DOWN_MSG
      {if_else {== $button kPad_Tri}
         {ui goto_screen 
#ifdef HX_XBOX
            {if_else {gamemode get separate_parts}
               main_hth_split_screen
               main_hth_pro_screen
            }
#else
			main_multimode_screen ;dont go back to the mp type select - REA
#endif
            FALSE
            TRUE
         }
         ; else
         kDataUnhandled
      }
   )
   
   (difficulty none)
   
   (SELECT_MSG
      {$this set difficulty {basename {$component name}}}
      {ui goto_screen {gamemode get matchmaking_screen}}
   )
}

{new UIScreen qp_hth_seldiff_ranked_screen
   (panels meta movie_panel qp_hth_seldiff_ranked_panel helpbar)
   (focus qp_hth_seldiff_ranked_panel)
   (helpbar (helpbar_back helpbar_select))
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; HTH Ranked faux select difficulty/song (pre-loading gate)
{new UIPanel qp_hth_ranked_preload_panel
   (player_num {local_to_leader_player_num})

   (enter
      {session add_sink $this}

      ;; the leader's machine picks the song & venue

      {if {== [player_num] -1}
         {do
            ($random_song {song_provider get_random_song})
            ($random_venue {random_elem {gamemode get venues}})

            ; HACK don't pick the blank one
            {while {== $random_venue blank_01} 
               {set $random_venue {random_elem {gamemode get venues}}}
            }

            {gamecfg set_song $random_song}
            {gamecfg set_venue $random_venue}
         }
      }

      {game foreach_player_config $pcfg
         {if
            {&&
               {$pcfg is_participating}
               {$pcfg is_local_player}
            }

            {$pcfg set_difficulty {main_hth_seldiff_panel get difficulty}}

            ; and now we're ready to go
            {$pcfg set_ready TRUE}
         }
      }
   )

   (exit
      {session remove_sink $this}
   )

   (start_loading_msg
      ; only move on if we still have two players, the BandUISink with shuffle us out otherwise
      {if {== {session num_players} 2}
         {gamecfg set_active_roster TRUE}
         {ui goto_screen loading_screen}
      }
   )
}

{new UIScreen qp_hth_ranked_preload_screen
   (panels meta movie_panel qp_hth_ranked_preload_panel)
   (focus qp_hth_ranked_preload_panel)
}
