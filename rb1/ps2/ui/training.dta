;;;
;;; evaluates to TRUE if the player is on the given instrument
;;;
{func player_on_instrument ($player_num $controller_type)
   {==
      {gamecfg get_controller_type_from_controller $player_num}
      $controller_type
   }
}

;;;
;;; main training menu panel
;;; - Tutorials
;;; - Practice Mode
;;; - Drum Freestyle
;;;
{new SessionPanel training_menu_panel
	#ifdef HX_XBOX
   		(file "training.milo")
   	#else
   		(file "training_og.milo")
   	#endif
   (mode_focus tutorials.btn)
   
   (load
      ; set focus to ensure it's correct (might enter from different places)
      {main_panel set mode_focus tutorial.btn}
   )
   
   (enter
      {session clear}
	  {game set leader_num -1}
      {$this update_available_inst}
      {$this set_focus [mode_focus]}
   )

   (SELECT_MSG
			
			{helpbar set_limit_to_player_num $player_num}
      {switch $component
         (tutorials.btn 
            {if_else {&&
                        {player_on_instrument $player_num kControllerVocals}
                        {gamecfg is_missing_mic $player_num FALSE}
                     }
               {do
                  {vocalist_must_have_mic_screen set message tutorial_vocalist_needs_mic}
                  {ui push_screen vocalist_must_have_mic_screen}
               }
               {do
					{game set leader_num $player_num}
                  {set [mode_focus] tutorials.btn}
                  {do ($controller_type kControllerNone)
                     {if {player_on_instrument $player_num kControllerDrum}
                        {set $controller_type kControllerDrum}}
                     {if {player_on_instrument $player_num kControllerGuitar}
                        {set $controller_type kControllerGuitar}}
                     {if {player_on_instrument $player_num kControllerVocals}
                        {set $controller_type kControllerVocals}}
                     {switch $controller_type
                        (kControllerDrum
						 {game set leader_num $player_num}
                           {band_ui_sink set post_matchmaking TRUE} ; REA - set monitoring here to catch transition bugs
                           {gamemode set_mode tutorial_drums $player_num}
                           {{gamemode get main_panel} set_tutorial_player $player_num}
						   {game set_player_slot_num $player_num kGameCoopSlotDrum}
                           {$this wait_for_session_ready}
                           {session_mgr add_local_player $player_num {gamecfg get_controller_type_from_controller $player_num}}
                        )
                        (kControllerGuitar
						 {game set leader_num $player_num} 
                           {band_ui_sink set post_matchmaking TRUE} ; REA - set monitoring here to catch transition bugs
                           {gamemode set_mode tutorial_guitar $player_num}
                           {{gamemode get main_panel} set_tutorial_player $player_num}
                           {game set_player_slot_num $player_num kGameCoopSlotGuitar0}
                           {$this wait_for_session_ready}
                           {session_mgr add_local_player $player_num {gamecfg get_controller_type_from_controller $player_num}}
                        )
                        (kControllerVocals
						 {game set leader_num $player_num} 
                           {band_ui_sink set post_matchmaking TRUE} ; REA - set monitoring here to catch transition bugs
                           {gamemode set_mode tutorial_vocals $player_num}
                           {{gamemode get main_panel} set_tutorial_player $player_num}
                           {game set_player_slot_num $player_num kGameCoopSlotVocals}
                           {$this wait_for_session_ready}
                           {session_mgr add_local_player $player_num {gamecfg get_controller_type_from_controller $player_num}}
                        )
                        (TRUE
                           {notify "player selected a tutorial with an unknown controller type!"}
                        )
                     }
                  }
               }
            }
         )
         (practice.btn
#ifndef HX_XBOX	;HWR - REA's code pre-9/8 merge
				; REA - added mic check
            {if_else {&& 
                        {player_on_instrument $player_num kControllerVocals}
                        {gamecfg is_missing_mic $player_num FALSE}
                     }
               {do ; player is missing a mic
                  {vocalist_must_have_mic_screen set message solo_vocalist_needs_mic}
                  {ui push_screen vocalist_must_have_mic_screen}
               }
					;else
					{do
						{game set leader_num $player_num}
						{if {!= {gamecfg get_controller_type_from_controller $player_num} kControllerNone}
							{game set leader_num $player_num} ; REA - Set a leader
		               {gamemode set_mode practice $player_num}
							{$this wait_for_session_ready}
			            {session_mgr add_local_player $player_num
			               {gamecfg get_controller_type_from_controller $player_num}
			            }
							{band_ui_sink set post_matchmaking TRUE} ; REA - set monitoring here to catch transition bugs
		               {set [mode_focus] practice.btn}
					      {gamecfg set practice_speed 0}
						}
					}
			   }
#else ;HWR - Hx code after 9/8 merge
            {if_else {&& 
                        {player_on_instrument $player_num kControllerVocals}
                        {gamecfg is_missing_mic $player_num FALSE}
                     }
               {do ; player is missing a mic
                  {vocalist_must_have_mic_screen set message solo_vocalist_needs_mic}
                  {ui push_screen vocalist_must_have_mic_screen}
               }
               {do ; valid player controller
                  {set [mode_focus] practice.btn}
                  {$this wait_for_session_ready}
                  {gamemode set_mode practice}
                  {session_mgr add_local_player $player_num
                     {gamecfg get_controller_type_from_controller $player_num}
                  }
               }
            }
#endif
         )
         (drum_freestyle.btn
            {set [mode_focus] drum_freestyle.btn}
            {if_else {player_on_instrument $player_num kControllerDrum}
               {ui goto_screen drum_trainer_menu_screen}
               {notify "player selected drum trainer while not on drums!"}
            }
         )
      }
   )

   (update_available_inst
      ; Don't do anything while drum freestyle is disabled
      ;{if_else {gamecfg is_instrument_connected drum}
      ;   {if_else {== [mode_focus] drum_freestyle.btn}
      ;      {drum_freestyle.btn set_state kFocused}
      ;      {drum_freestyle.btn set_state kNormal}
      ;   }
      ;   {drum_freestyle.btn set_state kDisabled}
      ;}
   )

   (JOYPAD_CONNECT_MSG
      {$this update_available_inst}
   )

   (session_ready
      {gamecfg auto_assign_missing_slots}
      {game foreach_player_config $pcfg
         {set_char_from_controller {$pcfg get player_num}}}
      {ui goto_screen {gamemode get first_screen}}
   )
}


;;;
;;; main training menu screen
;;;
{new UIScreen training_menu_screen
   (panels meta movie_panel main_lower3rd_panel main_panel training_menu_panel fx)
  
   (focus  training_menu_panel)
   (back   main_screen)
   (enter
		{helpbar set_limit_to_player_num -1}
   )
   #ifndef HX_XBOX
   (TRANSITION_COMPLETE_MSG
      {main_panel attempt_to_autoload}
	  kDataUnhandled
   )
   #else
		MAIN_SCREEN_TRANSITION_HANDLER
   #endif
}


;;;
;;; include the training modes
;;;
#include ../tutorial/tutorial.dta
#include ../drum_trainer/drum_trainer.dta
#include practice.dta
