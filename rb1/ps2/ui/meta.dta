
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Help Bar 

#define connected_controller_types (())
#define kHelpbarMaxButtons (4)


#define HELPBAR_HANDLERS
(
#ifdef HX_XBOX
   (file helpbar.milo)
#else
   (file helpbar_og.milo)
#endif
   (icons 
      (
         (red1.lbl green1.lbl yellow1.lbl blue1.lbl)
         (red2.lbl green2.lbl yellow2.lbl blue2.lbl)
         (red3.lbl green3.lbl yellow3.lbl blue3.lbl)
      )
   )
   (actions (red_action.lbl green_action.lbl yellow_action.lbl blue_action.lbl))
   (config ())
	(old_config ())
   (null_config ())
   (buttons (Y A R S))
   (frets (r g y S))
   (pads ('2' '1' F S))
   ; for when we want to limit the icons to one player's controller
   ; (e.g. the rock shop) -1 means don't limit
   (limit_to_player_num -1)

   (enter  
      {$this set_mode_left}
      ;;{$this reset_icons}
   )
   (hidden FALSE)
   (hide_helpbar
		{set [old_config] [config]}
		{set [config] [null_config]}
		{$this refresh_display}
      {$this reset_icons}
		{set [hidden] TRUE}
   )
   (unhide_helpbar
		
		{if {&& {== [hidden] TRUE} {!= {size [old_config]} 0}}
			{set [config] [old_config]}
			{set [old_config] ()}
		}
		{set [old_config] ()}
	    {set [hidden] FALSE}
	   	{$this reset_icons}
		{$this refresh_display}
   )
   (reset_icons
   	;set all icons off and labels to nothing
   	{foreach_int $i 0 {size [actions]}
   		{{elem [actions] $i} set text_token ''}
   		{{elem [actions] $i} set showing FALSE}
   		{foreach $icon_array [icons]
   			{{elem $icon_array $i} set showing FALSE}
   		}
   	}
   )

   (poll
		{all.grp set showing {!{ui in_transition}}}
		{if {&& {!= $this helpbar_dialog} {exists helpbar_dialog}}
			{helpbar_dialog poll}
		}
   )

   (set_mode_right
      {red_action.lbl set alignment kMiddleRight}
      {if_else {== {rnd aspect} kWidescreenAspect}
         {$this set_frame 3}
         {$this set_frame 2}
      }
   )
   (set_mode_left
      {red_action.lbl set alignment kMiddleLeft}
      {if_else {== {rnd aspect} kWidescreenAspect}
         {$this set_frame 1}
         {$this set_frame 0}
      }
   )

   (JOYPAD_CONNECT_MSG
		{$this reset_icons}
		{$this refresh_display}
		{if {&& {!= $this helpbar_dialog} {exists helpbar_dialog}}
			{helpbar_dialog reset_icons}
			{helpbar_dialog refresh_display}
		}
		
   )
   
    (use_all_connected FALSE)
    (set_use_all_controllers ($set)
		{set [use_all_connected]  $set}
		{$this reset_icons}
		{$this refresh_display}
	)
    
	(update_controllers
				{$this JOYPAD_CONNECT_MSG 0}
	)

   (update ($new_screen)   
      ; Don't clear the previous helpbar. Every screen with a helpbar is
      ; responsibile for having a (helpbar ()) property, or setting it
      ; explicitly by using {helpbar set_config ()}
      ;{set [config] [null_config]} 

      {if $new_screen
         ; set up config info
		 {if {== [hidden] TRUE}
			{$this unhide_helpbar}
		 }
		 {set [hidden] FALSE}
		 {set [old_config] ()}
		 {$this reset_icons}
         {if {$new_screen has (helpbar)}
            {$this reset_icons}
            {set [config] {$new_screen get helpbar}}
            {$this refresh_display}
         }
         
         {$this set_waiting 
            {if_else {$new_screen has (helpbar_waiting)} 
               {$new_screen get helpbar_waiting}
               FALSE
            }
         }
      }
   )

   (array_compare ($array1 $array2)
      {do
         ($equal {== {size $array1} {size $array2}})

         {if $equal ; if still equal, the sizes are the same
            {foreach_int $i 0 {size $array1}
               {if $equal ; if equal is still true then everything that came before is equal
                  {set $equal {== {elem $array1 $i} {elem $array2 $i}}}
               }
            }
         }
         $equal
      }
   )
            

   (set_config ($new_config)
      {if {! {$this array_compare [config] $new_config}}
			{$this reset_icons}
		}
		{set [config] $new_config}
		{$this refresh_display}

   )
   
   (set_limit_to_player_num ($num)
		{$this reset_icons}
      {set [limit_to_player_num] $num}
      {$this refresh_display}  
   )

#ifdef HX_XBOX
   (refresh_display
	
      ;set all icons off and labels to nothing
      {foreach_int $i 0 {size [actions]}
         {{elem [actions] $i} set text_token ''}
         {{elem [actions] $i} set showing FALSE}
         {foreach $icon_array [icons]
            {{elem $icon_array $i} set showing FALSE}
         }
      }
	  ; figure out what types of controllers are attached
      {resize connected_controller_types 0}
      {if_else {== [limit_to_player_num] -1}
         ; show all icons, unless we're in a session, then only show
         ; participating controllers
         {do ($state 
               {if_else {session num_players} 
                  kGameControllerParticipating
                  kGameControllerAll
               }
             )
			 
            {if {gamecfg is_instrument_connected guitar $state}
               {push_back connected_controller_types [frets]}
            }
            {if {gamecfg is_instrument_connected vocals $state}
               {push_back connected_controller_types [buttons]}
            }
            {if {gamecfg is_instrument_connected drum $state}
               {push_back connected_controller_types [pads]}
            }
			
			#ifndef HX_XBOX ;HOJ for those cases that controllers ar not detected (but a leadrer is present)
				{if {&& {== {size connected_controller_types} 0} {!= {gamecfg get leader_num} -1}}
					{switch {gamecfg get_instrument_from_controller {gamecfg get leader_num}}
						(guitar 
						   {push_back connected_controller_types [frets]}
						)
						(vocals
						   {push_back connected_controller_types [buttons]}
						)
						(drum
						   {push_back connected_controller_types [pads]}
						)
					 }
				}
			#endif
	     }
         ;else
         {switch {gamecfg get_instrument_from_controller 
                    [limit_to_player_num]
                 }
            (guitar 
               {push_back connected_controller_types [frets]}
            )
            (vocals
               {push_back connected_controller_types [buttons]}
            )
            (drum
               {push_back connected_controller_types [pads]}
            )
         }
      }
      ; show help icons/text
      {if [config]
         {foreach_int $i 0 {size [config]}
            ; PlatformMgr may want us to swap icons for buttons 0 and 1
            {if_else {&& {< $i 2}
                         {platform_mgr is_enter_cancel_swapped}
                     }
               {set $x {- 1 $i}}
               ; else
               {set $x $i}
            }
            {if {&&
                  {!= '' {elem [config] $i}}
                  {!= 0 {size connected_controller_types}}
                }
               {{elem [actions] $i} set text_token {elem [config] $i}}
               {{elem [actions] $i} set showing TRUE}
               {foreach_int $j 0 {size connected_controller_types}
                  {{elem {elem [icons] $j} $i} set text_token 
                        {elem {elem connected_controller_types $j} $x}
                  }
                  {{elem {elem [icons] $j} $i} set showing TRUE}
               }
            }
         }
      } 
	
   )
   #else
   
(refresh_display
 {if {== [hidden] FALSE}
	{if_else {== {rnd aspect} kWidescreenAspect}
		{do
			{widescreen_left.tnm set_frame 1}
			{widescreen_right.tnm set_frame 1}
		}
		{do
			{widescreen_left.tnm set_frame 0}
			{widescreen_right.tnm set_frame 0}
		}
		
	}
	
	{set $frets_used FALSE}
	{set $buttons_used FALSE}
	{set $pads_used FALSE}
		
	; figure out what types of controllers are attached
	{resize connected_controller_types 0}
	{if_else {== [limit_to_player_num] -1}
		; show all icons, unless we're in a session, then only show
		; participating controllers
		{do ($state 
			{if_else {&& {session num_players} {== [use_all_connected]   FALSE}}
				kGameControllerParticipating
				kGameControllerAll
			}
			)
			
			
					{foreach_int $player 0 8
						{if {&& {!= {game get_player_config $player} NULL} {|| {&& $state {gamecfg is_player_participating $player}} {== $state 0}}}
							{do
								{switch {gamecfg get_instrument_from_controller $player}
									(guitar 
										{if {! $frets_used }
											{do
												{push_back connected_controller_types [frets]}
												{set $frets_used TRUE}
											}	
										}	
									)
									(vocals
										{if {! $buttons_used }
											{do
												{push_back connected_controller_types [buttons]}
												{set $buttons_used TRUE}
											}	
										}
									)
									(drum
										{if {! $pads_used }
											{do
												{push_back connected_controller_types [pads]}
												{set $pads_used TRUE}
											}	
										}
									)
								}
							}
						}
					}	
				
			
		};end do
	
		;else
		{do
			{switch {gamecfg get_instrument_from_controller 
					[limit_to_player_num]
					}
				(guitar 
				   {push_back connected_controller_types [frets]}
				)
				(vocals
				   {push_back connected_controller_types [buttons]}
				)
				(drum
				   {push_back connected_controller_types [pads]}
				)
			}
		  }
	 };endif
	 
	{if {&& {== {size connected_controller_types} 0} {!= {gamecfg get leader_num} -1}}
		{switch {gamecfg get_instrument_from_controller {gamecfg get leader_num}}
			(guitar 
				{push_back connected_controller_types [frets]}
			)
			(vocals
				{push_back connected_controller_types [buttons]}
			)
			(drum
				{push_back connected_controller_types [pads]}
			)
		}
	}
			
      ; show help icons/text
      {if [config]
         {foreach_int $i 0 {size [config]}
            ; PlatformMgr may want us to swap icons for buttons 0 and 1
            {if_else {&& {< $i 2}
                         {platform_mgr is_enter_cancel_swapped}
                     }
               {set $x {- 1 $i}}
               ; else
               {set $x $i}
            }
            {if_else {== '' {elem [config] $i}} ; BMB: Change to remove the blinking when updating a helpbar, only delete it if the config changed to remove it
               {$this clear_action $i}
               ; else
               {if {!= 0 {size connected_controller_types}}
                  {{elem [actions] $i} set text_token {elem [config] $i}}
                  {{elem [actions] $i} set showing TRUE}
                  {foreach_int $j 0 {size connected_controller_types}
                     {{elem {elem [icons] $j} $i} set text_token 
                           {elem {elem connected_controller_types $j} $x}
                     }
                     {{elem {elem [icons] $j} $i} set showing TRUE}
                  }
               }
            }
         }
         ; If [config] size is less than the max helpbar size, loop through it and delete it
         {foreach_int $i {size [config]} kHelpbarMaxButtons
            {$this clear_action $i}
         }
      }    
	}	  
  )

   (clear_action ($index)
      {{elem [actions] $index} set text_token ''}
      {{elem [actions] $index} set showing FALSE}
      {foreach_int $j 0 {size connected_controller_types}
         {{elem {elem [icons] $j} $index} set text_token ''}
         {{elem {elem [icons] $j} $index} set showing FALSE}
      }
   )
   
   
   
   #endif
   
   
   (clear_leader
			{waitingforleader.grp set_showing FALSE}
   )
   
   (set_waiting ($waiting)
      ; animate from current frame
      {ornate_leader.tnm animate
         (range 
            {ornate_leader.tnm frame} 
            {if_else $waiting
               {ornate_leader.tnm end_frame}
               0  
            }
         )
         (period 0.25)
      }
      {if $waiting
         {waiting.lbl set text_token $waiting}
      }
   )
)

{new UIPanel helpbar
	HELPBAR_HANDLERS
	
}

{new UIPanel helpbar_dialog
	HELPBAR_HANDLERS
	(refresh_dialog_helpbar
		{$this refresh_display}
	)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Metagame

{new MetaPanel meta
   (file meta_panel.milo) ; just for postproc fx.
   (playing_post_set FALSE)
      
   (load
      ; load/add a ref to the movie panel so it stays loaded whenever we are
      ;DMS - Removed because we don't need this movie panel loading at the
      ; beginning any more.
      ;{movie_panel load}
   )
   
   (unload
      ;{movie_panel unload}
   )
   
   (enter
      {$this music_start}
      {set [playing_post_set] FALSE}
   )
   
   (music_start
      ; only start the music if we haven't been exited
      {if {&& {$this is_up} 
              {! {postsong_sfx_panel get active}}
          }
         {{$this meta_music} start}
         {synth play shell_crowd.cue}
         {platform_mgr enable_xmp}
      }
   )
   
   (music_stop
      {{$this meta_music} stop}
      {synth stop shell_crowd.cue}
      {platform_mgr disable_xmp}
   )
   
   (music_start_stream ($stream_file_name)
      {{$this meta_music} start_stream $stream_file_name}
   )
   
   (music_stop_stream
      {{$this meta_music} stop_stream}
   )
   
   (play_postset_loop ($play)
      {if_else $play
         {unless [playing_post_set]
            {synth play shell_crowd_muffled.cue}
         }
         {synth stop shell_crowd_muffled.cue}
      }
      {set [playing_post_set] $play}
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Panel that stops meta music, plays post show fx loop
{new UIPanel postsong_sfx_panel
   (active FALSE)

   (load
      {set [active] TRUE}
      {meta music_stop}
      {platform_mgr disable_xmp}
      {synth play shell_crowd_muffled.cue}
   )
   
   (exit
      {set [active] FALSE}
      {synth stop shell_crowd_muffled.cue}
      ; we assume somebody else we come along and restart meta music
   )
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; "generic" dialog
#define DIALOG_PANEL_HANDLERS
(
   (file "dialog_og.milo")
      
   (limit none) ; set this baby to change which controllers can input 
      
   (helpbar ()) 
      
   (allow_player ($player_num)
      {switch [limit]
         (none TRUE)
         (session
            {|| 
               {== {game get leader_num} -1}
               {game is_player_participating $player_num}
            }
         )
         (leader_session
            {||
               {&&
                  {is_leader_local}
                  {game is_player_participating $player_num}
               }
               {gamemode get always_allow_player}
            }
         )
      }   
   )

   (set_custom ($msg $opt1 $opt2 $focus)
      {dialog_title.lbl  set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_localized $opt1}
      {opt2.btn set_localized $opt2}
      {opt1.btn set_showing TRUE}
      {opt2.btn set_showing TRUE}
      {yes.btn set_showing FALSE}
      {no.btn  set_showing FALSE}
      {ok.btn  set_showing FALSE}
      
      {set [helpbar] ('' helpbar_select)}

      {$this set_focus $focus}
   )

   (set_yesno ($msg $focus)
      {dialog_title.lbl  set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing TRUE}
      {no.btn  set_showing TRUE}
      {ok.btn  set_showing FALSE}

      {set [helpbar] ('' helpbar_select)}

      {$this set_focus $focus}
   )

   (set_ok ($msg)
      {dialog_title.lbl  set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing FALSE}
      {no.btn  set_showing FALSE}
      {ok.btn  set_showing TRUE}

      {set [helpbar] ('' helpbar_continue)}

      {$this set_focus ok.btn}
   )

   (set_msg ($msg)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {msg.lbl set_showing TRUE}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing FALSE}
      {no.btn  set_showing FALSE}
      {ok.btn  set_showing FALSE}
      
      {set [helpbar] ('' helpbar_continue)}

      {$this set_focus msg.lbl}
   )

   (set_title ($msg)
      {dialog_title.lbl set_showing TRUE}
      {dialog_title.lbl set_localized $msg}
   )
)

{new DialogPanel dialog_panel
   DIALOG_PANEL_HANDLERS
   (enter
      ; change these in UIScreen enter, which happens later   
      {set [limit] none}
      {$this set_player_num -1}
      {set [helpbar] ()}
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Error Dialog (managed by UISink)
{new DialogPanel error_dialog_panel
   DIALOG_PANEL_HANDLERS
   
   (mode default) ; HACK, marc will clean all this up

	(enter
		{if {helpbar is_up}
			{helpbar hide_helpbar}
		}
		{helpbar_dialog set_limit_to_player_num -1}
        {helpbar_dialog reset_icons}
		{helpbar_dialog set_config ('' Select)}
		{helpbar_dialog clear_leader}
		{helpbar_dialog set_use_all_controllers TRUE}
	)
	(exit
		{if {helpbar is_up}
			{helpbar unhide_helpbar}
		}
		{helpbar_dialog set_use_all_controllers FALSE}
	)
   (SELECT_MSG
      {switch [mode]
         (pad_lost
            {band_ui_sink hide_error_dialog}
            {switch $component
               (opt1.btn
                  ; make sure we're all good, or blort with another error
                  {band_ui_sink check_controllers}
               )
               (opt2.btn
                  {band_ui_sink trigger_quit_early_transition}        
               )
            }
         )
         (remote_exit
            {band_ui_sink hide_error_dialog}
            {switch $component
               (yes.btn
                  {band_ui_sink trigger_quit_early_transition}
               )
            }
         )
			(swap
				{ui hide_error_dialog}
				{ui goto_screen meta_loading_uisink_default_screen}
			)
         (default
            {ui hide_error_dialog}
         )
      }
   )
   
   (SELECT_START_MSG
      {synth play button_select} ; manual play since we don't send to UI
      kDataUnhandled   
   )

   (set_error_msg ($error_reason)
		{if_else {== $error_reason kControllerSwap}
			{set [mode] swap}
			; else
			{set [mode] default}
		}
      {$this set_ok
         {localize_token
            {switch $error_reason
               (kLostConnection     error_lost_connection)
               (kLoneHeadToHead     error_lone_hth)
               (kLoneBandCoop       error_lone_band_coop)
               (kNoLeader           error_no_leader)
               (kKicked             error_kicked)
               (kLostServer         error_lost_server)
               (kControllerSwap     error_controller_swap)
               (kEthernetUnplugged  error_ethernet_unplugged)
               (kLostSongData       error_lost_song_data)
               (kLocalUserSignedOut error_local_user_signed_out)
               (kBandOwnerSignedOut error_band_owner_signed_out)
               (kProfileOwnerSignedOut error_profile_owner_signed_out)
            }
         }
      }
   )

   (set_error_token ($token)
      {set [mode] default}
      {$this set_ok {localize_token $token}}
   )
   
   (JOYPAD_CONNECT_MSG
		{if {== [mode] pad_lost}
			{$this set_focus opt1.btn}
		}		
		{helpbar_dialog refresh_display}
   )
	
	(TRANSITION_COMPLETE_MSG
		{if {== [mode] pad_lost}
			{$this set_focus opt1.btn}
		}
	)
   
   ; TEMP, we'll move this baby to a new typedef
   (pad_lost ($port $controller_sym)
      {set [mode] pad_lost}
		{if_else {== $port -1} ; bad port num, just bail
		   {do
			   {ui hide_error_dialog}
			   {band_ui_sink trigger_quit_early_transition}  
			}
			;else
			{do
				{$this set_custom
	            {sprintf {localize error_pad_lost}
   					{{game get_player_config {joypad_get_player_from_padnum $port}} get player_name}
   	            {localize_token $controller_sym}
   	         }
   	         {localize_token continue}
   	         {localize_token error_return_to_main}
   	         opt1.btn
	         }
            ;;{helpbar_dialog set_config ()} ;;HOJ out goes brians stuff
				{helpbar_dialog reset_icons}
			}
		}
   )
   
   ; TEMP
   (remote_exit
      {set [mode] remote_exit}
      {$this set_yesno
         {localize_token error_confirm_remote_exit}
         no.btn
      }   
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Network Busy Icon (managed by UISink)
{new UIPanel network_busy_icon_panel
   (file network_busy_icon.milo)
}

;;
;; popup for when a band is playing, and one of it's members tries to join
{new UIPanel remote_member_available_panel
   (file remote_member_available.milo)
}
