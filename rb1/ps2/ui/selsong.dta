
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; selsong.dta

#define COMMON_SONG_PREVIEW
(
   (is_updown ($button)
      {|| {== $button kPad_DDown}
          {== $button kPad_DUp}
          {== $button kPad_Circle}
          {== $button kPad_Square}
      }
   )
)

#define COMMON_SONG_SELECT
(
   COMMON_SONG_PREVIEW
   
   (allow_player ($player_num)
      {|| {&& {is_leader_local} 
              {game is_player_participating $player_num} }
          {== [song_mode] leaderboards}}
   )

   ;; local props
   (exiting_sel_song FALSE)
   (old_list_pos 0)
   (inhibit_refresh FALSE)
   
   (focus ss_song.lst)

   ; override default button repeat
   (joypad
      (hold_ms 500)
      (repeat_ms 80)
   )

   ;; Kick off a content refresh before displaying songs.
   (load
      {if {! [inhibit_refresh]}
         {content_mgr start_refresh}
      }
   )

   ;; Not loaded until content refresh is complete.
   (is_loaded
      {content_mgr refresh_done}
   )
        
   (enter
      ; now we care about controllers (done here in case this mode doesn't have matchmaking)
      ; {band_ui_sink set post_matchmaking TRUE}
		{band_ui_sink check_controllers}
      
      ; if we're in a local game, we skipped the pre-song select screen
      ; and need to update our shared songs here, so we are all happy
      
      ; and, if we are in leaderboard mode, we want to reset it so we can
      ; see all our songs
    
      {if_else {== [song_mode] leaderboards}
         {song_mgr reset_shared_songs TRUE}
         {if {== {session mode} kNetLocal}
            {song_mgr reset_shared_songs FALSE}
         }
      }
   
      {platform_mgr add_sink $this storage_changed}
      {session add_sink $this change_game_msg}
      {$this set exiting_sel_song FALSE}
      {song_provider set_song_mode [song_mode]}
      {switch [song_mode]
         (game
            {event.lbl set text_token ''}
         )
         (practice
            {event.lbl set text_token ''}
         )
         (game_tour
            {if_else {&& {tour performer} {tour event}}
               {event.lbl set_localized {tour event_display_name}}
               {event.lbl set text_token ''}
            }
         )
         (leaderboards
            {event.lbl set text_token ''}
         )
         ; default
         {fail "Unknown song_mode\n"}
      }

      {ss_song.lst set_provider song_provider}; <-goes after set_use_tour_songs

      ; initial settings
      {meta music_stop}

      {$this sync_grouping_method}
      {if {!= [song_mode] leaderboards}
         {$this select_first_selectable}
      }
		
#ifdef HX_XBOX
      {if_else {== [song_mode] leaderboards}
         {if_else {!= {leaderboards get_song_sym} ''}
            {ss_song.lst set_selected {leaderboards get_song_sym}}
            {if {&& {== {leaderboards get_track_type_char} 'b'}
                    {== {leaderboards get_type} kPlayerSong}}
               {ss_song.lst set_selected 1 0}
            }
         }
         {if {&& game {!= {game get_song} ''}}
            {ss_song.lst set_selected {game get_song}}
         }
      }
#else ;; REA - TODO set high scores list to right spot
      {if_else {== [song_mode] leaderboards}
         {ss_song.lst set_selected 1 0}
         {if {&& game {!= {game get_song} ''}}
            {ss_song.lst set_selected {game get_song}}
         }
      }
#endif

      {$this play_preview}
      {$this set old_list_pos {ss_song.lst selected_pos}}
#ifdef HX_XBOX
      {$this update_setlist_progress}
#endif

      ; REA - refresh grouping method
		{$this set_grouping_method {song_provider get_display}}
   )

   (exit
      ;HWR - Stop the song preivew and turn off the streaming override mode
      {meta music_stop_stream}
      
      ;HWR - Restart the normal metagame music after the preview fades out
      ; (meta music would keep playing the song preview without the delay)
      {script_task kTaskSeconds (delay {+ {{meta meta_music} fade_time} 0.1})
         (script {meta music_start})
      }
      
      {platform_mgr remove_sink $this storage_changed}
      {session remove_sink $this change_game_msg}
      {$this set exiting_sel_song TRUE}
      {$this set inhibit_refresh FALSE}
      {qp_selsong_panel set inhibit_refresh FALSE}
      {tour_selsong_panel set inhibit_refresh FALSE}
      {leaderboard_selsong_panel set inhibit_refresh FALSE}
   )
   
   (SELECT_START_MSG
      ;;{song_preview ''} ; turn off song preview
      {if_else {$this save_song}
         {$this select_song}
         {do
            {band_ui_sink set_net_sync FALSE}
            {ui push_screen invalid_selection_screen}
         }
      }
      kDataUnhandled
   )
   
   (storage_changed
      {band_ui_sink content_file_read_failed}
   )

   (CHANGE_GAME_MSG
      {ss_song.lst set_selected {game get_song}}
   )
   
   (BUTTON_DOWN_MSG
      {cond
         ({$this is_updown $button}
            {if {!= {$this get old_list_pos} {ss_song.lst selected_pos}}
               {$this set old_list_pos {ss_song.lst selected_pos}}
               {song_preview ''} ; turn off song preview if scrolling
            }
            kDataUnhandled
         )
         ({== $button kPad_Tri}
			{song_preview ''}
			
            {switch [song_mode]
               (game
                  {ui goto_screen
                     {if_else {gamemode get skip_matchmaking}
                        {gamemode get main_mode_screen}
                        {gamemode get matchmaking_screen}
                     }
                     FALSE TRUE
                  }
               )
               (practice
                  {ui goto_screen training_menu_screen FALSE TRUE}
               )
               (game_tour 
                  {{tour performer} set_event 
                     {{tour event} get event_name} 
                     {game get leader_num}
                  }
                  {ui goto_screen 
                     {if_else {gamemode get is_solo} 
                        tour_solo_event_screen 
                        tour_band_event_screen
                     }
                  }
                  kDataUnhandled
               )
               (leaderboards
						#ifdef HX_XBOX ; REA - only go one place to go for the high score implementation
                  {ui goto_screen 
                     {switch {leaderboards get_type}
                        (kPlayerSong leaderboards_seltrack_screen)
                        ; default
                        {gamemode get community_screen}
                     }
                     FALSE TRUE}
						#else
						{ui goto_screen 
							{switch {highscores get_track_sym}
								(band highscore_seltrack_screen)
								;default
							   highscore_seldiff_screen
							}
						}
						#endif
               )
               ; default
               {fail "Unknown song_mode\n"}
            }
         )
         ; change the grouping method
         ({== $button kPad_R1}
            {synth play button_toggle}
            {$this switch_grouping}
         )
         (TRUE
            kDataUnhandled
         )
      }
   )

	; REA - delay preview script addition
	(last_preview_play 0.0)
	(preview_playing FALSE)
   ; don't play song snippet until user stops flipping through choices
   (BUTTON_UP_MSG
      {if {&&  {! {$this get exiting_sel_song}} ; don't play new snippet if exiting
               {$this is_updown $button}}
			{set [last_preview_play] {taskmgr ui_seconds}}
			{set [preview_playing] FALSE}
      }
      kDataUnhandled
   )

	; REA - poll added to check the delay and start preview
	(poll
	   {do 
			($last_play_delta  {- {taskmgr ui_seconds} [last_preview_play]})	  
			{if {&& {> $last_play_delta 0.25} {! [preview_playing]} {! {ui in_transition}}}
				{do
					{$this play_preview} ; REA play preview 
					{set [preview_playing] TRUE}
				}
			}
		} 
	)
	
   (SCROLL_MSG
      {do
         ;get the symbol of the highlighted song
         ($highlit_song {if_else {song_provider is_random {ss_song.lst selected_pos}}
                           random_song
                           {song_provider get_song_to_set {ss_song.lst selected_pos}}
                        }
         )
           
         ;send it to all non-leaders
         ; but don't do that if we're in leaderboard mode
         {if_else {!= [song_mode] leaderboards}
            {session send_to_all {` 
               ({, $this} set_highlit_song {, $highlit_song})} kNetReliable}
				; REA - else if we are at the top of the list reset the view so the first heading is shown
				{if {== {ss_song.lst selected_pos} 1}
				   {$this select_first_selectable}
				}
			}
         
         ;HWR - Fade out the previous music preview
         {meta music_stop_stream}
      }
   )

   (set_highlit_song ($song_symbol)
      ; only select the song if we actually have it (might be a download)
      {if {song_mgr has_song $song_symbol}
         {ss_song.lst set_selected $song_symbol}
      }
   )

   (select_song
      {switch [song_mode]
         (game ;; Both QP Coop and HtH flows here...
            {if_else {gamemode get is_hth_arrangement}
               {hth_goto_tracksel_screen}
               ; else
               {ui goto_screen {gamemode get ready_screen}}
            }
         )
         (practice
            {ui goto_screen {gamemode get ready_screen}}
         )
         (game_tour
            {ss_song.lst set_provider song_provider}  ; refresh list
            {if_else {== {{tour performer} next_any_index} -1}
               {do
                  {tour_band_event_panel confirm_event} ; start the event
                  {ui goto_screen {gamemode get ready_screen}}
               }
               ;else
               {do
                  {ui goto_screen tour_selsong_screen}   ; select the next_song
#ifdef HX_XBOX
                  {$this update_setlist_progress}
#endif
               }
            }
         )
         (leaderboards
				#ifdef HX_XBOX
            {ui goto_screen leaderboards_screen}
				#else
				{ui goto_screen highscores_list_screen}
				#endif
         )
         ; default
         {fail "Unkown song_mode\n"}
      }
   )

   ; evaluates to true if the selected song is the Random entry or career score
   (invalid_selection
      {song_provider is_invalid_song {ss_song.lst selected_pos}}
   )

   ; playing preview is dependent on the selected symbol.
   (play_preview
      {if_else {$this invalid_selection}
         {meta music_stop_stream} ; turn off song preview
         {do
            ($song_to_set 
               {song_provider get_song_to_set {ss_song.lst selected_pos}})

            {if {!= $song_to_set ""}
               ;HWR - Play a separate .vgs file as the song preview, through the meta music system
               {meta music_start_stream {sprintf "songs/%s/prev_%s" $song_to_set $song_to_set}}
            }
         }
      }
   )

   ; for the leader   
   (switch_grouping
      {song_provider cycle_display}
      {ss_song.lst set_provider song_provider}
      {$this select_first_selectable}
      {$this play_preview}
      {$this sync_grouping_method}
      {$this update_filter {song_provider get_display}}
   )

   ;; for the non-leader(s)
   (set_grouping_method ($ix)
      {song_provider set_display $ix} 
      {ss_song.lst set_provider song_provider}
      {$this select_first_selectable}
      {$this play_preview}
      {$this update_filter {song_provider get_display}}
   )

   ; make sure all networked players are using the same grouping method
   ; but don't do that if we're in leaderboard mode
   (sync_grouping_method
      {if {&& {is_leader_local} {!= [song_mode] leaderboards}}
         {session send_to_all
            {` ({, $this} set_grouping_method {, {song_provider get_display}} )}
            kNetReliable
         }
      }
   )

   ; when a song is finally chosen, we set it in the appropriate environment
   ; returns TRUE/FALSE depending on validity of choice
   (save_song
      {do
         ; ask the provider for the song symbol, so it can handle "random"
         ($the_chosen_one {song_provider get_song_to_set {ss_song.lst selected_pos}})
         {if_else {|| {song_mgr is_song_shared $the_chosen_one}
                      {&& {== [song_mode] leaderboards} 
                          {== $the_chosen_one career}}}
            {do
               {switch [song_mode]
                  (game
                     {game set_song $the_chosen_one}
               
                     ; pick a random venue
                     {do ($venue {random_elem {gamemode get venues}})
                        {while {== $venue blank_01} ; HACK don't pick the blank one
                           {set $venue {random_elem {gamemode get venues}}}
                        }
                        {game set_venue $venue}
                     }
                     
                     ; basically a hack for solo quickplay vocalist
                     ; so that the player's character's gender matches song's
                     {if {gamemode get force_player_vocal_gender}
                        {do ($pcfg {gamecfg get_player_config {gamecfg get leader_num}})
                            ($char {$pcfg get_char})
                            ($instrument {$char get_instrument})
                           {if {== $instrument vocals}
                              {do ($song_gender {song_mgr vocal_gender $the_chosen_one})
                                 {if {!= {$char get_gender} $song_gender}
                                    ; get a character with correct gender
                                    {$pcfg set_char
                                       {available_prefab $instrument $song_gender}
                                    }
                                 }
                              }
                           }
                        }
                     }
                     
                     ; we can start loading up the vocalist prefab now
                     {session_mgr send_to_all (gamecfg load_all_chars) TRUE}
                     {gamecfg load_all_chars}
                  )
                  (practice
                     {game set_song $the_chosen_one}
                     {game set_venue blank_01}
                  )
                  (game_tour {{tour performer} set_any_song $the_chosen_one})
                  #ifdef HX_XBOX
                  (leaderboards {leaderboards set_song_sym $the_chosen_one})
						#else
						(leaderboards {highscores set_song_sym $the_chosen_one})
						#endif
                  ; default
                  {fail "Unknown song_mode\n"}
               }
               TRUE
            }
            ;else
            FALSE
         }
      }
   )

   ; sets the list selection to the first selectable item
   (select_first_selectable
      {do ($ix 0)
         {while {!{song_provider is_active $ix}}
            {++ $ix}
         }
         {if {song_provider is_active $ix}
            {ss_song.lst set_selected $ix 0}
         }
      }
   )

#ifdef HX_XBOX
   (update_setlist_progress
      ;set the "n of n" label
      {do ($multi {selsong_lower3rd_panel find multi_song.lbl})
         {if_else {!= [song_mode] game_tour}
            {$multi set_showing FALSE}
            ;else
            {do ($event {tour event})
               {$multi set_localized
                  {sprintf {localize event_n_of_n} 
                           {+ 1 {{tour performer} next_any_index}}
                           {$event num_songs}
                  }
               }
            }
         }
      }
   )
#endif

   (update_filter ($type)
      {do ($filter {selsong_lower3rd_panel find sort_by.lbl})
         {switch {elem 
                    {elem {find $syscfg song_groupings} {+ $type 1}} 
                 0}
            (rank         {$filter set_localized {localize filter_difficulty}}) 
            (genre        {$filter set_localized {localize filter_genre}}) 
            (decade       {$filter set_localized {localize filter_decade}})
            (alpha_song   {$filter set_localized {localize filter_alphabetic_song}})
            (alpha_artist {$filter set_localized {localize filter_alphabetic_band}})
         }
      }
   )
) 
; end of #define

;; for when a song isn't shared
{new UIScreen invalid_selection_screen
   (panels dialog_panel)
   (focus dialog_panel)
   (helpbar ('' helpbar_select))
   (enter
      {dialog_panel set_ok {localize_token invalid_song}}
   )
   (exit
      {band_ui_sink set_net_sync TRUE}   
   )
   (SELECT_MSG
      {ui pop_screen}
   )
}

; shared lower3rd
{new UIPanel selsong_lower3rd_panel
#ifndef HX_XBOX  ;HWR - Pi branch
   (file "qp_selsong_lower3rd_og.milo")
#else
   (file "qp_selsong_lower3rd.milo")
#endif
}

;; quickplay
{new UIPanel qp_selsong_panel
   #ifdef HX_WII
      (file "qp_selsong_wii.milo")
   #else
      (file "qp_selsong_og.milo")
   #endif
		
   (song_mode game)
   (force_exit FALSE)

   COMMON_SONG_SELECT
}


;; band tour
{new UIPanel tour_selsong_panel
   #ifdef HX_WII
      (file "qp_selsong_wii.milo")
   #else
      (file "qp_selsong_og.milo")
   #endif
   (song_mode game_tour)
   (force_exit TRUE) ; game_tour requires we force exit
   
   COMMON_SONG_SELECT

   (refresh ; called when a song is chosen on a remote system
#ifdef HX_XBOX
      {$this update_setlist_progress}
#endif
      {ss_song.lst set_provider song_provider}  ; refresh list
   )
}


;; leaderboards
{new UIPanel leaderboard_selsong_panel
   #ifdef HX_WII
      (file "qp_selsong_wii.milo")
   #else
      (file "qp_selsong_og.milo")
   #endif
   (song_mode leaderboards)
   (force_exit FALSE)

   COMMON_SONG_SELECT
}

#define COMMON_SONG_SELECT_SCREEN
(
   (helpbar 
      {if_else {is_leader_local}
         (helpbar_back helpbar_choosesong helpbar_songfilter)
         (helpbar_back)
      }
   )
   HELPBAR_WAITING_FOR_LEADER
   ; we manually sync the selected song, rather than using BandUISink
   (net_sync_scroll FALSE)
)


{new UIScreen qp_selsong_screen
   (panels meta movie_panel qp_selsong_panel selsong_lower3rd_panel helpbar)
   COMMON_SONG_SELECT_SCREEN
   (enter
      {$this set_focus_panel qp_selsong_panel}
	  {helpbar set_limit_to_player_num -1}
   )
#ifndef _SHIP
#ifdef HX_XBOX
   ; "cheat" for selecting a venue in quickplay
   (BUTTON_DOWN_MSG
      {if_else {&& {== $button kPad_Start} {is_leader_local} }
         {if_else {$this save_song}
            {ui goto_screen qp_selvenue_screen}
            {do
               {band_ui_sink set_net_sync FALSE}
               {ui goto_screen invalid_selection_screen}
            }
         }
         kDataUnhandled
      }
   )
#endif
#endif
}


{new UIScreen tour_selsong_screen
   (panels meta tour_world_bg_panel tour_selsong_panel selsong_lower3rd_panel helpbar)
   COMMON_SONG_SELECT_SCREEN
   (enter
      {$this set_focus_panel tour_selsong_panel}
   )
}


{new UIScreen leaderboards_selsong_screen
   (panels meta movie_panel leaderboard_selsong_panel selsong_lower3rd_panel
      helpbar)
   (focus leaderboard_selsong_panel)
   (helpbar (helpbar_back helpbar_choosesong helpbar_songfilter))
	(enter
      {$this set_focus_panel leaderboard_selsong_panel}
		{do ($lbl {selsong_lower3rd_panel find event.lbl})
			{$lbl set text_token {sprintf "%s %s" {highscores get_diff_sym} {highscores get_track_sym}}}
			{$lbl set_showing TRUE}
		}
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

{new UIPanel pre_selsongsync_panel
   (remote_players ())
   (local_players ())
   (msg_data ())
   (send_songs_on_enter FALSE)
   
   ;; Kick off a content refresh before displaying songs.
   (load
      {content_mgr start_refresh}
      {qp_selsong_panel set inhibit_refresh TRUE}
      {tour_selsong_panel set inhibit_refresh TRUE}
      {leaderboard_selsong_panel set inhibit_refresh TRUE}
   )

   ;; Not loaded until content refresh is complete.
   (is_loaded
      {content_mgr refresh_done}
   )
        
   (TRANSITION_COMPLETE_MSG
      {session add_sink $this}
      {resize [remote_players] 0}
      {if_else {is_leader_local}
         {do
            ; Build the list of participating remote non-leaders here from 
            ; which the leader will wait to receive a message. If any of them
            ; disconnect during the wait, remove them from the list.

            {song_mgr reset_shared_songs FALSE}
            {game foreach_player_config $pcfg
               {if {&& {$pcfg is_participating}
                       {! {$pcfg is_local_player}}}
                  {push_back [remote_players] {$pcfg get player_num}}
               }
            }
            
            {session send_to_all
               {` ({, $this} ready_for_songs)}
               kNetReliable
            }

            ;; Might be no remote players. In that case, advance to song select screen.
            {$this check_for_advance}
         }
         ; else
         {if [send_songs_on_enter]
            {$this send_songs}
         }
      }
   )

   (ready_for_songs
      {if_else ; we've finished transitioning to this panel
         {&&
            {$this is_up}
            {! {ui in_transition}}
         }
         ;then
         {$this send_songs}
         ;else
         {$this set send_songs_on_enter TRUE}
      }
   )
   
   (send_songs
      ; Send the song info to the leader.
      {resize [local_players] 0}
      {resize [msg_data] 0}
      {game foreach_player_config $pcfg
         {if {&& {$pcfg is_participating}
                 {$pcfg is_local_player}}
            {push_back [local_players] {$pcfg get player_num}}
         }
      }
      {push_back [msg_data] [local_players]}
      {push_back [msg_data] {song_mgr get_local_unlocked_songs}}
      {session send_to_player {game get leader_num} 
         {` ({, $this} process_remote_songs {, [msg_data]})} kNetReliable
      }
   )
   
   (exit
      {$this set send_songs_on_enter FALSE}
      {session remove_sink $this}
   )

   (process_remote_songs ($song_info)

      ;;; Separate the player nums from the song info.
      {set $pnums {elem $song_info 0}}
      {set $song_info {elem $song_info 1}}

      ;;; Note which songs the leader has which the remote player doesn't.
      {song_mgr process_remote_shared_songs $song_info}

      ;;; Remove the player nums from the remote_players list.
      {foreach $pnum $pnums
         {remove_elem [remote_players] $pnum}
      }

      {$this check_for_advance}
   )

   (REMOTE_PLAYER_LEFT_MSG
      {if {is_leader_local}
         {remove_elem [remote_players] $player_num}  ;; Remove remote player from list.
         {$this check_for_advance}
      }
   )

   (check_for_advance
      ;;; If info received from all remote players, advance to next screen
      {if {== {size [remote_players]} 0}
         ; sync our shared songs, since only leader has complete copy
         {if {is_leader_local}
            {session send_to_all 
               {` (song_mgr sync_shared_songs {, {song_mgr get_shared_songs}}) }
               kNetReliable
            }
         }
         {ui goto_screen
            {if_else {gamemode get ranked}
               qp_hth_ranked_preload_screen
               qp_selsong_screen
            }
         }
      }
   )   
}

{new UIScreen pre_selsongsync_screen
   (panels meta movie_panel pre_selsongsync_panel helpbar)
   (focus pre_selsongsync_panel)
   (helpbar ())
   (helpbar_waiting
      {if_else {gamemode get ranked}
         FALSE ; don't show anything for ranked games that could signify leader status
         {if_else {is_leader_local}
            helpbar_waiting_for_songs
            helpbar_sending_songs
         }
      }
   )
}



#ifndef _SHIP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; select venue (NOT FOR SHIP)
{new UIPanel qp_selvenue_panel
   (file "qp_selvenue.milo")
   (focus venue.lst)
     
   (player_num {local_to_leader_player_num})
   
   (enter
      {session add_sink $this change_game_msg}
      {leader.lbl set_localized 
         {sprintf "Leader: %s"
            {{game get_player_config {game get leader_num}} get player_name}
         }
      }
      
      {venue.lst set_data {gamemode get venues}}
      
      {if {!= {game get_venue} ''}
         {venue.lst set_selected {game get_venue}}
      }
   )
   
   (exit
      ; This catches the case when the user never scrolls
      {if {is_leader_local}
         {game set_venue {venue.lst selected_sym}}
      }
   
      {session remove_sink $this change_game_msg}
   )
   
   (SCROLL_MSG
      {if {is_leader_local}
         {game set_venue {venue.lst selected_sym}}
      }
   )
   
   (CHANGE_GAME_MSG
      {venue.lst set_selected {game get_venue}}
   )
   
   (SELECT_MSG
      {if_else {gamemode get is_hth_arrangement}
         {hth_goto_tracksel_screen}
         ; else
         {ui goto_screen {gamemode get ready_screen}}
      }
   )
}

{new UIScreen qp_selvenue_screen
   (panels meta movie_panel qp_selvenue_panel helpbar)
   (focus qp_selvenue_panel)
   (back qp_selsong_screen)
   (helpbar (back select))
}
#endif ; SHIP

