
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get lengths of in-game user definable strings
{func get_char_name_length
   {elem {find $syscfg profile_mgr char_name_length} 1}
}
{func get_band_name_length
   {elem {find $syscfg profile_mgr band_name_length} 1}
}
{func get_motto_length
   {elem {find $syscfg profile_mgr motto_length} 1}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; return the TourChar* for the leader of the current tour band
{func band_leader_char
   {{game get_player_config {game get leader_num}} get_char}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; set appropriate prefab charcter based on type of controller
{func set_char_from_controller ($player_num)
   {{game get_player_config $player_num}
      set_char
      {available_prefab $player_num}
   }
}

; setup the game without going through the metagame (using my.dta)
{func setup_game ($song $venue $player_list)
   {do ($i 0) ($slot_index 0)
      ; always set this in case we're jumping into multisong set
      {tour set_bwtmode kMetaTour_StartNew}
      
      ; set our tracks first
      {foreach $player $player_list
         {if_else {== 0 $i}
            {session reset 0 FALSE}
            {session add_local $i}
         }
         {do ($pcfg {game get_player_config $i})
             ($track {elem $player 0})
            {$pcfg set_track_type $track}
            {$pcfg set_controller_type
               {switch {$pcfg get_track_type}
                  (kTrackDrum kControllerDrum)
                  ((kTrackGuitar kTrackBass) kControllerGuitar)
                  (kTrackVocals kControllerVocals)
                  ; default
                  kControllerNone
               }
            }
            {$pcfg set_difficulty {elem $player 1}}
            {$pcfg set_ready TRUE}
         }
         {++ $i}
      }
      
      {game set_venue $venue}
      {game set_song $song}
      {game set leader_num 0}
      
      ; now that we have valid tracks, set the slots
      {gamecfg auto_assign_missing_slots}

      ; set characters, now that we have valid slots and are participating
      {set $i 0}
      {foreach $player $player_list
         {do ($pcfg {game get_player_config $i})
             ($track {elem $player 0})
             ($prefab {if_else {== {size $player} 3} {elem $player 2} 0})
            ; find a prefab character and use it
            {$pcfg set_char 
               {if_else $prefab
                  {find_prefab $prefab}
                  {available_prefab
                     {if_else {== $track bass}
                        guitar
                        $track   
                     }
                  }
               }
            }
         }
         {++ $i}
      }
   }
}

; Restart this game.  Call this directly if the game has already ended in a
; win or loss.  Use {session end_game kRestart} to restart midgame.
{func game_restart
   {{gamemode get game_screen} reenter_screen}  ;exits/enters the screen's panels
   
   ;pops any screens if necessary
   {if 
      {&& 
         {ui current_screen} 
         {!= {ui current_screen} {gamemode get game_screen}}
      }
      {ui pop_screen}
   }
}

{func set_all_hud_showing ($show)
   {{get_track_panel} set_showing $show}
}

{func reset_all_callbacks
   {func hopo_callback}
   {func swingAtHopo_callback}
   {func whammy_start_callback}
   {func whammy_end_callback}
   {func star_phrase_miss_callback}
   {func star_phrase_captured_callback}
   {func star_use_begin_callback}
   {func star_use_end_callback}
   {func hopo_hit}
}
{reset_all_callbacks}

{func player_pan ($player)
   ; for now, player three will pan like player 2
   {if_else {game multiplayer} {elem (-1 1 -1 1 -1 1 -1 1) $player} 0} ; REA - Updated for 8 player max
}

;; Play an in-game sound effect (that is, it's affected by
;; the sfx volume option)
;; NOTE: volume is just affected by faders now.
{func play_game_seq ($sfx)
   {synth play $sfx}
}

;; Play an in-game sound effect associated with a player, so
;; we can pan it right.  We sometimes play different sfx in
;; single-player vs multi-player, so we pass in both sfxs.
{func play_game_seq_player ($sfx_single $sfx_multi $player)
   {do ($sfx {if_else {game multiplayer} $sfx_multi $sfx_single})
      {synth play $sfx (pan    {player_pan $player})}
   }
}
#ifdef HX_XBOX
; format money from int
{func fmt_money ($money)
   {sprintf "%s%s" {localize locale_currency} {localize_separated_int $money}}
}
#endif

; format score from int, using localized thousands separator
{func fmt_score ($score)
   {localize_separated_int $score}
}

; for solo tour, produce string like "X out of X songs played"
{func fmt_songs_played ($num_played $num_total)
   {sprintf {localize tour_solo_progress}
      $num_played $num_total
   }
}

;; is the specified player local?  go through playerconfig, not session,
;;   as the session asserts if the specified player isn't in the session.

; is the leader a local player?
{func is_leader_local
   {do ($leader_num {gamecfg get leader_num})
      {&&
         {!= $leader_num -1}
         {gamecfg is_player_local $leader_num}
      }
   }
}

; used to limit panels to input local to the leader's machine
{func local_to_leader_player_num
   {if_else {is_leader_local}
      -1
      ; else
      {game get leader_num}
   }
}

; update tour shop/gigguide/money panels after update_band or cheat
{func update_tour_display
   ; refresh display panels, show any new unlocks/hints/stats/logos/etc
   {foreach $a ( 
                tour_solo_diff_panel 
                tour_solo_event_panel
#ifdef HX_XBOX
                tour_solo_hub_panel 
                tour_band_hub_panel 
                shop_money_panel 
                tour_band_town_panel 
                tour_band_venue_panel
#endif
                tour_band_event_panel
                tour_gigguide_lower3rd_panel
                practice_space_panel
                tour_selsong_panel
               )
      {if {$a is_up}
         {$a refresh}
      }
   }
}

; for displaying the correct "missing" track
{func missing_slot_to_track_icon ($slot)
   {cnv_instrumenttoicon 
      {if_else {== 3 $slot}
         ;special case for $slot 3 - show guitar/bass depending on $slot 0
         {if_else {&& {game is_player_participating 0}
                      {== bass {{game get_player_config 0} get_track_sym}}
                  }
            guitar
            bass
         }
         {elem (COOP_SLOTS_ORDER) $slot}
      }
   }   
}

{func get_player_icon ($player)
   {if_else {!= $player ""}
      {do ($pcfg {$player config}) ($player_char {$pcfg get_char})
         {if_else $player_char
            {$player_char track_icon {$pcfg get_track_sym}}
            'G'         
         }
      }
      'G'
   }
}

{func get_player_name ($player)
   {if_else $player
      {do ($pcfg {$player config})
         {$pcfg intro_name}
      }
      ; Return empty string.  This used to return "GamerTag" 
      ; which is stupid AND a PS3 violation. -jwf
      ""
   }
}

{func get_player_name_from_slot ($slot)
   {do ($player_num {game get_player_num_from_slot_num $slot})
      {get_player_name {game get_player $player_num}}
   }
}