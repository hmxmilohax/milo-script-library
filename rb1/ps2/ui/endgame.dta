; function to collect and choose a performance award
; Returns a non-localized token for the chosen award
; $player parameter is the player number to pick an award for
; $selected_awards is an array of the awards selected so far to avoid duplicates
#define AWARDS_ARRAY_1 (())
#define AWARDS_ARRAY_2(())
{func choose_award ($player $selected_awards)
   {set $available_awards AWARDS_ARRAY_1}
   {resize $available_awards 0}
   {set $temp_awards AWARDS_ARRAY_2}
   {resize $temp_awards 0}
   {do
      ;init some vars that will be avail within performance_awards.dta
      ($my_player {beatmatch player $player}) ;Player*
      ($track {$my_player instrument})

      ;collect all awards that apply
      {foreach $descriptor 
         (
            #include performance_awards.dta
         )
         {if {eval {elem $descriptor 0}} ;if the award applies
            {push_back $available_awards {elem $descriptor 1}}
         }
      }

      {if_else {== {size $available_awards} 0}
         {push_back $available_awards award_boring}
         ;else, we have some award(s)
         {do
            ;if we have a choice, then look to rule some out
            {if {> {size $available_awards} 1}

               ;check for duplicates so far this game
               {do   
                  {resize $temp_awards 0}
                  {foreach $available $available_awards
                     {if {! {find_elem $selected_awards $available}}
                        {push_back $temp_awards $available}
                     }
                  }
                  ;save at least one! (copy the ones we're keeping
                  ;back to available_awards)
                  {if {> {size $temp_awards} 0}
                     {set $swapper $available_awards}
                     {set $available_awards $temp_awards}
                     {set $temp_awards $swapper}
                  }
               }

               ; check for a repeat of last time's award for this player
               {do 
                  {resize $temp_awards 0}
                  {foreach $available $available_awards
                     {if {!= {{$my_player config} get previous_award} $available}
                        {push_back $temp_awards $available}
                     }
                  }
                  ;save at least one!
                  {if {> {size $temp_awards} 0}
                     {set $swapper $available_awards}
                     {set $available_awards $temp_awards}
                     {set $temp_awards $swapper}
                  }
               }
            }
         };do
      };if_else

      {if {<= {size $available_awards} 0}
         {notify "WARNING: no performance award available!"}
      }

      ;{print "------------------- Performance Awards --------------------------\n"}
      ;{foreach $award $available_awards
      ;   {print {localize_token $award}}
      ;   {print "\n"}
      ;}

      {elem $available_awards {mod {$my_player score} {size $available_awards}}}
   }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; the win_screen for gameplay modes, used to update stats
{new UIScreen endgame_waiting_screen
   (panels)
   (entered FALSE) ; semaphore to make sure we don't proceed until after enter
                   ; necessary for net syncing
   (enter
      {set [entered] TRUE}
      {game foreach_local_player $p
         {$p finalize_stats}
         {session send_to_all
                  {` ({beatmatch player {, {$p player_num}}}
                      remote_stats
                      {, {$p notes_hit}}
                      {, {$p longest_streak}}
                      {, {$p current_notes_hit_fraction}}
                      {, {$p failed_deploy}}
                      {, {$p saved_count}}
                      {, {$p fill_hit_count}}
                      {, {$p strummed_down}}
                      {, {$p strummed_up}}
                      {, {$p deploy_count}}
                      {, {$p score}}
                      {, {$p solo_percentage}}
                      )}
                  kNetReliable
         }
      }
   )
   
   (exit
      {set [entered] FALSE}
   )

   (poll
      {if [entered]
         {do ($proceed TRUE)
            {beatmatch foreach_active_player $p
               {if {! {$p stats_finalized}} {set $proceed FALSE}}
            }
            {if {&& $proceed {! {ui in_transition}}}
               {if {is_leader_local}
                  ; cache screen, since calling complete_song may change it 
                  {do ($screen {gamemode get endgame_screen})
                     ; complete the tour song now, so we're all synced for the
                     ; next song screen in net BWT
                     {if {tour performer}
                        {{tour performer} complete_song 
                           {{beatmatch main_performer} num_stars} 
                           {{beatmatch main_performer} score}
                        }
#ifndef _SHIP
                        ; cheat for winning all but the last song in a multisong
                        {if $cheat.win_event
                           {while {! {{tour performer} last_song}}
                              {{tour performer} complete_song 
                                 {{beatmatch main_performer} num_stars} 
                                 {{beatmatch main_performer} score}
                              }
                           }
                           {set $cheat.win_event FALSE}
                        }
#endif
                     }
                     
                     {if {gamemode is_solo}
                        {game submit_solo_song_score {{beatmatch main_performer} score}}
                     }
                     
                     {ui goto_screen $screen}
                  }
               }
            }
         }
      }
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; win/results/end game panels and screens
#define ENDGAME_PANEL_HANDLERS
(
   LIMIT_TO_LEADER_SESSION
   
   (submit_coattails_achievement ($player_num)
      {achievements submit $player_num ach_riding_on_coattails}
   )
   
   (trigger_remote_coattails
      {game foreach_local_player $local_player
         {$this submit_coattails_achievement {$local_player player_num}}
      }
   )

   (submit_achievements
      ;; TODO See notes in tour_band.dta / submit_band_achievement
      {game foreach_local_player $p
         ; achievements only for profiles with their own save data
         {unless {profile_mgr has_profile_map {$p player_num}}
            {do ($pnum {$p player_num})
                ($pcfg {$p config})
                ($p_profile {profile_mgr get_save_data_from_player $pnum})
               {if $p_profile
                  
                  ; Song completion awards not for head-to-head modes
                  {if {! {gamemode is_hth_arrangement}}

                     ; Did he 5-star the song?
                     {if {>= {$p num_stars} 5}
                        {achievements submit $pnum ach_killer_performance}
                     }
                  }

                  ; Am I a Platinum artist?
                  {if {$p_profile is_platinum_artist}

                     ; Local profiles can get achievement
                     {game foreach_local_player $op
                        {do ($opnum {$op player_num})
                           {if {!= $opnum -1}
                              ; No self-awards for Riding on Coattails
                              {unless {profile_mgr uses_same_profile $pnum $opnum}
                                 {$this submit_coattails_achievement $opnum}
                              }
                           }
                        }
                     }

                     ; All remote profiles get achievement
                     {session send_to_all 
                        {` ({, $this} trigger_remote_coattails)}
                        kNetReliable
                     }
                  }

                  ; Did he 100% the song on Expert?
                  {if {== 100 {int {* 100 {$p notes_hit_fraction}}}}
                     {if {== {$pcfg get_difficulty} kDifficultyExpert}

                        ; Instrument check
                        {switch {$pcfg get_track_sym}
                           (drum
                              {achievements submit $pnum ach_flawless_drumming}
                           )
                           (bass
                              ; Bass must up-strum only
                              {if {&& {$p strummed_up} {! {$p strummed_down}} }
                                 {achievements submit $pnum ach_flawless_groove}
                              }
                           )
                           (guitar
                              {achievements submit $pnum ach_flawless_fretwork}
                           )
                           (vocals
                              {achievements submit $pnum ach_flawless_singing}
                           )
                        }
                     }
                  }

                  ; Update HTH stats, achievements
                  {if {&& {gamemode is_hth_arrangement}
                          {gamemode get online_play_required}
                          {gamemode get ranked}}

                     {do ($is_hth_split {gamemode get separate_parts})

                        {switch {beatmatch get_result_for_player $pnum}
                           (kWon
                              {$p_profile update_hth_stats TRUE $is_hth_split}
                           )
                           ; default (ties and losses treated the same for this ach)
                           {$p_profile update_hth_stats FALSE $is_hth_split}
                        }

                        {do ($num_wins {$p_profile get_hth_stats FALSE FALSE})
                           {if {>= $num_wins 20}
                              {achievements submit $pnum ach_score_duel_champ}
                           }
                        }
                        {do ($num_wins {$p_profile get_hth_stats FALSE TRUE})
                           {if {>= $num_wins 20}
                              {achievements submit $pnum ach_tug_of_war_champ}
                           }
                        }
                        {do ($num_wins {$p_profile get_hth_stats TRUE FALSE})
                           {if {>= $num_wins 5}
                              {achievements submit $pnum ach_score_duel_streak}
                           }
                        }
                        {do ($num_wins {$p_profile get_hth_stats TRUE TRUE})
                           {if {>= $num_wins 5}
                              {achievements submit $pnum ach_tug_of_war_streak}
                           }
                        }
                     }
                  }
               } ;;if
            }
         }
      }
   )

   (set_results
      {heading.lbl set_localized {song_mgr song_name {game get_song}}}

      ; set the solo/band result    
      {if {! {gamemode is_hth_arrangement}}
         {score.lbl set_localized {fmt_score {{beatmatch main_performer} score}}}
         {stars.lbl set_localized {{beatmatch main_performer} star_rating}}
      }
      
      #ifdef TOUR_LOGGING
;; DMS : Commented out to correctly precache
;;      #ifdef HX_XBOX
;;       {if {&& {! {gamemode is_hth_arrangement}} {! {gamemode is_solo}}}
;;       #else
       {if {! {gamemode is_hth_arrangement}}
;;       #endif
         {do
         {log_tour "SONG    "
                  {sprintf "finished,%s,%d,%d"
                            {game get_song}
                            {{beatmatch main_performer} score}
                            {players.set size (objects)}
                  }}
         {$log_tour print "SONG     | "}
         }
       } 
      #endif    


      ; display the head-to-head result
      {if {gamemode is_hth_arrangement}

       ;  {rank0.lbl set_localized ""}
        ; {rank1.lbl set_localized ""}

         {do ($slot0 {hth_track_panel band_to_slot 0})
             ($slot1 {hth_track_panel band_to_slot 1})
             ($lbl0  {sprintf "win%d.lbl" $slot0})
             ($lbl1  {sprintf "win%d.lbl" $slot1})
             ($trg0  {sprintf "player%d.trg" $slot0})
             ($trg1  {sprintf "player%d.trg" $slot1})
             ($win_token endgame_winner)

            ;for tug-of-war, indicate how big the win was
            {if {gamemode get separate_parts}
               {do
                  ($max_delta_points {beatmatch max_delta_points})
                  ($score0 {{gamecfg get_player
                     {gamecfg get_player_num_from_slot_num $slot0}} score})
                  ($score1 {{gamecfg get_player
                     {gamecfg get_player_num_from_slot_num $slot1}} score})
                  ($score_diff 
                     {if_else {< $score0 $score1}
                        {- $score1 $score0}
                        ;else
                        {- $score0 $score1}
                     }
                  )

                  {set $win_token
                     {cond
                        ({< $score_diff {/ $max_delta_points 4}} hth_narrow_win)
                        ({< $score_diff {/ $max_delta_points 2}} hth_win)
                        ({< $score_diff $max_delta_points} hth_big_win)
                        (TRUE hth_huge_win)
                     }
                  }                  
               }
            }

            {switch {beatmatch get_result TRUE}
               (kWonTie
                  {$lbl0 set text_token "TIE!"}
                  {$lbl1 set text_token "TIE!"}
                  {$lbl0 set_showing TRUE}
                  {$lbl1 set_showing TRUE}
                  {$trg0 trigger}
                  {$trg1 trigger}
               )
               (kWonBand0
                  {$lbl0 set text_token $win_token}
                  {$lbl0 set_showing TRUE}
                  {$lbl1 set_showing FALSE}
                  {$trg0 trigger}
               )
               (kWonBand1
                  {$lbl1 set text_token $win_token}
                  {$lbl1 set_showing TRUE}
                  {$lbl0 set_showing FALSE}
                  {$trg1 trigger}
               )
            }
         }
      }


      ; set the per-player stats
      {do
         ($selected_awards {array 0}) ;store what's awarded to avoid duplicates
         {foreach_int $slot 0 {players.set size (objects)}
            {do 
               ($pxy {players.set get (objects $slot)})
               ($player {gamecfg get_player_num_from_slot_num $slot})

               {$pxy set_showing TRUE}

               {if_else {!{beatmatch is_active_player $player}}
                  ;slot not active
                  {if_else {|| {gamemode is_hth_arrangement} {gamemode is_solo}}
                     {$pxy set_showing FALSE}
                     ;else - not a solo mode, or head to head
                     {do 
                        {{$pxy find player.grp} set_showing FALSE}
                        {if {$pxy exists no_player.grp}
                           {{$pxy find no_player.grp} set_showing TRUE}
                        }

                        ;; set icons for non-players (only relevant for coop modes)
                        {if {$pxy exists no_instrument.lbl}
                           {{$pxy find no_instrument.lbl} set_localized
                              {missing_slot_to_track_icon $slot}
                           }
                        }
                     }
                  }

                  ;else - slot is active
                  {do ($pcfg {game get_player_config $player})
                     {if {$pxy exists no_player.grp}
                        {{$pxy find no_player.grp} set_showing FALSE}
                     }
                     {{$pxy find player.grp} set_showing TRUE}
                                    
                     ;; gamertag (X360) or character name/controller ID (PS3)
                     {if {$pxy exists player.lbl}
                        {{$pxy find player.lbl} set_localized 
                           {$pcfg intro_name}
                        }
                     }

                     ;; icon
                     {{$pxy find instrument.lbl} set_localized
                        {{$pcfg get_char} track_icon {$pcfg get_track_sym}}
                     }
                     ;; H2H-only: score and single song data
                     {if {|| {gamemode is_hth_arrangement} {gamemode is_solo}}
                        {do
                           #ifdef TOUR_LOGGING
                           {log_tour "SONG    "
                               {sprintf "finished,%s,%d,%d"
                               {game get_song}
                               {{$pcfg player} score}
                               1
                           }}
                          {$log_tour print "SONG     | "}
                           #endif    

                           {if {gamemode is_hth_arrangement}

                              {{sprintf "score%i.lbl" $slot} set_localized
                                 {if_else {gamemode separate_parts}
                                    ""
                                    {fmt_score {{$pcfg player} score}}
                                 }
                              }
                           }
                        }
                     }
                     ;; notes hit
                     {if {$pxy exists noteshit.lbl}
                        {{$pxy find noteshit.lbl} set_localized
                           {sprint 
                              {int {* 100 {{$pcfg player} notes_hit_fraction}}}
                              "%"
                           }
                        }
                     }
                     
                     ;; streak
                     {if {$pxy exists streak.lbl}
                        {{$pxy find streak.lbl} set_localized
                           {if_else {== {{$pcfg player} instrument} vocals}
                              {sprintf 
                                 "%d Phrase Streak"
                                 {{$pcfg player} longest_streak}
                              }
                              {sprintf    
                                 "%d Note Streak"
                                 {{$pcfg player} longest_streak}
                              }
                           }
                        }
                     }

                  #ifdef TOUR_LOGGING
                     {$log_tour print
                                   {sprintf " %s:%s:%s:%d:%d,"
                                              {$pcfg get_track_sym}
                                              {{$pcfg player} player_name}
                                              {$pcfg get_difficulty_sym}
                                              {{$pcfg player} longest_streak}
                                              {int {* 100 {{$pcfg player}
                                                           notes_hit_fraction}}}}}
                                                           
                     {if {gamemode is_hth_arrangement}
                        {$log_tour print "\n"}
                     }
                  #endif
                  
                     {if {$pxy exists difficulty.lbl}
                        {{$pxy find difficulty.lbl} set text_token
                           {$pcfg get_difficulty_sym}
                        }
                     }

                     {if {$pxy exists award.lbl}
                        {if_else {||
                                    {gamemode is_hth_arrangement}
                                    {gamemode is_solo}
                                 }
                           {{$pxy find award.lbl} set_showing FALSE}
                           ;else
                           {do
                              ($some_award {choose_award $player $selected_awards})
                              {push_back $selected_awards $some_award}
                              {$pcfg set previous_award $some_award}
                              {{$pxy find award.lbl} set_localized {localize_token $some_award}}
                              {{$pxy find award.lbl} set_showing TRUE}
                           }
                        }
                     }
                  };do
               };if_else
            };do
         };foreach
      };do
      
      #ifdef TOUR_LOGGING
         {$log_tour print "\n"}
      #endif
   )
)

{new UIPanel qp_endgame_panel
	
	;#ifdef HX_XBOX
	;   (file "qp_endgame.milo")
	;#else
		(file "qp_endgame_og.milo")
	;#endif
	
   (focus continue.btn)
   ENDGAME_PANEL_HANDLERS
   
   (enter
      {$this set_results}   
      {$this submit_achievements}

;Hooked this back up  MTC
		{platform_mgr set_notify_ui_location kOSNotifyBottomCenter}
      ; move the proxied player info blocks to the middle for solo modes
      {do
         ($frame {if_else {gamemode get is_solo} 1 0})
			{player0.tnm set_frame $frame}
         {player01.tnm set_frame $frame}
         {player02.tnm set_frame $frame}
         {player03.tnm set_frame $frame}
     }
   )

   (exit
      {platform_mgr set_notify_ui_location kOSNotifyTopRight}
   )
}

;#ifndef HX_XBOX	;HWR - Keeping our old version for right now, might break
{new UIPanel qp_hth_endgame_panel
   (file "qp_hth_endgame_og.milo")
;#else
;{new H2HEndGamePanel qp_hth_endgame_panel
;   (file {if_else {gamemode get separate_parts}
;   #ifdef HX_XBOX
;         "qp_hth_tow_endgame.milo"
;         "qp_hth_endgame.milo"
;   #else
;         "qp_hth_tow_endgame_og.milo"
;         "qp_hth_endgame_og.milo"
;   #endif
;         }
;   )
;#endif
   (focus continue.btn)
   ENDGAME_PANEL_HANDLERS
   
   (enter
      {platform_mgr set_notify_ui_location kOSNotifyBottomCenter}
      {$this set_results}
      {$this submit_achievements}
      
      {if {gamemode get ranked} ; these will get reset on the metaloading screen flow
         ; stay on the results screen if the other guy leaves
         {band_ui_sink set block_mode kBlockRankedResults}
         ; move to meta_loading when we're ready
         {band_ui_sink set_net_sync FALSE}
      }
	  
	  {helpbar set_limit_to_player_num -1}
   )
   
   (update_true_skill ($skill0 $skill1)
  ;    {rank0.lbl set_localized $skill0}
   ;   {rank1.lbl set_localized $skill1}
   )

   (exit
      {platform_mgr set_notify_ui_location kOSNotifyTopRight}
   )
      
}

#define QP_ENDGAME_SCREEN_HANDLERS
(  
   ;show finishsong prompt for local to leader, and for xbox show details prompt
   ;if we're in a multiplayer online game of some kind
;   #ifdef HX_XBOX
;   (helpbar
;      {if_else {|| {is_leader_local} {gamemode get ranked}}
;         {if_else {&&   {gamemode get online_play_required}
;                        {> {session num_players} 0}
;                  }
;            ;show the details icon
;            ('' helpbar_finishsong helpbar_details)
;            ;else don't show the details icon
;            ('' helpbar_finishsong)
;         }
;         ;else
;         {if_else {&&   {gamemode get online_play_required}
;                        {> {session num_players} 0}
;                  }
;            ;show the details icon
;            (helpbar_back '' helpbar_details)
;            ;else don't show the details icon
;            (helpbar_back)
;         }
;      }
;   )
;   
;   #else ;PS3
   (helpbar
      {if_else {|| {is_leader_local} {gamemode get ranked}}
         ('' helpbar_finishsong)
         ;else
         (helpbar_back '')
      }
   )
;   #endif


   (helpbar_waiting 
      {if_else {|| {is_leader_local} {gamemode get ranked}} 
         0 
         shell_waiting_for_leader
      }
   )
   
   (BUTTON_DOWN_MSG
      {switch $button
#ifdef HX_XBOX
         (kPad_R1
            {if  {! {gamemode get ranked}} ; ranked game net_sync is already false
               {band_ui_sink set_net_sync FALSE}
            }
            {if {gamemode get online_play_required}
               ; We goto a screen with the same panels so we don't exceed push depth 1
               {ui goto_screen [more_details_screen]} 
            }
         )
#endif
         ; default
         kDataUnhandled
      }
   )
   
   (SELECT_START_MSG
		; REA - High score interception
		{if_else {! {gamemode is_hth_arrangement}}
			{ui goto_screen highscores_screen}
			; else
			{ui goto_screen qp_complete_screen}
		}
      kDataUnhandled
   )
)

{new UIScreen qp_endgame_screen
   (panels qp_endgame_panel helpbar)
   (focus qp_endgame_panel)
   QP_ENDGAME_SCREEN_HANDLERS
   
   (more_details_screen qp_coop_details_endgame_screen)
   (enter
		{helpbar set_limit_to_player_num -1}
	)
}

{new UIScreen qp_hth_endgame_screen
   (panels qp_hth_endgame_panel helpbar)
   (focus qp_hth_endgame_panel)
   QP_ENDGAME_SCREEN_HANDLERS
   
   (more_details_screen qp_hth_details_endgame_screen)
    (enter
		{helpbar set_limit_to_player_num -1}
	)
}

;;;The versions of the endgame screens that include the more_details panel
{new UIScreen qp_coop_details_endgame_screen
   (panels qp_endgame_panel more_details_panel helpbar)
   (focus more_details_panel)
   
   (leave
      {ui goto_screen qp_endgame_screen}
   )
   (exit
      {if  {! {gamemode get ranked}}
         {band_ui_sink set_net_sync TRUE}
      }
   )
}

{new UIScreen qp_hth_details_endgame_screen
   (panels qp_hth_endgame_panel more_details_panel helpbar)
   (focus more_details_panel)
   
   (leave
      {ui goto_screen qp_hth_endgame_screen}
   )
   (exit
      {if  {! {gamemode get ranked}}
         {band_ui_sink set_net_sync TRUE}
      }
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; song complete
{new UIPanel qp_complete_panel
;#ifdef HX_XBOX
;   (file complete.milo)
;#else
   (file complete_og.milo)
;#endif
   
   LIMIT_TO_LEADER_SESSION
 
   (enter
      {platform_mgr set_notify_ui_location kOSNotifyBottomCenter}
      {$this set_focus comp_selsong.btn}
      {session add_sink $this remote_player_left_msg}
      {$this set_up_buttons}
   )

   (exit
      {platform_mgr set_notify_ui_location kOSNotifyTopRight}
      {session remove_sink $this remote_player_left_msg}
   )

   (set_up_buttons
      ; prohibit if there aren't enough players for this mode
      {if {< {session num_players} {gamemode get min_players}}
         {$this disable comp_restart.btn}
         {$this disable comp_selsong.btn}
         {$this set_focus comp_quit.btn}
      }
   )

   (REMOTE_PLAYER_LEFT_MSG
      {$this set_up_buttons}
   )

   (SELECT_MSG
      {switch $component
         (comp_restart.btn
            ; TODO need to autosave here?  hopefully not
            {session send_to_all (game_restart) kNetReliable}
            {game_restart}
         )
         (comp_selsong.btn
            {ui goto_screen meta_loading_continue_screen}
         )
         (comp_quit.btn
            {band_ui_sink set_net_sync FALSE}
            {ui goto_screen meta_loading_main_screen}
         )
      }
   )
}

{new UIScreen qp_complete_screen
   (panels qp_complete_panel helpbar)
   (focus qp_complete_panel)
   (helpbar 
      {if_else {is_leader_local}
		 ('' helpbar_select)
         (helpbar_leave_session '')
	  }
   )
   (enter
	 {helpbar set_limit_to_player_num -1}
   
   )
   HELPBAR_WAITING_FOR_LEADER
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ranked match complete
{new UIPanel complete_ranked_panel
;#ifdef HX_XBOX
;   (file complete_ranked.milo)
;#else
   (file complete_ranked_og.milo)
;#endif
   
   (enter
      {platform_mgr set_notify_ui_location kOSNotifyBottomCenter}
      {$this set_focus comp_new_match.btn}
   )

   (exit
      {platform_mgr set_notify_ui_location kOSNotifyTopRight}
   )
  

   (SELECT_MSG
      {switch $component
         (comp_new_match.btn
            {ui goto_screen meta_loading_matchmaking_screen}
         )
         (comp_quit.btn
            {ui goto_screen meta_loading_main_screen}
         )
      }
   )
}

{new UIScreen qp_complete_ranked_screen
   (panels complete_ranked_panel helpbar)
   (focus complete_ranked_panel)
   (helpbar  ('' helpbar_select))
}

#ifndef HX_XBOX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; the destination screen for all endgame autosave flows, makes sure everyone
; has completed the flow before going to the next screen
{new UIScreen endgame_autosave_start_screen

   (TRANSITION_COMPLETE_MSG
      {do
         ($ui_screen_name qp_complete_screen)
         {if {tour performer}
            {if_else {{tour performer} is_winning}
               {set $ui_screen_name meta_loading_tour_win_screen}
               ; else
               {set $ui_screen_name meta_loading_continue_screen}
            }
         }
         {ui goto_screen $ui_screen_name}
      }
   )
}

#endif
