;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Leaderboards

{new UIPanel leaderboards_panel
   (file "leaderboards.milo")
   (focus leaderboard.lst)
   LIMIT_TO_SESSION_IF_LEADER
   (read_done TRUE)
   
   (login_status kDesirable)

   (enter
      {leaderboards create}
      {leaderboards set_page_size {leaderboard.lst num_display}}
      {$this update_warning ""}
      {leaderboards enumerate}
   )
   
   (update_leaderboard
      {leaderboard.lst set_provider {leaderboards get_provider}}

      {do ($user_pos {leaderboards get_user_pos})
         {if {> $user_pos 0}
            {leaderboard.lst set_selected $user_pos}
         }
      }
   )

   (update_warning ($msg)
      {warning.lbl set_localized $msg}
   )
   
   (exit
      {band_ui_sink hide_network_busy_icon}
      {leaderboards cancel_enumerate}
      {leaderboard.lst set_showing FALSE}
      {leaderboard.lst set_provider leaderboard.lst}
      {leaderboards destroy}
   )
   
   (BUTTON_DOWN_MSG
       {cond
        ({&& {== $button kPad_R1} {leaderboards enum_complete}}
            {leaderboards rotate_filter}  
            {leaderboards enumerate}
        )
        ( {&& {== $button kPad_DDown} 
              {== {leaderboard.lst selected_pos} {- {leaderboard.lst num_display} 1}}}
              {leaderboards request_new_page TRUE}
        )
        ( {&& {== $button kPad_DUp} {== {leaderboard.lst selected_pos} 0}}
              {leaderboards request_new_page FALSE}
        )
        (TRUE
           kDataUnhandled
        )
      }
  )

   (SELECT_START_MSG
      {switch $component
         (leaderboard.lst
            {leaderboards select_row {leaderboard.lst selected_pos} $player_num}
         )  
      }
   )
   
   ; Poll checks to see if we're currently enumerating
   (poll
      {if {&& [read_done] {! {leaderboards enum_complete}}}
         {$this show_async_read}
      }
      {if {&& {! [read_done]} {leaderboards enum_complete}}
         {$this hide_async_read}
         {leaderboard.lst set_dirty}
      }
   )

   ; show looping anim to indicate we're loading in the background
   (show_async_read
      {set [read_done] FALSE}
      {band_ui_sink show_network_busy_icon}
   )

   (hide_async_read
      {set [read_done] TRUE}
      {band_ui_sink hide_network_busy_icon}
   )
}

{new UIPanel leaderboards_lower3rd_panel
#ifdef HX_XBOX
   (file "leaderboards_lower3rd.milo")
#else
   (file "leaderboards_lower3rd_og.milo")
#endif
   
   (enter
      {$this update_titles}
      {$this update_filter {leaderboards get_filter}}
   )
   
   (update_titles
      ;; clear them out
      {event.lbl set_localized ""}
      {song.lbl set_localized ""}
      {type.lbl set_localized ""}

      {switch {leaderboards get_type}
         (kPlayerSong
            {if_else {== {leaderboards get_song_sym} career}
               {song.lbl set_localized {localize career}}
               {song.lbl set_localized {song_mgr song_name {leaderboards get_song_sym}}}
            }
            {event.lbl set_localized {localize player_song}}
            {type.lbl set_localized {leaderboards get_track_type_char}}
         )
         (kHTHProRanked
            {event.lbl set_localized {localize hth_pro}}
            {type.lbl set_localized {leaderboards get_track_type_char}}
         )
         (kHTHRanked
            {event.lbl set_localized {localize hth_normal}}
            {type.lbl set_localized {leaderboards get_track_type_char}}
         )
         (kBandSong
            {if_else {== {leaderboards get_song_sym} career}
               {song.lbl set_localized {localize career}}
               {song.lbl set_localized {song_mgr song_name {leaderboards get_song_sym}}}
            }
            {event.lbl set_localized {localize band_song}}
         )
         (kBandFans
            {event.lbl set_localized {localize band_fans}}
         )
      }
   )
   
   (update_filter ($type)
      {switch $type
         (kByGamer   {filter_title.lbl set_localized {localize filter_gamer}}) 
         (kByGamerRank   
                     {filter_title.lbl set_localized {localize filter_gamer}}) 
         (kByRank    {filter_title.lbl set_localized {localize filter_rank}})
         (kByFriends {filter_title.lbl set_localized {localize filter_friends}})
      }
   )
}

{new UIScreen leaderboards_screen
   (panels meta movie_panel leaderboards_panel leaderboards_lower3rd_panel helpbar)
   (focus leaderboards_panel)
   (helpbar 
      {switch {leaderboards get_type}
         (kPlayerSong (helpbar_back helpbar_viewgamercard helpbar_changefilter))
         (kHTHProRanked (helpbar_back helpbar_viewgamercard helpbar_changefilter))
         (kHTHRanked (helpbar_back helpbar_viewgamercard helpbar_changefilter))
         (kBandSong (helpbar_back helpbar_viewband helpbar_changefilter))
         (kBandFans (helpbar_back helpbar_viewband helpbar_changefilter))
      }
   )
   (back 
      {switch {leaderboards get_type}
         (kPlayerSong leaderboards_selsong_screen)
         (kBandSong leaderboards_selsong_screen)
         (kHTHProRanked leaderboards_seltrack_screen)
         (kHTHRanked leaderboards_seltrack_screen)
         ; default
         {gamemode get community_screen}
      }
   )
   (update_filter ($type)
      {leaderboards_lower3rd_panel update_filter $type} 
   )
   
   (BUTTON_DOWN_MSG
      {do ($list {leaderboards_panel find leaderboard.lst})
         {if_else
            {&&
               {$list is_scrolling}
               {||
                  {== $button kPad_DDown}
                  {== $button kPad_DUp}
               }
            }
            ; then
            TRUE ; handled
            ; else
            kDataUnhandled
         }
      }
   )
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Leaderboards Band Profile

{new UIScreen leaderboards_band_profile_screen
   (panels remote_band_profile_panel)
   (focus remote_band_profile_panel)
   LIMIT_TO_SESSION_IF_LEADER
   (BUTTON_DOWN_MSG
      {if {== $button kPad_Tri}
         {ui pop_screen}
      }
   )
}

#ifdef HX_XBOX ; REA - NG only, its overriden in highscore.dta on OG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Leaderboards Select Track (choose from all 4 tracktypes)
{new UIPanel leaderboards_seltrack_panel
   (file "leaderboards_seltrack.milo")
   (focus guitar.btn)
   (login_status kDesirable)
   LIMIT_TO_SESSION_IF_LEADER

   (SELECT_MSG
      {leaderboards set_track_type 
         {switch $component
            (guitar.btn kTrackGuitar)
            (bass.btn   kTrackBass)
            (drums.btn  kTrackDrum)
            (vocals.btn kTrackVocals)
         }
      }
     
      {if_else {== {leaderboards get_type} kPlayerSong}
         {do
            {leaderboards set_song_sym ''}
            {ui goto_screen leaderboards_selsong_screen}
         }
         {ui goto_screen leaderboards_screen}
      }
   )
}

{new UIScreen leaderboards_seltrack_screen
   (panels meta movie_panel leaderboards_seltrack_panel helpbar)
   (focus leaderboards_seltrack_panel)
   (helpbar (back select))
   (back {gamemode get community_screen})
   LIMIT_TO_SESSION_IF_LEADER
}
#endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Community (leaderboards + other crap)

{new SessionPanel community_panel
#ifdef HX_PS3
   (file "community_ps3.milo")
#else
   (file "community_ps3.milo")
#endif
   (focus getcode.btn)
   (motd_done FALSE)
   (motd_message "")
   (webcode_done FALSE)
   (webcode "")
   (banner_message "")
   
   (load
      ; set focus to ensure it's correct (might enter from different places)
      {main_panel set mode_focus community.btn}
   )
   
   (set_motd ($message)
      {set [motd_message] $message}
      {set [banner_message] [motd_message]}
      {set [motd_done] TRUE}
      {if {$this is_up}
         {$this display_motd}
      }
   )

   (display_motd
      {if [motd_done]
         {motd.lbl set_localized [banner_message]}
         {motd.lbl set_showing TRUE}
      }
   )

   (set_webcode ($message)
#ifdef HX_PS3
      {set [webcode] $message}
      {set [webcode_done] TRUE}
      {$this update_button_status}
#endif
   )

   (enter
      {$this display_motd}
#ifdef HX_XBOX
      {$this disable managefriends.btn}   
      {$this disable checkinvites.btn}
      {managefriends.btn set_showing FALSE}
      {checkinvites.btn set_showing FALSE}
		{leaderboards clear_type}	
      {server add_sink $this server_status_changed}		
      {platform_mgr add_sink $this connection_status_changed}
#else
      {$this enable managefriends.btn}   
      {$this enable checkinvites.btn}
      {managefriends.btn set_showing TRUE}
      {checkinvites.btn set_showing TRUE}
#endif   
      {session clear}

      {$this update_button_status}
   )

#ifdef HX_XBOX
   (exit
      {platform_mgr remove_sink $this connection_status_changed}
      {server remove_sink $this server_status_changed}
      {set [banner_message] [motd_message]}
   )
#endif
   
   (connection_status_changed ($connected)
      {$this update_button_status}
   )
   
   (server_status_changed ($connected)
      {$this update_button_status}
   )
   
   (update_button_status
#ifdef HX_PS3
      {if_else {platform_mgr is_connected}
         {$this enable managefriends.btn}
         {$this disable managefriends.btn}
      }
      {if_else {server is_connected}
         {do
            {if_else [webcode_done]
               {$this enable getcode.btn}
               {$this disable getcode.btn}
            }
            {$this enable checkinvites.btn}   
         }
         {do
            {$this disable getcode.btn}
            {$this disable checkinvites.btn}
         }
      }
#endif
#ifdef HX_XBOX
      {if_else {server is_connected}
         {$this enable leaderboards.btn}
         {$this disable leaderboards.btn}
      }
#endif
   )
  
   (login_status kDesirable)
   
   (SELECT_START_MSG
      {switch $component
         (checkinvites.btn
            {platform_mgr check_mailbox}
         )
         (managefriends.btn
            {platform_mgr show_friends -1}
         )
         (specialfeatures.btn
            {ui goto_screen community_specialfeatures_screen}
         )
#ifdef HX_PS3
         (getcode.btn
            {if [webcode_done]
               {set [banner_message] {sprintf {localize website_code_msg} [webcode]}}
               {$this display_motd}
            }
         )
#endif
         (leaderboards.btn
#ifdef HX_XBOX
            {gamemode set_mode community_leaderboards $player_num}
            {$this wait_for_session_ready}
            {session_mgr add_local_player
               $player_num
               {gamecfg
                  get_controller_type_from_controller
                  $player_num
               }
            }
#else ; Go straight to type select, for OG high scores
            {ui goto_screen highscore_seltrack_screen}
#endif
         )
      }
   )
   
   (session_ready
      {gamecfg auto_assign_missing_slots}
      {goto_after_network_connect main_leaderboard_screen FALSE}
   )
}

{new UIScreen main_community_screen
   (panels meta movie_panel main_lower3rd_panel main_panel community_panel fx)
   (focus community_panel)
   (back main_screen)
   MAIN_SCREEN_TRANSITION_HANDLER
}


;; Stuff for the main leaderboard menu
#define COMMON_LEADERBOARD_PANEL
(
   (focus solo.btn)
   LIMIT_TO_SESSION_IF_LEADER
   
   (enter
      {leaderboards clear_type}
   )
   
   (login_status kDesirable)
   
   (SELECT_MSG
      {leaderboards set_player_num $player_num}
      {switch $component
         (solo.btn
            {leaderboards set_type kPlayerSong}
            {ui goto_screen leaderboards_seltrack_screen}
         )
         (hth_pro_ranked.btn
            {leaderboards set_type kHTHProRanked}
            {ui goto_screen leaderboards_seltrack_screen}
         )
         (hth_ranked.btn
            {leaderboards set_type kHTHRanked}
            {ui goto_screen leaderboards_seltrack_screen}
         )
         (band_song.btn
            {leaderboards set_type kBandSong}
            {leaderboards set_band_from_tour}
            {ui goto_screen leaderboards_selsong_screen}
         )
         (band_fans.btn
            {leaderboards set_type kBandFans}
            {leaderboards set_band_from_tour}
            {ui goto_screen leaderboards_screen}
         )
      }
   )
)

;;
;;
{new UIPanel community_leaderboard_panel
#ifdef HX_PS3
   (file "leaderboard_menu_ps3.milo")
#else
   (file "leaderboard_menu_og.milo")   ;MTC
#endif
   COMMON_LEADERBOARD_PANEL
}

{new UIScreen community_leaderboard_screen
   (panels meta movie_panel community_leaderboard_panel helpbar)
   (focus community_leaderboard_panel)
   (back main_community_screen)
   (helpbar (back select))
}


;;
;; Leaderboard menu from the main menu
;;
{new UIPanel main_leaderboard_panel
#ifdef HX_PS3
   (file "main_leaderboard_ps3.milo")
#else
   (file "main_leaderboard_og.milo")  ;MTC
#endif
   COMMON_LEADERBOARD_PANEL
}

{new UIScreen main_leaderboard_screen
   (panels meta movie_panel main_panel main_leaderboard_panel helpbar)
   (focus main_leaderboard_panel)
   (back main_community_screen)
   (helpbar (back select))
}


{new UIPanel community_specialfeatures_panel
#ifdef HX_XBOX
   (file "community_specialfeatures.milo")
#else
   (file "community_specialfeatures_og.milo")
#endif
   (focus high_scores.btn)

#ifdef HX_XBOX
   (enter
      {leaderboards clear_type}
   )
#endif
  
   (SELECT_MSG
	
      {switch $component
			(high_scores.btn
			 
            {ui goto_screen highscore_seltrack_screen}
			)
         (credits.btn
            {ui goto_screen featurette_goto_credits_screen}
         )
         (featurette_0.btn
            {featurette_panel set featurette_num 0}
            {ui goto_screen meta_loading_featurette_history_screen}
         )
         (featurette_1.btn
            {featurette_panel set featurette_num 1}
            {ui goto_screen meta_loading_featurette_music_screen}
         )
         (featurette_2.btn
            {featurette_panel set featurette_num 2}
            {ui goto_screen meta_loading_featurette_peripherals_screen}
         )
         (featurette_3.btn
            {featurette_panel set featurette_num 3}
            {ui goto_screen meta_loading_featurette_style_screen}
         )
      }
   )
}

{new UIScreen community_specialfeatures_screen
   (panels meta movie_panel main_lower3rd_panel main_panel 
      community_specialfeatures_panel fx)
   (focus community_specialfeatures_panel)
   (back main_screen)
  
   MAIN_SCREEN_TRANSITION_HANDLER
}


;;
;;Transition screens to and from the featurettes
;;
{new UIScreen featurette_goto_screen
   (panels)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen featurette_screen}   
   )
}

{new UIScreen featurette_to_community_screen
   (panels meta_loading)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen community_specialfeatures_screen}   
   )
}

;;featurette screen
{new MoviePanel featurette_panel
   (featurette_num -1)
   (preload FALSE) ; stream it
   (audio TRUE)
   (loop FALSE)
   (update_presence TRUE) ; set presence to "Watching Movie"
   (videos {sprintf "featurette_%d" {featurette_panel get featurette_num}})

   ; callback when movie finishes      
   (movie_done
      {ui goto_screen featurette_to_community_screen}  
   )
   
   (BUTTON_DOWN_MSG
      {if {|| {== $button kPad_Start}
              {== $button kPad_X}}
         {ui goto_screen featurette_to_community_screen}
      }
   )
}

{new UIScreen featurette_screen
   (panels featurette_panel)
   (focus featurette_panel)
}


;;
;;stuff for credits featurette and screen
;;

;go to the credits featurette
{new UIScreen featurette_goto_credits_screen
   (panels meta_loading)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen credits_movie_screen}
   )
}

;go to the rolling credits
{new UIScreen goto_credits_screen
   (panels)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen credits_screen}
   )
}

#ifdef HX_XBOX
;;creadits movie screen
{new MoviePanel credits_movie_panel
   (preload FALSE) ; stream it
   (audio TRUE)
   (loop FALSE)
   (update_presence TRUE) ; set presence to "Watching Movie"
   (videos win_credits)

   ; callback when movie finishes      
   (movie_done
      {ui goto_screen goto_credits_screen}
   )
   
   (BUTTON_DOWN_MSG
      {if {|| {== $button kPad_Start}
              {== $button kPad_X}}
         {ui goto_screen featurette_to_community_screen}
      }
   )
}
#else

{new UIPanel credits_movie_panel
   	(file "world/intro_video.milo")
	(moviefinished FALSE)
	(enter
	
		#ifdef HX_EE
			; Show the movie in the proper aspect ratio for the screen shape  
	        {16x9.mesh set_showing FALSE}
	        {4x3.mesh set_showing FALSE}
	        {16x9zoom.mesh set_showing FALSE}
	        {4x3std.mesh set_showing TRUE}
		
			{intro_video.mov set movie_file {sprintf "videos/rb_endcredits"}};
			{intro_video.mov animate}
			;{film_grain.mnm animate (loop 0 101)}
			{set $moviefinished FALSE}
		#endif
	)
	
	#ifdef HX_EE
	 (poll
		{if {&& {! $moviefinished}
				   {intro_video.mov is_movie_done} }
				   
			{do
				 {set $moviefinished TRUE}
				 {ui goto_screen credits_to_pi_movie_screen}
			 }
		}
	)
  #endif
   
   (BUTTON_DOWN_MSG
      {if {&& {|| {== $button kPad_Start}
              {== $button kPad_X}} {! $moviefinished} }
		 {do
		 {set $moviefinished TRUE}
			{ui goto_screen credits_to_pi_movie_screen}
		 }
      }
   )
}

#endif


{new UIScreen credits_movie_screen
   (panels meta credits_movie_panel);; helpbar)
   (focus credits_movie_panel)
   ;;(helpbar ('' helpbar_continue))
   
    (enter
		{{meta meta_music} stop}
	)
	(exit
		;;{{meta meta_music} start}
	)
	
}

{new UIPanel pi_credits_movie_panel
   	(file "world/intro_video.milo")
	(moviefinished FALSE)
	(enter
	
		#ifdef HX_EE
			; Show the movie in the proper aspect ratio for the screen shape  
	        {16x9.mesh set_showing FALSE}
	        {4x3.mesh set_showing FALSE}
	        {16x9zoom.mesh set_showing FALSE}
	        {4x3std.mesh set_showing TRUE}
		
			{intro_video.mov set movie_file {sprintf "videos/pi_endcredits"}};
			{intro_video.mov animate}
			;{film_grain.mnm animate (loop 0 101)}
			{set $moviefinished FALSE}
		#endif
		
		{{meta meta_music} stop}
	
	)
	
	#ifdef HX_EE
	 (poll
		{if {&& {! $moviefinished}
				   {intro_video.mov is_movie_done} }
				   
			{do
				 {set $moviefinished TRUE}
				 {ui goto_screen pi_to_credits_screen}
			 }
		}
	)
  #endif
   
   (BUTTON_DOWN_MSG
      {if {&& {|| {== $button kPad_Start}
              {== $button kPad_X}} {! $moviefinished} }
		 {do
		 {set $moviefinished TRUE}
			{ui goto_screen pi_to_credits_screen}
		 }
      }
   )
}

{new UIScreen pi_credits_movie_screen
   (panels meta pi_credits_movie_panel);; helpbar)
   (focus pi_credits_movie_panel)
   ;;(helpbar ('' helpbar_continue))
   
  
	
}
{new UIScreen credits_to_pi_movie_screen
  (TRANSITION_COMPLETE_MSG
	{ui goto_screen pi_credits_movie_screen}
  )
	
}





;;

{new UIScreen tour_hub_community_screen
   (panels meta practice_space_panel community_leaderboard_panel 
      tour_band_lower3rd_panel helpbar
   )
   (focus community_leaderboard_panel)
   LIMIT_TO_SESSION_IF_LEADER
   (back 
      {if_else {gamemode is_solo}
         tour_solo_hub_screen
         tour_band_hub_screen
      }
   )
   (helpbar (back select))
   (enter
      {practice_space_panel select_cam "leaderboards"}
   )
}


#ifndef HX_XBOX

;go to the History featurette
{new UIScreen featurette_goto_history_screen
   (panels meta_loading)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen history_movie_screen}
   )
}

{new UIPanel history_movie_panel
   	(file "world/intro_video.milo")
	(moviefinished FALSE)
	(enter
		#ifdef HX_EE
			; Show the movie in the proper aspect ratio for the screen shape
			{if_else {== {rnd aspect} kRegularAspect}
				{do
                 	; 4:3 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing FALSE}
                 	{4x3std.mesh set_showing TRUE}
              	}
              	{do
                 	; 16:9 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing TRUE}
                 	{4x3std.mesh set_showing FALSE}
              	}
           	}
			{intro_video.mov set movie_file {sprintf "videos/rb_harmonix"}};
			{intro_video.mov animate}
			;{film_grain.mnm animate (loop 0 101)}
			{set $moviefinished FALSE}
		#endif
	)
	
	#ifdef HX_EE
	 (poll
		{if {&& {! $moviefinished}
				   {intro_video.mov is_movie_done} }
			{do
				 {set $moviefinished TRUE}
				 {ui goto_screen featurette_to_community_screen}
			 }
		}
	)
  #endif
   
   (BUTTON_DOWN_MSG
     {if {&& {|| {== $button kPad_Start}
              {== $button kPad_X}} {! $moviefinished} }
			  
		 {set $moviefinished TRUE}
         {ui goto_screen featurette_to_community_screen}
      }
   )
}



{new UIScreen history_movie_screen
   (panels meta history_movie_panel helpbar)
   (focus history_movie_panel)
   (helpbar ('' helpbar_continue))
   
   (enter
		{{meta meta_music} stop}
	)
	(exit
		{{meta meta_music} start}
	)
}

;go to the Music featurette
{new UIScreen featurette_goto_music_screen
   (panels meta_loading)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen music_movie_screen}
   )
}

{new UIPanel music_movie_panel
   	(file "world/intro_video.milo")
	(moviefinished FALSE)
	(enter
		#ifdef HX_EE
			; Show the movie in the proper aspect ratio for the screen shape
			{if_else {== {rnd aspect} kRegularAspect}
				{do
                 	; 4:3 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing FALSE}
                 	{4x3std.mesh set_showing TRUE}
              	}
              	{do
                 	; 16:9 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing TRUE}
                 	{4x3std.mesh set_showing FALSE}
              	}
           	}
			{intro_video.mov set movie_file {sprintf "videos/rb_music"}};
			{intro_video.mov animate}
			;{film_grain.mnm animate (loop 0 101)}
			{set $moviefinished FALSE}
		#endif
	)
	
	#ifdef HX_EE
	 (poll
		{if {&& {! $moviefinished}
				   {intro_video.mov is_movie_done} }
			{do
				 {set $moviefinished TRUE}
				 {ui goto_screen featurette_to_community_screen}
			 }
		}
	)
  #endif
   
   (BUTTON_DOWN_MSG
       {if {&& {|| {== $button kPad_Start}
              {== $button kPad_X}} {! $moviefinished} }
			  {set $moviefinished TRUE}
         {ui goto_screen featurette_to_community_screen}
      }
   )
}



{new UIScreen music_movie_screen
   (panels meta music_movie_panel helpbar)
   (focus music_movie_panel)
   (helpbar ('' helpbar_continue))
   
   (enter
		{{meta meta_music} stop}
	)
	(exit
		{{meta meta_music} start}
	)
}


;go to the peripherals featurette
{new UIScreen featurette_goto_peripherals_screen
   (panels meta_loading)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen peripherals_movie_screen}
   )
}

{new UIPanel peripherals_movie_panel
   	(file "world/intro_video.milo")
	(moviefinished FALSE)
	(enter
		#ifdef HX_EE
		; Show the movie in the proper aspect ratio for the screen shape
			{if_else {== {rnd aspect} kRegularAspect}
				{do
                 	; 4:3 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing FALSE}
                 	{4x3std.mesh set_showing TRUE}
              	}
              	{do
                 	; 16:9 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing TRUE}
                 	{4x3std.mesh set_showing FALSE}
              	}
           	}
			{intro_video.mov set movie_file {sprintf "videos/rb_peripherals"}};
			{intro_video.mov animate}
			;{film_grain.mnm animate (loop 0 101)}
			{set $moviefinished FALSE}
		#endif
	)
	
	#ifdef HX_EE
	 (poll
		{if {&& {! $moviefinished}
				   {intro_video.mov is_movie_done} }
			{do
				 {set $moviefinished TRUE}
				 {ui goto_screen featurette_to_community_screen}
			 }
		}
	)
  #endif
   
   (BUTTON_DOWN_MSG
      {if {&& {|| {== $button kPad_Start}
              {== $button kPad_X}} {! $moviefinished} }
			  {set $moviefinished TRUE}
         {ui goto_screen featurette_to_community_screen}
      }
   )
}



{new UIScreen peripherals_movie_screen
   (panels meta peripherals_movie_panel helpbar)
   (focus peripherals_movie_panel)
   (helpbar ('' helpbar_continue))
   
   (enter
		{{meta meta_music} stop}
	)
	(exit
		{{meta meta_music} start}
	)
}




;go to the peripherals featurette
{new UIScreen featurette_goto_style_screen
   (panels meta_loading)
   (TRANSITION_COMPLETE_MSG
      {ui goto_screen style_movie_screen}
   )
}

{new UIPanel style_movie_panel
   	(file "world/intro_video.milo")
	(moviefinished FALSE)
	(enter
		#ifdef HX_EE
			; Show the movie in the proper aspect ratio for the screen shape
			{if_else {== {rnd aspect} kRegularAspect}
				{do
                 	; 4:3 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing FALSE}
                 	{4x3std.mesh set_showing TRUE}
              	}
              	{do
                 	; 16:9 Mode 
                 	{16x9.mesh set_showing FALSE}
                 	{4x3.mesh set_showing FALSE}
                 	{16x9zoom.mesh set_showing TRUE}
                 	{4x3std.mesh set_showing FALSE}
              	}
           	}
			{intro_video.mov set movie_file {sprintf "videos/rb_style"}};
			{intro_video.mov animate}
			;{film_grain.mnm animate (loop 0 101)}
			{set $moviefinished FALSE}
		#endif
	)
	
	#ifdef HX_EE
	 (poll
		{if {&& {! $moviefinished}
				   {intro_video.mov is_movie_done} }
			{do
				 {set $moviefinished TRUE}
				 {ui goto_screen featurette_to_community_screen}
			 }
		}
	)
  #endif
   
   (BUTTON_DOWN_MSG
      {if {&& {|| {== $button kPad_Start}
              {== $button kPad_X}} {! $moviefinished} }
			  {set $moviefinished TRUE}
         {ui goto_screen featurette_to_community_screen}
      }
   )
}



{new UIScreen style_movie_screen
   (panels meta style_movie_panel helpbar)
   (focus style_movie_panel)
   (helpbar ('' helpbar_continue))
   
   (enter
		{{meta meta_music} stop}
	)
	(exit
		{{meta meta_music} start}
	)
}
#endif
