;; This file contains an array of condition - award_string pairs. These
;; are used in the endgame flow to assign "performance awards" to each 
;; active player.

   (
      ; Savior
      ; Player brings another player back from the brink 
      {>= {$my_player get_saved_count} 1 }
         "award_savior"
   )

   (
      ; band Savior
      ; Player saves the most people
      {do
         ($my_save_count {$my_player get_saved_count})
         ($max 0)
         {beatmatch foreach_active_player $active_player ; find the highest count
            {if {!= $active_player $my_player}
               {if {> {$active_player get_saved_count} $max}
                  {set $max {$active_player get_saved_count}}
               }
            }
         }
         {&&
            {> $my_save_count $max}
            {> {gamecfg get_num_participants} 1}
         }
      }
         "award_band_savior"
   )
   

   (
      ;;Top Performer
      ;;Best % notes hit
      {do
         ($my_percent {$my_player notes_hit_fraction})
         ($max 0)
         {beatmatch foreach_active_player $active_player ; find the highest count
            {if {!= $active_player $my_player}
               {if {> {$active_player notes_hit_fraction} $max}
                  {set $max {$active_player notes_hit_fraction}}
               }
            }
         }
         {&&
            {> $my_percent $max}
            {> {gamecfg get_num_participants} 1}
            {== {$my_player get_times_failed} 0}
         }
      }
         "award_top_performer"
   )

   (
      ;Longest Streak
      ;Longest streak & accomplishes x4 streak
      {do
         ($my_streak {$my_player longest_streak})
         ($notes_per_mulitplier {$my_player notes_per_streak})
         ($max 0)

         ;find $max streak among active players
         {beatmatch foreach_active_player $active_player
            {if {> {$active_player longest_streak} $max}
               {set $max {$active_player longest_streak}}
            }
         }

         {&&
            {!= 0 $notes_per_mulitplier}
            {!= 0 $my_streak}
            {>= {+ 1 {int {/ $my_streak $notes_per_mulitplier}}} 4}
            {== $max $my_streak}
         }
      }
         "award_professional_streaker"
   )

   (
      ; Spirited Survivor
      ; Player fails 2 times and lives
      {&& 
         {== {$my_player get_times_failed} 2}
         {== {$my_player enabled_state} kPlayerEnabled}
      }
         "award_spirited_survivor"
   )

   (
      ; Unconscious
      ; Player fails 3 times 
      {== {$my_player get_times_failed} 3}
         "award_unconscious"
   )

   (
      ;;Serious Skillz
      ;;performance between 95%-99%
      {&& 
            {>= {$my_player notes_hit_fraction} .95}
            {< {$my_player notes_hit_fraction} 1.0}
      }
         "award_serious_skills"
   )

   (
      ;;Flawless
      ;;performance 100%
      {>= {$my_player notes_hit_fraction} 1.0}
         "award_flawless"
   )

   (
      ;Hoarder
      ;Failed to deploy Band Energy AND had full Band Energy at end of game
      {&&
         {== {$my_player band_energy} 1.0}
         {== {$my_player deploy_count} 0}
      }
         "award_hoarder"
   )

   (
      ;Real Bass Player
      ;(Bass) Only used upstrums
      {&& 
         {== $track "bass"} 
         {> {$my_player notes_hit_fraction} 0}
         {! {$my_player strummed_down}}
      }
         "award_real_bassist"
   )

   (
      ;most showmanship (not "Show Manship")
      ; deployed more than anyone else
      {do
         ($my_deploy_count {$my_player deploy_count})
         ($max 0)
         {beatmatch foreach_active_player $active_player ; find the highest count
            {if {!= $active_player $my_player}
               {if {> {$active_player deploy_count} $max}
                  {set $max {$active_player deploy_count}}
               }
            }
         }
         {&&
            {> $my_deploy_count $max}
            {> {gamecfg get_num_participants} 1}
         }
      }
         "award_serious_style_points"
   )

   (
      ;most gutsy
      ;Lowest % notes hit but played at higher difficulty than others
      {do
         ($my_percentage {$my_player notes_hit_fraction})
         ($my_diff {$my_player difficulty})

         ($min 100)
         ($max_diff kDifficultyEasy)

         {beatmatch foreach_active_player $active_player ; find the highest count
            {if {!= $active_player $my_player}
               {if {< {$active_player notes_hit_fraction} $min}
                  {set $min {$active_player notes_hit_fraction}}
               }
               {if {> {$active_player difficulty} $max_diff}
                  {set $max_diff {$active_player difficulty}}
               }
            }
         }
         {&&
            {< $my_percentage $min}
            {> $my_diff $max_diff}
            {> {gamecfg get_num_participants} 1}
         }
      }
         "award_most_gutsy"
   )

   (
      ;;Awesome Solo
      ;;solo between 95%-99%
      {&& 
            {>= {$my_player solo_percentage} 95}
            {< {$my_player solo_percentage} 100}
      }
         "award_awesome_solo"
   )

   (
      ;;Solo Legend
      ;;solo 100%
      {== {$my_player solo_percentage} 100}
         "award_legend_solo"
   )

   (
      ;;Blissful Groove
      ;; bassist held a streak for more than X percent of gems
      {&&
         {== $track "bass"}
         {> {/ {$my_player longest_streak} {$my_player get_gem_count}} 0.9}
      }
         "award_blissful_groove"
   )


;waiting for dfan on 
;   (
;      ;Fill Animal
;      ;(Drum or Bass) Averages over notes hits per beat in fills
;      ; Implemented as drummer plays over 16 fill hits.
;      {&& {== $track "drum"} {< 16 {$my_player fill_hit_count}} }
;         "award_fill_animal"
;   )




;; Cut (too negative, obscure, etc):
;   (
;      ;;Team Player
;      ;;worst performer
;      {do
;         ($my_percent {$my_player notes_hit_fraction})
;         ($min 1)
;         {beatmatch foreach_active_player $active_player ; find the lowest count
;            {if {!= $active_player $my_player}
;               {if {< {$active_player notes_hit_fraction} $min}
;                  {set $min {$active_player notes_hit_fraction}}
;               }
;            }
;         }
;         {&&
;            {< $my_percent $min}
;            {> {gamecfg get_num_participants} 1}
;         }
;      }
;         "award_team_player"
;   )
;
;   (
;      ; Big Hands
;      ; (Guitar and Bass) Nailed all Green-Orange chords
;      {&& 
;         {|| {== $track "guitar"} {== $track "bass"}}
;         ; see if we hit all green|orange (binary 10001 = 17)
;         {== 1.0 {$my_player percent_hit_gems 17}} 
;      }
;         "award_big_hands"
;   )
;
;   (
;    ;; Solo Legend
;     ;; Guitarist gets above X percent rating
;      {&& 
;         {== $track "guitar"} 
;         {> {$my_player notes_hit_fraction} .95}
;      }
;         "award_solo_legend"
;   )
;;
;     
;  (
;      ;;Guitarist with a Bass
;      ;;(Bass) Only used downstrums
;      {&& {== $track "bass"} {! {$my_player strummed_up}}}
;         "award_guitarist_on_bass"
;   )
;
;   (
;      ;;Stubborn Strummer
;      ;;(Guitar) Only used downstrums
;      {&& {== $track "guitar"} {! {$my_player strummed_up}}}
;         "award_stubborn_strummer"
;   )
;  
;   (
;      ; Perfect Pitch Award
;      ; (Vocalist) get 5 star rating
;      {&& 
;         {== $track "vocals"}
;         {<= 5 {$my_player num_stars}}
;      }
;         "award_perfect_pitch"
;   )
;
;
;   (
;      ;Goofy Strummer
;     ;(Guitar) Only used upstrums
;      {&& 
;         {== $track "guitar"} 
;         {> {$my_player notes_hit_fraction} 0}
;         {! {$my_player strummed_down}}
;      }
;         "award_goofy_strummer"
;   )
;   
;   ; Near Death Experienced
;   ; Dropped into the red
;   (
;      {! {$my_player was_never_bad}}
;      "award_wasbad"
;   )
;   
;   (
;      ;;Crowd Favorite
;      ;;Higher star rating than all other band members
;      {do
;         ($my_stars {$my_player num_stars})
;         ($max 0)
;         {beatmatch foreach_active_player $active_player ; find the highest count
;            {if {!= $active_player $my_player}
;               {if {> {$active_player num_stars} $max}
;                  {set $max {$active_player num_stars}}
;               }
;            }
;         }
;         {&&
;            {> $my_stars $max}
;            {> {gamecfg get_num_participants} 1}
;         }
;      }
;         "award_crowd_favorite"
;   )
;   
;   
;   (
;      ;;Steady Eddie
;      ;;Never dropped into red but also isn't first ranked player
;      {&&
;         {$my_player was_never_bad}
;         {do
;            ($my_rating {$my_player crowd_rating})
;            ($max 0)
;            {beatmatch foreach_active_player $active_player ; find the highest count
;               {if {!= $active_player $my_player}
;                  {if {> {$active_player crowd_rating} $max}
;                     {set $max {$active_player crowd_rating}}
;                  }
;               }
;            }
;            {< $my_rating $max}
;         }
;      }
;         "award_steady_eddie"
;   )
;   
;
;
;   (
;      ;; Richest
;      {&&
;         {gamemode get is_bwt}
;         {do
;            ($my_money {{{$my_player config} get_char} money})
;            ($max 0)
;
;            {beatmatch foreach_active_player $active_player ; find the highest count
;               {if {!= $active_player $my_player}
;                  {if {> {{{$active_player config} get_char} money} $max}
;                     {set $max {{{$active_player config} get_char} money}}
;                  }
;               }
;            }
;            {> $my_money $max}
;         }
;      }
;      "award_richest"
;   )
;
;   (
;      ;showmanship
;      ; deployed at least once
;      {&& 
;         {>= {$my_player deploy_count} 1}
;         {! {find_elem $available_awards "award_serious_style_points"}}
;      }
;         "award_style_points"
;   )


;   ;; non-awards are in endgame.dta. They're added if no others were found.
;
  ;;
  ;;   (
  ;;      ;; Weakest Link
  ;;      ;; Lower star rating than all other band members
  ;;      {do
  ;;         ($my_stars {$my_player num_stars})
  ;;         ($min 100) ; init to > the max allowable star count
  ;;         {beatmatch foreach_active_player $active_player ; find the highest count
  ;;            {if {!= $active_player $my_player}
  ;;               {if {< {$active_player num_stars} $min}
  ;;                  {set $min {$active_player num_stars}}
  ;;               }
  ;;            }
  ;;         }
  ;;         {&&
  ;;            {< $my_stars $min}
  ;;            {> {gamecfg get_num_participants} 1}
  ;;         }
  ;;      }
  ;;      "award_weakest_link"
  ;;   )
  ;;
  ;;  (
  ;;      ;;Sleeper
  ;;      ;; No gems hit
  ;;      {== {$my_player notes_hit} 0}
  ;;         "award_sleeper"
  ;;   )
  ;;
  ;;   (
  ;;    ; ; Sleeper
  ;;    ; ; Less than 50% gems hit
  ;;      {< {$my_player notes_hit_fraction} .5}
  ;;         "award_notebutcher"
  ;;   )
  ;;
  ;;
  ;;   (
  ;;      ;No Pinky Finger
  ;;      ;(Guitar and Bass) Over 20% of gems missed are Orange
  ;;      ; implemented as "if your orange miss-rate >= 2 * total miss-rate
  ;;      {&& 
  ;;         {|| {== $track "guitar"} {== $track "bass"}}
  ;;         {>= {- 100 {$my_player percent_hit_gems 16}}
  ;;             {* 2 {- 100 {$my_player percent_hit}}}
  ;;         }
  ;;         {<= kDifficultyHard {$my_player difficulty}}
  ;;      }
  ;;      "award_no_pinky"
  ;;   )
  ;;
  ;;   (
  ;;      ;Anticlimactor
  ;;      ;(Guitar and Bass) Missed the last note of a song AND the last note is a sustain
  ;;      {&& 
  ;;         {|| {== $track "guitar"} {== $track "bass"}}
  ;;         {do
  ;;            ($ix_last_gem {- {$my_player get_gem_count} 1})
  ;;            {&&
  ;;               {$my_player get_gem_is_sustained $ix_last_gem}  ; it was sustained
  ;;               {$my_player get_gem_result $ix_last_gem}        ; you missed it
  ;;            }
  ;;         }
  ;;      }
  ;;         "award_anticlimactor"
  ;;   )
  ;;
  ;;   (
  ;;      ;Maladroit
  ;;      ;(Drums) Over 20% of gems missed were kick gems
  ;;      ; implemented as "if your kick miss-rate >= 2 * total miss-rate
  ;;      {&& {== $track "drum"}
  ;;         {>= {- 100 {$my_player percent_hit_gems 1}}
  ;;             {* 2 {- 100 {$my_player percent_hit}}}
  ;;         }
  ;;      }
  ;;         "award_maladroit"
  ;;   )
  ;;
  ;;   (
  ;;      ;Uninspired
  ;;      ;(Drum and Bass) Never played a fill
  ;;      {&& {== $track "drum"} {== 0 {$my_player fill_hit_count}} }
  ;;         "award_uninspired"
  ;;   )
  ;;
  ;; 
  ;;   (
  ;;      ;;Most Improved
  ;;      ;;TODO Gems hit has biggest gain since last song compared to other band members
  ;;      {== 0 1}
  ;;         "award_most_improved"
  ;;   )
  ;;
  ;;
  ;;   (
  ;;      ;Whamminator
  ;;      ;TODO (Guitar or Bass) Over 50% of sustains whammied
  ;;      {== 0 1}
  ;;         "award_whamminator"
  ;;   )
  ;;
  ;;   (
  ;;      ;Wishful Thinker
  ;;      ;(Guitar, Bass, Drums) Tried to deploy Band Energy when the reservoir is not full
  ;;      {&&  
  ;;         {|| {== $track "guitar"} {== $track "bass"}}
  ;;         {$my_player get_deploy_failed}
  ;;      }
  ;;         "award_wishful_thinker"
  ;;   )
  ;;
  ;;   (
  ;;      ;;Banshee
  ;;      ;;TODO (Vocals) Player yells for majority of song
  ;;      {== 0 1}
  ;;         "award_banshee"
  ;;   )


