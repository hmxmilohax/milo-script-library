
#include track_handlers.dta

(TrackDir
   (types
      ; GUITAR TRACK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      (gem_track
         (editor
            (reset script (script {$this reset}))
            
            (surface_mesh symbol
               (list {$this object_type_list Mesh})
            )

            (surface_texture symbol 
               (list {$this object_type_list Tex})   
               (post_sync {$this update_surface_texture})
            )

            ; objects to be fitted to surface
            (fit_meshes (array symbol (list {$this object_type_list Mesh})) 
               (help "Meshes which need to be fit to the cross section of the track surface.")
            )

            (deploy script (script {$this deploy}))
            (stop_deploy script (script {$this stop_deploy}))

            (mash script (script {$this mash 0}))
            (spew_gems script (script {$this spew_gems}))
            (clear_gems script (script {$this clear_gems}))

            (effect_selector object (class RndDir))

            (practice_reset script (script {$this practice_reset}))

            COMMON_TRACK_EDITOR     ; include all common track stuff   
         )
         
          ; track surface texture
         (surface_texture none proxy_save)

         ; surface mesh
         (surface_mesh 'flat.mesh')

         (effect_selector "")

         ; gem track index (0, 1 or 2) from left to right
         (gem_track_index 0)
         ; how many total tracks there are
         (num_tracks 1)

         (multiplier 1)
         
         ; number of consecutive kick gem passes
         (kick_pass_counter 0)

         ; meshes which need to be fit
         (fit_meshes ())

         ; list of objects in the file so we can select them in the editor
         (object_type_list ($obj_type)
            {do ($array {array 0})
               {push_back $array none}
               {$this iterate $obj_type $obj
                  {push_back $array {symbol {$obj name}}}
               }
               ; alphabetize the array
               {sort $array}
               $array
            }
         )

         ; set the pitch of the camera for the track
         (set_pitch ($pitch)
            {do ($x) ($y) ($z)
               {rotater.grp get_local_rot $x $y $z}
               {rotater.grp set_local_rot $pitch $y $z}
            }
         )

         ; set the start/end of the fade
         (set_fade ($start $length)
            {track.env set fade_start $start}
            {track.env set fade_end {+ $start $length}}
            {{$this get cam} set far_plane {+ {+ $start $length} 20}}
         )
         
         ; set the frustum of the camera
         (set_fov ($in_val)
            {{$this get cam} set y_fov $in_val}
         )

         (set_cam_pos ($x $y $z)
            {{$this get cam} set_local_pos $x $y $z}
         )

         ; x offset of the screen rect (if we DO have our own perspective)
         (set_screen_rect_x ($in_val)
            {game.cam set (screen_rect x)
               {* $in_val {- [gem_track_index] {/ {- [num_tracks] 1} 2}}}
            }
         )

         ; set the distance between the tracks (if we don't have our own perspective)
         (set_track_offset ($in_val)
            {do ($x) ($y) ($z)
               {rotater.grp get_local_pos $x $y $z}
               {rotater.grp set_local_pos 
                  {* {* $in_val {- [gem_track_index] {/ {- [num_tracks] 1} 2}}} -1} 
                  $y 
                  $z
               }
            } 
         )

         ; side angle of the track (if we don't have our own perspective)
         (set_side_angle ($in_val)
            {do ($x) ($y) ($z)
               {rotater.grp get_local_rot $x $y $z}
               {rotater.grp set_local_rot 
                  $x
                  $y 
                  {* $in_val {- [gem_track_index] {/ {- [num_tracks] 1} 2}}}
               }
            }
         )

         ; set the surface texture
         (update_surface_texture
            {if {&& [surface_texture] {$this exists [surface_texture]}}
               {surface.mat set diffuse_tex {$this find [surface_texture]}}
            }
         )

         (on_update_fx ($ixEffect)
            ;delete any existing hider thread
            {if {exists fx_hider} 
               {delete  fx_hider}
            }

            {if [effect_selector]
               {if {|| {== [instrument] guitar} {== [instrument] bass}}
                  {[effect_selector] set_showing TRUE}
                  {foreach_int $i 0 5
                     {{[effect_selector] find {sprintf "guitar_fx_%d.lbl" $i}}
                        set_state kNormal}
                  }
                  {{[effect_selector] find {sprintf "guitar_fx_%d.lbl" $ixEffect}}
                     set_state kFocused}

                  {thread_task kTaskSeconds (delay 1) (name fx_hider)
                     (script 
                        {[effect_selector] set_showing FALSE}
                     )
                  }
               }
            }
         )

         ; returns the object from a symbol or 0
         (get_obj ($obj_name)
            {if_else {$this exists $obj_name}
               {$this find $obj_name}
               0
            }
         )
         
         (play_intro
            {if {exists game}
               {$this set_track_fade FALSE}
            }
            {reset.trig trigger}
            {if {!= [player_intro] ""}
               {if_else {|| {&& [player] {[player] is_net}} [simulated_net]}
                  ; fade the player_intro then play the animation
                  {do
                     {[player_intro] fade}
                     {[player_intro] intro}
                  }
                  ; play the animation then hide the player_intro
                  {do
                     {[player_intro] intro}
                     {script_task kTaskSeconds (delay 2)
                        (script {[player_intro] hide})
                     }
                  }
               }
            }

            ; this is the intro
            ; TODO Ike, can you take a look at this, seems sad.
            ; idea is for h2h modes to have them come in at the same time.

            ; maybe if the .milo files are ddiferent you can just set
            ; gem_track_index the same or something -jwf
            {script_task kTaskBeats 
               (delay 
                  {if_else {== $game.play_mode coop} 
                     {+ {* .6 [gem_track_index]} 0.001}
                     0.001
                  }
               )
               (script 
                  {do
                     {intro.trig trigger}
                     {if {exists game}
                        {script_task kTaskSeconds (delay 0.35)
                           (script {$this set_track_fade TRUE})
                        }
                     }
                  }
                )
            }
         )

         ;override to the track handlers reset function
         (track_reset
         
            ; sets the surface texture 
            {$this update_surface_texture}

            ; reset the smashers
            {if [parent]
               {foreach_int $i 0 5
                  {{[parent] get_smasher $i} reset}
               }
            }

            ; Instrument type specific
            {if {== drum [instrument]} 
               {instrument_setup.anim set_frame 1}
            }
            {if {== bass [instrument]}
               {instrument_setup.anim set_frame 0}
            }
            {if {== guitar [instrument]}
               {instrument_setup.anim set_frame 2}
            }
            
            ; Put the effect_selector object at the same position as the player_feedback
            {if {&& {!= [player_feedback] ""} {!= [effect_selector] ""}}
               {[effect_selector] set_trans_parent [player_feedback]}
               {[effect_selector] set_showing FALSE}
            }
            
            {do ($smasher_plate {if_else {== [instrument] drum} 
                                 {object smasher_plate_drum} {object smasher_plate_guitar}})
                 
               ; Do the striping for the smasher plates
               {$smasher_plate reset}
               
               ; HACK if I am a proxy then collect the effects from the smasher plate.
               ; This should not happen if I am the top level Dir in milo because this action will
               ; invalidate the save.
               {if {|| {! $edit_mode} {$this is_proxy}}
                  {smasher_fx.grp add_object {$smasher_plate find after_gems.grp}}
                  {{$smasher_plate find after_hide.grp} set_showing FALSE}
               }
            }
            
            ; If I am a proxy get rid of the widgets that I don't use so there's no overhead
            {if {$this is_proxy}
               {do ($remove_group {if_else {== [instrument] drum} {object guitar_gems.grp} {object drum_gems.grp}})
                   ($objects {$remove_group get_array objects})
                   {foreach $elem $objects
                     {if {== {$elem class_name} TrackWidget}
                        {delete $elem}
                     }
                   }
               }
           }
            
            ; temporarily disable widget lod
            {$this setup_widget_lod}
            
            {$this enable_player}
            
            ; reset the kick pass counter
            {set [kick_pass_counter] 0}
         )
         
         (practice_reset
         
         {if {&& [parent] {{[parent] panel} exists reset_all.trig}}
               {{{[parent] panel} find ending_bonus.tnm} set_frame 0}
               {{{[parent] panel} find ending_bonus} reset}
         }
         
            {$this reset}
            
            {if {exists game}
               {$this set_track_fade [track_fading]}
            }
            
            {if {exists intro_anim.grp}
               {intro_anim.grp animate (range {intro_anim.grp end_frame} {intro_anim.grp end_frame})}
            }
         )

         (practice_track_in
            {intro.trig trigger}
         )
         
         (practice_track_out
            {$this set_track_fade FALSE}
            {retract.trig trigger}
         )
         
         (set_multiplier ($val)
            {set [multiplier] $val}
         )

         ; hide the masks
         (hide_masks
            {drum_fill.mesh set_showing FALSE}
            {guitar_fill.mesh set_showing FALSE}
            ;{unison_mask.mesh set_showing FALSE}  ;HWR _ doesn't exist anymore
            {guitar_solo_mask.mesh set_showing FALSE}
         )
         
         ; GEM PASS
         (gem_pass ($gem_id $lanes)
            {if {&& {& $lanes 1} {== [instrument] drum}}
               {++ [kick_pass_counter]}               
               {if {>= [kick_pass_counter] 8}
                  {do ($next_kick_ms {[parent] next_kick_ms})
                     {if_else {== [kick_pass_counter] 8}
                        {do
                           ; If this is the 8th passed kick gem
                           ; show the popup help, only if there's a gem soon
                           {if_else {> $next_kick_ms 5000}
                              {set [kick_pass_counter] 7}
                              {$this popup_help kick TRUE}
                           }
                        }
                        {if {> $next_kick_ms 5000}
                           ; check to see if there's a kick note in the horizon.
                           ; if not, then remove the popup help for it.
                           {$this popup_help kick FALSE}
                           {set [kick_pass_counter] 7}
                        }
                     }
                  }
               }
            }
         )

         ; respond to a kick hit
         (kick_hit
            ; If I'm the drummer trigger a hard kick
            {kick_drummer.trig trigger}
         )
         

         ; see a kick gem (we don't know if it's hit or not)
         (see_kick
            {if {!= [popup_object] ""}
               ; animate the kick gem in the kick popup help
               {[popup_object] kick_note}
            }
         )
         
         (kick_swing
            {$this popup_help kick FALSE}
            {set [kick_pass_counter] 0}
         )

         (spotlight_phrase_success
            {spotlight_phrase_success.trig trigger}
            {if {!= [star_power_meter] ""}
               {[star_power_meter] energy_added}
            }
         )

         ; handler for a solo note hit 
         (solo_note ($in_slot)
            ; find the gem smasher for this slot and tell it to hit_fill
            {if [parent]
               {{[parent] get_smasher $in_slot} hit_fill}
            }      
            {solo_hit.trig trigger}
         )

         ; handler for a mash hit
         (mash ($in_slot)
            {if {|| {!= [instrument] drum} {!= $in_slot 0}} ; exclude the kick drum
               {do ($anim)
                  {if_else {== [instrument] drum}
                     {do
                        ; HACK to flip for lefty
                        {if {&& {!= [parent] ""} {[parent] lefty}}
                           {set $in_slot {+ 1 {- 4 $in_slot}}}
                        }
                        {set $anim {object {sprintf "drum_mash%d.anim" $in_slot}}}
                     }
                     
                     {set $anim {object {sprintf "gem_mash%d.anim" $in_slot}}}
                  }
                  {$anim animate}
               }
            }
         )

         (fill_hit ($num_notes)
            ; hits toward crash gem
            {do ($trig_name {sprint "fill_hit_" $num_notes ".trig"})
               {if {exists $trig_name}
                  {{object $trig_name} trigger}
               }
            }
         )

         ; called right before a drum fill comes on screen
         (reset_drum_fill
            {drum_fill_reset.trig trigger}
            
            {do ($time_til_next {- {taskmgr time_til_next 1 .001} .2})
               {if {exists drum_mash_2nd_pass_activate.anim}
                  {if {< $time_til_next 0}
                     {set $time_til_next {+ $time_til_next 1}}
                  }
                  {script_task kTaskBeats (delay $time_til_next)
                     (script {drum_mash_2nd_pass_activate.anim animate (loop 0 1)})
                  }                  
               }
            }
         )

         ; called right before the ending bonus gems come on screen         
         (reset_coda
            {drum_mash_hit_anim.grp set_frame {drum_mash_hit_anim.grp end_frame}}
            {fill_colors.grp set_frame {fill_colors.grp end_frame}}
         )
         
         (crash_fill
            {do ($smasher {[parent] get_smasher 4})
               {$smasher drum_fill_complete}
            }
         )
         
         ; Set up the widget lod
         (setup_widget_lod
            ; make sure this never saves.
            {if {|| {! $edit_mode} {$this is_proxy}}
               {do ($glow_visible {if_else {>= $track_LOD 1} FALSE TRUE})
                  {$this set_widget_glow drum_blue.wid $glow_visible}
                  {$this set_widget_glow drum_green.wid $glow_visible} 
                  {$this set_widget_glow drum_red.wid $glow_visible} 
                  {$this set_widget_glow drum_yellow.wid $glow_visible} 
                  {$this set_widget_glow drum_star.wid $glow_visible} 
                  {$this set_widget_glow gem_blue.wid $glow_visible} 
                  {$this set_widget_glow gem_blue_hopo.wid $glow_visible} 
                  {$this set_widget_glow gem_green.wid $glow_visible} 
                  {$this set_widget_glow gem_green_hopo.wid $glow_visible} 
                  {$this set_widget_glow gem_orange.wid $glow_visible} 
                  {$this set_widget_glow gem_orange_hopo.wid $glow_visible} 
                  {$this set_widget_glow gem_red.wid $glow_visible} 
                  {$this set_widget_glow gem_red_hopo.wid $glow_visible} 
                  {$this set_widget_glow gem_yellow.wid $glow_visible} 
                  {$this set_widget_glow gem_yellow_hopo.wid $glow_visible} 
                  {$this set_widget_glow star_gem.wid $glow_visible} 
                  {$this set_widget_glow star_hopo.wid $glow_visible} 
               }
            }
         )
         
         ; turn on or off the widget glow
         (set_widget_glow ($obj_name $val)
            {if {exists $obj_name}
               {do ($object {object $obj_name})
                  {$object set max_meshes {if_else $val 2 1}}
               }
            }
         )

         (super_streak ($val)
            {if {== [instrument] bass}
               {if_else $val
                  {do
                     {BassSuperStreak_ON.trig trigger}
                     {if {!= [player_feedback] ""}
                        {[player_feedback] start_super_streak}
                     }
                  }
                  {do
                     {BassSuperStreak_OFF.trig trigger}
                     {if {!= [player_feedback] ""}
                        {[player_feedback] end_super_streak}
                     }
                  }
               }
            }
         )

         ; called when this user deploys
         (deploy
            ;; Trigger's gone but we might still do something in the future
            {star_deploy.trig trigger}
            {if {&& [parent] {{[parent] panel} exists crowd_meter}}
               {{{[parent] panel} find crowd_meter} deploy [instrument]}
         }
            {if {!= [streak_meter] ""}
               {if [player]
                  {[streak_meter] set_band_multiplier {{[player] band} multiplier}}
               }
               {[streak_meter] star_deploy}
            }
            
            ; update the gems in case a fill has stomped on them
            {if {&& {== [instrument] drum} {!= [parent] ""}}
               {script_task kTaskSeconds (delay 0)
                  ; this is on a delay because if I call this right now then 
                  ; we'll still think we havn't deployed yet.
                  (script {[parent] update_gems})
               }
            }
         )

         (stop_deploy
            {star_stop_deploy.trig trigger}
            {if {&& [parent] {{[parent] panel} exists crowd_meter}}
               {{{[parent] panel} find crowd_meter} stop_deploy [instrument]}
            }
            {if {!= [streak_meter] ""}
               {if [player]
                  {[streak_meter] set_band_multiplier {{[player] band} multiplier}}
               }
               {[streak_meter] star_deploy_stop}
            }
         )
         
         ; spew a constant stream of random gems
         (spew_gems
            {if {! {exists spew_gems_test}}
               {$this toggle_running}
               {thread_task kTaskBeats (name spew_gems_test) 
                  (script
                     ; dummy command for thread_task bug
                     {set $lane 0}
                     ; display measure lines
                     {switch $beat
                        (0 {$this add_test_widget "bar_measure.wid" 2} {set $beat 1})
                        (1 {$this add_test_widget "bar_half_beat.wid" 2} {set $beat 2})
                        (2 {$this add_test_widget "bar_beat.wid" 2} {set $beat 3})
                        (3 {$this add_test_widget "bar_half_beat.wid" 2} {set $beat 4})
                        (4 {$this add_test_widget "bar_beat.wid" 2} {set $beat 5})
                        (5 {$this add_test_widget "bar_half_beat.wid" 2} {set $beat 6})
                        (6 {$this add_test_widget "bar_beat.wid" 2} {set $beat 7})
                        (7 {$this add_test_widget "bar_half_beat.wid" 2} {set $beat 0})
                     }
                     ; generate a random number of gems to display on each line 0-3
                     {set $num_gems {random_int 3 4}}
                     ; if there is only one gem give it chance to be a hopo
                     {if {== $num_gems 1}
                        {set $hopo {random_int 0 2}}
                     }
                     {foreach_int $gem 0 $num_gems
                        ; pick a random lane and draw a gem in it
                        {set $lane {random_int 0 5}}
                        
                        {if_else {== [instrument] drum}
                           {switch $lane
                              (0 {$this add_test_widget "drum_red.wid" $lane})
                              (1 {$this add_test_widget "drum_yellow.wid" $lane})
                              (2 {$this add_test_widget "gem_kick.wid" $lane})
                              (3 {$this add_test_widget "drum_blue.wid" $lane})
                              (4 {$this add_test_widget "drum_green.wid" $lane})
                           }                           
                           {switch $lane
                              (0 {if_else $hopo
                                    {$this add_test_widget "gem_green_hopo.wid" $lane}
                                    {$this add_test_widget "gem_green.wid" $lane}
                                 }
                              )
                              (1 {if_else $hopo
                                    {$this add_test_widget "gem_red_hopo.wid" $lane}
                                    {$this add_test_widget "gem_red.wid" $lane}
                                 }
                              )
                              (2 {if_else $hopo
                                    {$this add_test_widget "gem_yellow_hopo.wid" $lane}
                                    {$this add_test_widget "gem_yellow.wid" $lane}
                                 }
                              )
                              (3 {if_else $hopo
                                    {$this add_test_widget "gem_blue_hopo.wid" $lane}
                                    {$this add_test_widget "gem_blue.wid" $lane}
                                 }
                              )
                              (4 {if_else $hopo
                                    {$this add_test_widget "gem_orange_hopo.wid" $lane}
                                    {$this add_test_widget "gem_orange.wid" $lane}
                                 }
                              )
                           }                        

                        }
                        

                     }
                     {$task sleep 1}
                     {$task loop}
                  )
               }
            }
         )
         
         ; clear all gems from the track
         (clear_gems
            {if {exists spew_gems_test}
               {delete spew_gems_test}
               {$this toggle_running}
            }
         )
         
         COMMON_TRACK_HANDLERS      ; include all common track stuff
      )
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   )
)