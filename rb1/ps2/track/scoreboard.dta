(RndDir
   (types
      (scoreboard
         (editor
            (reset script (script {$this reset}))
            (test_score int (post_sync {$this set_score [test_score]})
                            (help "Current score."))
            (star_scores (array int)
               (post_sync {$this update_star_scores})
               (help "Scores for each star level.")
            )
            (sound bool "Play a sound when the stars change")
         )

         ; testing the score
         (current_star 0)
         (test_score 0)
         (previous_score 0)
         (delta_score 0)
         (score 0)
         (sweep_pct 0)
         (max_score 100)
         (max_stars 6)
         (star_scores (20 40 60 80 100 120))
         (last_star 0)
         (gold 0)
         (stars ("star1" "star2" "star3" "star4" "star5"))
         
         (sound FALSE)

         (reset
            {if {!= {size [star_scores]} 0}
               {set [current_star] 0}
               {set [last_star] 0}
               {set [previous_score] 0}
               {set [delta_score] 0}
               {set [gold] 0}
               {foreach $star [stars]
                  {$star set showing 0}
                  {$star set_frame 0}
                  ; reset all animations
                  {{$star find reset.trig } trigger }
               }
               ; reset stars_offset animation
               {stars_offset.tnm set_frame 0}
            }
            
            {$this set_score 0}
            {set [test_score] 0}
            {if {exists gold.grp}
               {gold.grp set_showing FALSE}
            }
         )

         ; sets the score
         (set_score ($in_val)
            ; if h2h size of star_score will be 0
            {if {!= {size [star_scores]} 0}
               ; show the first star when the score is zero
               {if {== [score] 0}
                  {{elem [stars] 0} set showing 1}
               }

               {if {!= $in_val [score]}
                  ; calculate the delta_score based off the previous star_score
                  {if_else {== [current_star] 0}
                     {set [delta_score] {elem [star_scores] [current_star]}}
                     {do
                        {set [previous_score] {elem [star_scores] {- [current_star] 1}}}
                        {set [delta_score] {- {elem [star_scores] [current_star]} [previous_score]}}
                     }
                  }

                  ; if we're not on the last star
                  {if_else {!= [last_star] 1}
                     {do
                        ; HACK: only fill the cirlce to 95% to compensate for new star delay
                        {set [sweep_pct] {/ {- $in_val [previous_score]} [delta_score]}}
                        {if {<= [sweep_pct] .95}
                           ; fill the circle based on the score
                           {{{elem [stars] [current_star]} find sweep.mnm} set_frame [sweep_pct]}
                        }
                        ; if the score is high enough
                        {if {>= $in_val {elem [star_scores] [current_star]}}
                           ; complete the circle animation
                           {{{elem [stars] [current_star]} find sweep.mnm} set_frame 1}
                           ; play the full star animation
                           {{{elem [stars] [current_star]} find full.trig} trigger}
                           ; play the sound effect
                           {$this play_star_sound}
                           {set [current_star] {+ [current_star] 1}}

                           ; check if it is the last star so we don't keep replaying the animation
                           {if {== [current_star] [max_stars]}
                              {set [last_star] 1}
                           }
                           ; if we're not on the last star, show a new star and center all stars
                           {if {!= [last_star] 1}
                              {{elem [stars] [current_star]} set showing 1}
                              {stars_offset.tnm animate (dest {* [current_star] 10})}
                              ; fill the new star with leftover points
                              {{{elem [stars] [current_star]} find sweep.mnm} set_frame {- [sweep_pct] 1}}
                           }
                        }
                     }
                     {do
                        ; if we are on the last star check the threshold and display gold stars
                        {if {>= $in_val {elem [star_scores] [max_stars]}}
                           {if {&& {! [gold]} {exists gold.grp}}
                              {gold.grp set_showing TRUE}
                              {$this play_star_sound}
                              {set [gold] 1}
                           }
                        }
                     }
                  }
               }  
            }
            
            {if {&& {!= $in_val [score]} {exists score.txt}}
               ; set the text field to the score
               {score.txt set_text {sprintf "%s" {fmt_score $in_val}}}
            }
            ; set the score text
            {set [score] $in_val}
         )
         
         (set_star_score ($star_index $score)
            {if {< $star_index {size [star_scores]} }
               {set_elem [star_scores] $star_index $score}
            }
         )
         
         (update_star_scores
            {foreach_int $i 0 {size [star_scores]}
               {$this set_star_score $i {elem [star_scores] $i}}
            }
         )
         
         (play_star_sound
            {if [sound]
               {if_else {exists game}
                  {do   ; then
                     {if {gamemode get play_star_sfx}
                        {play_game_seq achieve_star.cue} ; in game use play_game_seq
                     }
                  }
                  {do   ; else
                     {synth play achieve_star.cue} ; in milo play directly
                  }
               }
            }
         )
      )
   )
)