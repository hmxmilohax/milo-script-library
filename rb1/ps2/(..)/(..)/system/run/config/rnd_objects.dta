(Anim
   (description "Base class for animatable objects. Anim objects change
        their state or other objects.")
   (allowed_dirs)
   (editor
      (rate int (list RATE_ENUM) (help "Rate to animate"))
   )
   (views
      (animating {$this is_animating}
         ("current frame" {$this frame})
      )
   )
)

(Poll
   (description "Abstract base class for pollable RND objects")
   (allowed_dirs)
   (editor
      (enter script (script {$this enter}))
      (exit script (script {$this exit}))
   )
   (types
      ; types can define "enter" and "exit" to be called on Enter/Exit
   )
)

(PropAnim
   (description "Animate any properties on target object")
   (ext anim)
   (superclasses Anim)
   (types)
)

(AnimFilter
   (description "An AnimFilter object modifies the playing of another animatable object")
   (superclasses Anim)
   (ext filt)
   (types)
   (editor
      (anim object 
         (post_sync {milo update_open_editor $this}) ; param changes
         (list {$this safe_anims {milo cur_dir}})
         (help "Animatable object that receives filtered frame")
      )
      (start float
         (help "Overriden start frame of animation")
      )
      (end float
         (help "Overriden end frame of animation")
      )
      (offset float
         (help "Amount to offset frame for animation")
      )
      (scale float (read_only {!= [period] 0.0})
         (help "Multiplier to speed of animation")
      )
      (period float (refresh scale)
         (help "Alternative to scale, overriden period of animation")
      )
      (snap float
         (help "Snap frame to nearest multiple")
      )
      (jitter float
         (help "Jitter frame randomly up to this amount")
      )
      (type int (list ANIM_ENUM)
         (help "How to treat the frame outside of start and end")
      )
   )
)

(Blur
   (description "A Blur object renders an object with more transparency at
                 older positions. It is drawable and should replace the
                 blurred object as a draw child.")
   (superclasses Draw)
   (ext blur)
   (types)
)

(Cam
   (description "A Camera object is drawable and transformable. When drawn
                 it sets up projection and clipping parameters for
                 subsequent draw siblings.")
   (superclasses Trans)
   (ext cam)
   (types)
   (editor
      (near_plane float
        (help "The distance in world coordinates to the near clipping
            plane. The near/far ratio is limited to 1:1000 to preserve
            Z-buffer resolution."))
      (far_plane float
        (help "The distance in world coordinates to the far clipping
            plane. The near/far ratio is limited to 1:1000 to preserve
            Z-buffer resolution. Note that on the PS2, object polys are
            culled rather than clipped to the far plane."))
      (y_fov float)
      (z_range VECTOR2
        (help "The part of the Z-buffer to use, in normalized
            coordinates. It can be useful to draw a scene where the near
            and far planes must exceed the 1:1000 ratio (so multiple
            cameras are used to draw farthest to nearest objects, each
            using a closer range of the z-buffer) or to leave some
            z-buffer for HUD overlay objects."))
      (screen_rect RECT
        (help "The area of the screen in normalized coordinates
            (0 to 1) to draw into."))
   )
)

(CamAnim
   (description "A CamAnim object animates Camera properties.")
   (superclasses Anim)
   (ext cnm)
   (types)
)


(TexRenderer
   (description "TexRender renders a proxy into a texture.")
   (superclasses Anim Draw)
   (ext rndtex)
   (types
      ; if type contains (delete_proxy) and not edit mode or force, then
      ; proxy will be deleted after first render to save memory
   )
   (editor
      (proxy object (class RndDir) (help "Proxy Object to render to texture"))
      (output_texture object (class Tex) (help "Texture to write to")
         (pre_sync
            {if [output_texture]
               {milo record [output_texture] reset_tex_render}
               {[output_texture] set_rendered FALSE}
            }
         )
         (post_sync
            {if [output_texture]
               {milo record [output_texture] set_tex_render}
               {[output_texture] set_rendered TRUE}
            }
         )
      )
      (force bool (help "Force rendering every frame"))
      (imposter_height float (help "Height for imposter rendering with current camera"))
   )
)

(Cursor
   (description "A Cursor object displays Text like a teletype console.
         <p>For each frame of animation, the mask and cursor will move to
            uncover one character. To animate multiple Text objects being
            uncovered by Cursors one after another, and to control the
            speed of Cursor animation, create a Scale/Offset anim filter
            for each Cursor object. A negative offset can delay a Cursor's
            animation until the Text before it has been fully uncovered.</p>")
   (superclasses Anim Draw)
   (ext curs)
   (types)
)

(Draw
   (description "Base class for drawable objects. Draw objects either
        render polys or determine rendering state.")
   (allowed_dirs)
   (editor
      (showing bool
         (help "Whether the object and its Draw children are drawn or collided with.")
         (post_sync {milo invalidate_listers_and_trees}) ; to italicize hidden objects
      )
      (draw_order float)
      (sphere SPHERE (help "bounding sphere"))
      (update_sphere script
         (help "Calculates the bounding sphere for the object.")
         (script 
            {milo record $this update_sphere}
            {$this update_sphere}
         ) 
         (refresh sphere)
      )
   )
   (views
      (showing
         ("Showing"     [showing])
         ("Draw Order"  [draw_order])
      )
   )
)

(Environ
   (description "An environment object is drawable. When drawn it sets up
        dynamic lighting and fogging for subsequently drawn siblings.")
   (ext env)
   (types)
   (editor
      (lights (array object (list {$this allowable_lights}))
        (help "Dynamic lights for this environment")
      )
      (ambient_color color (help "Ambient color for this environment"))
      (fog_enable bool (help "Whether fog is enabled for this environment") (refresh fog_color fog_start fog_end))
      (fog_color color (read_only {!{$this get fog_enable}}) (help "Fog color"))
      (fog_start float (read_only {!{$this get fog_enable}}) (help "Fog start distance"))
      (fog_end float (read_only {!{$this get fog_enable}}) (help "Fog end distance"))
      (ambient_fog_owner object (class Environ) (help "Share ambient and fog parameters with this environ") (obj_flags no_null) (no_test))
      (animate_from_preset bool (help "Whether this environment should be animated by light presets"))
      (ng
         (indent
            (fade_out bool (help "Fade out the scene over distance"))
            (fade_start float (help "World space distance from camera to start fading"))
            (fade_end float (help "World space distance fade out completely"))
            (fade_max float (help "Maximum opacity of faded objects") (range 0 1))
            (fade_ref object (class Trans) (help "reference object to left/right fade along x-axis"))
            (left_out float (help "distance along negative x to start fading in"))
            (left_opaque float (help "distance along negative x to become fully opaque"))
            (right_opaque float (help "distance along positive x to become fully opaque"))
            (right_out float (help "distance along positive x to start fading in"))
            (use_color_adjust bool (help "Enable color adjust") (refresh color_adjust) )
            (color_adjust
               (indent
                  (hue float 
                     (help "Hue: -180 to 180, 0.0 is neutral") 
                     (range -180 180) 
                  )
                  (saturation float 
                     (help "Saturation: -100 to 100, 0.0 is neutral") 
                     (range -100 100)
                  )
                  (lightness float 
                     (help "Lightness: -100 to 100, 0.0 is neutral") 
                     (range -100 100)
                  )
                  (contrast float 
                     (help "Contrast: -100 to 100, 0.0 is neutral") 
                     (range -100 100)
                  )
                  (brightness float 
                     (help "Brightness: -100 to 100, 0.0 is neutral") 
                     (range -100 100)
                  )
                  (levels
                     (indent
                        (in_lo color
                           (help "Input low end")
                        )
                        (in_hi color
                           (help "Input high end")
                        )
                        (out_lo color
                           (help "Output low end")
                        )
                        (out_hi color
                           (help "Output high end")
                        )
                     )
                  )
               )
               (read_only  {![use_color_adjust]})
            )
         )
         (help "Next-generation graphics settings")
      )
   )
)

(EnvAnim
   (description "An EnvAnim object animates Environ properties.")
   (superclasses Anim)
   (ext enm)
   (types)
)

(Flare
   (description "Flare objects are particles that are rendered based on
        the visibility of their center.<br />
        Use them to implement sun flare peeking through tree leaves and
        around buildings, flares on lamps and stage lights that get
        occluded by characters, etc.  Flares should be drawn last in a
        frame, and since they depend on the z-buffer for visibility
        testing, previously drawn translucent or cutout objects must
        properly use translucent or SrcAlphaCutout materials.")
   (superclasses Draw Trans)
   (ext flare)
   (types)
)

(Font
   (description "Font objects determine the appearance for Text objects.")
   (ext font)
   (types)
)

(Generator
   (description "A Generator object flies out object instances along a path.")
   (superclasses Anim Draw Trans)
   (ext gen)
   (types)
)

(Group
   (description "Represents a group of objects to which to propogate
        animation and messages.")
   (superclasses Anim Draw Trans)
   (ext grp)
   (types)
   (editor
      (environ object (class Environ))
      (draw_only 
         object (class Draw) 
         (list {$this get_draws})
         (help "if set, only draws this member of the group")
      )   
      (sort_draws script 
         (script {$this sort_draws}) 
         (help "Sort objects by draw_order and material")
         (post_sync {milo update_objects})
      )
      (lod object (class Draw) (obj_flags no_this)
         (help "Object to draw instead below lod_screen_size")
      )
      (lod_screen_size float (help "Ratio of screen height for lod"))
   )
)

(Light
   (description "Light objects are added to environments for drawing.")
   (superclasses Trans)
   (ext lit)
   (types)
   (editor
      (type int (list ("kLightPoint" "kLightDirectional" "kLightFakeSpot" "kLightFloorSpot" "kLightShadowRef")) 
         (help "Type of dynamic lighting")
         (refresh spotlight)
      )
      (range float (help "Falloff distance for point lights"))
      (falloff_start float (help "Distance at which falloff starts for point lights"))
      (color color (help "Color of light") (refresh intensity) (no_test))
      (intensity float (help "Intensity of light color") (refresh color) 
         (no_test)
      )
      (color_owner object (class Light) 
         (help "Master for light color and intensity") 
         (obj_flags no_null) 
         (no_test)
      )
      (spotlight
         (indent
            (topradius float 
               (help "Fake cone small radius at the source")
            )
            (botradius float 
               (help "Fake cone big radius at the far end")
            )
            (softness float 
               (help "Fake cone softness with 0 hard edge and 1 total mushy") 
               (range 0 1)
               (hide {!= [type] 2})
            )
            (displacement float 
               (help "Amount along dir to adjust the fake spot position") 
               (range 0 1)
               (hide {!= [type] 2})
            )
            (texture object (class Tex)
               (help "Projected floor spot texture")
               (hide {!= [type] 3})
            ) 
         )
         (hide {&& {!= [type] 2} {!= [type] 3}})
         (help "Spot light parameters")
      )
      (animate_color_from_preset bool (help "Animation authority for LightPreset"))
      (animate_position_from_preset bool (help "Animation authority for LightPreset"))
   )
)

(LightAnim
   (description "LightAnim objects animate light object properties using keyframe interpolation.")
   (superclasses Anim)
   (ext lnm)
   (types)
)

(Line
   (description "Line objects represent 3D lines with thickness, perspective, and optional end caps.")
   (superclasses Draw Trans)
   (ext line)
   (types)
)

(Mat
   (description "Material objects determine texturing, blending, and the
        effect of lighting on drawn polys.")
   (ext mat)
   (types)
   (editor
      (color color (help "Base material color"))
      (alpha float (help "Base material alpha"))
      (use_environ bool (help "Modulate with environment ambient and lights"))
      (prelit bool (help "Use vertex color and alpha for base or ambient"))
      (diffuse_tex object (class Tex) (help "Base texture map, modulated with color and alpha") (refresh intensify))
      (intensify bool (help "Double the intensity of base map") (read_only {! [diffuse_tex]}))
      (tex_wrap int (list TEXWRAP_ENUM) (help "Texture mapping mode"))
      (tex_gen int (list TEXGEN_ENUM) (help "How to generate texture coordinates"))
      (tex_xfm TRANSFORM (help "Transform for coordinate generation"))
      (blend int (list BLEND_ENUM) (help "How to blend poly into screen"))
      (z_mode int (list ZMODE_ENUM) (help "How to read and write z-buffer"))
      (alpha_cut bool (help "Cut zero alpha pixels from z-buffer"))
      (alpha_threshold int (help "Alpha level below which gets cut") (range 0 255) )
      (alpha_write bool (help "Write pixel alpha to screen"))
      (next_pass object (class Mat) (list {$this allowed_next_pass}) (help "Next material for object"))
      (ng
         (indent
            (cull bool (help "Cull backface polygons"))
            (stencil_mode int (list STENCILMODE_ENUM) (help "How to read and write the stencil buffer"))
            (per_pixel_lit bool (help "Use per-pixel lighting"))
            (two_color bool (help "Modulate with color2 using diffuse alpha")
               (refresh color2 two_color_mask)
            )
            (color2 color (read_only {! [two_color]}))
            (two_color_mask object (class Tex) 
               (help "Modulate to white from color/color2")
               (read_only {! [two_color]})
            )
            (emissive_multiplier float (help "Multiplier to apply to emission"))
            (emissive_map object (class Tex) (help "Map for self illumination"))
            (specular_rgb color (help "Color to use when not driven by texture"))
            (specular_power float (help "Power to use when not driven by texture"))
            (specular_map object (class Tex) (refresh specular_rgb) (help "Texture map for specular color and power"))
            (normal_map object (class Tex) (list {$this allowed_normal_map})
               (help "Texture map to define lighting normals")
            )
            (de_normal float (help "Amount to diminish normal map bumpiness, 0 is neutral, 1 is no bumps, -1 exaggerates") (range -3 1))
            (normalize bool (help "Normalize tangent-space matrix -- DO NOT USE"))
            (custom_diffuse_map object (class Tex) (help "Texture map for diffuse lighting calculation"))
            (environ_map object (class CubeTex) (help "Cube texture for reflections"))
            (anisotropy float (help "Specular power in downward (strand) direction, 0 to disable") (range 0.0 100.0))
            (norm_detail_map object (class Tex) (list {$this allowed_normal_map})
               (help "Detail map texture"))
            (norm_detail_strength float (help "Strength of the detail map bumpiness"))
            (norm_detail_tiling float (help "Texture tiling scale for the detail map"))
            (fleck_shaded bool (help "Use fleck shader") (refresh))
            (fleck_section
               (indent
                  (substrate_depth float 
                     (help "How deep is the enamel/substrate")
                  )
                  (substrate_color color 
                     (help "Color of the enamel/substrate")
                  )
                  (fleck_shaded_mask object (class Tex) 
                     (help "Mask for applying fleck shader")
                  )
               )
               (hide {![fleck_shaded]})
               (help "fleck shader parameters")
            )
            (fur object (class Fur) (help "Use fur shader"))
         )
         (help "Next-generation graphics settings")
      )
   )
   (views
      (alpha_write
         (alpha_write {$this get alpha_write})
      )
      (Diffuse_tex
         (diffuse_tex [diffuse_tex])
         (tex_size_kb {if_else [diffuse_tex] {[diffuse_tex] size_kb} 0})
      )

   )
)

(Fur
   (description "Parameters for fur shading, to be set on a material")
   (ext fur)
   (types)
   (editor
      (layers int (help "Number of passes"))
      (thickness float (help "Length of fur"))
      (curvature float (help "Curvature exponent")(range 0 3))
      (shell_out float (help "Bunch shells towards surface")(range 0 1))
      (alpha_falloff float (help "Bunch opacity towards surface")(range 0 1))
      (stretch float (help "Maximum stretch"))
      (slide float (help "Maximum lateral motion"))
      (gravity float (help "Strength of gravity") (range 0 1))
      (fluidity float (help "Langor of motion") (range 0 1))
      (roots_tint color (help "Tint at hair roots"))
      (ends_tint color (help "Tint at hair ends"))
      (fur_detail object (class Tex) (help "Detail map for finer fur"))
      (fur_tiling float (help "Tiling for fur detail map"))
   )
)

(MatAnim
   (description "MatAnim objects animate material properties.")
   (superclasses Anim)
   (ext mnm)
   (types)
)

(Mesh
   (description "A Mesh object is composed of triangle faces.")
   (superclasses Draw Trans)
   (ext mesh)
   (types)
   (views
      (size
         ("faces" {$this num_faces})
         ("verts" {$this num_verts})
      )
   )
)

(MeshAnim
   (description "A MeshAnim object animates Mesh vertices. This should be
        done only when an effect can't be achieved with material
        animation, because animating vertices directly is less efficient.")
   (superclasses Anim)
   (ext msnm)
   (types)
)

(Morph
   (description "A Morph object animates between multiple Mesh poses using
        weight keyframes. This is an expensive technique, equivalent to a
        MeshAnim for each active pose, so use only when skinning or a
        single MeshAnim isn't enough. For example, we use it for
        viseme-driven facial animation.")
   (superclasses Anim)
   (ext morph)
   (types)
)

(Movie
   (description "A Movie object animates a compressed video through a
        texture. It works on Xbox and PS2 now, soon GC.")
   (superclasses Anim)
   (ext mov)
   (types)
   (editor
      (movie_file file 
        (help "File - extension is automatically converted to platform")
      )
      (stream bool (help "Stream the file for this movie?"))
      (loop bool (help "Loop this movie?"))
      (tex object (class Tex) (help "Texture to animate."))
   )
)

(MultiMesh
   (description "A MultiMesh object draws a simple Mesh in many places
        quickly. Create a multimesh by instancing the base mesh lots of
        times in Max, then using the multiobject wizard.")
   (superclasses Draw)
   (ext mm)
   (types)
)

(ParticleSys
   (description "A ParticleSys object generates, animates, and draws large
        numbers of similar sprites. Currently particles are rendered only
        as points on the PC.")
   (superclasses Poll Anim Draw Trans)
   (ext part)
   (types)
   (views
      (size
         ("max_particles" {$this max_particles})
      )
   )
   (editor
      (mat object (class Mat) (help "material for particle system"))
      (max_parts int (range 0 10000) (help "maximum number of particles"))
      (screen_aspect float (help "Ratio of screen height to width"))
      (emit_rate VECTOR2 (help "Frame range to generate particles."))
      (life VECTOR2 (help "Frame range of particle life."))
      (speed VECTOR2 (help "Speed range, in world units per frame, of particles."))
      (start_size VECTOR2 (help "Size range, in world units, of particles."))
      (delta_size VECTOR2 (help "Change in size of particles, in world units."))
      (force_dir  VECTOR3 (help "Force direction in world coordinates, in units per frame added to each particle's velocity. Can be used for gravity."))
      (bounce object (class Trans) (help "Specify a collide plane to reflect particles. Used to bounce particles off surfaces."))
      (start_color_low color (help "Random color ranges for start and end color of particles."))
      (start_alpha_low float (range 0 1) (help "Random color ranges for start and end color of particles."))
      (start_color_high color (help "Random color ranges for start and end color of particles."))
      (start_alpha_high float (range 0 1) (help "Random color ranges for start and end color of particles."))
      (end_color_low color (help "Random color ranges for start and end color of particles."))
      (end_alpha_low float (range 0 1) (help "Random color ranges for start and end color of particles."))
      (end_color_high color (help "Random color ranges for start and end color of particles."))
      (end_alpha_high float (range 0 1) (help "Random color ranges for start and end color of particles."))
      (preserve bool)
      (emitter
         (indent
            (mesh_emitter object (class Mesh) (refresh box_extent_1 box_extent_2 pitch yaw))
            (box_extent_1 VECTOR3 (read_only {!= [mesh_emitter] ""}) (help "Min point and max point, in object coordinates, of box region that particles are emitted from."))
            (box_extent_2 VECTOR3 (read_only {!= [mesh_emitter] ""}) (help "Min point and max point, in object coordinates, of box region that particles are emitted from."))
            (pitch VECTOR2 (read_only {!= [mesh_emitter] ""}))
            (yaw VECTOR2 (read_only {!= [mesh_emitter] ""}))
            
            (relative_parent object (class Trans))
            (relative_motion float)
            (subsamples int)
            (frame_drive bool)
            (pre_spawn bool)
            (pause_offscreen bool)
         )
      )
      (max_burst int (range 0 10000) (refresh burst_parameters))
      (burst_parameters
         (indent
            (time_between VECTOR2)
            (peak_rate VECTOR2)
            (duration VECTOR2)
         )
         (read_only {<= [max_burst] 0})
      )
      (fancy bool 
         (refresh fancy_parameters 
                  bubble 
                  bubble_parameters 
                  spin 
                  spin_parameters 
                  velocity_align
                  velocity_align_parameters
         )
      )
      (fancy_parameters 
         (indent
            ; commented to not crash autodoc
            (grow_ratio float (range 0 1 /*[shrink_ratio]*/))
            (shrink_ratio float (range /*[grow_ratio]*/ 0 1))
            (drag float (range 0 1))
            (mid_color_ratio float (range 0 1))
            (mid_color_low color)
            (mid_alpha_low float (range 0 1))
            (mid_color_high color)
            (mid_alpha_high float (range 0 1))
         )
         (read_only {! [fancy]})
      )
      (bubble bool (refresh bubble_parameters) (read_only {! [fancy]}))
      (bubble_parameters
         (indent
            (bubble_period VECTOR2)
            (bubble_size VECTOR2)
         )
         (read_only {|| {! [bubble]} {! [fancy]}})
      )
      (spin bool (refresh spin_parameters velocity_align) (read_only {|| [velocity_align] {! [fancy]}}))
      (spin_parameters
         (indent
            (rpm VECTOR2)
            (rpm_drag float (range 0 1))
            (start_offset VECTOR2)
            (end_offset VECTOR2)
         )
         (read_only {|| {! [spin]} {! [fancy]}})
      )
      (velocity_align bool (refresh velocity_align_parameters spin) 
                           (read_only {|| {! [fancy]} [spin]}))
      (velocity_align_parameters
         (indent
            (stretch_with_velocity bool (refresh stretch_scale constant_area perspective))
            (stretch_scale float (read_only {|| {! [velocity_align]} {|| {! [stretch_with_velocity]} {! [fancy]}}}))
            (constant_area bool (read_only {|| {! [velocity_align]} {|| {! [stretch_with_velocity]} {! [fancy]}}}))
            (perspective bool (read_only {|| {! [velocity_align]} {|| {! [stretch_with_velocity]} {! [fancy]}}}))
         )
         (read_only {|| {! [velocity_align]} {! [fancy]}})
      )
   )
)

(ParticleSysAnim
   (description "Object that animates Particle System properties.")
   (superclasses Anim)
   (ext panim)
   (types)
)

(ScreenMask
   (description "Draws full screen quad with material and color.")
   (superclasses Draw)
   (ext mask)
   (types)
   (editor
      (mat object (class Mat) (help "Material to draw on full screen quad"))
      (color color (help "Color of full screen quad"))
      (alpha float (help "Translucency of full screen quad"))
      (screen_rect RECT
        (help "The area of the screen in normalized coordinates (0 to 1) to draw into."
         )
      )
      (use_cam_rect bool (help "Use current camera screen_rect instead of the full screen"))
   )
)

(ParticleLauncher
   (description "For launching particles.")
   (superclasses)
   (ext ptlnch)
   (types)
   (editor
      (launch script (script {$this launch}))
      (part object (class ParticleSys))
      (trans object (class Trans))
      (num_parts int (range 0 1000))
      
      (use_life bool (refresh life) (post_sync {if {! [use_life]} {set [life] 0}}))
      (life float (read_only {! [use_life]}))
      
      (use_speed bool (refresh speed) (post_sync {if {! [use_speed]} {set [speed] 0}}))
      (speed float (read_only {! [use_speed]}))
      
      (use_size bool (refresh size) (post_sync {if {! [use_size]} {set [size] 0}}))
      (size float (read_only {! [use_size]}))
      
      (use_delta_size bool (refresh delta_size) (post_sync {if {! [use_delta_size]} {set [delta_size] 0}}))
      (delta_size float (read_only {! [use_delta_size]}))
      
      (use_start_color bool 
         (refresh start_color start_alpha)
         (post_sync {if {! [use_start_color]} {set [start_color] 0} {set [start_alpha] 0}})
      )
      (start_color color (read_only {! [use_start_color]}))
      (start_alpha float (read_only {! [use_start_color]}) (range 0 1))

      (use_mid_color bool 
         (refresh mid_color mid_alpha)
         (post_sync {if {! [use_mid_color]} {set [mid_color] 0} {set [mid_alpha] 0}})
      )
      (mid_color color (read_only {! [use_mid_color]}))
      (mid_alpha float (read_only {! [use_mid_color]}) (range 0 1))
      
      (use_end_color bool 
         (refresh end_color end_alpha)
         (post_sync {if {! [use_end_color]} {set [end_color] 0} {set [end_alpha] 0}})
      )
      (end_color color (read_only {! [use_end_color]}))
      (end_alpha float (read_only {! [use_end_color]}) (range 0 1))
      
      (use_emit_direction bool
         (refresh pitch_low pitch_high yaw_low yaw_high)
         (post_sync {if {! [use_end_color]} 
               {set [pitch_low] 0} {set [pitch_high] 0} {set [yaw_low] 0} {set [yaw_high] 0}})
      )
      (pitch_low float (read_only {! [use_emit_direction]}))
      (pitch_high float (read_only {! [use_emit_direction]}))
      (yaw_low float (read_only {! [use_emit_direction]}))
      (yaw_high float (read_only {! [use_emit_direction]}))
   )
)

(RndDir
   (description "A RndDir specially tracks drawable and animatable objects.")
   (editor
      (environ object (class Environ))
      (polls (array object (class Poll)) (help "List of all the polls") (read_only TRUE))
      (test_event symbol (list {$this supported_events}) (help "Test event") (no_test))
      (fire_test script (script {handle ($this [test_event])}) 
         (help "Fire test event")
      )
   )
   (superclasses ObjectDir Anim Draw Trans Poll)
   (types
      (world_fx ; represents old WorldFx class
         (editor
            (start script (script {$this start}) (help "Start animation"))
            (stop script (script {$this stop}) (help "Stop animation"))
         )
         (enter
            {$this stop}
         )
         (exit
            {$this stop}
         )
         (start
            {$this iterate ParticleSys $parts
               {$parts exit}
            }
            {$this animate (range 0 kHugeFloat)}
            {$this set_showing TRUE}
         )
         (stop
            {$this iterate ParticleSys $parts
               {$parts exit}
            }
            {$this stop_animation}
            {$this set_showing FALSE}
         )
      )
   )
)

(DeferDraw
   (description "Defers drawing a groups within a bunch of ObjectDirs until it's drawn")
   (superclasses Draw)
   (ext defer)
   (editor 
      (objects (array object (class ObjectDir) (obj_flags no_null))
         (help "The objects to draw the groups from")
      )
      (draw_name string (help "The name of the drawable to draw from each object"))
   )
   (types
   )
)

(Distort
   (description "Distortion effect")
   (superclasses Draw)
   (ext lie)
   (editor
      (drawables (array object (class Draw) (obj_flags no_null))
        (help "Dynamic lights for this environment")
      )
      (shine float
         (help "Intensity of specular shine off pulse peaks")
         (range 0.0 20.0)
      )
      (pulse
         (indent
            (center VECTOR2
               (help "pulse center")
            )
            (strength float (range 0 1)
               (help "strength of pulse")
            )
            (duration float
               (help "length of time to go from center to max range")
            )
            (ysize float
               (help "vertical size of pulse")
            )
            (xscale float
               (help "horizontal scale of pulse, 1 is round, greater than 1 is wider than tall.")
            )
            (wavelength float
               (help "length of one wave")
            )
            (glint float
               (help "strength of specular glint")
            )
            (single bool
               (help "true to have a single pulse radiate out, false for multiple ripples")
            ) 
         )
      )
      (fire_pulse script
        (help "Fire a pulse according to current settings.")
        (script {$this fire_pulse})
      )
      (random_pulse script
        (help "Fire a random pulse.")
        (script {$this fire_random})
      )
   )
   (types)
)

(PostProc
   (description "A PostProc drives post-processing effects.")
   (ext pp)
   (editor
      ; bloom
      (bloom
         (indent
            (bloom_color color 
               (help "Color bias for bloom") 
            )
            (bloom_alpha float 
               (help "Scale for explicit bloom colors (0.0 disables explicit alpha)") 
            )
            (bloom_threshold float 
               (help "Luminance intensity at which to bloom") 
            )
            (bloom_size float 
               (help "Bloom blur radius")
            )
            (bloom_intensity float 
               (help "Bloom intensity") 
            )
         )
      )
      (luminance_map object (class Tex) (help "Luminance map"))
      (exposure_flicker
         (indent
            (intensity float 
               (help "Intensity range [0..1], 0.0 to disable") 
               (range 0.0 1.0)
            )
            (secs_range VECTOR2 
               (help "Min & max number of seconds for a light to dark cycle")
            )
         )
      )
      (noise
         (indent
            (noise_base_scale VECTOR2 
               (help "X and Y tiling of the noise map")
            )
            (noise_intensity float 
               (help "intensity of the noise [-1..1], 0.0 to disable") 
               (range -1.0 1.0)
            )
            (noise_stationary bool
               (help "keep the noise map static over the screen")
            )
            (noise_map object 
               (class Tex) 
               (help "Optional noise bitmap")
            )
         )
      )
      (color_correct
         (indent
            (hue float 
               (help "Hue: -180 to 180, 0.0 is neutral") 
               (range -180 180) 
            )
            (saturation float 
               (help "Saturation: -100 to 100, 0.0 is neutral") 
               (range -100 100)
            )
            (lightness float 
               (help "Lightness: -100 to 100, 0.0 is neutral") 
               (range -100 100)
            )
            (contrast float 
               (help "Contrast: -100 to 100, 0.0 is neutral") 
               (range -100 100)
            )
            (brightness float 
               (help "Brightness: -100 to 100, 0.0 is neutral") 
               (range -100 100)
            )
            (levels
               (indent
                  (in_lo color
                     (help "Input low end")
                  )
                  (in_hi color
                     (help "Input high end")
                  )
                  (out_lo color
                     (help "Output low end")
                  )
                  (out_hi color
                     (help "Output high end")
                  )
               )
            )
         )
      )
      (posterize
         (indent
            (num_levels float
               (help "Number of levels for posterization, 0 turns off")
               (range 0.0 255.0)
            )
            (min_intensity float
               (help "Minimum intensity to posterize, 1.0 is posterize all")
               (range 0.0 1.0)
            )
         )
      )
      (mirror float
         (help "Reflection point along the screen, 0 turns off")
         (range 0.0 1.0)
      )
      (distortion
         (indent
            (distortion_scale float
               (help "Lateral amount of pixels to move")
               (range 0.0 100.0)
            )
         )
      )
      (emulate_fps float 
         (help "Frame rate to emulate, e.g. 24 for film. 0 disables emulation.") 
         (range 0.0 60.0)
      )
      (light_trail
         (indent
            (threshold float 
               (help "Min pixel value to leave trails [0..1]") 
               (range 0.0 1.0)
            )
            (duration float 
               (help "Seconds for the trails to last")
            )
         )
      )
      (select script
        (help "Set this as the current post processing effect for preview.")
        (script {$this select})
      )
      (unselect script
        (help "Turn off all post-processing effects.")
        (script {rnd reset_postproc})
      )
   )
   (types)
)

(Tex
   (description "Tex objects represent bitmaps used by materials. These
        can be created automatically with 'import tex' on the file menu.")
   (ext tex)
   (types)

   (views
      (size
         ("Width" [width])
         ("Height" [height])
         ("Bpp" [bpp])
         ("Size in kb" {$this size_kb})
      )
   )
)
 
(CubeTex
   (description "This class implements a cube map intended for environment mapping.")
   (ext cube)
   (types)
   (editor
      (right  file)
      (left   file)
      (top    file)
      (bottom file)
      (back   file)
      (front  file)
   )
)

(Set
   (description "A group of objects to propagate animation and messages")
   (ext set)
   (editor
      (objects (array object (list {$this allowed_objects})))
      (highlight_objects script 
         (script {milo set_highlights {$this get_array objects}})
      )
   )
   (types
      ('Spotlights'
         (editor
            (color color (help "Color of the spotlight"))
            (intensity float (help "Intensity of the spotlight"))
         )
         (color 0)
         (intensity 0)
      )
      ('Show set'
         (editor
            (showing bool)
         )
         (showing TRUE)
      ) 
   )
)

(Text
   (description "A Text object draws a 3D character string.")
   (superclasses Draw Trans)
   (ext txt)
   (types)
)

(Trans
   (description "Base class for transformable objects. Trans objects have
        a 3D position, rotation, and scale.")
   (ext trans)
   (types)
   (views
      ('Local transform'
         (x          {$this get_local_pos_index 0} {$this set_local_pos_index 0 $milo_value})
         (y          {$this get_local_pos_index 1} {$this set_local_pos_index 1 $milo_value})
         (z          {$this get_local_pos_index 2} {$this set_local_pos_index 2 $milo_value})
         (pitch      {$this get_local_rot_index 0} {$this set_local_rot_index 0 $milo_value})
         (roll       {$this get_local_rot_index 1} {$this set_local_rot_index 1 $milo_value})
         (yaw        {$this get_local_rot_index 2} {$this set_local_rot_index 2 $milo_value})
         ("scale x"  {$this get_local_scale_index 0} {$this set_local_scale_index 0 $milo_value})
         ("scale y"  {$this get_local_scale_index 1} {$this set_local_scale_index 1 $milo_value})
         ("scale z"  {$this get_local_scale_index 2} {$this set_local_scale_index 2 $milo_value})
      )
   )
)

(TransAnim
   (description "TransAnim objects animate the position, rotation, and
        scale of transformable objects.")
   (superclasses Anim)
   (ext tnm)
   (types)

   (views
      (num_keys
         (trans {$this num_trans_keys})
         (rot {$this num_rot_keys})
         (scale {$this num_scale_keys})
         ("is key owner" {if_else {== $this [keys_owner]} True False})
      )
   )
)

(TransArray
   (description "This object points to a bunch of Transformables and sets
   their transforms based on various type-dependent layouts.")
   (superclasses Poll Trans)
   (ext tar)
   (editor
      (targets (array object (class Trans))
         (help "Transformables we will layout, based on our type properties")
      ) 
   )
   (types
      (grid
         (editor
            (rows int (range 1 256) (help "Elements along y-axis"))
            (cols int (range 1 256) (help "Elements along x-axis"))
            (row_spacing float (range 0 10000) (help "Spacing between rows"))
            (col_spacing float (range 0 10000) (help "Spacing between columns"))
            (row_keys
               (array
                  (struct
                     (frame float (refresh row_keys))
                     (value float (range 0 1000))
                  )
               )
            )
            (col_keys
               (array
                  (struct
                     (frame float (refresh col_keys))
                     (value float (range 0 1000))
                  )
               )
            )
            (row_spacing_keys
               (array
                  (struct
                     (frame float (refresh row_spacing_keys))
                     (value float (range 0 10000))
                  )
               )
            )
            (col_spacing_keys
               (array
                  (struct
                     (frame float (refresh col_spacing_keys))
                     (value float (range 0 10000))
                  )
               )
            )
         )
      )
      (ring
         (editor
            (radius float (range 0 10000) (help "Radius of ring"))
            (rotate bool (help "Rotate each element around ring center"))
            (invert_order bool (help "Invert element placing order"))
            (radius_keys
               (array
                  (struct
                     (frame float (refresh radius_keys))
                     (value float (range 0 10000))
                  )
               )
            )
         )
      )
      (trans_anim
         (editor
            (trans_anim object (class TransAnim) 
               (help "TransAnim to distribute place evenly along")
            )
            (start float (help "Start frame of trans_anim"))
            (end float (help "End frame of trans_anim"))
            (offset float (help "Frame offset for laying out elements"))
            (offset_keys
               (array
                  (struct
                     (frame float (refresh offset_keys))
                     (value float (range 0 100000))
                  )
               )
            )
         )
      )
   )
)

(MeshDeform
   (description "Reskins target mesh according to exobones.")
   (superclasses)
   (ext deform)
   (types)
   (editor
      (mesh object (class Trans) (help "The mesh we will change") (read_only TRUE))
   )
)

(EventTrigger
   (description "Triggers animations, sfx, and responses to game events")
   (allowed_dirs RndDir)
   (ext trig)
   (superclasses)
   (types
      ; types should define "trigger" handler
      (fireworks_mgr
         (editor
            (fireworks (array object (class WorldFireworks)) (help "fireworks to launch"))
            (min_wait float (help "minimum seconds to wait"))
            (max_wait float (help "maximum seconds to wait"))
            (start_fw bool (help "Check to start fireworks, uncheck to stop them"))
         )
         (fireworks ())
         (min_wait 1)
         (max_wait 2)
         (start_fw TRUE)
         (trigger
            {if_else [start_fw]
               {$this launch}
               {delete "fireworks_launch"}
            }
         )
         (launch
            {script_task kTaskSeconds
               (delay {random_float [min_wait] [max_wait]})
               (name "fireworks_launch")
               (script
                  {foreach $f {$this get_array fireworks}
                     {$f launch}
                  }
                  {$task set_name ""}
                  {$this launch}
               )
            }
         )
      )
      (particle_setter
         (editor
            (system object (class ParticleSys) (help "particle system to animate"))
            (set_emit bool (refresh))
               (emit_low float (hide {![set_emit]}))
               (emit_hi float (hide {![set_emit]}))
            (set_color bool (refresh))
               (color_start_low color (hide {![set_color]}))
               (alpha_start_low float (hide {![set_color]}))
               (color_start_hi color (hide {![set_color]}))
               (alpha_start_hi float (hide {![set_color]}))
               (color_end_low color (hide {![set_color]}))
               (alpha_end_low float (hide {![set_color]}))
               (color_end_hi color (hide {![set_color]}))
               (alpha_end_hi float (hide {![set_color]}))
         )
         (system '')
         (emit_low 0)
         (emit_hi 1)
         (color_start_low 0)
         (color_start_hi 0)
         (alpha_start_low 0)
         (alpha_start_hi 0)
         (color_end_low 0)
         (color_end_hi 0)
         (alpha_end_low 0)
         (alpha_end_hi 0)
         (set_emit 0)
         (set_color 0)
         
         (trigger
            {do
               {if [set_emit] {[system] set_emit_rate [emit_low] [emit_hi]}}
               {if [set_color]
                  {do                 
                     {[system] set_start_color_int [color_start_low] [color_start_hi] [alpha_start_low] [alpha_start_hi]}
                     {[system] set_end_color_int [color_end_low] [color_end_hi] [alpha_end_low] [alpha_end_hi]}
                  }
               }
            }
         )
      )
      (part_launcher
         (editor
            (systems (array object (class ParticleSys)))
         )
          
         (systems ())
          
         (trigger
            {foreach $elem [systems]
               {if $elem
                  {$elem launch_part}
               }
            }
         )
      )
   )
   (editor
      (trigger_events
         (array symbol (list {$this supported_events}) (help "Events which enable this trigger"))
         (no_test)
      )
      (anims
         (array 
            (struct 
               (anim object (class Anim) (refresh)) ; changes filter settings
               (blend float)
               (delay float)
               (wait bool)
               (filter
                  (indent
                     (enable bool 
                        (refresh)
                        (help "Enable animation filtering")
                     )
                     (rate int 
                        (list RATE_ENUM) 
                        (help "Rate to animate") 
                        FILTER_READONLY
                     )
                     (start float 
                        (help "Start frame of animation") 
                        FILTER_READONLY
                     )
                     (end float 
                        (help "End frame of animation") 
                        FILTER_READONLY
                     )
                     (scale float 
                        (help "Scale of animation") 
                        FILTER_READONLY
                     )
                     (period float 
                        (help "Period of animation if non-zero") 
                        FILTER_READONLY
                     )
                     (type symbol 
                        (list (range loop dest))
                        (help "Type of animation")
                        FILTER_READONLY
                     )
                  )
               )
            )
         )
      )
      (proxy_calls
         (array
            (struct
               (proxy object (class ObjectDir))
               (call symbol (list {$this proxy_calls})) ; uses $milo_prop_path
               (event object 
                  (class EventTrigger)
                  (dir [proxy_calls {elem $milo_prop_path 1} proxy])
                  (help "event trigger to fire")
               )
            )
         )
      )
      (sounds (array object (class Sequence)))
      (shows (array object (class Draw)) (help "objects to show"))
      (hide_delays 
         (array 
            (struct
               (hide object (class Draw) (help "object to hide"))
               (delay float (help "seconds to delay hiding"))
            )
         )
      )
      (enable_events
         (array symbol (list {$this supported_events}) (help "event which enable this event trigger"))
         (no_test)
      )
      (disable_events
         (array symbol (list {$this supported_events}) (help "event which disable this event trigger"))
         (no_test)
      )
      (wait_for_events
         (array symbol (list {$this supported_events}) (help "When events are triggered, arm them, and delay fire until this handler is called"))
         (no_test)
      )
      (next_random object (class EventTrigger) (obj_flags no_this))
      (trigger script (script {$this trigger}))
   )
   (views
      (events
         ("trigger" [trigger_events 0])
         ("disable" [disable_events 0])
         ("enable" [enable_events 0])
         ("wait_for" [wait_for_events 0])
      )
   )
   (supported_events
      (start)
   )
)

