; These must correspond to program enumerations.  When it becomes
; too painful to maintain by hand, we'll write a script to do it,
; to be run in the "data build" step.

; NOTE System.cpp defines one of the following platform macros
; HX_PC
; HX_IOP
; HX_EE
; HX_XBOX
; HX_PS3
; HX_WII
;
; kDataUnhandled is also allowed

; Include guard
#ifdef TRUE
#else

; From os/System.h
#define FALSE (0)
#define TRUE (1) 

#define kPlatformNone (0)
#define kPlatformPS2 (1)
#define kPlatformXBox (2)
#define kPlatformPC (3)
#define kPlatformPS3 (4)
#define kPlatformWii (5)

#define kOldGfx (0)
#define kNewGfx (1)

; from obj/Data.h
#define kDataInt (0x0)
#define kDataFloat (0x1)
#define kDataVar (0x2)
#define kDataFunc (0x3)
#define kDataObject (0x4)
#define kDataSymbol (0x5)
; #define kDataUnhandled (0x6) already a macro
#define kDataArray (0x10)
#define kDataCommand (0x11) 
#define kDataString (0x12)
#define kDataProperty (0x13)

; from obj/Utl.h
#define kMergeMerge (0)
#define kMergeReplace (1)
#define kMergeKeep (2)

; from obj/Loader.h
#define kLoadFront (0)  ; put to the front of the load queue
#define kLoadBack (1)   ; put to the back, but in front of kLoadStayBack and kLoadFrontStayBack
#define kLoadFrontStayBack (2)   ; put the front of the kLoadStayBacks,
#define kLoadStayBack (3)  ; put to the back.

; from obj/Object.h
#define kCopyDeep (0)
#define kCopyShallow (1)
#define kCopyFromMax (2)

; From obj/Task.h
#define kTaskSeconds (0)
#define kTaskBeats (1)
#define kTaskUISeconds (2)
#define kTaskTutorialSeconds (3)
#define TASK_UNITS (("kTaskSeconds" "kTaskBeats" "kTaskUISeconds" "kTaskTutorialSeconds"))

; From rndobj/Rnd.h
#define kSquareAspect (0)
#define kRegularAspect (1)
#define kWidescreenAspect (2)
#define ASPECT_ENUM (("kSquareAspect" "kRegularAspect" "kWidescreenAspect"))

#define kProcessNone (0)
#define kProcessWorld (1)
#define kProcessPost (2)
#define kProcessAll (3)

; From rndobj/Anim.h
#define kAnimRange (0)
#define kAnimLoop (1)
#define kAnimShuttle (2)
#define ANIM_ENUM (("kAnimRange" "kAnimLoop" "kAnimShuttle"))

; From rndobj/Draw.h
#define kHighlightWireframe (0)
#define kHighlightSphere (1)
#define kHighlightNone (2)
#define HIGHLIGHT_ENUM (("kHighlightWireframe" "kHighlightSphere" "kHighlightNone"))

#define k30_fps (0)
#define k480_fpb (1)
#define k30_fps_ui (2)
#define k1_fpb (3)
#define k30_fps_tutorial (3)
#define RATE_ENUM (("k30_fps" "k480_fpb" "k30_fps_ui" "k1_fpb" "k30_fps_tutorial"))

; From math/Utl.h
#define PI (3.14159265358979323846)
#define kHugeFloat (1.0e30)

; From utl/MemMgr.cpp
#define kFirstFit (0)
#define kBestFit (1)
#define kLRUFit (2)
#define kLastFit (3)

; From os/Joypad.h
#define kPad_L2 (0)
#define kPad_R2 (1)
#define kPad_L1 (2)
#define kPad_R1 (3)
#define kPad_Tri (4)
#define kPad_Circle (5)
#define kPad_X (6)
#define kPad_Square (7)
#define kPad_Select (8)
#define kPad_L3 (9)
#define kPad_R3 (10)
#define kPad_Start (11)
#define kPad_DUp (12)
#define kPad_DRight (13)
#define kPad_DDown (14)
#define kPad_DLeft (15)
#define kPad_LStickUp (16)
#define kPad_LStickRight (17)
#define kPad_LStickDown (18)
#define kPad_LStickLeft (19)
#define kPad_RStickUp (20)
#define kPad_RStickRight (21)
#define kPad_RStickDown (22)
#define kPad_RStickLeft (23)
#define kPad_NumButtons (24)

#define kPad_Xbox_LT (0)
#define kPad_Xbox_RT (1)
#define kPad_Xbox_LB (2)
#define kPad_Xbox_RB (3)
#define kPad_Xbox_B  (4)
#define kPad_Xbox_Y  (5)
#define kPad_Xbox_A  (6)
#define kPad_Xbox_X  (7)
#define kPad_Xbox_LS (9)
#define kPad_Xbox_RS (10)

#define kLeftAnalog (0)
#define kRightAnalog (1)

#define kJoypadNone (0)
#define kJoypadDigital (1)
#define kJoypadAnalog (2)
#define kJoypadDualShock (3)
#define kJoypadMidi (4)
#define kJoypadXboxHxGuitar (5)
#define kJoypadXboxRoGuitar (6)
#define kJoypadXboxDrums (7)
#define kJoypadXboxStageKit (8)
#define kJoypadPs3HxGuitar (9)
#define kJoypadPs3HxDrums (10)

; From os/Keyboard.h
#define KB_ENTER (10)
#define KB_BACKSPACE (8)
#define KB_TAB (9)
#define KB_SPACE (32)
#define KB_a (97)
#define KB_b (98)
#define KB_c (99)
#define KB_d (100)
#define KB_e (101)
#define KB_f (102)
#define KB_g (103)
#define KB_h (104)
#define KB_i (105)
#define KB_j (106)
#define KB_k (107)
#define KB_l (108)
#define KB_m (109)
#define KB_n (110)
#define KB_o (111)
#define KB_p (112)
#define KB_q (113)
#define KB_r (114)
#define KB_s (115)
#define KB_t (116)
#define KB_u (117)
#define KB_v (118)
#define KB_w (119)
#define KB_x (120)
#define KB_y (121)
#define KB_z (122)
#define KB_CAP_LOCK (290)
#define KB_NUM_LOCK (291)
#define KB_SCROLL_LOCK (292)
#define KB_PRINT (300)
#define KB_PAUSE (301)
#define KB_ESCAPE (302)
#define KB_INSERT (310)
#define KB_DELETE (311)
#define KB_HOME (312)
#define KB_END (313)
#define KB_PAGE_UP (314)
#define KB_PAGE_DOWN (315)
#define KB_LEFT (320)
#define KB_RIGHT (321)
#define KB_UP (322)
#define KB_DOWN (323)
#define KB_F1 (401)
#define KB_F2 (402)
#define KB_F3 (403)
#define KB_F4 (404)
#define KB_F5 (405)
#define KB_F6 (406)
#define KB_F7 (407)
#define KB_F8 (408)
#define KB_F9 (409)
#define KB_F10 (410)
#define KB_F11 (411)
#define KB_F12 (412)

; From os/Memcard.h
#define kMCNoError (0)
#define kMCNoCard (1)
#define kMCNotFormatted (2)
#define kMCDifferentCard (3)
#define kMCReadWriteFailed (4)
#define kMCCorrupt (5)
#define kMCNotEnoughSpace (6)
#define kMCFileExists (7)
#define kMCFileNotFound (8)
#define kMCMultipleFilesFound (9)
#define kMCObsoleteVersion (10)
#define kMCNewerVersion (11)
#define kMCGeneralError (12)
#define kMCUnsupported (13)

; From os/PlatformMgr.h
#define kUserPrivilegeBlocked (0)
#define kUserPrivilegeFriendsOnly (1)
#define kUserPrivilegeAllowed (2)

#define kOSNotifyTopRight (0)
#define kOSNotifyBottomCenter (1)

; from libsn.h, macros for profiler
#define k1KHz (300000)
#define k2KHz (150000)
#define k4KHz (75000)
#define k10KHz (30000)
#define k20KHz (15000)

; from synth/Synth.h, synth core effects macros
#define kFXModeOff (0)
#define kFXModeRoom (1)
#define kFXModeSmallStudio (2)
#define kFXModeMedStudio (3)
#define kFXModeLargeStudio (4)
#define kFXModeHall (5)
#define kFXModeSpace (6)
#define kFXModeEcho (7)
#define kFXModeDelay (8)
#define kFXModePipe (9)

; from synth/SampleDesc.h, sample FX routing
#define kFXCoreNone (-1)
#define kFXCore0 (0)
#define kFXCore1 (1)
#define FX_CORES (("kFXCoreNone" "kFXCore0" "kFXCore1"))

; from synth/ADSR.h, ADSR constants
#define kAttackLinear (0)
#define kAttackExp (1)
#define ATTACK_MODES (("kAttackLinear" "kAttackExp"))

#define kSustainLinInc (0)
#define kSustainLinDec (2)
#define kSustainExpInc (4)
#define kSustainExpDec (6)
#define SUSTAIN_MODES (("kSustainLinInc" "kSustainLinDec" "kSustainExpInc" "kSustainExpDec"))

#define kReleaseLinear (0)
#define kReleaseExp (1)
#define RELEASE_MODES (("kReleaseLinear" "kReleaseExp"))

#define kSendAll (0)
#define kSendCenter (1)
#define kSendStereo (2)

; from rndobj/Mesh.h
#define kVolumeEmpty (0)
#define kVolumeTriangles (1)
#define kVolumeBSP (2)
#define kVolumeBox (3)

#define kMutableVerts (0x1F)
#define kMutableFaces (0x20)
#define kMutableAll (0x3F)

; from rndobj/Trans.h
#define kConstraintNone (0)
#define kConstraintLocalRotate (1)
#define kConstraintParentWorld (2)
#define kConstraintLookAtTarget (3)
#define kConstraintShadowTarget (4)
#define kConstraintBillboardZ (5)
#define kConstraintBillboardXZ (6)
#define kConstraintBillboardXYZ (7)
#define kConstraintFastBillboardXYZ (8)

; from rndobj/Obj.h
#define COPY_DEFAULT (0)
#define COPY_LITKEYS (0x2)
#define COPY_MATKEYS (0x4)
#define COPY_MESHGEOM (0x8)
#define COPY_SHARETRANS (0x10)
#define COPY_MESHKEYS (0x40)
#define COPY_PARTKEYS (0x80)
#define COPY_TRANSKEYS (0x100)
#define COPY_CHILDREN (0x200)
#define COPY_PARTS (0x400)
#define COPY_CAMKEYS (0x800)
#define COPY_ENVKEYS (0x1000)
#define COPY_BASEONLY (0x2000)

; from rndobj/Text.h
#define kLeft (0x01)
#define kCenter (0x02)
#define kRight (0x04)
#define kTop (0x10)
#define kMiddle (0x20)
#define kBottom (0x40)
#define kTopLeft (0x11)
#define kTopCenter (0x12)
#define kTopRight (0x14)
#define kMiddleLeft (0x21)
#define kMiddleCenter (0x22)
#define kMiddleRight (0x24)
#define kBottomLeft (0x41)
#define kBottomCenter (0x42)
#define kBottomRight (0x44)
#define kCapsModeNone (0)
#define kForceLower (1)
#define kForceUpper (2)

; from rndobj/Tex.h
#define kTexRegular (0x1)
#define kTexRendered (0x2)
#define kTexMovie (0x4)
#define kTexBackBuffer (0x8)
#define kTexFrontBuffer (0x18)
#define kTexRenderedNoZ (0x22)

; from rndobj/Lit.h
#define kLightPoint (0)
#define kLightDirectional (1)
#define kLightFakeSpot (2)
#define kLightFloorSpot (3)
#define kLightShadowRef (4)

; from world/camshot.h
#define kShotNoBans (0)
#define kShotNoPs3  (1)
#define kShotNoXbox (2)

; from world/Spotlight.h
#define kBeamConic (0)
#define kBeamRect (1)
#define kBeamSheet (2)
#define kBeamQuadXYZ (3)
#define kBeamQuadZ (4)

; from world/Crowd.h
#define kCrowdRotateNone (0)
#define kCrowdRotateFace (1)
#define kCrowdRotateAway (2)
#define CROWD_ROTATE (("kCrowdRotateNone" "kCrowdRotateFace" "kCrowdRotateAway"))

; from rndobj/Mat.h
#define kBlendDest (0)
#define kBlendSrc (1)
#define kBlendAdd (2)
#define kBlendSrcAlpha (3)
#define kBlendSrcAlphaAdd (4)
#define kBlendSubtract (5)
#define kBlendMultiply (6)
#define BLEND_ENUM (("kBlendDest" "kBlendSrc" "kBlendAdd" "kBlendSrcAlpha" "kBlendSrcAlphaAdd" "kBlendSubtract" "kBlendMultiply"))

#define kZModeDisable (0)
#define kZModeNormal (1)
#define kZModeTransparent (2)
#define kZModeForce (3)
#define kZModeDecal (4)
#define ZMODE_ENUM (("kZModeDisable" "kZModeNormal" "kZModeTransparent" "kZModeForce" "kZModeDecal"))

#define kStencilIgnore (0)
#define kStencilWrite (1)
#define kStencilTest (2)
#define STENCILMODE_ENUM (("kStencilIgnore" "kStencilWrite" "kStencilTest"))

#define kTexWrapClamp (0)
#define kTexWrapRepeat (1)
#define kTexBorderBlack (2)
#define kTexBorderWhite (3)
#define TEXWRAP_ENUM (("kTexWrapClamp" "kTexWrapRepeat" "kTexBorderBlack" "kTexBorderWhite"))

#define kTexGenNone (0)
#define kTexGenXfm (1)
#define kTexGenSphere (2)
#define kTexGenProjected (3)
#define kTexGenXfmOrigin (4)
#define kTexGenEnviron (5)
#define TEXGEN_ENUM (("kTexGenNone" "kTexGenXfm" "kTexGenSphere" "kTexGenProjected" "kTexGenXfmOrigin" "kTexGenEnviron"))

; milo/History.h
#define kRecordRegular (0)
#define kRecordCreated (1)
#define kRecordDeleted (2)

; net/Defines.h
#define kNetUnreliable  (0)
#define kNetReliable    (1)

#define kNetLocal (0)
#define kNetHost  (1)
#define kNetJoin  (2)

#define kNetInLobby  (0)
#define kNetLoading  (1)
#define kNetInGame   (2)

#define kNetSuccess     (0)
#define kNetNotHosting  (1)
#define kNetBusy        (2)
#define kNetNoRoom      (3)
#define kNetWrongMode   (4)
#define kNetNoJoiningAllowed  (5)
#define kNetPlayerAuthenticationFailed (6)

; NetSession messages
#define JOIN_RESPONSE_MSG (
   join_response_msg ($joined) ($error)
)
#define REMOTE_PLAYER_LEFT_MSG (
   remote_player_left_msg ($player_num)   
)
#define REMOTE_PLAYER_CHANGED_MSG (
   remote_player_changed_msg ($player_num)
)
#define NEW_REMOTE_PLAYER_MSG (
   new_remote_player_msg ($player_num $player_data)
)
#define CHANGE_GAME_MSG (
   change_game_msg ($game_data)
)
#define END_GAME_MSG (
   end_game_msg ($result $report)
)

; Xbox Live messages
#define INVITE_ACCEPTED_MSG (
   invite_accepted ($padnum)
)

; Generic os/PlatformMgr messages
#define VIRTUAL_KEYBOARD_RESULT_MSG (
   virtual_keyboard_result_msg ($ok $text)
)

#define UI_CHANGED_MSG (
   ui_changed ($showing)
)

#define SIGNIN_CHANGED_MSG (
   signin_changed ($signin_mask $signin_changed_mask)
)

; Joypad messages
#define BUTTON_DOWN_MSG (
   button_down ($button $player_num)
)
#define BUTTON_UP_MSG (
   button_up ($button $player_num)
)
#define JOYPAD_CONNECT_MSG (
   joypad_connect ($player_num $connected)
)

; Keyboard messages
#define KEY_MSG (
   key ($key $shift $control $alt)
)

; Memcard messages
#define MEMCARD_RESULT_MSG (
   memcard_result ($result)
)

; UI messages
#define SELECT_MSG (
   component_select ($component $player_num)
)
#define SELECT_START_MSG (
   component_select_start ($component $button $player_num)
)
#define FOCUS_MSG (
   component_focus ($new_focus $old_focus $panel_dir)
)
#define SCREEN_CHANGE_MSG (
   screen_change ($new_screen $old_screen $back)
)
#define TRANSITION_COMPLETE_MSG (
   transition_complete ($new_screen $old_screen)
)
#define TEXT_ENTRY_MSG (
   text_entry ($component $text)
)
#define TEXT_ENTRY_INVALID_MSG (
   text_entry_invalid ($component $bad_char $end_of_field)
)
#define SCROLL_SELECT_MSG (
   component_scroll_select ($component $selected $player_num)
)
#define SCROLL_MSG (
   component_scroll ($component $player_num)
)

; from ui/Component.h
#define kComponentNormal (0)
#define kComponentFocused (1)
#define kComponentDisabled (2)
#define kComponentSelecting (3)

; from ui/Label.h
#define kFitWrap (0)
#define kFitStretched (1)
#define kFitJust (2)  

; from ui/ListDisplay.h
#define kArrowAlways (0)
#define kArrowOnlyFocused (1)
#define kArrowNever (2)

#define kExcitementBoot (0)
#define kExcitementBad (1)
#define kExcitementOkay (2)
#define kExcitementGreat (3)
#define kExcitementPeak (4)
#define kNumExcitements (5)

; from anim/CharClip.h

; When/where to start blending into.
#define kPlayNow (0x01) ; Default, start blending right now.
#define kPlayNoBlend (0x02) ; Go to start of clip RIGHT NOW, no blending.
#define kPlayFirst (0x03) ; Take the first transition to anywhere in the other clip.
#define kPlayLast (0x04) ; Find the longest loop overall to go to the clip.
#define kPlayDirty  (0x08) ; Start blending now but mark weight as .00001 so you can push things on top of it without it getting popped off.
   
; When finished playing and ready to loop.
#define kPlayNoLoop (0x10) ; just keep going.
#define kPlayLoop (0x20) ; this animation loops perfectly, play it back as such.
#define kPlayGraphLoop (0x30) ; use the anim graph to find the kPlayLast loop
#define kPlayNodeLoop (0x40) ; same as above, but reevaluates the node used to play the last anim

#define kPlayRealTime (0x200)  ; play in real time, not to the beat.
#define kPlayUserTime (0x400)  ; the user will set mDframe each frame to move it.
#define kPlayBeatAlign1 (0x1000) ; align to this many beats.
#define kPlayBeatAlign2 (0x2000) 
#define kPlayBeatAlign4 (0x4000)
#define kPlayBeatAlign8 (0x8000)

#define kPlayNoDefault (0x0)
#define kPlayBeatTime (0x0)

#define PLAY_BLEND_FLAGS
(
   ("kPlayNoDefault" "kPlayNow" "kPlayDirty" "kPlayNoBlend" "kPlayFirst" "kPlayLast")
)

#define PLAY_LOOP_FLAGS
(
   ("kPlayNoDefault" "kPlayNoLoop" "kPlayLoop" "kPlayGraphLoop" "kPlayNodeLoop")
)

#define PLAY_TIME_FLAGS
(
   ("kPlayBeatTime" "kPlayRealTime" "kPlayBeatAlign1" "kPlayBeatAlign2" "kPlayBeatAlign4" "kPlayBeatAlign8")
)

; From char/CharBone.h
#define kRotNone (9) ; type_end
#define kRotFull (2)
#define kRotX (3)
#define kRotY (4)
#define kRotZ (5)

; From char/CharDriver.h
#define kApplyBlend (0)
#define kApplyAdd (1)
#define kApplyRotateTo (2)

; From CharHair.h
#define kCollidePlane (0)
#define kCollideSphere (1)
#define kCollideInsideSphere (2)
#define kCollideCylinder (3)
#define kCollideInsideCylinder (4)

; From char/FaceFxLipSync
#define kFaceFxLipSyncRotX (0)
#define kFaceFxLipSyncRotY (1)
#define kFaceFxLipSyncRotZ (2)

#define FACE_FX_LIP_SYNC_OPS (
   (
      "kFaceFxLipSyncRotX"
      "kFaceFxLipSyncRotY"
      "kFaceFxLipSyncRotZ"
   )
)

; from math/Utl.h
#define kDbSilence (-96.0)

; Arkbuild macros
#define STD_EXTS (.dtb .dtx .seq .mid .bin .acp .acs .acg .fac .voc
                  .usr .vnn .xvocab)
#define PS2_EXTS (.milo_ps2 .ipu .vgs .icn .dta .wav_ps2 .pss .ico .sys _keep*.png_ps2 _keep*.bmp_ps2 .pan)
#define WII_EXTS (.milo_wii .wav_wii .mogg)		; PGM FIXME WII - update this!
#define XBOX_EXTS (.milo_xbox _keep*.png_xbox _keep*.bmp_xbox .xbv .hxma .mogg xbox_shaders)
#define PS3_EXTS (.milo_ps3 _keep*.png_ps3 _keep*.bmp_ps3 .xbv .vpo .fpo .mogg ps3_shaders icon0.png)
#define STD_SKIP_DIRS (CVS iop test tools .svn text-base prop-base)

; Dirs for arkbuild and sysutl precache
#define SYSTEM_SUBDIRS
(
   "../../system/run/char"
   "../../system/run/config"
   "../../system/run/shaders"
   "../../system/run/track"
   "../../system/run/ui"
   "../../system/run/world"
)

; Ext's for running from HD on xbox (for xbsync)
#define XBOX_HD_EXTS (.dta .seq .mid .bin .milo .xnse .xbnk .xbv .mogg .png .png_xbox .bmp .ltf .acs .acg)

; from world/EventTrigger.h
#define kTriggerNone (0)
#define kTriggerShow (1)
#define kTriggerHide (2)
#define kTriggerEnable (3)
#define kTriggerDisable (4)

; convenience for milo editor blocks
#define HIDE_IN_PROXY ((hide {!= $this {$this dir}}))

;;
;; List of languages (see system/run/config/default.dta)
;;
;; eng == English
;; ita == Italian
;; fre == French
;; deu == German
;; esl == Spanish
;; ptb == Portuguese (Brazillian)
;; kor == Korean
;; jpn == Japanese
;; cht == Chinese (Traditional)

#define LANGUAGES 
(
   (eng)
)

; for stage kits
#define kStageOff                  (0)
#define kStageOn                   (1)
#define kStageBass                 (2)
#define kStageDrumKick             (3)
#define kStageDrumSnare            (4)  
#define kStageDrumCrash            (5)
#define kStageGuitar               (6)
#define kStageVocal                (7)
#define kStageSweepLeft_slow       (8)
#define kStageSweepLeft_medium     (9)
#define kStageSweepLeft_fast       (10)
#define kStageSweepRight_slow      (11)
#define kStageSweepRight_medium    (12)
#define kStageSweepRight_fast      (13)

#define kStageOne                (0)
#define kStageTwo                (1)
#define kStageFour               (2)
#define kStageOneOffset          (3)
#define kStageTwoOffset          (4)
#define kStageFourOffset         (5)
#define kStageAll                (6)

#define kStageStrobeOff          (0)
#define kStageStrobe6            (6)
#define kStageStrobe8            (8)
#define kStageStrobe10           (10)
#define kStageStrobe12           (12)

; for M2 objects
#define kGemTypeNormal  (0)
#define kGemTypeDoubler (1)
#define kGemTypeCatcher (2)

; player hookup macros for GH2/Band
#define kPlayer1 (0)
#define kPlayer2 (1)
#define kPlayerNone (-1)
#define kPlayerShared (-2)

; MidiParser
#define kMPGem1 (1)
#define kMPGem2 (2)
#define kMPGem3 (4)
#define kMPGem4 (8)
#define kMPGem5 (16)

#endif
