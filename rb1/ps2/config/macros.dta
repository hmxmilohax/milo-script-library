#ifdef APP_MACROS_DTA
#else
#define APP_MACROS_DTA (1)

#define INIT_BAND(1)

#include sfx_macros.dta
#include ../../../system/run/config/macros.dta
#include ../../../system/run/band/band_macros.dta
;
; Full Body Animation
;

#define kLeftArm   (0x000001) ; Animate the left arm with this CharClip
#define kRightArm  (0x000002) ; Animate the right arm with this CharClip
#define kLeftLeg   (0x000004) ; Animate the left leg with this CharClip
#define kRightLeg  (0x000008) ; Animate the right leg with this CharClip

; Tempo Flags
#define kTempoSlow   (0x000010) ; good for slow songs.
#define kTempoMedium (0x000020) ; good for medium songs
#define kTempoFast   (0x000040) ; good for fast songs.
#define kTempoAll    (0x000070) ; all tempo flags.
; For songs or clips that straddle two tempos
#define kTempoMediumSlow   (0x000030) ; slow + medium
#define kTempoMediumFast (0x000060) ; slow + fast


; Genre Flags
#define kGenreRocker    (0x000100) ; good for classic rock.
#define kGenreDramatic  (0x000200) ; good for glam 
#define kGenreBanger    (0x000400) ; good for heavy metal.
#define kGenreSpazz     (0x000800) ; good for punk rock.
#define kGenreAll       (0x000F00) ; all of em!

#define kPlayAndAttitudeFlags (0x07FF00)


; Character Flags, since bass and guitarist share.  Guitarist anims need 
; one or both of these flagged.
#define kValidGuitar        (0x100000) ; good for guitarist.
#define kValidBass          (0x200000) ; good for bassist.
#define kExpressionFirst    (0x400000) ; play this anim first
#define kIgnoreAccent       (0x800000) ; ignore accent animation system
#define kAnimateEyes       (0x1000000) ; The charclip should animate the eyes.
#define kDisableLipSync    (0x2000000) ; The charclip should disable lipsync for the singer.
#define kSaveMe            (0x8000000) ; Save this clip

; Hair and collision
#define kHairBack          (0x0001)
#define kHairChest         (0x0002)
#define kHairForehead      (0x0004)
#define kHairHead          (0x0008)
#define kHairLeftShoulder  (0x0010)
#define kHairRightShoulder (0x0020)
#define kHairFace          (0x0040)
#define kHairNeck          (0x0080)
#define kHairLeftThigh     (0x0100)
#define kHairRightThigh    (0x0200)
#define kHairLeftHip       (0x0400)
#define kHairRightHip      (0x0800)

#define CHAR_HAIR_FLAGS
(
   "kHairBack"
   "kHairChest"
   "kHairFace"
   "kHairForehead"
   "kHairHead"
   "kHairLeftShoulder"
   "kHairRightShoulder"
   "kHairNeck"
   "kHairLeftThigh"
   "kHairRightThigh"
   "kHairLeftHip"
   "kHairRightHip"
)

#define kHideLongCoat (0x0001)

#define CHAR_HIDE_FLAGS
(
   "kHideLongCoat"
)


;
; Game
;

#define kMottoLength (64)


;; Keep in sync with game/Defines.h
#define kDifficultyEasy   (0)
#define kDifficultyMedium (1)
#define kDifficultyHard   (2)
#define kDifficultyExpert (3)
#define DIFF_SYMBOLS (easy medium hard expert)

#define kTrackDrum   (0)
#define kTrackBass   (1)
#define kTrackGuitar (2)
#define kTrackVocals (3)
#ifdef HX_XBOX
#define kTrackNone   (4)
#define TRACK_SYMBOLS (drum bass guitar vocals none)
#else ; REA - Additional track type for a band quick play
#define kTrackBand   (4)
#define kTrackNone   (5)
#define TRACK_SYMBOLS (drum bass guitar vocals band none)
#endif

; state for track panel
#define kTrackOff (0)
#define kTrackLocal (1)
#define kTrackNet (2)

; all types of controllers (guitar means guitarist OR bassist)
#define kControllerDrum   (0)
#define kControllerGuitar (1)
#define kControllerVocals (2)
#define kControllerNone   (3)
#define CHAR_INSTRUMENT_SYMBOLS (drum guitar vocals none)

#define kSoloFeedback (0)
#define kSoloMayhem   (1)
#define kSoloRiff     (2)
#define kSoloSustain  (3)
#define kSoloWhammy   (4)

; GemPlayer.h
#define kStreakMultiplier (0)
#define kStreakBandEnergy (1)

; Player.h
#define kPlayerEnabled (0)
#define kPlayerDisabled (1)
#define kPlayerBeingSaved (2)
#define kPlayerDisconnected (3)
#define kPlayerInactive (4)

; Guitar hands, separate space 
#define kBassPluck (0x01000000) ; to allow bass hand to alternate picking
#define kBassSlap (0x02000000)

;
; Player Arrangements
;
#define kArrangeBand (0)
#define kArrangeHth  (1)

;
; game/GameConfig.h
;

#define kGameJoinCanJoin           (0)
#define kGameJoinNoInstrument      (1)
#define kGameJoinNotSignedIn       (2)
#define kGameJoinGuestWithoutOwner (3)
#define kGameJoinNoRoomForLocal    (4)

;
; SLOTS - Player ordering for both in-game and shell
;
; Left-to-right
;    Parts of the shell flow that need to worry about position happen BEFORE
;    guitar/bass is sorted out, so guitar == both gutiar & bass parts
#define COOP_SLOTS_ORDER (guitar drum vocals guitar)

; These defines MUST correspond to the positions in COOP_SLOTS_ORDER
#define kGameCoopSlotGuitar0 (0)
#define kGameCoopSlotDrum    (1)
#define kGameCoopSlotVocals  (2)
#define kGameCoopSlotGuitar1 (3)

#define kGameHthSlot0 (0)
#define kGameHthSlot1 (1)


; GameControllerState
#define kGameControllerAll              (0)
#define kGameControllerParticipating    (1)
#define kGameControllerNotParticipating (2)

;
; RowState - BandLineupPanel.h
;
#define kMetaLineupEmpty         (0)
#define kMetaLineupPlaying       (1)
#define kMetaLineupOffline       (2)
#define kMetaLineupSubOnly       (3)
#define kMetaLineupSubForOffline (4)

;
; game/CameraSystem.h
;

#define kCamLeft    (0x001)
#define kCamRight   (0x002)
#define kCamCloseup (0x004)
#define kCamNear    (0x008)
#define kCamFar     (0x010)
#define kCamBehind  (0x020)
#define kCamSolo    (0x040)
#define kCamNoSolo  (0x080)
#define kCamSpecial (0x100)

;
; meta/Tour.h
;
#define kMetaTour_StartNew      (0)
#define kMetaTour_UnknownRemote (1)
#define kMetaTour_KnownLocal    (2)
#define kMetaTour_KnownRemote   (3)

;
; meta/TutorialHopoTrain.h
;

#define kNoHopoTutorial   (0)
#define kHammerOnTutorial (1)
#define kPullOffTutorial  (2)

;
; game/Leaderboards.h
;

#define kPlayerSong     (0)
#define kBandSong       (1)
#define kBandStars      (2)
#define kBandFans       (3)
#define kHTHRanked      (4)
#define kHTHProRanked   (5)


#define kByGamer        (0)
#define kByGamerRank    (1)
#define kByRank         (2)
#define kByFriends      (3)

;
; net_band/RockCentral.h
;

#define kMandatory   (0)
#define kDesirable   (1)
#define kDontCare    (2)
#define kProhibited  (3)

#define kRCOffline        (0)
#define kRCConnecting     (1)
#define kRCOnline         (2)
#define kRCDisconnecting  (3)
#define kRCFailed         (4)

#define ROCK_CENTRAL_OP_COMPLETE_MSG
(
   rock_central_op_complete_msg ($success $arg1 $arg2)
)

;
; RBReturnCodes.h, RockBand.ddl, & BandEntities.py
;

#define RB_RETCODE_SUCCESS             ( 0)
#define RB_RETCODE_SERVER_DOWN         ( 1)
#define RB_RETCODE_BAND_NAME_PROFANE   ( 2)
#define RB_RETCODE_BAND_MOTTO_PROFANE  ( 3)
#define RB_RETCODE_CHAR_NAME_PROFANE   ( 4)
#define RB_RETCODE_BAND_NAME_DUP       ( 5)
#define RB_RETCODE_BAND_NAME_IP        ( 6)
#define RB_RETCODE_BAND_MOTTO_IP       ( 7)
#define RB_RETCODE_CHAR_NAME_IP        ( 8)
#define RB_RETCODE_CHAR_MOTTO_PROFANE  ( 9)
#define RB_RETCODE_CHAR_MOTTO_IP       (10)


;
; UI
;

; UI States
#define kNormal (0)
#define kFocused (1)
#define kDisabled (2)

#define BAD_SELECT_MSG 
(
   component_bad_selection
)

#define GH_CANCEL_MSG 
(
   component_cancel_selection ($component $panel $screen $button)
)

; UISink.h
; Error Reasons
#define kLostConnection (0)
#define kLoneHeadToHead (1)
#define kLoneBandCoop   (2)
#define kNoLeader       (3)
#define kKicked         (4)
#define kLostServer     (5)
#define kControllerSwap (6)
#define kEthernetUnplugged  (7)
#define kLocalUserSignedOut (8)
#define kBandOwnerSignedOut (9)
#define kProfileOwnerSignedOut (10)
#define kLostSongData (11)
   
; Block Modes
#define kBlockNone            (0)
#define kBlockShop            (1)
#define kBlockRankedResults   (2)
#define kBlockSaveLoad        (3)
#define kBlockSessionBusy     (4)
#define kBlockLoadingGame     (5)

; track
#define kMeshGem      (0)
#define kMeshGemGlow  (1)
#define kMeshGemMiss  (2)
#define kMeshTop      (3)
#define kMeshHopoTop  (4)
#define kMeshStar     (5)
#define kMeshStarTop  (6)
#define kMeshBonus    (7)
#define kMeshBonus2   (8)

#define WIN_MESSAGE_SECS (3)

; Network
#define kRestart (0)
#define kLost (1)
#define kWon (2)
#define kWonBand0 (3)
#define kWonBand1 (4) 
#define kWonTie (5)
#define kQuit (6)

; Validation

#define MAX_WIN_LOSE_SEC (10.8)   
#define MAX_INTRO_SEC (0)

; bring in XLAST-defined macros
#include xlast_macros.dta

#define VENUES
(
   blank_01
   #ifndef MINIMAL_VENUES
   small_club_01
   small_club_02
   small_club_03
   small_club_04
   small_club_05
   small_club_06
   small_club_07
   small_club_08
   small_club_09
   small_club_10
   small_club_11
   small_club_12
   #endif ;MINIMAL_VENUES
   arena_01
   arena_02
   arena_03
   arena_04
   arena_05
   arena_06
   arena_07
   arena_08
   #ifndef MINIMAL_VENUES
   theater_01
   theater_02
   theater_03
   theater_04
   theater_05
   theater_06
   theater_07
   theater_08
   theater_09
   #endif ;MINIMAL_VENUES
   big_club_01
   big_club_02
   big_club_03
   big_club_04
   big_club_05
   big_club_06
   big_club_07
   big_club_08
   big_club_09
   big_club_10
   big_club_11
   big_club_12
)

; head to head venues
#define HTH_VENUES
(
   blank_01
   big_club_01
   big_club_02
   big_club_03
   big_club_04
   big_club_05
   big_club_06
   big_club_07
   big_club_08
   big_club_09
   big_club_10
   big_club_11
   big_club_12
)

;; enums for the net delegator
#define kRemoteHit          (  0 )
#define kRemotePenalize     (  1 )
#define kRemoteWhammy       (  2 )
#define kRemoteStreak       (  3 )
#define kRemoteScore        (  4 )
#define kRemoteCrowd        (  5 )
#define kRemoteEnergy       (  6 )
#define kRemoteDeploy       (  7 )
#define kRemoteEnabled      (  8 )
#define kRemoteFill         (  9 )
#define kRemoteFillHit      ( 10 )
#define kRemoteSoloStart    ( 11 )
#define kRemoteSoloHit      ( 12 )
#define kRemoteSoloEnd      ( 13 )
#define kRemoteVocalState   ( 14 )
#define kRemoteTambourine   ( 15 )
#define kRemoteCodaPoints   ( 16 )
#define kRemoteCodaLastGem  ( 17 )
#define kRemoteBlowCoda     ( 18 )
#define kRemoteAlreadySaved ( 19 )
#define kRemoteGuitarFx     ( 20 )
   
; TourWorld.h
#define kTourVenueNormal   (0)
#define kTourVenueUnlock   (1)
#define kTourVenueDownload (2)

; TourPerformer.h
#define kTourLocked (0) ; can't play yet
#define kTourPlayed (1) ; played
#define kTourNew    (2) ; can play, haven't played yet
; convenience
#define kTourCompleted ({| kTourEasy kTourMedium kTourHard kTourExpert})
#define kTourCanPlay ({| kTourCompleted kTourNew})

; for saving
#define kTourPerfDirtySave   (0x1)
#define kTourPerfDirtyUpload (0x2)

; TourBand.h
#define kTourBuzzNone   (0)
#define kTourBuzzCap    (1)
#define kTourBuzzMaxCap (2)

; enums for vocal style
#define kVocalStyleStatic     ( 0 )
#define kVocalStyleScrolling  ( 1 )

; progressive scan timer
#define kProgressiveScanConfirmTime (15.0)

; useful for limiting a UIPanel or UIScreen to only accept input
; from players in the current session and local to the leader
#define LIMIT_TO_LEADER_SESSION
(
   (allow_player ($player_num)
      {||
         {&&
            {is_leader_local}
            {game is_player_participating $player_num}
         }
         {gamemode get always_allow_player}
      }  
   )   
)

#define LIMIT_TO_SESSION
(
   (allow_player ($player_num)
      {game is_player_participating $player_num}
   )   
)

#define LIMIT_TO_SESSION_IF_LEADER
(
   (allow_player ($player_num)
      {|| 
         {== {game get leader_num} -1}
         {game is_player_participating $player_num}
      }  
   ) 
)

; for showing waiting for leader helpbar
#define HELPBAR_WAITING_FOR_LEADER
(
   (helpbar_waiting {if_else {is_leader_local} 0 shell_waiting_for_leader})
   
   ; tells band_ui_sink to show remote exit dialog on back button press
   (allow_remote_exit TRUE)
)

#endif ; APP_MACROS_DTA

