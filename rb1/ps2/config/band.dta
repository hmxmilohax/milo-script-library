#include macros.dta

(mem
   #include mem.dta
)

(content_mgr
   (roots ".") /* "tutorial" */

   (file_read_failed
      {band_ui_sink content_file_read_failed}
   )
)

(profile_mgr
   (max_chars_per_inst    8) ;; x3 instruments
   (max_leaders_per_char 10) ;; how many bands a single char can lead
   (max_bands_per_char   20) ;; how many bands a single char is a member of
   
   (char_name_length     20)
   (band_name_length     40)
   (motto_length         64) ;; aka quote
)

(platform_mgr
   ; no > or < because of markup...
  (keyboard_allowed_chars 
      " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\q#$%&'()*+,-./:;=?@[\]^_`{|}~°¡¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ"
  )
)

(system
#ifdef HX_PC
   (ng TRUE)
#else
   (ng FALSE)
#endif
   (language 
      (force eng)
   )

   (iop_modules
      ('iop/scrtchpd.irx') ; scratchpad memory
      ('iop/sio2man.irx')  ; memcard
      ('iop/mtapman.irx')  ; multitap     // PGM -- SCEA says mtapman before mcman or padman
      ('iop/mcman.irx')    ; memcard
      ('iop/mcserv.irx')   ; memcard
		('iop/usbd.irx' "thpri=15,16")     ; USB
#ifndef _SHIP
      ('iop/usbkb.irx' "keybd=1" "debug=0") ; USB keyboard
#endif
      ('iop/padman.irx')   ; joypad
      ('iop/msifrpc.irx')  ; SIF (EE/IOP communication)
      ('iop/libsd.irx')    ; sound
      ('iop/sdrdrv.irx')   ; sound (remote calls from EE)
      ('iop/cdvdstm.irx')  ; CD streaming
      
      ; REA - USB driver activate!
#ifdef _DEBUG
      ('iop/usbhmx_d.irx')
#else
#ifdef _SHIP
      ('iop/usbhmx_s.irx')
#else
      ('iop/usbhmx_r.irx')
#endif
#endif

   )

   (xbox_map_file "%s/band_%s.map")
)

(synth
   #include synth.dta
)

(joypad
   (ignore)             ; don't ignore anything!
 
   ; button repeat
   (hold_ms 1000)
   (repeat_ms 80)

   (midi_joypad
      (disable FALSE)
   )

   ;; Maps joypad controller type to beatmatch controller type
   ;; If right side is a pair, it's (lefty righty)
   (controller_mapping
      (ro_guitar            guitar)
      (ro_guitar_xbox       ro_guitar_xbox)
      (strat_xbox           ro_guitar_xbox)
      (hx_guitar_ps3        hx_guitar_ps3)

      (midi                 midi_drums)
      (hx_drums_xbox        hx_drums_xbox)
      (hx_drums_ps3         hx_drums_ps3)

      (hx_xbox              joypad_guitar_xbox)
      (digital              joypad)
      (analog               joypad)
      (dualshock            joypad)
      (stagekit_xbox        joypad)
      (gamecube            joypad)
      (wii_core            joypad)
      (wii_freestyle    joypad)
      (wii_classic         joypad)

      (none                 joypad)
   )

   ;; What controllers can play what instruments
   (instrument_mapping
      (ro_guitar            kControllerGuitar)
      (ro_guitar_xbox       kControllerGuitar)
      (strat_xbox           kControllerGuitar)
      (hx_guitar_ps3        kControllerGuitar)

      (midi                 kControllerDrum)
      (hx_drums_xbox        kControllerDrum)
      (hx_drums_ps3         kControllerDrum)

      (hx_xbox              kControllerVocals)
      (digital              kControllerVocals)
      (analog               kControllerVocals)
      (dualshock            kControllerVocals)
      (stagekit_xbox        kControllerVocals)
      (gamecube            kControllerVocals)
      (wii_core            kControllerVocals)
      (wii_freestyle    kControllerVocals)
      (wii_classic         kControllerVocals)

      (none                 kControllerNone)
   )
)

(spew
   #include spew.dta
)

(timer
#ifdef HX_XBOX
   (draw (enable TRUE))
   (world (enable TRUE) (draw FALSE))
   (world_regular (enable TRUE) (budget 9)) ; world on regular frames
   (world_postproc (enable TRUE) (budget 9)) ; world on postproc frames
   (hud_track (enable TRUE) (budget 6))
   (game (enable TRUE) (budget 1))
   (cpu (draw FALSE))
   (cpu_regular (enable TRUE) (budget 16.7)) ; cpu on regular frames
   (cpu_postproc (enable TRUE) (budget 16.7)) ; cpu on postproc frames
   (gs (draw FALSE))
   (gs_regular (enable TRUE) (budget 16.7)) ; gs on regular frames
   (gs_postproc (enable TRUE) (budget 16.7)) ; gs on postproc frames
   (synth_poll (enable TRUE))
   (net_poll (enable TRUE))
   (debug (enable TRUE))
#else
#ifdef HX_PS3
   (draw (enable TRUE))
   (world (enable TRUE) (draw FALSE))
   (world_regular (enable TRUE) (budget 9)) ; world on regular frames
   (world_postproc (enable TRUE) (budget 9)) ; world on postproc frames
   (hud_track (enable TRUE) (budget 6))
   (game (enable TRUE) (budget 1))
   (cpu (draw FALSE))
   (cpu_regular (enable TRUE) (budget 16.7)) ; cpu on regular frames
   (cpu_postproc (enable TRUE) (budget 16.7)) ; cpu on postproc frames
   (gs (draw FALSE))
   (gs_regular (enable TRUE) (budget 16.7)) ; gs on regular frames
   (gs_postproc (enable TRUE) (budget 16.7)) ; gs on postproc frames
   (gs_idle (enable TRUE)) ; total time GPU is idle, such as waiting for vsync
#else
#ifdef HX_EE
   
   ;(world_regular (enable TRUE) (budget 1)) ; world on regular frames
   (anim (enable TRUE))
   (synth (enable TRUE))
   (movie (enable TRUE) (budget 7) (draw TRUE))
   (ui_draw (enable TRUE))
   (ui_poll (enable TRUE))

   (cpu (draw FALSE))
   (cpu_regular (enable TRUE) (budget 16.7)) ; cpu on regular frames
   (gs (draw FALSE))
   (gs_regular (enable TRUE) (budget 15.0)) ; gs on regular frames
   
   (trackpanel_poll (enable FALSE) (budget 5))
   (draw (enable FALSE))
   (world (enable TRUE) (draw FALSE))
   
   (vag_decryption (enable FALSE))
#else

   (draw (enable TRUE))
   (world (enable TRUE) (budget 9))
   (hud_track (enable TRUE) (budget 6))
   (game (enable TRUE) (budget 1))
#endif
#endif
#endif
)

(rnd
   (bpp 32)
   (title "Rock Band")
   (overlays
      (time (lines 1) (showing FALSE) (color 0 0 0 0.7))
      (cheats (lines 1) (showing FALSE) (color 0 0 0 0.7))
      (light_preset (lines 4) (showing FALSE) (color 0 0 0 0.5))
      (camera (lines 5) (showing FALSE) (color 0 0 0 0.5))
      (char_status (lines 4) (showing FALSE))
      (score (lines 15) (showing FALSE))
      (score_debug (lines 1) (showing FALSE))
      (lights (lines 1) (showing FALSE))
      (camtest (lines 1) (showing FALSE))
      (latency (lines 2) (showing FALSE))      
   )

   ; sets the game time by subtracting world, hud, track from cpu
   (timer_script
      {set_timer_ms game {- {- {- {timer_ms cpu} {timer_ms world}} {timer_ms hud_track}} {timer_ms debug}}}
      {switch {rnd last_proc_cmds}
         (kProcessPost
            {set $world_postproc {timer_ms world}}
            {set $cpu_postproc {timer_ms cpu}}
            {set $gs_postproc {timer_ms gs}}
         )
         (kProcessWorld
            {set $world_regular {timer_ms world}}
            {set $cpu_regular {timer_ms cpu}}
            {set $gs_regular {timer_ms gs}}
         )
         (kProcessAll
            {set $world_postproc 0}
            {set $cpu_postproc 0}
            {set $gs_postproc 0}
            {set $world_regular {timer_ms world}}
            {set $cpu_regular {timer_ms cpu}}
            {set $gs_regular {timer_ms gs}}
         )
      }
      {set_timer_ms world_postproc $world_postproc}
      {set_timer_ms cpu_postproc $cpu_postproc}
      {set_timer_ms gs_postproc $gs_postproc}
      {set_timer_ms world_regular $world_regular}
      {set_timer_ms cpu_regular $cpu_regular}
      {set_timer_ms gs_regular $gs_regular}
#ifdef HX_EE
      {switch {rnd last_proc_cmds}
         (kProcessPost
            {set $world_postproc {timer_ms world}}
            {set $cpu_postproc {timer_ms cpu}}
            {set $gs_postproc {timer_ms gs}}
         )
         (kProcessWorld
            {set $world_regular {timer_ms world}}
            {set $cpu_regular {timer_ms cpu}}
            {set $gs_regular {timer_ms gs}}
         )
         (kProcessAll
            {set $world_postproc 0}
            {set $cpu_postproc 0}
            {set $gs_postproc 0}
            {set $world_regular {timer_ms world}}
            {set $cpu_regular {timer_ms cpu}}
            {set $gs_regular {timer_ms gs}}
         )
      }
      {set_timer_ms world_postproc $world_postproc}
      {set_timer_ms cpu_postproc $cpu_postproc}
      {set_timer_ms gs_postproc $gs_postproc}
      {set_timer_ms world_regular $world_regular}
      {set_timer_ms cpu_regular $cpu_regular}
      {set_timer_ms gs_regular $gs_regular}
#endif
   )
   
   ; adjust the scale of superscripted text (between 0 and 1)
   (text_superscript_scale 0.5)
)

(ui
   #include ../ui/ui.dta
)

(attract
   #include attract.dta
)

(net
   #include net.dta
)

(objects
   #include objects.dta
)

; BMB: Be sure to change ui/naming_screen.dta to reflect language change if you change from eng
(locale
   ../ui/eng/locale_milo.dta  ; tokens added by milo get dumped here
   ../ui/eng/locale.dta
)

(venues VENUES) ; list is in macros.dta

(song_groupings
   (rank ;the count of these, and the symbols/strings for each group can change
      (  ; tier 1
         (drum generic_tier1)
         (guitar generic_tier1)
         (bass generic_tier1)
         (vocals generic_tier1)
         (band generic_tier1)
      )
      (  ; tier 2
         (drum generic_tier2)
         (guitar generic_tier2)
         (bass generic_tier2)
         (vocals generic_tier2)
         (band generic_tier2)
      )
      (  ; tier 3
         (drum generic_tier3)
         (guitar generic_tier3)
         (bass generic_tier3)
         (vocals generic_tier3)
         (band generic_tier3)
      )
      (  ; tier 4
         (drum generic_tier4)
         (guitar generic_tier4)
         (bass generic_tier4)
         (vocals generic_tier4)
         (band generic_tier4)
      )
      (  ; tier 5
         (drum generic_tier5)
         (guitar generic_tier5)
         (bass generic_tier5)
         (vocals generic_tier5)
         (band generic_tier5)
      )
      (  ; tier 6
         (drum generic_tier6)
         (guitar generic_tier6)
         (bass generic_tier6)
         (vocals generic_tier6)
         (band generic_tier6)
      )
      (  ; tier 7
         (drum generic_tier7)
         (guitar generic_tier7)
         (bass generic_tier7)
         (vocals generic_tier7)
         (band generic_tier7)
      )
      (  ; tier 8
         (drum generic_tier8)
         (guitar generic_tier8)
         (bass generic_tier8)
         (vocals generic_tier8)
         (band generic_tier8)
      )
      (  ; tier 9
         (drum generic_tier9)
         (guitar generic_tier9)
         (bass generic_tier9)
         (vocals generic_tier9)
         (band generic_tier9)
      )
   )
   (genre
      alternative
      blues
      classicrock
      country
      emo
      fusion
      glam
      jazz
      metal
      novelty
      numetal
      poprock
      prog
      punk
      rock
      southernrock
      urban
      other
   )
   (decade
      the60s
      the70s
      the80s
      the90s
      the00s
   )
   (alpha_song
   )
   (alpha_artist
   )
)
(song_select_gap 30.0)

(quick_cheats
   #include cheats.dta
)

(long_cheats
   #include long_cheats.dta
)

(beatmatcher
   #include beatmatcher.dta
)

(game
   #include game.dta
)

(modes
   #include modes.dta
)

(player
   #include player.dta
)

(scoring
   #include scoring.dta
)

(achievements
   #include achievements.dta
)

(track_graphics
   #include track_graphics.dta
)

(sound
   #include sound.dta
   )

(tour
   #include tour.dta
)

(hud
   (crowd_meter
      (speed .9)  ; in [0..1] units / second
   )
   (star_meter
      (speed .9)  ; in [0..1] units / second
   )
   (lead_meter
      (max_lead 10000) ; in points 
   )
   (message_show_time 2.5) ; in seconds

   (sp_deploy_msg_delay 1.5) ;; coop: delay before we show "DEPLOY YOUR STAR POWER!"
   (sp_deploy_repeat_delay 7);; seconds before we show the message again.
)


(characters
   #include characters.dta
)

(tips
   (
      #include tips.dta
   )
)

(loading_screens
   (
      #include loading_screens.dta
   )
)

(videos
   #include videos.dta
)

(data_graveyard
)

(generate_weights FALSE)
(generate_panfiles FALSE)

(holmes
   ; logging from disc for statlor
   (log_host video)
   (log_path "O:\filedepot\rockband\statlor\uploaded")
)

#merge ../../../system/run/config/default.dta
