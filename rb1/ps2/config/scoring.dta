(points
   (drum
      (head 25) ; per note
      (tail 12) ; per quarter-note
   )
   (bass
      (head 25)
      (tail 12)
   )
   (guitar
      (head 25)
      (tail 12)
   )
   (vocals ; not scored with this system
      (head 0)
      (tail 0)
   )
)

(tug_of_war
   (max_delta  (5000  10000 15000 20000))
   (tie_window (  80    160   240   320)) ; if score diff is less than this, it's a tie
)

; Not used except for debug prints
(error_class ; in milliseconds 
   (good 70)
   (perfect 30)
)

(bonuses
   (max_bonus   4)
   (multiplier  (1  2  4  6  8))
   (crowd_boost (1  6  6  6  6))
)

(streaks
   (mechanic kStreakBandEnergy) ; choose kStreakMultiplier or kStreakBandEnergy
   (multipliers
      (singleplayer
         ( 0 1)
         (10 2) ; 10 or more hits in a row will get you 2X
         (20 3)
         (30 4)
      )
      (bass
         ( 0 1)
         (10 2)
         (20 3)
         (30 4)
         (40 5)
         (50 6)
      )
      (multi
         ( 0 1)
         (20 2)
         (40 3)
         (60 4)
      )
      (default
         ( 0 1)
         (10 2)
         (20 3)
         (30 4)
      )
      ; vocals streak in phrases, not notes
      (vocals
         ( 0 1)
         ( 1 2)
         ( 2 3)
         ( 3 4)
      ) 
   )
   (energy
      (default
         ( 0 0.00)
         (10 0.01)
         (20 0.02)
         (30 0.03)
      )
      (drum
         ( 0 0.00)
         (16 0.1251)
         (32 0.1251)
         (48 0.1251)
      )
      (bass
         ( 0 0.00)
         (14 0.1251)
         (28 0.1251)
         (42 0.1251)
      )
      (guitar
         ( 0 0.00)
         (10 0.1251)
         (20 0.1251)
         (30 0.1251)
      )
      ; vocals streak in phrases, not notes
      (vocals
         ( 0 0.00)
         ( 2 0.334)
         ( 4 0.334)
         ( 6 0.334)
      )
   )
)

(vocals
   ; minimum length of freestyle sections in milliseconds
   (freestyle_min_duration 600)
   (freestyle_pad 100) ; empty space placed on either side

   ;; thresholds for phrase ratings ([MESSY] WEAK OKAY STRONG AWESOME)
   (rating_thresholds 0.6 0.75 0.9 0.99) ; was 0.2, 0.5, 0.7, 0.9
      
   ;; rhythm can be off from midi-note by this many milliseconds
   (slop 140 120 120 120) ; Was 120, 120, 79, 79, add 40 - 80 for lag
      
   ;; must be within this many half-steps of the desired pitch to score.
   (pitch_margin 3.3 2.3 1.5 1.2) ; was 8-3, 4-2, 1.5-1.3, .95-.65
   
   ;; phonemes are collected and judged equally within this window (milliseconds)
   (nonpitch_slop 150 150 150 150)
      
   ;; phonemes are collected and judged equally within this window (milliseconds)
   (nonpitch_history 500 500 500 500) ; was 300

   ;; attempts to improve matching phonemes; should increase with history time
   (nonpitch_adjustments 100 100 100 100) ; was 45

   ;; amount that time warping penalizes (0 for not at all, inf for any warping bringing score to 0)
   (nonpitch_warping_penalty 0.3 0.3 0.3 0.3) ; was 1.0 (bigger = harder)
      
   ;; Scale for how well voicing transitions should match
   (nonpitch_transition_timing 90 90 90 90) ; was 59 90 85 80 (bigger = easier)
   
   ;; Scale for allowing phonemes to be similar (like a hit multiplier, but more confined)
   (nonpitch_phoneme_similarity 1.0 1.0 1.0 1.0) ; was 2.0
   
   ;; Score weightings
   (nonpitch_match_weight 0.0)		; simple "right sounds in the slop window" scoring
   (nonpitch_warp_weight 2.0)		; warping history and sequence scoring
   (nonpitch_transit_weight 2.0)	; correct timing on voicing transitions scoring
   
   ;; Multiplier for note that need to be made easier
   (nonpitch_easy_multiplier 2.5) ; was 1.5
   
   ;; Amount score cap increases beyond max score (should be >1, but not by much)
   (vocal_cap_growth 1.2 1.15 1.15 1.1)
   
   ;; multiplies instantaneous hit value (higher == easier). range: 1.0 or more
   (pitch_hit_multiplier 1.7 1.5 1.35 1.25)
   (nonpitch_hit_multiplier 2.0 2.0 2.0 2.0) ; was 2.0
   
   ; bonus for short notes.  this is over and above the previous hit multipliers!
   (short_note_threshold_ms 150) ; threshold length below which a note gets the bonus
   (short_note_multiplier 1.5 1.4 1.35 1.3)

   ;; how much to weigh note length vs. note count. range: between 0.0 and 1.0
   ;; 1.0 : long notes count more than short notes
   ;; 0.0 : all notes count the same, regardless of their duration
   (note_length_factor 1.0 1.0 1.0 1.0) ; Was 1.0 0.8 0.6 0.35, now nerfed out
   
   ; point value of a phrase
   (phrase_value 200 400 800 1000)

   ; for converting raw mic volume to 0 to 1 scale for scream
   ; try values between 1 and 5 to take advantage of more volume range
   (mic_volume_clamp 5) ; was 1

   ;;;; NET

   ;; Maximum detuning of remote vocals, in semitones
   (max_detune 1.0)

   ;; 0.50 = only detune by half as much as the remote player is off by
   (detune_factor 0.25 0.50 0.75 1.00)

   (enable_detune TRUE)

   ;; in dB, how much to attenuate the singing when it is worst
   (max_duck 6.0)

   (enable_duck TRUE)

   (packet_period 250) ; in ms

   ;;; TAMBOURINE 

   ; how many points per tambourine gem?
   (tambourine_points 25)

   ;; how much hitting and missing tambourine gems influences the crowd meter
   (tambourine_crowd_success 0.0 0.0 0.0 0.0) ; was 0.50 0.8 1.0 1.0
   (tambourine_crowd_failure 0.0 0.0 0.0 0.0) ; was 0.50 1.0 2.0 3.0
   ;; set to 0 purposefully so tambourine has no impact on the crowd meter
   ;; throws a bone to the sing while playing instrument freaks

   ;; Energy has to rise this much from its local minimum for us to
   ;; call it a tambourine swing
   (tambourine_energy_rise_threshold 0.06)

   ;; and then it needs fall this much below the peak before we'll
   ;; detect another hit
   (tambourine_energy_drop_threshold 0.02)

   ;; Shake must be within this window of correct note, in ticks (480 = quarter)
   (tambourine_window_ticks 120)

   ;; Here is the latency between the time that someone hits the mic
   ;; and the time that we see the energy rise, so we have to pretend
   ;; all input came this much earlier
   (tambourine_ms_offset     0) ; was 150
   (tambourine_ms_offset_usb 0) ; was 50
)

(solo
   ; guitar solo award thresholds, add as many as you want!!
   ; percentage of notes to achieve / points awarded PER GEM / localization key
   (guitar
      (awards
         (0      0 failed_solo)
         (60     5 bad_solo)
         (70    10 okay_solo)
         (80    20 solid_solo)
         (90    30 great_solo)
         (95    50 awesome_solo)
         (100  100 perfect_solo)
      )

      ; crowd meter modifications during a guitar solo
      ; specify the extra amount of reward or penalty
      ; value will be multiplied by the normal reward or penalty
      ; Rob: was too harsh so reverted to no change
      (reward 1.0)
      (penalty 1.0)
   )

   ; tambourine-specific
   (tambourine
      (awards
         (0      0 tamb_rating_1)
         (1      5 tamb_rating_2)
         (40    10 tamb_rating_3)
         (60    20 tamb_rating_4)
         (80    50 tamb_rating_5)
         (100  100 tamb_rating_6)
      )
   )
)

;; How much more important are notes in a unison phrase?
;; Hits and misses are broken out separately.
(unison_phrase
   (reward 2.0)
   (penalty 2.0)
)

(crowd
   (kDifficultyEasy
      (default
         ; Default impact of one note on the crowd meter. 
         ; If this were 0 the meter would never move, if it
         ; were 1 the meter would slam to 0 or 1 after each
         ; miss or hit.
         (note_weight 0.02) ; [0..1]
                     
         ; First hit-average maps to 0 on the crowd meter
         ; Second hit-average maps to 1 on the crowd meter
         (range 0.5 0.9) ; [0..1]

         ; For this much of the song  you are artificially
         ; kept above the warning level
         (free_ride 0.20) ; [0..1]
         
         ; Great level
         (great_level .95); [0..1]
         
         ; Okay level
         (okay_level .66); [0..1]

         ; Bad level
         (bad_level .33); [0..1]

         ; Meter blinks red if below this level
         (warning_level 0.15) ; [0..1]

         ; You lose the instant you fall below this level
         (lose_level 0.01) ; [0..1]
   
         ;; scaling factor for motion of excitement meter at the end
         ;; of a VOCAL phrase.
         ;; larger values = more motion
         ;; range: bigger than 0.0, smaller than 1.0    
         (phrase_weight 0.20)

         ;; Where on the displayed crowd meter this player is at start
         (initial_display_level 0.8333)
      )
     (drum
         (note_weight 0.0125) ; [0..1]
         (range 0.45 0.9) ; [0..1]

         ; rest same as default
         (free_ride 0.20) ; [0..1]
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01) ; [0..1] 
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
      (vocals
         (note_weight 0.02) ; [0..1]
         (range 0.20 0.75) ; from the second worst rating to second best.
         (free_ride 0.20)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.10) ; was .20
         (initial_display_level 0.8333)
      )
   )
   
   (kDifficultyMedium
      (default
         (note_weight 0.01) ; [0..1]
         (range 0.6 0.9)
         (free_ride 0.1)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
     (drum
         (note_weight 0.01)
         (range 0.6 0.95)

         ; rest same as default
         (free_ride 0.1)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
      (vocals
         (note_weight 0.01) ; [0..1]          
         (range 0.3 0.75) ; from the second worst rating to second best.
         (free_ride 0.1)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.10) ; was .20
         (initial_display_level 0.8333)
      )
   )

   (kDifficultyHard
      (default
         (note_weight 0.008)
         (range 0.65 0.9)                     
         (free_ride 0.0)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
      (drum
         (note_weight 0.008)
         (range 0.7 0.95)  

         ; rest same as default                   
         (free_ride 0.0)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
      (vocals
         (note_weight 0.008)        
         (range 0.35 0.75) ; from slightly above the second worst rating to second best             
         (free_ride 0.0)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.10) ; was .20
         (initial_display_level 0.8333)
      )
   )

   (kDifficultyExpert
      (default
         (note_weight 0.008)
         (range 0.65 0.9)
         (free_ride 0.0)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
      (drum
         (note_weight 0.006)
         (range 0.75 0.95)

         ; rest same as default  
         (free_ride 0.0)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.20)
         (initial_display_level 0.8333)
      )
      (vocals
         (note_weight 0.008)                 
         (range 0.4 0.75) ; from a bit above the second worst rating to second best.            
         (free_ride 0.0)
         (great_level .95); [0..1]
         (okay_level .66); [0..1]
         (bad_level .33); [0..1]
         (warning_level 0.15) ; [0..1]
         (lose_level 0.01)
         (phrase_weight 0.13) ; was .20
         (initial_display_level 0.8333)
      )
   )

   ;; How much to weight each player (worst first).  Make sure these add up to 1
   (weights
      (1 (1.00))
      (2 (0.50 0.50))
      (3 (0.33 0.33 0.34))
      (4 (0.25 0.25 0.25 0.25))
   )

   (drum_slot_weights
      (basic               (1.0  1.0  0.33 0.33 0.33))
      (drums0              (1.0  1.0  0.33 0.33 0.33))
      (drums0d             (1.0  0.33 1.0  0.33 0.33))
      (drums1              (1.0  1.0  0.33 0.33 0.33))
      (drums1easy          (1.0  1.0  0.33 0.33 0.33))
      (drums1easynokick    (1.0  1.0  0.33 0.33 0.33))
      (drums1d             (1.0  0.33 1.0  0.33 0.33))
      (drums2              (1.0  1.0  0.33 0.33 0.33))
      (drums2easy          (1.0  1.0  0.33 0.33 0.33))
      (drums2easynokick    (1.0  1.0  0.33 0.33 0.33))
      (drums2easysnareonly (1.0  1.0  0.33 0.33 0.33))
      (drums2d             (1.0  0.33 1.0  0.33 0.33))
      (drums3              (1.0  1.0  0.33 0.33 0.33))
      (drums3d             (1.0  0.33 1.0  0.33 0.33))
      (drums3easy          (1.0  1.0  0.33 0.33 0.33))
      (drums3easynokick    (1.0  1.0  0.33 0.33 0.33))
      (drums4              (1.0  1.0  0.33 0.33 0.33))
      (drums4easynokick    (1.0  1.0  0.33 0.33 0.33))

      (default_weights basic)
   )

   (multiplayer_lose_level 0.20)

   (save_level 0.8333) ; where crowd meter is put after you are saved from brink
   (time_to_return_from_brink 3.5) ; after being saved, in seconds
   (vocals_to_return_from_brink 2) ; after being saved, in seconds
   (crowd_loss_per_sec 0.04) ; drop this fraction of the crowd meter every second
                             ; while you are failed out

   (clap_early_amount_ms 75) ; how much before the beat to start the clap sample
)

(star_power
   (recharge_rate  0.00)  ; per bar [0..1]
   (deploy_rate    0.125) ; per bar [0..1]
   (star_phrase    0.25)  ; per star power phrase [0..1]
   (common_phrase  0.15)  ; per unison phrase
   (fill_boost     0.35)  ; per fill
   (whammy_rate    0.034) ; per quarter note
   (ready_level    0.5)   ; deployable at this level [0..1]
   (multiplier     2)     ; multiplier on points when deployed
   (crowd_boost    6)     ; normal gem is 1, only affects hits
   (min_length     2.0)   ; how long before it can be turned off, in seconds
   (whammy_speed   0.05)  ; how fast whammy bar must be moved to earn star power
   (whammy_timeout 0.50)  ; time allowed between seeing whammy_speed (in seconds)
   (crash_fill_ready_hits 3) ; how many hits the drummer must hit
                             ; to enable the fill crash
)

(band_energy
   (deploy_beats   32)      ; how many beats it takes to deploy a full energy meter
   (deploy_bonus    50)     ; deploying energy acts like everyone hit this many
                            ; notes in a row
   (spotlight_phrase 0.251) ; how much for solo spotlight phrases
   (unison_phrase    0.501) ; how much for unison spotlight phrases
   (deploy_threshold 0.500) ; need this much to deploy
   (save_energy      0.500) ; how much energy is used to save people
)

(coda
   (point_rate     100)     ; points per second per lane
   (max_mash_ms   1500)     ; hit the lane least this often to max out points
)

(star_ratings

#include star_thresholds.dta

   (symbols
      ('*' '**' '***' '****' '*****' '66666' '77777')
   )
)
