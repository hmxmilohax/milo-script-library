
; World Validation Routines. 
; So Huge I pulled em out into their own file -jwf

#define WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
(
   {$camname set filter 0.3}
   {$camname set use_depth_of_field TRUE}
)

#define WORLD_OBJECT_VALIDATE
(
   ; fixme!! This is a bad place for this.
   ; For testing light presets in milo.
   (test_light_preset "")          ; for milo testing

   (next_preset ($obj) 
      ; find the next preset after this one, but they need to be sorted
      {do ($found {== $obj ""})
          ($next "")
          ($preset_names ())
         {resize $preset_names 0}
         
         
         ; put the names all in a list so we can alphabetize
         {$this iterate LightPreset $preset
            {insert_elem $preset_names 0 {$preset name}}
         }
         
         ; alphabetize
         {sort $preset_names}
         
         {foreach_int $i 0 {size $preset_names}
            {if {== $next ""}
               {if_else $found
                  {set $next {elem $preset_names $i}}
                  {if {== {$obj name} {elem $preset_names $i}}
                     {set $found TRUE}
                  }
               }
            }
         }
         
         {if_else {== $next ""}
            $next
            {$this find $next}
         }
      }
   )
   
   (start_test_preset
      {if {!= "" [test_light_preset]}
         {if {exists test_light_preset_anim} {delete test_light_preset_anim}}
         {[test_light_preset] animate (name test_light_preset_anim) (loop 0 {[test_light_preset] end_frame})}
         {if {exists test_light_preset_task} {delete test_light_preset_task}}

         {if {[test_light_preset] get manual}
            {[test_light_preset] reset_events}   
            {[test_light_preset] first}              
            {thread_task kTaskBeats (preserve ) (name test_light_preset_task)
               (script
                  {[test_light_preset] next}   
                  {$task sleep 4}
                  {$task loop}
               )
            }
         }
      }
   )

   ;; ----------------------------
   ;;
   ;; Validation
   ;;
   ; lighting subroutines
   (find_preset_type ($type $excite $adjective)
      {set $found FALSE}
      {$this iterate LightPreset $preset 
         {if {== {$preset get category} $type}
            {if {&& {>= $excite {$preset get min_excitement}}
                  {<= $excite {$preset get max_excitement}}}
               {if_else {!= $adjective ''}
                  {foreach $adj {$preset get_array adjectives}
                     {if {== $adj $adjective}            
                        {set $found TRUE}
                     }
                  }
                  ; else
                  {set $found TRUE}
               }
            }
         }
      }
      $found
   )

   (translate_excite ($excite)
      {switch $excite
         (0 "kExcitementBoot")
         (1 "kExcitementBad")
         (2 "kExcitementGood")
         (3 "kExcitementGreat")
         (4 "kExcitementPeak")
      }
   )

   (check_has_presets ($min_excite $max_excite $categories)
      {foreach $type $categories
         {foreach_int $excitement $min_excite $max_excite
            {unless {$this find_preset_type $type $excitement ''}
               {notify $path " has no LightPreset for excitement level " {$this translate_excite $excitement} " of category " $type}     
            }
         }
      }
   )

   (check_has_any_presets ($min_excite $max_excite $categories $adjective)
      {foreach_int $excitement $min_excite $max_excite
         {do 
            ($found FALSE)
            {foreach $type $categories
               {if {$this find_preset_type $type $excitement $adjective}
                  {set $found TRUE}
               }
            }
            {if {!= $found TRUE}
               {if_else {== $adjective ''}
                  {notify $path " has no LightPreset for excitement level " {$this translate_excite $excitement} " from these categories: " $categories}
                  {notify $path " has no LightPreset for adjective " $adjective ", excitement level " {translate_excite $excitement} " from these categories: " $categories}
               }
            }
         }
      }
   )
   
   (validate_light_presets
      {$this iterate LightPreset $light
         {do ($num {$light size (keyframes)})
            {foreach_int $i 0 $num
               {do ($num_entries {$light size (keyframes $i spotlight_entries)})                
                  {foreach_int $j 0 $num_entries
                     {do ($subpart {$light get (keyframes $i spotlight_entries $j subpart)})
                        {if {has_substr $subpart "exo"}
                           {notify {path_name $light} " keyframe " $i " spotlight_entry " $j " targets subpart " $subpart " which is not safe"}
                        }
                     }
                  }
               }   
            }
         }
      }
      
      {$this check_has_presets kExcitementBoot kExcitementPeak (INTRO INTRO_QUICK INTRO_VENUE WIN)}
      {$this check_has_presets kExcitementBoot kExcitementBad (LOSE)}
   
      {$this check_has_any_presets kExcitementBoot kExcitementPeak (CHORUS VERSECHORUS) ''}
      {$this check_has_any_presets kExcitementBoot kExcitementPeak (VERSE VERSECHORUS) ''}
   
      ; check for all adjectives
      {foreach $adj LIGHTING_ADJECTIVES
         {do
            {$this check_has_any_presets kExcitementPeak kExcitementPeak (CHORUS VERSECHORUS) $adj}
            {$this check_has_any_presets kExcitementPeak kExcitementPeak (VERSE VERSECHORUS) $adj}
         }
      }
   )
   
   

   (validate_cameras ($create)
      {print "running validate cameras\n"}
      {set $camera.postproc_override FALSE}
      {set $camera.postproc_blendtime 0}
      {set $cameras.validating TRUE}
      {set $cameras.namefilter "coop_"}
      {set $cameras.world_mode_cache $game.play_mode}
      {set $camname "coop_MissingCamshot.shot"}
      {set $game.play_mode coop}
      
      {$this iterate_self BandCamShot $cam 
         ; Test type
         {if {!= {$cam get_type} band}
            {notify {path_name $cam} " is not type band!"}
         }
         
         {$cam test_targets}
         
         ; Intro shots must have light_override checked
         {if {&& {has_substr {$cam name} "intro"} {! {$cam get lighting_override}} }
            {notify {path_name $cam} " intro camera must have lighting_override"}
         }
         
         ; Should not have characters in the show list.
         {foreach $show {$cam get_array show_list}
            {if {has_substr {$show name} "player_"}
               {notify {path_name $cam} " has " $show " in show list"}
            }
         }

         ; Must have prefix coop_, h2hg_ h2hd_ or h2hv_
         {do ($has FALSE)
            {foreach $prefix (coop_ h2hg_ h2hd_ h2hv_)
               {if {has_substr {$cam name} $prefix}
                  {set $has TRUE}
               }
            }
            {unless $has 
               {notify {path_name $cam} " has an invalid prefix not: coop_ h2hd_ h2hg_ h2hv_"}
            }
         }
         
         ; Any next shots must be category NORMAL and special otherwise they risk
         ; playing normally.
         {do ($next {$cam get next_shot})
            {if $next               
               ; For each target, if next has no teleport, then prev shouldn't have return, would wreck it
               {foreach_int $i 0 {$next size (targets)}
                  {unless {$next get (targets $i teleport)}
                     ; Find this target in the prev.
                     {foreach_int $j 0 {$cam size (targets)}
                        {if 
                           {&& 
                              {== 
                                 {$next get (targets $i target)}
                                 {$cam get (targets $j target)}
                              }
                              {$cam get (targets $j return)}
                           }
                           {notify {path_name $next} " target " {$next get (targets $i target)} " does not teleport, and is next_shot of " $cam " which has return true which will mess up the shot, return should be false" }
                        }
                     }                     
                  }                     
               }
               
               {if {&& {== {$cam get category} INTRO} {$next get next_shot}}
                  {notify {path_name $cam} " is an intro shot with more than one next_shot!"}
               }
                              
               {if {!= {$next get category} NORMAL}
                  {notify {path_name $next} " is next_shot of " $cam " but is not category NORMAL"}
               }
               {unless {$next get special}
                  {notify {path_name $next} " is next_shot of " $cam " but is not flagged special"}
               }               
            }
         }
                          
         ; Some categories need to be in realtime and have a real duration.
         ; And WIN and LOSE cameras can't be more than 10 seconds.
         ; INTRO_QUICK can't be more than 5 seconds.
         {do ($cat {$cam get category})
            {if {find_elem (INTRO INTRO_VENUE INTRO_QUICK INTRO_MULTI LOSE WIN WIN_P1 WIN_P2 WIN_TIE WIN_QUICK OUTRO_MULTI) $cat}
               {if_else {!= {$cam get rate} k30_fps}
                  {notify {path_name $cam} " category " $cat " must have units of seconds"}
                  {do 
                     ($max_duration 
                        {switch $cat 
                           ( (INTRO INTRO_VENUE) MAX_INTRO_SEC)
                           ( INTRO_QUICK 5 )
                           ( INTRO_MULTI 5 )
                           ( WIN_QUICK 5 )
                           MAX_WIN_LOSE_SEC
                        }
                     )
                     ($min_duration
                        {switch $cat 
                           ( INTRO 0 ) ; intro has no min, since could be freeze frames
                           1
                        }
                     )

                     {if {< {$cam duration_seconds} $min_duration }
                        {notify {path_name $cam} " category " $cat " has duration " {$cam duration_seconds} " needs to be greater than or equal to " $min_duration}
                     }
                     {if {&& {> $max_duration 0} {> {$cam duration_seconds} $max_duration }}
                        {notify {path_name $cam} " category " $cat " has duration " {$cam duration_seconds} " needs to be less than or equal to " $max_duration}
                     }
                  }
               }
            }
         }
         
         ; Make sure has no duplicate targets
         {do ($num {$cam size (targets)})
            {foreach_int $i 0 {- $num 1}
               {do ($target {$cam get (targets $i target)})
                  {if {!= $target ''}
                     {foreach_int $j {+ $i 1} $num
                        {if {== $target {$cam get (targets $j target)}}
                           {notify {path_name $cam} " has duplicate target " $target}
                        }
                     }
                  }
               }
            }
         }
         
         ;; todo look at.      
         {$cam test_3d_crowd}
         
         ; Test Targets and DoF setting
         {unless $create
            {foreach_int $i 0 {$cam size (keyframes)}
               {do 
                  ($m {$cam get (keyframes $i focus_blur_multiplier)})
                  ($has_target FALSE)
                  {foreach_int $j 0 {$cam size (keyframes $i targets)}
                     {if_else {== "" {$cam get (keyframes $i targets $j entity)}}
                        {notify {path_name $cam} " keyframe " $i " target " $j " is NULL"}
                        {set $has_target TRUE}
                     }
                  }
                  
                  ; You can also have a target if focal target is set.
                  {if {!= "" {$cam get (keyframes $i focal_target entity)}}
                     {set $has_target TRUE}
                  }
                                    
                  {if {&& {== {$cam get use_depth_of_field} TRUE} {! $has_target} {< $m 2}}
                     {notify {path_name $cam} " has depth of field enabled, but keyframe " $i " has no valid focal targets and multiplier " $m " < 2, blur will be too close to camera"}
                  }
               }               
            }
         }   
         
         ; If distance is 'behind' facing should be 'null', otherwise the random selection mechanism won't work.
         ; since if a left or right shot came first, it would bitch.  Behind could actually be a facing
         ; instead of a distance, but we'd basically have the same problem.
         {if {&& {== {$cam get distance} 'behind' } {!= {$cam get facing} 'null'}}
            {notify {path_name $cam} " is behind, must have null facing"}
         }
                      
      } ; iterated over all BandCamShots
            
      ; Camera variations, only tested in type base
      ; venue variants just add more cameras
      {if {find_elem (base variant) {$this get_type}}
         
         {$this verify_camera_categories 
            (
               INTRO INTRO_QUICK INTRO_VENUE INTRO_MULTI
               LOSE WIN WIN_QUICK OUTRO_MULTI NORMAL 
               BFTB_G_REVIVE BFTB_G_FAIL BFTB_B_REVIVE BFTB_B_FAIL
               BFTB_V_REVIVE BFTB_V_FAIL BFTB_D_REVIVE BFTB_D_FAIL
            )
         }
         
         ; Only Big Club has h2h
         {if {has_substr {$this name} big_club}
            ; h2h focus combinations

            {set $cameras.namefilter "h2hd_"}
            {set $game.play_mode h2h_drum}
            
            {$this verify_camera_categories (INTRO INTRO_QUICK WIN_P1 WIN_P2 WIN_TIE OUTRO_MULTI)}
            {$this verify_far_h2h_cameras}     
            
            {foreach $p1_focus(0 1)
               {foreach $p2_focus (0 1)
                  {if {&& {|| $p1_focus $p2_focus} {! {&& $p1_focus $p2_focus}}}
                     {do ($filter {array 0})
                        {push_back $filter (special FALSE)}
                        {push_back $filter (one_time FALSE)}
                        {push_back $filter (drums_focus $p1_focus)}
                        {push_back $filter (guitar_focus FALSE)}
                        {push_back $filter (vocal_focus FALSE)}
                        {push_back $filter (drums2_focus $p2_focus)}
                        {push_back $filter (guitar2_focus FALSE)}
                        {push_back $filter (vocal2_focus FALSE)}
                        {push_back $filter (min_time 0)}
                        {unless {$this find_shot (INTRO) $filter}
                           {if_else $create
                              {do
                                 {set $camname {next_name {sprint "h2hd_MissingCamshot_Intro.shot"}}}
                                 {new BandCamShot $camname}
                                 {init_object $camname}
                                 WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                 {$camname set drums_focus $p1_focus}
                                 {$camname set drums2_focus $p2_focus}
                                 {$camname set category INTRO}
                                 {milo record $camname 'created BandCamShot' kRecordCreated}
                              }
                              {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                                 "(drums_focus " $p1_focus ") "
                                 "(drums2_focus " $p2_focus ") "
                              }
                           }
                        }
                     }
                  }
               }
            }
                 
                           
            {foreach $p1_focus(0 1)
               {foreach $p2_focus (0 1)
                  {if {|| $p1_focus $p2_focus}
                     {foreach $facing (left right)
                        {do ($filter {array 0})
                           {push_back $filter (special FALSE)}
                           {push_back $filter (one_time FALSE)}
                           {push_back $filter (bass_focus FALSE)}
                           {push_back $filter (drums_focus $p1_focus)}
                           {push_back $filter (guitar_focus FALSE)}
                           {push_back $filter (vocal_focus FALSE)}
                           {push_back $filter (drums2_focus $p2_focus)}
                           {push_back $filter (guitar2_focus FALSE)}
                           {push_back $filter (vocal2_focus FALSE)}
                           {push_back $filter (facing $facing)}
                           {push_back $filter (distance (null near behind))}
                           {push_back $filter (min_time 0)} ; only consider non-mintime shots for validation
                           {unless {$this find_shot (NORMAL) $filter}
                              {if_else $create
                                 {do
                                    {set $camname {next_name {sprint "h2hd_MissingCamshot_" $facing ".shot"}}}
                                    {new BandCamShot $camname}
                                    {init_object $camname}
                                    WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                    {$camname set drums_focus $p1_focus}
                                    {$camname set drums2_focus $p2_focus}
                                    {$camname set facing $facing}
                                    {milo record $camname 'created BandCamShot' kRecordCreated}
                                 }
                                 {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                                    "(facing " $facing ") "
                                    "(drums_focus " $p1_focus ") "
                                    "(drums2_focus " $p2_focus ") "
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            
               ; validate for solo cams
            {foreach $focus ('guitar_focus' 'vocal_focus')
               {foreach $facing ( ( left null ) (right null) )    
                  {do ($filter {array 0})
                     {push_back $filter (facing $facing)}
                     {push_back $filter (distance (null near behind closeup))}
                     {push_back $filter (special FALSE)}
                     {push_back $filter (one_time FALSE)}
                     {push_back $filter (min_time 0)}
                     {push_back $filter (bass_focus FALSE)}
                     {push_back $filter (drums_focus {== $focus drums_focus})}
                     {push_back $filter (guitar_focus {== $focus guitar_focus})}
                     {push_back $filter (vocal_focus {== $focus vocal_focus})}
                     
                     {unless {$this find_shot (NORMAL) $filter}
                        {if_else $create
                           {do
                              {set $camname {next_name {sprint $cameras.namefilter "MissingCamshotSolo.shot"}}}
                              {new BandCamShot $camname}
                              {init_object $camname}
                              {$camname set_type band}
                              WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                              {$camname set $focus TRUE}
                              {milo record $camname 'created BandCamShot' kRecordCreated}
                           }
                           {notify {path_name $this} "No Closeup " $focus " " $game.play_mode " camshot for facing " $facing}
                        }
                     }
                  }
               }
            }
            
            
            
            {set $cameras.namefilter "h2hg_"}
            {set $game.play_mode h2h_guitar}
            
            {$this verify_camera_categories (INTRO INTRO_QUICK WIN_P1 WIN_P2 WIN_TIE OUTRO_MULTI)}
            {$this verify_far_h2h_cameras}
           
            {foreach $p1_focus(0 1)
               {foreach $p2_focus (0 1)
                  {if {&& {|| $p1_focus $p2_focus} {! {&& $p1_focus $p2_focus}}}
                     {do ($filter {array 0})
                        {push_back $filter (special FALSE)}
                        {push_back $filter (one_time FALSE)}
                        {push_back $filter (drums_focus FALSE)}
                        {push_back $filter (guitar_focus $p1_focus)}
                        {push_back $filter (vocal_focus FALSE)}
                        {push_back $filter (drums2_focus FALSE)}
                        {push_back $filter (guitar2_focus $p2_focus)}
                        {push_back $filter (vocal2_focus FALSE)}
                        {push_back $filter (min_time 0)}
                        {unless {$this find_shot (INTRO) $filter}
                           {if_else $create
                              {do
                                 {set $camname {next_name {sprint "h2hd_MissingCamshot_Intro.shot"}}}
                                 {new BandCamShot $camname}
                                 {init_object $camname}
                                 WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                 {$camname set category INTRO}
                                 {$camname set guitar_focus $p1_focus}
                                 {$camname set guitar2_focus $p2_focus}
                                 {milo record $camname 'created BandCamShot' kRecordCreated}
                              }
                              {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                                 "(guitar_focus " $p1_focus ") "
                                 "(guitar2_focus " $p2_focus ") "
                              }
                           }
                        }
                     }
                  }
               }
            }
            
            {foreach $p1_focus(0 1)
               {foreach $p2_focus (0 1)
                  {if {|| $p1_focus $p2_focus}
                     {foreach $facing (left right)            
                        {do ($filter {array 0})
                           {push_back $filter (special FALSE)}
                           {push_back $filter (one_time FALSE)}
                           {push_back $filter (bass_focus FALSE)}
                           {push_back $filter (drums_focus FALSE)}
                           {push_back $filter (guitar_focus $p1_focus)}
                           {push_back $filter (vocal_focus FALSE)}
                           {push_back $filter (drums2_focus FALSE)}
                           {push_back $filter (guitar2_focus $p2_focus)}
                           {push_back $filter (vocal2_focus FALSE)}
                           {push_back $filter (facing $facing)}
                           {push_back $filter (distance (null near behind))}
                           {push_back $filter (min_time 0)} ; only consider non-mintime shots for validation
                           {unless {$this find_shot (NORMAL) $filter}
                               {if_else $create
                                    {do
                                       {set $camname {next_name {sprint "h2hg_MissingCamshot_" $facing ".shot"}}}
                                       {new BandCamShot $camname}
                                       {init_object $camname}
                                       WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                       {$camname set guitar_focus $p1_focus}
                                       {$camname set guitar2_focus $p2_focus}
                                       {$camname set facing $facing}
                                       {milo record $camname 'created BandCamShot' kRecordCreated}
                                    }
                                    {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                                       "(facing " $facing ") "                              
                                       "(guitar_focus " $p1_focus ") "
                                       "(guitar2_focus " $p2_focus ") "
                                    }
                                 
                              }
                           }
                        }
                     }
                  }
               }
            }
            
            ; validate for solo cams
            {foreach $focus ('drums_focus' 'vocal_focus')
               {foreach $facing ( ( left null ) (right null) )   
                  {do ($filter {array 0})
                     {push_back $filter (facing $facing)}
                     {push_back $filter (distance (null near behind closeup))}
                     {push_back $filter (special FALSE)}
                     {push_back $filter (one_time FALSE)}
                     {push_back $filter (min_time 0)}
                     {push_back $filter (bass_focus FALSE)}
                     {push_back $filter (drums_focus {== $focus drums_focus})}
                     {push_back $filter (guitar_focus {== $focus guitar_focus})}
                     {push_back $filter (vocal_focus {== $focus vocal_focus})}
                     {unless {$this find_shot (NORMAL) $filter}
                        {if_else $create
                           {do
                              {set $camname {next_name {sprint $cameras.namefilter "MissingCamshotSolo.shot"}}}
                              {new BandCamShot $camname}
                              {init_object $camname}
                              {$camname set_type band}
                              WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                              {$camname set $focus TRUE}
                              {milo record $camname 'created BandCamShot' kRecordCreated}
                           }
                           {notify {path_name $this} "No Closeup " $focus " " $game.play_mode " camshot for facing " $facing}
                        }
                     }
                  }
               }
            }
            
            {set $cameras.namefilter "h2hv_"}
            {set $game.play_mode h2h_vocals}
            
            {$this verify_camera_categories (INTRO INTRO_QUICK WIN_P1 WIN_P2 WIN_TIE OUTRO_MULTI)}
            {$this verify_far_h2h_cameras}
               
            {foreach $p1_focus(0 1)
               {foreach $p2_focus (0 1)
                  {if {&& {|| $p1_focus $p2_focus} {! {&& $p1_focus $p2_focus}}}
                     {do ($filter {array 0})
                        {push_back $filter (special FALSE)}
                        {push_back $filter (one_time FALSE)}
                        {push_back $filter (drums_focus FALSE)}
                        {push_back $filter (guitar_focus FALSE)}
                        {push_back $filter (vocal_focus $p1_focus)}
                        {push_back $filter (drums2_focus FALSE)}
                        {push_back $filter (guitar2_focus FALSE)}
                        {push_back $filter (vocal2_focus $p2_focus)}
                        {push_back $filter (min_time 0)}
                        {unless {$this find_shot (INTRO) $filter}
                           {if_else $create
                              {do
                                 {set $camname {next_name {sprint "h2hd_MissingCamshot_Intro.shot"}}}
                                 {new BandCamShot $camname}
                                 {init_object $camname}
                                 WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                 {$camname set category INTRO}
                                 {$camname set vocal_focus $p1_focus}
                                 {$camname set vocal2_focus $p2_focus}
                                 {milo record $camname 'created BandCamShot' kRecordCreated}
                              }
                              {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                                 "(facing " $facing ") "
                                 "(vocal_focus " $p1_focus ") "
                                 "(vocal2_focus " $p2_focus ") "
                              }
                           }
                        }
                     }
                  }
               }
            }
                  
            {foreach $p1_focus(0 1)
               {foreach $p2_focus (0 1)         
                  {if {|| $p1_focus $p2_focus}
                     {foreach $facing (left right)                           
                        {do ($filter {array 0})
                           {push_back $filter (special FALSE)}
                           {push_back $filter (one_time FALSE)}
                           {push_back $filter (bass_focus FALSE)}
                           {push_back $filter (drums_focus FALSE)}
                           {push_back $filter (guitar_focus FALSE)}
                           {push_back $filter (vocal_focus $p1_focus)}
                           {push_back $filter (drums2_focus FALSE)}
                           {push_back $filter (guitar2_focus FALSE)}
                           {push_back $filter (vocal2_focus $p2_focus)}
                           {push_back $filter (facing $facing)}
                           {push_back $filter (distance (null near behind))}
                           {push_back $filter (min_time 0)} ; only consider non-mintime shots for validation
                           {unless {$this find_shot (NORMAL) $filter}
                              {if_else $create
                                 {do
                                    {set $camname {next_name {sprint "h2hv_MissingCamshot_" $facing ".shot"}}}
                                    {new BandCamShot $camname}
                                    {init_object $camname}
                                    WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                    {$camname set vocal_focus $p1_focus}
                                    {$camname set vocal2_focus $p2_focus}
                                    {$camname set facing $facing}
                                    {milo record $camname 'created BandCamShot' kRecordCreated}
                                 }
                                 {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                                    "(facing " $facing ") "                                                         
                                    "(vocal_focus " $p1_focus ") "
                                    "(vocal2_focus " $p2_focus ") "
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
                        
            ; validate for solo cams
            {foreach $focus ('guitar_focus' 'drums_focus')
               {foreach $facing ( ( left null ) (right null) )   
                  {do ($filter {array 0})
                     {push_back $filter (facing $facing)}
                     {push_back $filter (distance (null near behind closeup))}
                     {push_back $filter (special FALSE)}
                     {push_back $filter (one_time FALSE)}
                     {push_back $filter (min_time 0)}
                     {push_back $filter (bass_focus FALSE)}
                     {push_back $filter (drums_focus {== $focus drums_focus})}
                     {push_back $filter (guitar_focus {== $focus guitar_focus})}
                     {push_back $filter (vocal_focus {== $focus vocal_focus})}
                     {unless {$this find_shot (NORMAL) $filter}
                        {if_else $create
                           {do
                              {set $camname {next_name {sprint $cameras.namefilter "MissingCamshotSolo.shot"}}}
                              {new BandCamShot $camname}
                              {init_object $camname}
                              {$camname set_type band}
                              WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                              {$camname set $focus TRUE}
                              {milo record $camname 'created BandCamShot' kRecordCreated}
                           }
                           {notify {path_name $this} "No Closeup " $focus " " $game.play_mode " camshot for facing " $facing}
                        }
                     }
                  }
               }
            }
         }

         ; For no special
         ; All focusses combos excluding no focus (and drums plus two other players) must be present 
         ; for left and right facing, don't care about distance, or min_time or max_time
      
         {set $cameras.namefilter "coop_"}
         {set $game.play_mode coop}      
         
         {foreach $facing ( ( left null ) (right null) ) 
            {foreach $bass_focus (0 1)
               {foreach $drums_focus (0 1)
                  {foreach $guitar_focus (0 1)
                     {foreach $vocal_focus (0 1)
                        {foreach $distance ((null near behind))
                           {do ($filter {array 0})
                              ($focus_sum {+ $bass_focus $drums_focus $guitar_focus $vocal_focus})
                              {if {&& $focus_sum
                                      {|| {! $drums_focus} {!= $focus_sum 3}}}
                                 {push_back $filter (special FALSE)}
                                 {push_back $filter (one_time FALSE)}
                                 {push_back $filter (bass_focus $bass_focus)}
                                 {push_back $filter (drums_focus $drums_focus)}
                                 {push_back $filter (guitar_focus $guitar_focus)}
                                 {push_back $filter (vocal_focus $vocal_focus)}
                                 {push_back $filter (drums2_focus FALSE)}
                                 {push_back $filter (guitar2_focus FALSE)}
                                 {push_back $filter (vocal2_focus FALSE)}
                                 {push_back $filter (facing $facing)}
                                 {push_back $filter (distance $distance)}
                                 {push_back $filter (min_time 0)} ; only consider non-mintime shots for validation
                                 {unless {$this find_shot (NORMAL) $filter}
                                    {if_else $create
                                       {do
                                          {set $camname {next_name "coop_MissingCamshot.shot"}}
                                          {new BandCamShot $camname}
                                          {init_object $camname}
                                          WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                                          {$camname set bass_focus $bass_focus}
                                          {$camname set drums_focus $drums_focus}
                                          {$camname set guitar_focus $guitar_focus}
                                          {$camname set vocal_focus $vocal_focus}
                                          {$camname set distance {elem $distance 1}}
                                          {milo record $camname 'created BandCamShot' kRecordCreated}
                                       }
                                       {notify {path_name $this} " No CamShot:" 
                                          "(facing " $facing ") "
                                          "(bass_focus " $bass_focus ") "
                                          "(drums_focus " $drums_focus ") "
                                          "(guitar_focus " $guitar_focus ") "
                                          "(vocal_focus " $vocal_focus ")"
                                          "(distance " $distance ")"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         ;; verify all win focus combinations
         {foreach $focus ('bass_focus' 'drums_focus' 'guitar_focus' 'vocal_focus')
            {foreach $cat ('WIN' 'INTRO')
               {do ($filter {array 0})
                  {push_back $filter (bass_focus {== $focus bass_focus})}
                  {push_back $filter (drums_focus {== $focus drums_focus})}
                  {push_back $filter (guitar_focus {== $focus guitar_focus})}
                  {push_back $filter (vocal_focus {== $focus vocal_focus})}
                  {unless {$this find_shot $cat $filter}
                     {if_else $create
                        {do
                           {set $camname {next_name "coop_MissingCamshot.shot"}}
                           {new BandCamShot $camname}
                           {init_object $camname}
                           {$camname set_type band}
                           {$camname set category $cat}
                           WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                           {$camname set $focus TRUE}
                           {milo record $camname 'created BandCamShot' kRecordCreated}
                        }
                        {notify {path_name $this} " missing " $cat " with focus " $focus}
                     }
                  }
               }
            }
         }
            
            
            
         ; Check for single character closeups.
         {foreach $focus ('bass_focus' 'drums_focus' 'guitar_focus' 'vocal_focus')
            {foreach $facing ( ( left null ) (right null) ) 
               {do ($filter {array 0})
                  {push_back $filter (facing $facing)}
                  {push_back $filter (distance (closeup))}
                  {push_back $filter (special FALSE)}
                  {push_back $filter (one_time FALSE)}
                  {push_back $filter (min_time 0)}
                  {push_back $filter (bass_focus {== $focus bass_focus})}
                  {push_back $filter (drums_focus {== $focus drums_focus})}
                  {push_back $filter (guitar_focus {== $focus guitar_focus})}
                  {push_back $filter (vocal_focus {== $focus vocal_focus})}
                  {unless {$this find_shot (NORMAL) $filter}
                     {if_else $create
                        {do
                           {set $camname {next_name "coop_MissingCamshot.shot"}}
                           {new BandCamShot $camname}
                           {init_object $camname}
                           {$camname set_type band}
                           WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                           {$camname set $focus TRUE}
                           {if_else {!= {elem $facing 0} left}
                              {$camname set facing right}
                              {$camname set facing left}
                           }
                           {$camname set distance closeup}
                           {milo record $camname 'created BandCamShot' kRecordCreated}
                        }
                        {notify {path_name $this} "No Closeup " $focus " " $game.play_mode " camshot for facing " $facing}
                     }
                  }
               }
            }
         }
         
         
         {if {&& $create {exists milo}}
            {milo update_objects}
         }
      
      }
      {set $cameras.validating FALSE}
   )


   ; Takes the categories to verify, expects $cameras.namefilter to be set.
   (verify_camera_categories ($cats)
      {foreach $type $cats
         {unless {$this find_shot ($type)}
            {if_else $create
               {do
                  {set $camname {next_name {sprint $cameras.namefilter "MissingCamshot" $type ".shot"}}}
                  {new BandCamShot $camname}
                  {init_object $camname}
                  WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                  {$camname set category $type}
                  {milo record $camname 'created BandCamShot' kRecordCreated}
               }
               {notify {path_name $this} " has no " $game.play_mode " CamShot of category " $type}
            }
         }
      }   
   )
   
   (verify_far_h2h_cameras
   
      ; validate for force far, need left and right, with center
      ; optional
      {foreach $facing (left right)
         {do ($filter {array 0})
            {push_back $filter (special FALSE)}
            {push_back $filter (one_time FALSE)}
            {push_back $filter {if_else {== $facing left} (facing (left)) (facing (right))}}
            {push_back $filter (distance (far))}
            {push_back $filter (min_time 0)} ; only consider non-mintime shots for validation
            {unless {$this find_shot (NORMAL) $filter}
               {if_else $create
                  {do
                     {set $camname {next_name {sprint $cameras.namefilter "MissingCamshotFar.shot"}}}
                     {new BandCamShot $camname}
                     {init_object $camname}
                     WORLD_OBJECT_SET_MISSING_CAMSHOT_DEFAULTS
                     {$camname set distance far}
                     {$camname set facing $facing}
                     {milo record $camname 'created BandCamShot' kRecordCreated}
                  }
                  {notify {path_name $this} " No " $game.play_mode " CamShot:" 
                     "(distance (far)) (facing (" $facing "))"
                  }
               }
            }
         }
      }
   )
   
)


