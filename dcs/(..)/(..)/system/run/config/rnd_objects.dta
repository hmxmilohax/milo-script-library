#include shader_objects.dta
#define COLOR_XFM
((struct
      (hue
         float
         (alias
            "Hue")
         (slider)
         (help
            "Hue: -180 to 180, 0.0 is neutral")
         (range -180 180))
      (saturation
         float
         (alias
            "Saturation")
         (slider)
         (help
            "Saturation: -100 to 100, 0.0 is neutral")
         (range -100 100))
      (lightness
         float
         (alias
            "Lightness")
         (slider)
         (help
            "Lightness: -100 to 100, 0.0 is neutral")
         (range -100 100))
      (contrast
         float
         (alias
            "Contrast")
         (slider)
         (help
            "Contrast: -100 to 100, 0.0 is neutral")
         (range -100 100))
      (brightness
         float
         (alias
            "Brightness")
         (slider)
         (help
            "Brightness: -100 to 100, 0.0 is neutral")
         (range -100 100))
      (levels
         (indent
            (in_lo
               color
               (alias
                  "Input (low)")
               (help
                  "Input low end"))
            (in_hi
               color
               (alias
                  "Input (high)")
               (help
                  "Input high end"))
            (out_lo
               color
               (alias
                  "Output (low)")
               (help
                  "Output low end"))
            (out_hi
               color
               (alias
                  "Output (high)")
               (help
                  "Output high end"))))))
#define TEX_XFM
((struct
      (rotation
         float
         (help
            "Counter-clockwise rotation angle (in degrees)"))
      (scale
         VECTOR2
         (help
            "Texture scale (bigger numbers make the texture look bigger"))
      (shear
         VECTOR2
         (help
            "Texture shear (try it, it's fun!)"))
      (offset
         VECTOR2
         (help
            "Amount to offset the texture, yo"))))
(Anim
   (description
      "Base class for animatable objects. Anim objects change their state or other objects.")
   (group Animation)
   (category Animation)
   (editor
      (rate
         int
         (list RATE_ENUM)
         (help
            "Rate to animate"))
      (song_anim
         bool
         (help
            "Sync frame to a beat source"))
      (beat_source
         object
         (class BeatSource)
         (help
            "Beat source to sync to or TheBeatProvider if NULL")
         (read_only
            {!
               [song_anim]}))
      (beat_source_range
         symbol
         (list
            {$this get_valid_beat_source_ranges})
         (help
            "range of beat source to sync to or whole song if blank")
         (read_only
            {!
               [song_anim]}))
      (song_anim_paused
         bool
         (read_only
            {!
               [song_anim]})
         (help
            "Pause a song anim, independent of the song"))
      (frame
         float
         (help
            "Frame of animation")
         (no_test)
         (slider)
         (range
            [start_frame]
            [end_frame]))
      (start_frame
         float
         (help
            "Start frame # of animation")
         (read_only TRUE)
         (no_test))
      (end_frame
         float
         (help
            "End frame # of animation")
         (read_only TRUE)
         (no_test))
      (animate
         float
         (propanim_type anim)
         PROPANIM_ONLY
         (range
            {$this start_frame}
            {$this end_frame})))
   (events_out
      (anim_ended
         (help
            "animation has finished playing"))
      (anim_looped
         (help
            "animation has looped"))))
#define kDecalShape_Square
(0)
#define kDecalShape_Octagon
(1)
#define DECAL_SHAPE_ENUM
((("kDecalShape_Square"
         (alias
            "Square"))
      ("kDecalShape_Octagon"
         (alias
            "Octagon"))))
(Decal
   (description
      "Decals project textures onto terrain and other static geometry")
   (category Graphics)
   (allowed_dirs Scene Entity)
   (superclasses Draw Trans)
   (ext decal)
   (editor
      (mat
         object
         (class Mat)
         (list
            {list_allowed_mats $this})
         (help
            "Material used for rendering the Decal (must be using a Decal matspec)"))
      (shape
         int
         (list DECAL_SHAPE_ENUM)
         (help
            "Pick the smallest shape which encompasses the projected image for this decal"))))
(Marker
   (description
      "For marking positions in the world.")
   (category Control)
   (allowed_dirs Scene)
   (superclasses Trans)
   (converts_to Trans)
   (editor))
(Scale9
   (description
      "A 2d mesh which scales to maintain borders")
   (category Graphics)
   (allowed_dirs ObjectDir)
   (superclasses Trans Draw)
   (editor
      (mat
         object
         (class Mat)
         (alias
            "material")
         (help
            "Material to use"))
      (top_left
         VECTOR2
         (help
            "top left coordinates in 0 to 1 UV space"))
      (bottom_right
         VECTOR2
         (help
            "bottom left coordinates in 0 to 1 UV space"))
      (border_size
         float
         (help
            "Used to figure our the porportions of the center area to the border"))))
(Enterable
   (description
      "A simple object with an enter an exit script call")
   (editor))
#define kEntityIconFileUsage_Browser
(1)
#define kEntityIconFileUsage_Scene
(2)
#define ENTITY_ICON_FILE_USAGE
((("kEntityIconFileUsage_Browser"
         (alias
            "content browser")
         (help
            "Use the icon file in the content browser (if unchecked, the icon snapshot is used in the content browser)"))
      ("kEntityIconFileUsage_Scene"
         (alias
            "scene")
         (help
            "Use the icon file in the 3D scene (if unchecked, no icon is shown in the 3D scene)"))))
(Entity
   (description
      "An Entity, instances Dir files, exposing select properties and handlers")
   (category Graphics)
   (superclasses Poll Trans Draw Instance)
   (allowed_dirs ObjectDir Scene Entity)
   (file_ext
      ".entity")
   (editor
      (draw_icon_ground_plane
         bool
         (group Forge)
         (help
            "Should we draw a black ground plane when generating the icon for this entity? (particularly useful for decals)")
         (disk_prop)
         (read_only
            {!=
               [icon_file]
               ""}))
      (icon_file
         file
         (group Forge)
         (ext
            "Premult-alpha Image files"
            "png")
         (help
            "Texture to use for the icon in the content browser and/or 3D scene (premult-alpha is assumed, so please select a *_pma.png file)")
         (disk_prop))
      (icon_file_usage
         bitfield
         (group Forge)
         (list ENTITY_ICON_FILE_USAGE)
         (help
            "How should the icon file be used?")
         (disk_prop)
         (read_only
            {==
               [icon_file]
               ""}))
      (scene_icon_offset
         VECTOR3
         (group Forge)
         (help
            "Offset for positioning the icon in the 3D scene")
         (disk_prop)
         (read_only
            {'||'
               {==
                  [icon_file]
                  ""}
               {==
                  {&
                     [icon_file_usage]
                     kEntityIconFileUsage_Scene}
                  0}}))
      (scene_icon_dist_scale
         float
         (group Forge)
         (alias
            "scene icon distance scale")
         (help
            "Distance scale for drawing the icon in the 3D scene (< 1 to fade-out closer to the camera, > 1 to fade-out further away)")
         (disk_prop)
         (read_only
            {'||'
               {==
                  [icon_file]
                  ""}
               {==
                  {&
                     [icon_file_usage]
                     kEntityIconFileUsage_Scene}
                  0}})
         (range 1.0e-2 100.0))
      (scene_icon_pivot
         int
         (list ICON_PIVOT_ENUM)
         (group Forge)
         (help
            "Pivot point of the icon mesh to use for drawing the icon in the 3D scene")
         (disk_prop)
         (read_only
            {'||'
               {==
                  [icon_file]
                  ""}
               {==
                  {&
                     [icon_file_usage]
                     kEntityIconFileUsage_Scene}
                  0}}))
      (default_lighting
         int
         (list DEFAULT_LIGHTING_ENUM_ENTITY)
         (group Forge)
         (help
            "Determines how default lighting should be applied when editing this entity")
         (disk_prop))
      (keep_on_disk
         bool
         (group System)
         (help
            "If checked, keeps a copy of this file on the disk, so that code/script can load it.  It will not be inlined into Scenes or other Entities.")
         (disk_prop)
         (alias
            "Keep on Disk"))
      (preview_lod
         int
         (range
            0
            {$this
               size
               (level_of_detail)})
         (slider)
         (hide
            {!
               {$this has_lod}}
            propanim
            flow)
         (help
            "Scrub to preview LODs, only active when this property selected, select another property on this object to release")
         (group 'Level of Detail')
         (no_test)
         (tab debug))
      (lod_bias
         float
         (range -5 5)
         (slider)
         (hide propanim flow)
         (help
            "Scrub to bias EVERY LOD IN THE SCENE, 0 is neutral, negative means use worse looking lods")
         (group 'Level of Detail')
         (no_test)
         (tab debug))
      (lod_type
         int
         (list LODTYPE_ENUM)
         (help
            "How LOD is created for this Entity")
         (hide propanim flow)
         (group 'Level of Detail')
         (record_all)
         (disk_prop)
         (no_test))
      (level_of_detail
         (array
            (struct
               (min_size
                  float
                  (help
                     "Vertical screen size of the bounding sphere at which we stop drawing this LOD")
                  (range 0 2)
                  (slider))
               (draws
                  (array
                     object
                     (class Draw)
                     (list
                        {$this list_lod_drawables}))
                  (help
                     "Drawables at each LOD, can be in more than one LOD"))
               (faces_and_verts
                  (indent
                     (faces
                        int
                        (help
                           "number of faces")
                        (read_only TRUE)
                        (hide flow propanim))
                     (verts
                        int
                        (help
                           "number of verts")
                        (read_only TRUE)
                        (hide flow propanim)))
                  (help
                     "number of faces and verts")
                  (editor_type vector)))
            (header
               {sprint
                  "LOD "
                  {elem $editor_prop_path 1}
                  ", "
                  {$this
                     get
                     {editor_prop_path_child min_size}}
                  ", "
                  {$this
                     size
                     {editor_prop_path_child draws}}
                  " draws, "
                  {$this
                     get
                     {editor_prop_path_child faces}}
                  " faces"}))
         (help
            "Drawables at each LOD and when to stop drawing each one and go to the next")
         (group 'Level of Detail')
         (disk_prop)
         (read_only
            {!=
               [lod_type]
               kLODTypeUser})
         (hide
            {&&
               {!
                  {$this has_lod}}
               {!=
                  [lod_type]
                  kLODTypeUser}}))
      (regenerate_lods
         script
         (script
            {$this regenerate_lods})
         (no_test)
         (help
            "Regenerates LODs")
         (group 'Level of Detail')
         (disk_prop)
         (hide
            {!=
               [lod_type]
               kLODTypeGenerated}))
      (lod_and_size
         (indent
            (cur_lod
               int
               (help
                  "The current shown lod"))
            (cur_lod_size
               float
               (help
                  "The current vertical screen fraction of the entity")))
         (help
            "Current lod and vertical screen size")
         (editor_type vector)
         (group 'Level of Detail')
         (read_only TRUE)
         (hide
            {!
               {$this has_lod}}
            propanim
            flow))
      (remesh
         int
         (list REMESH_ENUM)
         (help
            "Remeshing mode, determines how/whether this entity and its meshes and child entities are remeshed.")
         (group 'Level of Detail')
         (no_test)
         (hide propanim flow)
         (inline_script
            "restore_to_disk"
            (script
               {$this restore_remesh_to_disk})
            (help
               "Restores the instance property to the disk default")
            (hide
               {!
                  {$this is_proxy}})))
      (avoid_remesh
         (array
            object
            (class Mesh))
         (help
            "These meshes will not get remeshed.  Good for splitting out spinning windmill blades and the like")
         (group 'Level of Detail')
         (hide propanim flow)
         (disk_prop))
      (remesh_pad
         float
         (help
            "Pads top level remesh bounding shapes by this amount to force them to be remeshed further off than they otherwise would be")
         (group 'Level of Detail')
         (hide propanim flow)
         (read_only
            {!=
               [remesh]
               kRemeshTogether})
         (disk_prop))
      (occluded
         bool
         (alias
            "apply static occlusion")
         (help
            "True means this and all its drawable children will be statically occluded. False means neither myself nor my draw children will be occluded.  Set false if the object moves around beyond it's bounding sphere.  If [remesh] is 'apart', each mesh and entity child will be occluded separately.")
         (group 'Level of Detail')
         (no_test)
         (hide propanim flow)
         (inline_script
            "restore_to_disk"
            (script
               {$this restore_occluded_to_disk})
            (help
               "Restores the instance property to the disk default")
            (hide
               {!
                  {$this is_proxy}})))
      (contained_light_environments
         bitfield
         (list
            {$this get_environments_bit_list})
         (group Lighting)
         (hide
            {$this hide_environments_bit_list})
         (read_only
            {==
               [num_contained_lights]
               0})
         (help
            "Which environments do lights contained in this entity contribute light to?"))
      (num_contained_lights
         int
         (tab debug)
         (group Lighting)
         (read_only TRUE))
      (contained_light_environments_debug
         bitfield
         (list
            {$this get_environments_bit_list})
         (alias
            "local contained light environments")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (contained_light_environments_debug_raw
         int
         (alias
            "local contained light environments (raw)")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (world_contained_light_environments_debug
         bitfield
         (list
            {$this get_environments_bit_list})
         (alias
            "world contained light environments")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (world_contained_light_environments_debug_raw
         int
         (alias
            "world contained light environments (raw)")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (approve_asset
         script
         (script
            {$this asset_approve})
         (no_test)
         (help
            "Approve asset- you must have permission to do this!")
         (group 'Asset Approval')
         (disk_prop))
      (reject_asset
         script
         (script
            {$this asset_reject})
         (no_test)
         (help
            "Reject asset- you must have permission to do this!")
         (group 'Asset Approval')
         (disk_prop))
      (temp_approve_asset
         script
         (script
            {$this asset_temp_approve})
         (no_test)
         (help
            "Temp approve asset- for assets with slight problems that must go in.")
         (group 'Asset Approval')
         (disk_prop))
      (temp_approve_to-delete_asset
         script
         (script
            {$this asset_temp_to_delete})
         (no_test)
         (help
            "Temp approve asset- for very temporary assets that will be deleted.")
         (group 'Asset Approval')
         (disk_prop))
      (approval_status
         string
         (no_test)
         (help
            "Current approval status.")
         (group 'Asset Approval')
         (read_only TRUE)
         (disk_prop))
      (rejection_reason
         string
         (no_test)
         (help
            "Current rejection reason")
         (group 'Asset Approval')
         (read_only TRUE)
         (disk_prop))
      (last_approver
         string
         (no_test)
         (help
            "Last approved or rejected by")
         (group 'Asset Approval')
         (read_only TRUE)
         (disk_prop))))
(Remesher
   (description
      "Remeshes all Entities within a bounding sphere, presenting them as one mesh")
   (category Graphics)
   (superclasses Draw Instance)
   (allowed_dirs Scene)
   (user_creatable FALSE)
   (functest no_test)
   (ext rm)
   (editor
      (box_radius
         float
         (help
            "Radius to search for other entities")
         (range 0 100000)
         (read_only TRUE))
      (min_radius
         float
         (help
            "Minimum Radius, defaults to 64")
         (range 64 1024)
         (hide propanim flow))
      (meshes
         (array
            object
            (class Mesh))
         (read_only TRUE)
         (tab debug)
         (help
            "These are the meshes that were combined into one mesh, taken from the [entities]"))
      (children
         (array
            object
            (class Remesher))
         (read_only TRUE)
         (tab debug)
         (help
            "The Remesher nodes under me"))
      (regenerate_tree
         script
         (script
            {$this regenerate_tree})
         (help
            "Regenerates the whole LOD octtree")
         (hide
            {!
               {$this is_top_node}}))
      (regenerate_node
         script
         (script
            {$this regenerate_node})
         (help
            "Just regenerates this node"))
      (draw_only_source
         script
         (script
            {$this toggle_draw_only})
         (help
            "Draws only the source meshes from this Remesher node, toggles"))
      (freeze
         bool
         (help
            "Freezes current remeshing in place")
         (tab debug)))
   (invalid_entities
      "&/vegetation/&"))
(EntityPool
   (description
      "Precreates and spawns/recycles instances of a given entity type")
   (category Control)
   (superclasses Trans Draw)
   (allowed_dirs ObjectDir Scene)
   (editor
      (entity_path
         file
         (subclass Entity)
         (help
            "entity to instantiate copies of and spawn")
         (hide flow propanim))
      (activate_flow
         string
         (list
            {$this on_get_flows})
         (help
            "flow to activate inside the entity on spawn")
         (hide flow propanim))
      (recall_flow
         string
         (list
            {$this on_get_flows})
         (help
            "flow to activate on recall, will delay recall")
         (hide flow propanim))
      (max_polyphony
         int
         (alias
            "maximum instances")
         (help
            "maximum number of instances to allow")
         (hide flow propanim)
         (range 1 1000))
      (recall_when_empty
         bool
         (help
            "If we are asked to spawn and the pool is out of instances, do we recall the oldest one? If not, spawn will be ignored..")
         (hide flow propanim))
      (parent_to_pool
         bool
         (help
            "Spawned entities will have the pool as a trans parent (as opposed to no trans parent)")
         (hide flow propanim))
      (position_only
         bool
         (help
            "Do we just position the spawned entity at the pool's location or set the full transform?")
         (hide flow propanim))
      (num_spawned
         int
         (help
            "How many instances are currently spawned")
         (read_only TRUE))
      (max_ever_spawned
         int
         (help
            "What is the most instances we've ever spawned at once. Useful for tuning max polyphony")
         (read_only TRUE))
      (spawn
         script
         (script
            {$this spawn})
         (custom_history)
         (hide
            {!
               [entity_path]})
         (help
            "Spawn an entity from the pool."))
      (recall_all
         script
         (script
            {$this recall_all})
         (custom_history)
         (hide
            {!
               [entity_path]})
         (help
            "Recall all the pool's entities."))
      (recall_oldest
         script
         (script
            {$this recall_oldest})
         (custom_history)
         (hide
            {!
               [entity_path]})
         (help
            "Recall the oldest spawned entity."))
      (contained_light_environments
         bitfield
         (list
            {$this get_environments_bit_list})
         (group Lighting)
         (hide
            {$this hide_environments_bit_list})
         (read_only
            {==
               [num_contained_lights]
               0})
         (help
            "Which environments do lights contained in my spawned entities contribute light to?"))
      (num_contained_lights
         int
         (tab debug)
         (group Lighting)
         (read_only TRUE))
      (edit_in_place_idx
         int
         (help
            "Index of the spawned entity you want to edit in place")
         (inline_script
            "Edit"
            (script
               {forge
                  hack_edit_in_place
                  {$this
                     hack_get_spawned_instance
                     [edit_in_place_idx]}}))
         (no_test)
         (custom_history)))
   (events_in
      (spawn
         (help
            "spawn an instance from the entity pool"))
      (recall_all)
      (recall_oldest)))
(PropAnim
   (description
      "Animate any properties on target object")
   (category Animation)
   (ext anim)
   (superclasses Anim)
   (tool_superclasses Trans)
   (allowed_dirs Scene ObjectDir)
   (group Animation)
   (editor
      (initial_frame
         (indent
            (initial_frame_enabled
               bool
               (help
                  "If true, the initial frame value will be applied."))
            (initial_frame_value
               float
               (help
                  "The initial frame value to apply.")
               (read_only
                  {!
                     [initial_frame_enabled]})))
         (editor_type vector)
         (help
            "Optionally specifies a frame value to be applied to this animation on Enter."))
      (flow_labels
         (array symbol)
         (alias 'Event Labels')
         (hide flow propanim)
         (help
            "the names of possible events you can place on this timeline (i.e. 'footstep')"))
      (intensity
         float
         (help
            "Scales all animation keyframe values by this #"))
      (fire_flow_label
         symbol
         (list
            {$this list_event_labels})
         (alias
            "fire event")
         (help
            "fire flow labels in sync with the anim")
         (hide propedit)
         (no_test))
      (targets_poll_after
         bool
         (help
            "Makes target objects poll after us"))
      (ignore_frozen
         bool
         (help
            "Makes Setting the frame still work even if poll frozen")))
   (events_out
      (flow_label_fired
         (editor
            (label
               string
               (help
                  "the name of the label that was hit")
               (default
                  "")))
         (help
            "activate the event"))))
(Cam
   (description
      "A Camera object is used to specify camera, viewport, \n                 and depth-of-field settings for the scene")
   (category Camera)
   (group Camera)
   (superclasses Trans)
   (ext cam)
   (editor
      (ortho
         bool
         (alias
            "orthographic?")
         (help
            "Is this an orthographic or a perspective camera?"))
      (near_plane
         float
         (alias
            "Near Plane")
         (help
            {sprint
               "The distance in world coordinates to the near clipping\n            plane. The near/far ratio is limited to 1:"
               {cam_get_max_far_near_ratio}
               " to preserve\n            Z-buffer resolution."})
         (range
            {/
               [far_plane]
               {cam_get_max_far_near_ratio}}
            {-
               [far_plane]
               kSmallFloat}))
      (far_plane
         float
         (alias
            "Far Plane")
         (help
            {sprint
               "The distance in world coordinates to the far clipping\n            plane. The near/far ratio is limited to 1:"
               {cam_get_max_far_near_ratio}
               " to preserve\n            Z-buffer resolution. Note that on the PS2, object polys are\n            culled rather than clipped to the far plane."})
         (range
            {'+'
               [near_plane]
               kSmallFloat}
            {'*'
               [near_plane]
               {cam_get_max_far_near_ratio}}))
      (y_fov
         float
         (alias
            "FOV (Y)")
         (help
            "Y-axis field-of-view for perspective cameras (0 to 180 degrees)")
         (hide
            [ortho])
         (range 0.0 180.0))
      (ortho_y_height
         float
         (alias
            "orthographic height (Y)")
         (help
            "Y-axis world-space height for orthographic cameras")
         (hide
            {!
               [ortho]})
         (range 1.0e-2 100000.0))
      (z_range
         VECTOR2
         (alias
            "Z-buffer range")
         (help
            {sprint
               "The part of the Z-buffer to use, in normalized\n            coordinates. It can be useful to draw a scene where the near\n            and far planes must exceed the 1:"
               {cam_get_max_far_near_ratio}
               " ratio (so multiple\n            cameras are used to draw farthest to nearest objects, each\n            using a closer range of the z-buffer) or to leave some\n            z-buffer for HUD overlay objects."})
         (tab debug)
         (read_only TRUE))
      (screen_rect
         RECT
         (alias
            "screen area")
         (help
            "The area of the screen in normalized coordinates (0 to 1) to draw into.")
         (read_only TRUE)
         (tab debug))
      (dof_params
         (struct
            (enabled
               bool
               (help
                  "Enable/disable depth-of-field"))
            (quality_settings
               (indent
                  (quality
                     int
                     (list DOF_QUALITY_ENUM))
                  (reduce_bleeding
                     bool
                     (read_only
                        {!
                           {$this can_dof_read_depth_buffer}})
                     (help
                        "Reduce bleeding of in focus objects into out of focus background (only available in Scenes, not UIScreens)"))
                  (spread_foreground_blur
                     bool
                     (read_only
                        {'||'
                           {!
                              {$this can_dof_read_depth_buffer}}
                           {!
                              [dof_params reduce_bleeding]}})
                     (help
                        "Spread blur of foreground objects over in focus background (only available in Scenes, not UIScreens)")))
               (read_only
                  {!
                     [dof_params enabled]}))
            (focal_distance
               float
               (help
                  "Distance (in world units) from the camera to the center of the focal window")
               (range 0.0 100000.0)
               (read_only
                  {!
                     [dof_params enabled]}))
            (focal_window
               float
               (help
                  "Width (in world units) of the focal window (in which blur is at a minimum)")
               (range 0.0 100000.0)
               (read_only
                  {!
                     [dof_params enabled]}))
            (near_falloff_window
               float
               (help
                  "Width (in world units) of the near falloff window (where we ramp from min blur to near max blur)")
               (range 0.0 100000.0)
               (read_only
                  {!
                     [dof_params enabled]}))
            (far_falloff_window
               float
               (help
                  "Width (in world units) of the far falloff window (where we ramp from min blur to far max blur)")
               (range 0.0 100000.0)
               (read_only
                  {!
                     [dof_params enabled]}))
            (min_blur
               float
               (help
                  "Amount to blur within the focal window (0-1; 0 is unblurred, 1 is fully blurred)")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [dof_params enabled]})
               (record_all))
            (near_max_blur
               float
               (help
                  "Amount to blur at distances closer than the near falloff window (0-1; 0 is unblurred, 1 is fully blurred)")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [dof_params enabled]})
               (record_all))
            (far_max_blur
               float
               (help
                  "Amount to blur beyond the far falloff window (0-1; 0 is unblurred, 1 is fully blurred)")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [dof_params enabled]})
               (record_all)))
         (alias
            "Depth of Field")
         (help
            "Depth of Field settings"))))
(Ribbon
   (description
      "A series of points that are connected by a generated mesh")
   (category Graphics)
   (superclasses Poll Draw Trans)
   (ext rbn)
   (editor
      (num_sides
         int
         (range 2 20)
         (alias
            "number of sides")
         (help
            "Number of sides, the more sides, the more cylindrical it is. 3 to 20"))
      (num_segment_divisions
         int
         (alias
            "number of segment divisions")
         (range 1 100)
         (help
            "Number of divisions per segment/control point"))
      (mat
         object
         (class Mat)
         (alias
            "material")
         (help
            "Material to use"))
      (width
         float
         (range 1.0e-3 1000)
         (help
            "Base width of the tube"))
      (side_rotation
         float
         (range 0.0 179.99)
         (help
            "How much is the generated cross-section rotated?"))
      (vertex_flags
         bitfield
         (list RIBBON_VERTEX_FLAGS)
         (help
            "Optional features"))
      (caps
         (indent
            (start_cap
               bool
               (help
                  "Is there a cap at the beginning?"))
            (end_cap
               bool
               (help
                  "Is there a cap at the end?"))
            (cap_complexity
               int
               (range 1 10)
               (help
                  "How tessellated is the cap?"))))
      (points
         (array VECTOR3)
         (help
            "The control points to use")
         (read_only
            {!
               {$this can_manually_edit_points}}))
      (dont_update_sphere
         bool
         (help
            "Enables an optimization where the bounding sphere is never updated (which is expensive when the ribbon is detailed), but results in the ribbon ALWAYS drawing unless explicitly hidden."))))
(Trail
   (description
      "A Ribbon that chases an object and disappears over time")
   (category Graphics)
   (superclasses Ribbon)
   (ext trl)
   (editor
      (active
         bool
         (help
            "Will this actively update from its chase?"))
      (chase
         object
         (class Trans)
         (help
            "The object it follows"))
      (update_time
         float
         (range 1.0e-2 2)
         (help
            "The minimum time (in seconds) between updates"))
      (decay_time
         float
         (range 0.1 5)
         (help
            "The time (in seconds) updates last"))
      (tail_output
         object
         (class Trans)
         (help
            "A trans to update with the position of the TAIL of this ribbon"))
      (move_trail_with_parent
         bool
         (help
            "True if we should move our trail with our trans parent.  If false, trail stays in world space"))))
(TexRenderer
   (description
      "TexRender renders a draw and cam into a texture.")
   (category Texture)
   (superclasses Draw)
   (ext rndtex)
   (allowed_dirs Entity Scene)
   (editor
      (draw
         object
         (class Draw)
         (help
            "Draw Object to render to texture")
         (list
            {$this list_draws}))
      (cam
         object
         (class Cam)
         (help
            "Camera to use, if you want specific one, defaults to proxy cam, if none and draw is proxy"))
      (mirror_cam
         object
         (class Cam)
         (help
            "We will mirror this cam about whatever mesh is associated with our output texture to automatically position the render-2-tex cam for mirroring"))
      (output_texture
         object
         (class Tex)
         (help
            "Texture to write to")
         (list
            {$this list_render_textures})
         (add_history
            [output_texture]))
      (draw_pre_clear
         bool
         (help
            "Renders the texture before the rest of the scene is rendered. Useful for rendering large textures"))
      (force
         bool
         (help
            "Force rendering every frame"))
      (imposter_height
         float
         (help
            "Height for imposter rendering with current camera"))
      (no_poll
         bool
         (help
            "If [draw] will not get enter, exit, or poll automatically, it will be up to script hooks to do any of that"))
      (force_mips
         bool
         (help
            "Generate mip maps for the texture."))
      (draw_owner
         bool
         (help
            "TRUE if we take the thing out of the world and own it's draw"))
      (clear_target_tex
         bool
         (help
            "Do we clear the render target before drawing?"))
      (clear_target_tex_color
         color
         (help
            "To what color do we clear the target texture?")
         (read_only
            {!
               [clear_target_tex]}))
      (feedback_texels
         bool
         (help
            "Set to true if you need the existing pixels for subsequent frames. Can be a bit expensive, so don't use unless necessary.")
         (read_only
            [clear_target_tex]))))
(TexBlendController
   (description
      "Defines the two objects that will be used to determine the distance for the texture blend.")
   (category Texture)
   (allowed_dirs)
   (ext texblendctl)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "The mesh object to render to the texture. This should be an unskinned mesh with UV coordinates that match the source mesh"))
      (reference_object_1
         object
         (class Trans)
         (help
            "The first object to use as a distance reference")
         (read_only
            [override_map]))
      (reference_object_2
         object
         (class Trans)
         (help
            "The second object to use as a distance reference")
         (read_only
            [override_map]))
      (base_distance
         float
         (help
            "The base distance used to compute which blending to use")
         (read_only TRUE))
      (min_distance
         float
         (help
            "The distance where the 'near' texture map will be fully visible")
         (read_only
            [override_map]))
      (max_distance
         float
         (help
            "The distance where the 'far' texture map will be fully visible")
         (read_only
            [override_map]))
      (set_base_distance
         script
         (help
            "Sets the reference distance value from the current positions.")
         (script
            {$this set_base_distance})
         (read_only
            [override_map]))
      (set_min_distance
         script
         (help
            "Sets the min distance value from the current positions.")
         (script
            {$this set_min_distance})
         (read_only
            [override_map]))
      (set_max_distance
         script
         (help
            "Sets the max distance value from the current positions.")
         (script
            {$this set_max_distance})
         (read_only
            [override_map]))
      (set_all_distances
         script
         (help
            "Sets ALL distance values from the current positions.")
         (script
            {$this set_all_distances})
         (read_only
            [override_map]))
      (override_map
         object
         (class Tex)
         (help
            "If set, ignores all other fields and forces 100% blend to it"))))
(TexBlender
   (description
      "Renderable texture used to composite pieces of texture maps based on the distance between bones or other animatiable objects")
   (category Texture)
   (allowed_dirs)
   (superclasses Draw)
   (ext texblend)
   (editor
      (owner
         object
         (class Draw)
         (help
            "The owner of this texture blend. This is used to determine if the texture blend is visible. For example, if this texture blend is used in the head object of a character, set the owner to be the head object."))
      (base_map
         object
         (class Tex)
         (help
            "The base texture map"))
      (near_map
         object
         (class Tex)
         (help
            "The texture map to use when the constraints are closer than the default distance"))
      (far_map
         object
         (class Tex)
         (help
            "The texture map to use when the constraints are further than the default distance"))
      (output_texture
         object
         (class Tex)
         (help
            "The final result output texture")
         (list
            {$this get_render_textures})
         (add_history
            [output_texture]))
      (controller_list
         (array
            object
            (class TexBlendController))
         (help
            "The list of controller objects used to render pieces of a mesh to the output texture")
         (no_test))
      (controller_influence
         float
         (help
            "Global strength of the blending effect for each controller")
         (range 0.0 1.0))))
(MotionBlur
   (description
      "Contains a list of objects to apply object based motion blur (actually does nothing, deprecated)")
   (category Graphics)
   (user_creatable FALSE)
   (allowed_dirs)
   (superclasses Draw)
   (ext blur)
   (editor))
(MotionMesh
   (description
      "Motion mesh for displaying motion based on multi-point history")
   (allowed_dirs Entity Scene)
   (superclasses Poll Draw)
   (ext motion)
   (editor
      (active
         bool
         (help
            "Set to TRUE to set it motion"))
      (mat
         object
         (class Mat)
         (help
            "Material to apply to mesh"))
      (num_segments
         int
         (range 1 39)
         (slider)
         (help
            "Number of segments to create mesh out of"))
      (expiration_time
         float
         (range 1.0e-2 100)
         (units
            "s")
         (help
            "How long it takes to expire. Higher value = longer trail."))
      (reference_trans
         object
         (class Trans)
         (help
            "Reference object for the history."))
      (tracking_points
         (array
            object
            (class Trans))
         (help
            "Objects to track"))
      (has_motion
         bool
         (read_only TRUE)
         (help
            "Output whether there is motion mesh"))
      (skinned
         bool
         (read_only TRUE)
         (help
            "True if this mesh is skinned (If not it's going to suck the framerate)"))
      (freeze
         bool
         (help
            "Use to freeze the mesh")
         (no_test))))
(Draw
   (description
      "Base class for drawable objects. Draw objects either\n        render polys or determine rendering state.")
   (group Render)
   (editor
      (showing
         bool
         (help
            "Whether the object and its Draw children are drawn or collided with."))
      (draw_context
         bitfield
         (list DRAW_CONTEXT)
         (alias
            "show/hide context")
         (help
            "Specific contexts under which to show/hide this object (and its children)"))
      (sphere
         SPHERE
         (disk_prop)
         (help
            "bounding sphere")
         (read_only
            {$this is_sphere_read_only}))
      (sphere_scale
         float
         (disk_prop)
         (help
            "Bounding sphere scale; the radius of the computed sphere is multiplied by this scale.  Set to zero to disable CDB notifies about particles or other drawables having no bounding sphere defined")
         (range 0.0 100000.0))
      (update_sphere
         script
         (disk_prop)
         (help
            "Calculates the bounding sphere for the object.")
         (script
            {$this update_sphere}))
      (sort_type
         int
         (list DRAW_SORT_TYPE)
         (alias
            "sort by")
         (disk_prop)
         (help
            "When sorting by distance from the camera, determine how my bounding sphere is interpreted"))
      (environment
         symbol
         (list
            {$this get_environments_list})
         (group Lighting)
         (instance_prop)
         (help
            "Which environment is used to light this object?")
         (hide
            {$this hide_environment}))
      (environment_id
         int
         (alias
            "raw environment ID")
         (group Lighting)
         (tab debug)
         (instance_prop)
         (read_only TRUE)
         (help
            "Raw environment ID stored on this drawable"))
      (environment_debug
         symbol
         (alias
            "actual environment")
         (group Lighting)
         (tab debug)
         (instance_prop)
         (read_only TRUE)
         (help
            "current (possibly inherited) environment"))
      (hide_parent
         object
         (class Draw)
         (tab debug)
         (read_only TRUE)
         (instance_prop))
      (display_parent
         object
         (class Object)
         (tab debug)
         (read_only TRUE)
         (instance_prop))
      (budget_category
         symbol
         (list
            {$this get_budget_category_list})
         (help
            "Budget category to use when drawing this object"))
      (budget_category_cpu_timer
         symbol
         (tab debug)
         (read_only TRUE)
         (help
            "The actual (possibly inherited) budget category cpu timer used when drawing this object"))
      (budget_category_gpu_timer
         symbol
         (tab debug)
         (read_only TRUE)
         (help
            "The actual (possibly inherited) budget category gpu timer used when drawing this object"))
      (budget_category_gpu_stats_query
         symbol
         (tab debug)
         (read_only TRUE)
         (help
            "The actual (possibly inherited) budget category gpu stats query used when drawing this object"))))
(Flare
   (description
      "Flare objects are particles that are rendered based on\n        the visibility of their center.<br />\n        Use them to implement sun flare peeking through tree leaves and\n        around buildings, flares on lamps and stage lights that get\n        occluded by characters, etc.  Flares should be drawn last in a\n        frame, and since they depend on the z-buffer for visibility\n        testing, previously drawn translucent or cutout objects must\n        properly use translucent or SrcAlphaCutout materials.")
   (category Graphics)
   (superclasses Draw Trans)
   (ext flare)
   (editor
      (mat
         object
         (class Mat)
         (alias
            "material")
         (help
            "Material for flare"))
      (test_type
         int
         (list FLARE_TEST_TYPE_ENUM)
         (help
            "What type of occlusion test to perform"))
      (test_area_size
         float
         (range 0.0 1000.0)
         (read_only
            {'||'
               {==
                  [test_type]
                  kFlareTestType_None}
               {==
                  [test_type]
                  kFlareTestType_Point}})
         (help
            "Size of the occlusion test area in world space (square width or sphere diameter)"))
      (max_distance
         float
         (range 0.0 100000.0)
         (help
            "Distance used when interpreting the over-distance waveforms"))
      (uniform_scale bool)
      (scale_over_distance
         waveform_float
         (hide
            {!
               [uniform_scale]})
         (help
            "Waveform of uniform scale over distance (scale in screen-space, where 1.0 is the height of the screen)"))
      (x_scale_over_distance
         waveform_float
         (hide
            [uniform_scale])
         (help
            "Waveform of X scale over distance (scale in screen-space, where 1.0 is the height of the screen)"))
      (y_scale_over_distance
         waveform_float
         (hide
            [uniform_scale])
         (help
            "Waveform of Y scale over distance (scale in screen-space, where 1.0 is the height of the screen)"))
      (scale_over_view_angle
         waveform_float
         (hide
            {!
               [uniform_scale]})
         (help
            "Waveform of uniform scale over view angle (scale in screen-space, where 1.0 is the height of the screen; view angle is 0.0 when looking at the flare dead-on, 0.5 from the side, 1.0 from the back)"))
      (x_scale_over_view_angle
         waveform_float
         (hide
            [uniform_scale])
         (help
            "Waveform of X scale over view angle (scale in screen-space, where 1.0 is the height of the screen; view angle is 0.0 when looking at the flare dead-on, 0.5 from the side, 1.0 from the back)"))
      (y_scale_over_view_angle
         waveform_float
         (hide
            [uniform_scale])
         (help
            "Waveform of Y scale over view angle (scale in screen-space, where 1.0 is the height of the screen; view angle is 0.0 when looking at the flare dead-on, 0.5 from the side, 1.0 from the back)"))
      (offset
         VECTOR2
         (help
            "Offset of the drawn flare from its test location (in screen-space)"))
      (angle
         float
         (help
            "Counter-clockwise screen-space rotation in degrees about the flare center"))
      (fade_in_time
         float
         (range 0.0 1.0)
         (slider)
         (help
            "Time in seconds to fade in (modulates the vertex color alpha channel)"))
      (fade_out_time
         float
         (range 0.0 1.0)
         (slider)
         (help
            "Time in seconds to fade out (modulates the vertex color alpha channel)"))
      (opacity_over_distance
         waveform_float
         (help
            "Waveform of opacity over distance (modulates the vertex color alpha channel)"))
      (opacity_over_view_angle
         waveform_float
         (help
            "Waveform of opacity over distance (modulates the vertex color alpha channel)"))
      (current_opacity
         float
         (read_only TRUE)
         (help
            "Current opacity on the current viewport"))))
(Font
   (description
      "Font objects determine the appearance for Text objects.")
   (category UI)
   (ext font)
   (editor
      (mats
         (array
            object
            (class Mat)
            (help
               "Material for Font"))
         (read_only TRUE)
         (help
            "Multiple materials for multi-page fonts"))
      (texture_owner
         object
         (class Font)
         (allow_this)
         (help
            "Font owner of the texture to use")
         (no_null)
         (no_test))
      (monospace
         bool
         (help
            "Font is monospaced."))
      (base_kerning
         float
         (help
            "Base kerning of the font."))
      (packed
         bool
         (help
            "Font texture is packed")
         (read_only TRUE))
      (cell_width
         int
         (help
            "Texel width of character (if un-packed)")
         (read_only
            [packed]))
      (cell_height
         int
         (help
            "Texel height of character (if un-packed)")
         (read_only
            [packed]))
      (chars_in_map
         string
         (help
            "List of characters this font uses")
         (read_only
            [packed])
         (encoding utf8))
      (bleed_test
         script
         (script
            {$this bleed_test})
         (help
            "Tests the font for bleeding over edges.")))
   (types
      (imported_font
         (editor
            (font_name
               string
               (help
                  "Font name used to import this font.")
               (read_only TRUE))
            (font_size
               int
               (help
                  "Size of the font used to import this font.")
               (read_only TRUE)
               (default 12))
            (weight
               int
               (list FONTWEIGHT_ENUM)
               (help
                  "Bold state of the font used to import this font.")
               (read_only TRUE)
               (default kFontWeight_Normal))
            (italics
               bool
               (help
                  "Italics stat of the font used to import this font.")
               (read_only TRUE))
            (drop_shadow
               int
               (help
                  "Drop shadow offset.")
               (read_only TRUE)
               (default 128))
            (drop_shadow_opacity
               int
               (help
                  "Drop shadow opacity.")
               (read_only TRUE))
            (padding
               (indent
                  (left int)
                  (right int)
                  (top int)
                  (bottom int))
               (read_only TRUE))))))
(Group
   (description
      "Container to let you show and hide and optionally trans-parent drawables.")
   (category Groups)
   (superclasses Draw Trans)
   (allowed_dirs Scene UIScreen Entity)
   (ext grp)
   (editor
      (draws
         (array
            object
            (class Draw)
            (list
               {$this list_allowed_objects})
            (record_all TRUE))
         (alias
            "drawables")
         (help
            "Drawables in the group, in order of drawing and polling"))
      (contained_light_environments
         bitfield
         (list
            {$this get_environments_bit_list})
         (group Lighting)
         (hide
            {$this hide_environments_bit_list})
         (read_only
            {==
               [num_contained_lights]
               0})
         (help
            "Which environments do lights contained in this group contribute light to?"))
      (num_contained_lights
         int
         (tab debug)
         (group Lighting)
         (read_only TRUE))
      (contained_light_environments_debug
         bitfield
         (list
            {$this get_environments_bit_list})
         (alias
            "local contained light environments")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (contained_light_environments_debug_raw
         int
         (alias
            "local contained light environments (raw)")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (world_contained_light_environments_debug
         bitfield
         (list
            {$this get_environments_bit_list})
         (alias
            "world contained light environments")
         (group Lighting)
         (tab debug)
         (read_only TRUE))
      (world_contained_light_environments_debug_raw
         int
         (alias
            "world contained light environments (raw)")
         (group Lighting)
         (tab debug)
         (read_only TRUE))))
(LightMgr
   (description
      "Light manager, controls lighting for the entire scene.  There should be only one!")
   (category Light)
   (group Lighting)
   (superclasses)
   (ext litmgr)
   (user_creatable FALSE)
   (allowed_dirs)
   (editor
      (default_lighting
         int
         (list DEFAULT_LIGHTING_ENUM_SCENE)
         (help
            "Determines how default lighting should be applied"))
      (shadow_directional_source
         object
         (class LightDirectional)
         (help
            "Specify a directional light to cast shadows for the scene"))
      (shadow_point_source
         object
         (class LightPoint)
         (help
            "Specify a point light to cast shadows for the scene"))
      (shadow_blurriness
         float
         (help
            "Pixel radius of the blur applied to the shadow accumulation map")
         (slider)
         (range 0 2))
      (atmosphere
         object
         (class Atmosphere)
         (group Atmosphere))
      (ssao_params
         (struct
            (enabled
               bool
               (help
                  "Enable/disable screen-space ambient occlusion"))
            (intensity
               float
               (help
                  "AO intensity")
               (slider)
               (range 0.0 16.0)
               (read_only
                  {!
                     {$this
                        get
                        {editor_prop_path_sibling enabled}}}))
            (angle_bias
               float
               (help
                  "Threshold of occluders to ignore, increase this value to remove noise.")
               (slider)
               (range 0.0 1.0)
               (read_only
                  {!
                     {$this
                        get
                        {editor_prop_path_sibling enabled}}}))
            (radius
               float
               (help
                  "AO radius")
               (slider)
               (range 0.1 20.0)
               (read_only
                  {!
                     {$this
                        get
                        {editor_prop_path_sibling enabled}}}))
            (sharpness
               float
               (help
                  "How sharp the SSAO and directional shadows are.")
               (slider)
               (range 0.1 2.0)
               (read_only
                  {!
                     {$this
                        get
                        {editor_prop_path_sibling enabled}}})))
         (alias
            "Ambient Occlusion")
         (help
            "Screen-space ambient occlusion settings"))
      (probe_params
         (struct
            (rendered_cube_tex_intensity
               float
               (alias
                  "Rendered Cube Texture Intensity")
               (help
                  "Multiplier for the pixels in the rendered probe cube textures (only applied to GI)")
               (range 0.0 10.0)
               (slider)
               (hide flow propanim))
            (background_color_function
               waveform_color
               (alias
                  "Background Color")
               (help
                  "Color of the background pixels in the rendered probe cube textures")
               (hide flow propanim)
               (no_test))
            (background_intensity
               float
               (alias
                  "Background Intensity")
               (help
                  "Multiplier for the background color")
               (range 0.0 10.0)
               (slider)
               (hide flow propanim))
            (runtime_intensity
               float
               (alias
                  "Runtime Intensity")
               (help
                  "Multiplier for the runtime application of GI")
               (range 0.0 1.0)
               (slider)
               (no_test))
            (update_all_probes
               script
               (alias
                  "Update All Probes")
               (script
                  {$this update_all_probes})
               (custom_history)
               (help
                  "Update all probes")
               (no_test)))
         (alias
            "Light Probes")
         (help
            "Global light probe settings"))
      (sky_box
         object
         (class Entity)
         (alias
            "Sky Box")
         (help
            "Background sky box entity"))
      (environments
         (array
            (struct
               (name
                  symbol
                  (read_only
                     {==
                        {elem $editor_prop_path 1}
                        0}))
               (fwd_lit_probe
                  object
                  (class LightProbe)
                  (help
                     "Light probe to use for forward-lit objects (currently only adds probe specular lighting, not GI)")
                  (list
                     {$this
                        get_allowed_fwd_lit_probes_for_environ
                        {elem $editor_prop_path 1}}))
               (ambient_settings
                  (struct
                     (type
                        int
                        (list LIGHT_AMBIENT_TYPE_ENUM)
                        (help
                           "Ambient lighting model"))
                     (fwd_lit_only
                        bool
                        (help
                           "Only apply ambient to forward-lit objects? (recommended when using probe-based global illumination, which only lights deferred objects)"))
                     (color
                        color
                        (help
                           "Color of the ambient light")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kLightAmbient_Flat}))
                     (top_color
                        color
                        (alias
                           "color (top)")
                        (help
                           "Set the color of the ambient light coming from the top of the scene")
                        (hide
                           {==
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kLightAmbient_Flat}))
                     (side_color
                        color
                        (alias
                           "color (side)")
                        (help
                           "Set the color of the ambient light coming from the sides of the scene")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kLightAmbient_3Color}))
                     (bottom_color
                        color
                        (alias
                           "color (bottom)")
                        (help
                           "Set the color of the ambient light coming from the bottom of the scene")
                        (hide
                           {==
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kLightAmbient_Flat}))
                     (intensity
                        float
                        (help
                           "Set the ambient intensity")
                        (slider)
                        (range 0.0 10.0)))
                  (alias
                     "Ambient Settings"))
               (fog_settings
                  (struct
                     (type
                        int
                        (list FOG_TYPE_ENUM)
                        (alias
                           "Type")
                        (help
                           "Fog model"))
                     (color
                        color
                        (alias
                           "Color")
                        (help
                           "Fog color")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_Simple}))
                     (start_dist
                        float
                        (alias
                           "Start Distance")
                        (help
                           "Distance at which fog begins (anything closer than this will be entirely unfogged)")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_Simple}))
                     (end_dist
                        float
                        (alias
                           "End Distance")
                        (help
                           "Distance at which fog ends (anything further than this will be entirely fogged)")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_Simple}))
                     (low_color
                        color
                        (alias
                           "Color (Low)")
                        (help
                           "Low-level fog color")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (low_start_dist
                        float
                        (alias
                           "Start Distance (Low)")
                        (help
                           "Low-level distance at which fog begins (anything closer than this will be entirely unfogged)")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (low_end_dist
                        float
                        (alias
                           "End Distance (Low)")
                        (help
                           "Low-level distance at which fog ends (anything further than this will be entirely fogged)")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (low_elev
                        float
                        (alias
                           "Elevation (Low)")
                        (help
                           "Elevation (world Z) of the low fog level")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (high_color
                        color
                        (alias
                           "Color (High)")
                        (help
                           "High-level fog color")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (high_start_dist
                        float
                        (alias
                           "Start Distance (High)")
                        (help
                           "High-level distance at which fog begins (anything closer than this will be entirely unfogged)")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (high_end_dist
                        float
                        (alias
                           "End Distance (High)")
                        (help
                           "High-level distance at which fog ends (anything further than this will be entirely fogged)")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel}))
                     (high_elev
                        float
                        (alias
                           "Elevation (High)")
                        (help
                           "Elevation (world Z) of the high fog level")
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFogType_BiLevel})))
                  (alias
                     "Fog Settings")))
            (header
               {$this
                  get
                  {editor_prop_path_child name}})
            (summary
               {sprintf
                  "%d light(s), %d probe(s)"
                  {$this
                     get
                     {editor_prop_path_child num_lights}}
                  {$this
                     get
                     {editor_prop_path_child num_light_probes}}}))
         (help
            "Lighting environments; by default, all lights and entities use the default environment"))
      (using_default_light
         bool
         (read_only TRUE)
         (tab debug)
         (help
            "Determine whether the default light is currently in use - We only use the default light if there are no lights in the scene"))
      (all_lights
         (array
            object
            (class Light))
         (read_only TRUE)
         (tab debug)
         (help
            "List of all the currently harvested lights"))
      (all_light_probes
         (array
            object
            (class LightProbe))
         (read_only TRUE)
         (tab debug)
         (help
            "List of all the currently harvested light probes"))
      (environments_debug
         (array
            (struct
               (name symbol)
               (id
                  int
                  (help
                     "Integer ID used internally to refer to this environment, should correspond to its position in the array."))
               (lights
                  (array
                     object
                     (class Light))
                  (help
                     "List of all the lights contributing light to this environment"))
               (light_probes
                  (array
                     object
                     (class LightProbe))
                  (help
                     "List of all the light probes contributing light to this environment")))
            (header
               {$this
                  get
                  {editor_prop_path_child name}})
            (summary
               {sprintf
                  "%d light(s), %d probe(s)"
                  {$this
                     get
                     {editor_prop_path_child num_lights}}
                  {$this
                     get
                     {editor_prop_path_child num_light_probes}}}))
         (alias
            "Environments")
         (read_only TRUE)
         (tab debug))
      (most_recent_fwd_lighting
         (indent
            (most_recent_approx
               (indent
                  (num_approx_lights
                     int
                     (alias
                        "number of lights"))
                  (approx_left_color
                     color
                     (alias
                        "left color")
                     (help
                        "Left (+X) color for the lighting approximation"))
                  (approx_right_color
                     color
                     (alias
                        "right color")
                     (help
                        "Right (-X) color for the lighting approximation"))
                  (approx_front_color
                     color
                     (alias
                        "front color")
                     (help
                        "Front (+Y) color for the lighting approximation"))
                  (approx_back_color
                     color
                     (alias
                        "back color")
                     (help
                        "Back (-Y) color for the lighting approximation"))
                  (approx_top_color
                     color
                     (alias
                        "top color")
                     (help
                        "Top (+Z) color for the lighting approximation"))
                  (approx_bottom_color
                     color
                     (alias
                        "bottom color")
                     (help
                        "Bottom (-Z) color for the lighting approximation")))
               (alias
                  "Approx Lighting")
               (help
                  "Perform debug inspection of the most-recent lighting approximation")
               (read_only TRUE)))
         (alias
            "Most Recent Forward Lighting")
         (help
            "Perform debug inspection of the most-recent forward lighting")
         (tab debug)
         (read_only TRUE))))
(Light
   (description
      "Base class defining properties for all lights")
   (category Light)
   (group Lighting)
   (superclasses Trans Draw)
   (ext lit)
   (editor
      (enabled
         bool
         (help
            "Enable/disable use of the light."))
      (isolate
         bool
         (no_test copy serialize)
         (help
            "If checked, we only light the scene using this light.  This is just used for debugging (we don't save it).")
         (hide propanim flow))
      (always_draw_falloff
         bool
         (alias
            "always draw range/falloff?")
         (no_test copy serialize)
         (help
            "If checked, always draw this light's range/falloff (regardless of whether or not it is currently selected; especially useful for tuning lighting clip planes)")
         (hide propanim flow))
      (color
         color
         (help
            "Primary color of the light.")
         (hide
            {$this is_probe}))
      (fill_color
         color
         (help
            "Fill color of the light; objects on the far side of the light will be lit with this color (receiving diffuse light only, no specular)")
         (hide
            {$this is_probe}))
      (intensity
         float
         (help
            "Intensity of the light (controls the intensity of both the primary and fill colors; set to negative values for negative light)")
         (range
            {$this get_minimum_intensity}
            {$this get_maximum_intensity})
         (slider)
         (hide
            {$this is_probe}))
      (reflectance_bias
         float
         (help
            "Bias of the reflectance function; < 0 to have light wrap further around the surface, > 0 for the opposite effect.")
         (range -1.0 1.0)
         (slider)
         (read_only
            [use_n_dot_l_function])
         (hide
            {$this is_probe}))
      (reflectance_gain
         float
         (help
            "Gain of the reflectance function; > 1 for a sharper dark-to-light transition, < 1 for a softer transition.")
         (range 0.1 100.0)
         (slider)
         (read_only
            [use_n_dot_l_function])
         (hide
            {$this is_probe}))
      (use_n_dot_l_function
         bool
         (alias
            "use surface response")
         (help
            "Use the surface response waveform property (true) or the regular reflectance properties above (false).")
         (hide
            {$this is_probe}))
      (n_dot_l_function
         waveform_color
         (alias
            "surface response")
         (help
            "This controls the intensity of the light as a surface faces away from the light.\nThe left edge of the gradient represents a surface facing directly away from the light, the right edge facing the light, and the middle perpendicular to the light.")
         (read_only
            {!
               [use_n_dot_l_function]})
         (hide
            {$this is_probe})
         (allowed_types kWaveformCurve))
      (environments
         bitfield
         (list
            {$this get_environments_bit_list})
         (help
            "Which environments does this light contribute light to?")
         (hide
            {$this hide_environments_bit_list}))
      (clip_plane
         object
         (class Trans)
         (allow_this)
         (hide
            {$this hide_clip_plane})
         (help
            "Optional clip plane, clips the light to the transform's Z axis!"))
      (volumetric
         bool
         (group 'Volumetric Lighting')
         (hide
            {$this hide_volumetric})
         (help
            "Draw volumetric light volume?"))
      (volumetric_intensity
         float
         (group 'Volumetric Lighting')
         (range 0.0 10.0)
         (slider)
         (hide
            {$this hide_volumetric})
         (read_only
            {!
               [volumetric]})
         (help
            "Controls the overall intensity of volumetric light"))
      (volumetric_power
         float
         (group 'Volumetric Lighting')
         (range 0.1 10.0)
         (slider)
         (hide
            {$this hide_volumetric})
         (read_only
            {!
               [volumetric]})
         (help
            "Controls the falloff of volumetric light"))
      (apply_specular
         bool
         (alias
            "apply specular")
         (hide
            {$this is_probe})
         (help
            "Does the light apply specular highlights?"))
      (specular_intensity
         float
         (alias
            "specular intensity")
         (range 0 1)
         (slider)
         (read_only
            {!
               [apply_specular]})
         (hide
            {$this is_probe})
         (help
            "Intensity of the specular highlights"))
      (in_use
         bool
         (tab debug)
         (read_only TRUE)
         (help
            "Is this light currently in use?  Takes into account enabled state, light colors, etc."))
      (environments_debug
         bitfield
         (list
            {$this get_environments_bit_list})
         (alias
            "local environments (debug)")
         (tab debug)
         (read_only TRUE)
         (help
            "Which environments does this light contribute light to?"))
      (environments_debug_raw
         int
         (alias
            "local environments (raw)")
         (tab debug)
         (read_only TRUE)
         (help
            "Which environments does this light contribute light to?"))
      (world_environments_debug
         bitfield
         (list
            {$this get_environments_bit_list})
         (alias
            "world environments")
         (tab debug)
         (read_only TRUE)
         (help
            "Which environments does this light contribute light to?"))
      (world_environments_debug_raw
         int
         (alias
            "world environments (raw)")
         (tab debug)
         (read_only TRUE)
         (help
            "Which environments does this light contribute light to?"))
      (cached_clip_plane
         VECTOR4
         (tab debug)
         (read_only TRUE)
         (hide
            {$this hide_clip_plane}))))
(LightDirectional
   (browser_name
      "Light (Directional)")
   (description
      "Directional light")
   (category Light)
   (group Lighting)
   (superclasses Light)
   (converts_to LightLine LightPoint LightSpot)
   (allowed_dirs Scene ObjectDir)
   (ext lit)
   (editor
      (projected_tex
         object
         (class Tex)
         (alias
            "projected texture")
         (help
            "Optional projected texture (multiplies with the final light color; alpha channel unused)"))
      (projected_tex_tile_size
         VECTOR2
         (alias
            "projected texture tile size")
         (help
            "Tile size of the projected texture (in world units)")
         (read_only
            {!
               [projected_tex]}))
      (projected_tex_offset
         VECTOR2
         (alias
            "projected texture offset")
         (help
            "Offset of the projected texture (in world units)")
         (read_only
            {!
               [projected_tex]}))
      (use_atmosphere_tint
         bool
         (help
            "If atmospheric scattering is enabled, should we tint this light based on the atmosphere? (yellowing near sunrise/sunset, etc.)"))
      (casts_shadows
         bool
         (group Shadows)
         (help
            "Does this light cast shadows? (there can only be one shadow-caster at a time)")
         (no_test))
      (only_flagged_cast_shadows
         bool
         (group Shadows)
         (alias
            "only flagged objects cast shadows?")
         (help
            "If checked, only objects in the scene flagged 'always cast shadows' will cast shadows; otherwise, all objects will cast shadows unless they are flagged 'never cast shadows'")
         (read_only
            {!
               [casts_shadows]}))
      (shadow_tint
         color
         (group Shadows)
         (help
            "Multiplicative tint applied to objects which are in the shadow of this light"))
      (num_shadow_splits
         int
         (list
            (1 2 3 4))
         (group Shadows)
         (help
            "Number of shadow splits to render; more splits gives greater fidelity, but is more expensive")
         (read_only
            {!
               [casts_shadows]}))
      (shadow_range
         float
         (group Shadows)
         (help
            "Maximum distance from the near plane for which we generate shadow maps")
         (range 0.0 10000.0)
         (read_only
            {!
               [casts_shadows]}))
      (shadow_split_frac_1_to_2
         float
         (group Shadows)
         (help
            "Split fraction for the transition between the first and second shadow splits")
         (range 0.0 1.0)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {<
                  [num_shadow_splits]
                  2}}))
      (shadow_split_frac_2_to_3
         float
         (group Shadows)
         (help
            "Split fraction for the transition between the second and third shadow splits")
         (range 0.0 1.0)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {<
                  [num_shadow_splits]
                  3}}))
      (shadow_split_frac_3_to_4
         float
         (group Shadows)
         (help
            "Split fraction for the transition between the third and fourth shadow splits")
         (range 0.0 1.0)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {<
                  [num_shadow_splits]
                  4}}))
      (shadow_light_distance
         float
         (group Shadows)
         (help
            "Distance used to compute the length of the camera frustum for each shadow split")
         (range 0.0 10000.0)
         (read_only
            {!
               [casts_shadows]}))
      (use_shadow_distance_fade
         bool
         (group Shadows)
         (help
            "Fade shadows in/out along the light distance?  (this makes the shader slightly more expensive)")
         (read_only
            {!
               [casts_shadows]}))
      (shadow_distance_fade_frac
         float
         (group Shadows)
         (help
            "Fraction of each shadow split's light distance along which to fade shadows in/out")
         (range 0.0 0.5)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {!
                  [use_shadow_distance_fade]}}))
      (shadow_bias_1
         float
         (group Shadows)
         (help
            "Shadow bias for the first split (increase if shadows have acne, decrease if objects are floating above the ground)")
         (range 0.0 10.0)
         (slider)
         (read_only
            {!
               [casts_shadows]}))
      (shadow_bias_2
         float
         (group Shadows)
         (help
            "Shadow bias for the second split (increase if shadows have acne, decrease if objects are floating above the ground)")
         (range 0.0 10.0)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {<
                  [num_shadow_splits]
                  2}}))
      (shadow_bias_3
         float
         (group Shadows)
         (help
            "Shadow bias for the third split (increase if shadows have acne, decrease if objects are floating above the ground)")
         (range 0.0 10.0)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {<
                  [num_shadow_splits]
                  3}}))
      (shadow_bias_4
         float
         (group Shadows)
         (help
            "Shadow bias for the fourth split (increase if shadows have acne, decrease if objects are floating above the ground)")
         (range 0.0 10.0)
         (slider)
         (read_only
            {'||'
               {!
                  [casts_shadows]}
               {<
                  [num_shadow_splits]
                  4}}))))
(LightLine
   (browser_name
      "Light (Line)")
   (description
      "Line light")
   (category Light)
   (group Lighting)
   (superclasses Light)
   (converts_to LightDirectional LightPoint LightSpot)
   (allowed_dirs Scene ObjectDir)
   (ext lit)
   (editor
      (length
         float
         (help
            "Falloff range")
         (range 0.0 1000.0))
      (range
         float
         (help
            "Falloff range")
         (range 1.0e-2 1000.0))
      (falloff_start
         float
         (help
            "Falloff start")
         (range 0.0 1000.0))))
(LightPoint
   (browser_name
      "Light (Point)")
   (description
      "Point light")
   (category Light)
   (group Lighting)
   (superclasses Light)
   (converts_to LightDirectional LightLine LightSpot)
   (allowed_dirs Scene ObjectDir)
   (ext lit)
   (editor
      (range
         float
         (help
            "Falloff range")
         (range 1.0e-2 1000.0))
      (falloff_start
         float
         (help
            "Falloff start")
         (range 0.0 1000.0))
      (projected_cube_tex
         object
         (class CubeTex)
         (alias
            "Projected Cube Texture")
         (help
            "Optional projected cube texture (multiplies with the final light color; alpha channel unused)"))
      (casts_shadows
         bool
         (group Shadows)
         (help
            "Does this light cast shadows? (there can only be one shadow-caster at a time)")
         (no_test))
      (only_flagged_cast_shadows
         bool
         (group Shadows)
         (alias
            "only flagged objects cast shadows?")
         (help
            "If checked, only objects in the scene flagged 'always cast shadows' will cast shadows; otherwise, all objects will cast shadows unless they are flagged 'never cast shadows'")
         (read_only
            {!
               [casts_shadows]}))
      (shadow_tint
         color
         (group Shadows)
         (help
            "Multiplicative tint applied to objects which are in the shadow of this light"))
      (shadow_bias
         float
         (group Shadows)
         (help
            "Increase if shadows have acne, decrease if objects are floating above the ground.")
         (range 0.0 10.0)
         (read_only
            {!
               [casts_shadows]}))))
#define kLightSpotVolumetricSubsampleQuality_Low
(0)
#define kLightSpotVolumetricSubsampleQuality_Medium
(1)
#define kLightSpotVolumetricSubsampleQuality_High
(2)
#define kLightSpotVolumetricSubsampleQuality_VeryHigh
(3)
#define LIGHT_SPOT_VOLUMETRIC_SUBSAMPLE_QUALITY
((("kLightSpotVolumetricSubsampleQuality_Low"
         (alias
            "Low (8 subsamples)")
         (help
            "Lowest quality, only take 8 subsamples"))
      ("kLightSpotVolumetricSubsampleQuality_Medium"
         (alias
            "Medium (16 subsamples)")
         (help
            "Medium quality, take 16 subsamples"))
      ("kLightSpotVolumetricSubsampleQuality_High"
         (alias
            "High (24 subsamples)")
         (help
            "High quality, take 24 subsamples"))
      ("kLightSpotVolumetricSubsampleQuality_VeryHigh"
         (alias
            "Very High (32 subsamples)")
         (help
            "Highest quality, take 32 subsamples.  The sheer beauty of this setting will make you weep (but so will the hit to your framerate)"))))
(LightSpot
   (browser_name
      "Light (Spot)")
   (description
      "Spot light; light from a spot light attenuates based on both\n                 distance and angle")
   (category Light)
   (group Lighting)
   (superclasses Light)
   (converts_to LightDirectional LightLine LightPoint)
   (allowed_dirs Scene ObjectDir)
   (ext lit)
   (editor
      (length
         float
         (alias
            "falloff length")
         (help
            "Distance at which the light falls off to zero")
         (range 1.0e-2 10000.0)
         (record_all))
      (falloff_start_length
         float
         (help
            "Distance at which the light begins to fall off")
         (range 0.0 10000.0)
         (record_all))
      (near_radius
         float
         (help
            "Near radius at which the light falls off to zero (by angle)")
         (range 0.0 10000.0)
         (record_all)
         (no_test readback))
      (far_radius
         float
         (help
            "Far radius at which the light falls off to zero (by angle)")
         (range 0.0 10000.0)
         (record_all))
      (far_falloff_start_radius
         float
         (help
            "Far radius at which the light begins to fall off (by angle)")
         (range 0.0 10000.0)
         (record_all))
      (projected_tex
         object
         (class Tex)
         (alias
            "projected texture")
         (help
            "Optional projected texture (multiplies with the final light color; alpha channel unused)"))
      (projected_tex_parallel
         bool
         (alias
            "projected texture parallel?")
         (help
            "Should the projected texture use a parallel projection? (meaning it won't scale with distance)")
         (read_only
            {!
               [projected_tex]}))
      (projected_tex_tile_scale
         VECTOR2
         (alias
            "projected texture tile scale")
         (help
            "Scale of the projected texture when using a perspective projection")
         (read_only
            {'||'
               {!
                  [projected_tex]}
               [projected_tex_parallel]}))
      (projected_tex_tile_size
         VECTOR2
         (alias
            "projected texture tile size")
         (help
            "Tile size of the projected texture when using a parallel projection (in world units)")
         (read_only
            {'||'
               {!
                  [projected_tex]}
               {!
                  [projected_tex_parallel]}}))
      (projected_tex_offset
         VECTOR2
         (alias
            "projected texture offset")
         (help
            "Offset of the projected texture (for parallel projection, in world units; for perspective projection, raw UV offset)")
         (read_only
            {!
               [projected_tex]}))
      (volumetric_tex
         object
         (class Tex)
         (group 'Volumetric Lighting')
         (read_only
            {!
               [volumetric]}))
      (volumetric_tex_xfm
         TEX_XFM
         (group 'Volumetric Lighting')
         (read_only
            {'||'
               {!
                  [volumetric]}
               {!
                  [volumetric_tex]}}))
      (quality_settings
         (indent
            (use_volumetric_vertex_approx
               bool
               (help
                  "Should we approximate volumetric intersection calculations by performing them per-vertex? (it's way faster, but has some artifacts)"))
            (volumetric_num_samples
               int
               (list
                  (1 2 3))
               (help
                  "How many primary samples should we take per-pixel (1 will often suffice if little or no geometry actually intersects the light volume)"))
            (use_volumetric_shadow
               bool
               (read_only
                  {!
                     [casts_shadows]})
               (help
                  "Should shadows reduce the volumetric light contribution?"))
            (use_volumetric_projected_tex
               bool
               (read_only
                  {!
                     [projected_tex]})
               (help
                  "Should the projected texture reduce the volumetric light contribution?"))
            (volumetric_subsample_quality
               int
               (list LIGHT_SPOT_VOLUMETRIC_SUBSAMPLE_QUALITY)
               (read_only
                  {'||'
                     {&&
                        {!
                           [use_volumetric_shadow]}
                        {!
                           [use_volumetric_projected_tex]}}
                     {&&
                        {!
                           [casts_shadows]}
                        {!
                           [projected_tex]}}})
               (help
                  "How many subsamples should we take when applying volumetric shadow and/or volumetric projected texture")))
         (group 'Volumetric Lighting')
         (read_only
            {!
               [volumetric]}))
      (casts_shadows
         bool
         (group Shadows)
         (help
            "Does this light cast shadows?"))
      (only_flagged_cast_shadows
         bool
         (group Shadows)
         (alias
            "only flagged objects cast shadows?")
         (help
            "If checked, only objects in the scene flagged 'always cast shadows' will cast shadows; otherwise, all objects will cast shadows unless they are flagged 'never cast shadows'")
         (read_only
            {!
               [casts_shadows]}))
      (shadow_tint
         color
         (group Shadows)
         (help
            "Multiplicative tint applied to objects which are in the shadow of this light")
         (read_only
            {!
               [casts_shadows]}))
      (shadow_bias
         float
         (group Shadows)
         (help
            "Increase if shadows have acne, decrease if objects are floating above the ground.")
         (range 0.0 10.0)
         (slider)
         (read_only
            {!
               [casts_shadows]}))))
(LightProbe
   (browser_name
      "LightProbe")
   (description
      "Light probe, used to apply global illumination and reflection")
   (category Light)
   (group Lighting)
   (superclasses Light)
   (allowed_dirs Scene)
   (ext probe)
   (editor
      (use_gi
         bool
         (alias
            "Use GI")
         (help
            "Capture and use GI")
         (hide flow propanim))
      (use_reflection
         bool
         (alias
            "Use Reflection")
         (help
            "Capture and use reflection")
         (hide flow propanim))
      (use_rendered_cube_tex
         bool
         (alias
            "Use Rendered Cube Tex")
         (help
            "Use cube texture rendered at probe's location")
         (hide flow propanim))
      (rendered_cube_tex_intensity
         float
         (alias
            "Rendered Cube Texture Intensity")
         (help
            "Global multiplier for the pixels in the rendered probe cube textures (only applied to GI)")
         (range 0.0 10.0)
         (slider)
         (hide flow propanim)
         (no_test))
      (range
         float
         (alias
            "Probe Range")
         (help
            "Falloff range")
         (range 1.0e-2 10000.0))
      (falloff_start
         float
         (alias
            "Probe Falloff Start")
         (help
            "Falloff start")
         (range 0.0 10000.0))
      (probe_max_weight
         float
         (alias
            "Probe Max Weight")
         (help
            "Max probe contribution factor")
         (range 0.0 1.0)
         (slider)
         (hide flow propanim))
      (probe_intensity
         float
         (alias
            "Probe Runtime Intensity")
         (help
            "Runtime multiplier for this probe's intensity")
         (range 0.0 10.0)
         (slider))
      (art_cube_tex
         object
         (class CubeTex)
         (alias
            "Art Cube Texture")
         (help
            "Optional art cube texture (adds additional bounced lighting)")
         (hide flow propanim))
      (art_cube_tex_intensity
         float
         (alias
            "Art Cube Texture Intensity")
         (help
            "Multiplier for the pixels in the art cube texture")
         (range 0.0 10.0)
         (slider)
         (hide flow propanim))
      (background_color_function
         waveform_color
         (alias
            "Background Color (All Probes)")
         (help
            "Global color of the background pixels in the rendered probe cube textures")
         (no_test)
         (hide flow propanim)
         (allowed_types kWaveformValue kWaveformCurve))
      (background_intensity
         float
         (alias
            "Background Intensity (All Probes)")
         (help
            "Global multiplier for the background color")
         (range 0.0 10.0)
         (slider)
         (no_test)
         (hide flow propanim))
      (update_probe
         script
         (alias
            "Update Selected Probes")
         (script
            {$this update_probe})
         (custom_history)
         (help
            "Update selected probes")
         (no_test))
      (update_all_probes
         script
         (alias
            "Update All Probes")
         (script
            {$this update_all_probes})
         (custom_history)
         (help
            "Update all probes")
         (no_test))
      (radiance_red
         SPHERICALHARMONICS3
         (hide TRUE))
      (radiance_green
         SPHERICALHARMONICS3
         (hide TRUE))
      (radiance_blue
         SPHERICALHARMONICS3
         (hide TRUE))
      (reflection_cube_tex
         object
         (class CubeTex)
         (hide TRUE))))
(ShadowMgr
   (browser_name
      "Shadow manager")
   (description
      "Shadow manager")
   (category Shadows)
   (group Shadows)
   (superclasses Instance)
   (allowed_dirs Scene ObjectDir)
   (ext shadowmgr)
   (user_creatable FALSE)
   (editor
      (meshes
         (array
            object
            (class Mesh))
         (read_only TRUE)
         (tab debug)
         (no_test))
      (shadows
         (array
            object
            (class Tex))
         (read_only TRUE)
         (tab debug)
         (no_test))
      (depth_meshes
         (array
            object
            (class Mesh))
         (read_only TRUE)
         (tab debug)
         (no_test))
      (depth_shadows
         (array
            object
            (class Tex))
         (read_only TRUE)
         (tab debug)
         (no_test))
      (client_mesh
         object
         (class Mesh)
         (read_only TRUE)
         (tab debug)
         (hide TRUE)
         (no_test))
      (client_texture
         object
         (class Tex)
         (read_only TRUE)
         (tab debug)
         (hide TRUE)
         (no_test))
      (client_shadow_type
         int
         (read_only TRUE)
         (tab debug)
         (hide TRUE)
         (no_test))
      (no_dynamic_shadow_drawables
         (array
            object
            (class Draw))
         (read_only TRUE)
         (tab debug)
         (hide TRUE)
         (no_test))
      (scene_shadow_depth_drawables
         (array
            object
            (class Draw))
         (read_only TRUE)
         (tab debug)
         (hide TRUE)
         (no_test))))
(Atmosphere
   (description
      "Base class defining an atmosphere")
   (superclasses))
(AtmoFog
   (description
      "Atmosphere (Fog)")
   (superclasses MatBase Atmosphere)
   (allowed_dirs Scene)
   (category Light)
   (group Atmosphere)
   (ext fog)
   (editor
      (render_translucent_pass
         bool
         (help
            "Should translucent objects be fogged as well (note this incurs another fog pass, so is a performance hit)"))))
#define kAtmoScatterPreset_Custom
(-1)
#define kAtmoScatterPreset_EarthDefault
(0)
#define kAtmoScatterPreset_EarthClearSky
(1)
#define kAtmoScatterPreset_EarthPartlyCloudy
(2)
#define ATMOSCATTER_PRESET_ENUM
((("kAtmoScatterPreset_Custom"
         (alias
            "Custom"))
      ("kAtmoScatterPreset_EarthDefault"
         (alias
            "Earth (Default)"))
      ("kAtmoScatterPreset_EarthClearSky"
         (alias
            "Earth (Clear Sky)"))
      ("kAtmoScatterPreset_EarthPartlyCloudy"
         (alias
            "Earth (Partly Cloudy)"))))
#define kAtmoScatterDebug_None
(0)
#define kAtmoScatterDebug_Transmittance
(1)
#define kAtmoScatterDebug_TransmittanceRendered
(2)
#define kAtmoScatterDebug_Irradiance
(3)
#define kAtmoScatterDebug_IrradianceRendered
(4)
#define kAtmoScatterDebug_DeltaIrradiance
(5)
#define kAtmoScatterDebug_Inscatter
(6)
#define kAtmoScatterDebug_InscatterAlpha
(7)
#define kAtmoScatterDebug_InscatterRendered
(8)
#define kAtmoScatterDebug_InscatterAlphaRendered
(9)
#define kAtmoScatterDebug_DeltaInscatter
(10)
#define kAtmoScatterDebug_DeltaInscatterRayleigh
(11)
#define kAtmoScatterDebug_DeltaInscatterMie
(12)
#define kAtmoScatterDebug_DeltaInscatterSpherical
(13)
#define kAtmoScatterDebug_TransmittanceTest
(14)
#define kAtmoScatterDebug_IrradianceTest
(15)
#define kAtmoScatterDebug_InscatterTest
(16)
#define kAtmoScatterDebug_InscatterAlphaTest
(17)
#define ATMOSCATTER_DEBUG_MODE
((("kAtmoScatterDebug_None"
         (alias
            "None"))
      ("kAtmoScatterDebug_Transmittance"
         (alias
            "Transmittance"))
      ("kAtmoScatterDebug_TransmittanceRendered"
         (alias
            "Transmittance (Rendered)"))
      ("kAtmoScatterDebug_Irradiance"
         (alias
            "Irradiance"))
      ("kAtmoScatterDebug_IrradianceRendered"
         (alias
            "Irradiance (Rendered)"))
      ("kAtmoScatterDebug_DeltaIrradiance"
         (alias
            "Delta Irradiance"))
      ("kAtmoScatterDebug_Inscatter"
         (alias
            "Inscatter"))
      ("kAtmoScatterDebug_InscatterAlpha"
         (alias
            "Inscatter (Single Mie)"))
      ("kAtmoScatterDebug_InscatterRendered"
         (alias
            "Inscatter (Rendered)"))
      ("kAtmoScatterDebug_InscatterAlphaRendered"
         (alias
            "Inscatter (Single Mie, Rendered)"))
      ("kAtmoScatterDebug_DeltaInscatter"
         (alias
            "Delta Inscatter"))
      ("kAtmoScatterDebug_DeltaInscatterRayleigh"
         (alias
            "Delta Inscatter (Rayleigh)"))
      ("kAtmoScatterDebug_DeltaInscatterMie"
         (alias
            "Delta Inscatter (Mie)"))
      ("kAtmoScatterDebug_DeltaInscatterSpherical"
         (alias
            "Delta Inscatter (Spherical)"))
      ("kAtmoScatterDebug_TransmittanceTest"
         (alias
            "Transmittance Sanity Check"))
      ("kAtmoScatterDebug_IrradianceTest"
         (alias
            "Irradiance Sanity Check"))
      ("kAtmoScatterDebug_InscatterTest"
         (alias
            "Inscatter Sanity Check"))
      ("kAtmoScatterDebug_InscatterAlphaTest"
         (alias
            "Inscatter Sanity Check (Single Mie)"))))
(AtmoScatter
   (description
      "Atmospheric scattering")
   (superclasses Atmosphere)
   (allowed_dirs Scene)
   (category Light)
   (group Atmosphere)
   (ext atmos)
   (editor
      (preset
         int
         (list ATMOSCATTER_PRESET_ENUM))
      (planet_radius
         float
         (group Precomputation)
         (range 1.0 100000.0)
         (alias
            "planet radius (Km)")
         (help
            "Radius of the planet (in Km) (Earth's radius is roughly 6360 Km"))
      (atmosphere_elev
         float
         (group Precomputation)
         (range 0.0 100.0)
         (slider)
         (alias
            "atmosphere elev (Km)")
         (help
            "Elevation of the atmosphere boundary above the planet surface (in Km)"))
      (air_scatter_color
         color
         (group Precomputation)
         (hide flow propanim)
         (help
            "Color of light scattered by air molecules"))
      (air_scatter_strength
         float
         (group Precomputation)
         (range 1.0e-2 20.0)
         (slider)
         (hide flow propanim)
         (help
            "Multiplier on air_scatter_color"))
      (air_height_scale
         float
         (group Precomputation)
         (range 1.0e-2 1.0)
         (slider)
         (hide flow propanim)
         (help
            "Height scale of the density of air molecules in the atmosphere"))
      (humidity_scatter_color
         color
         (group Precomputation)
         (hide flow propanim)
         (help
            "Color of light scattered by water molecules"))
      (humidity_scatter_strength
         float
         (group Precomputation)
         (range 1.0e-2 20.0)
         (slider)
         (hide flow propanim)
         (help
            "Multiplier on humidity_scatter_color"))
      (humidity_height_scale
         float
         (group Precomputation)
         (range 1.0e-2 1.0)
         (slider)
         (hide flow propanim)
         (help
            "Height scale of the density of water molecules in the atmosphere"))
      (humidity_scatter_angle
         float
         (group Precomputation)
         (range 1.0e-2 2.0)
         (slider)
         (hide flow propanim)
         (help
            "Controls the angular scattering of light by water molecules"))
      (sun_dir_override
         object
         (class Trans)
         (group Sun)
         (help
            "If set, this trans determines the sun direction used to render atmospheric scattering (otherwise the shadow-casting directional light on the lightmgr is used)"))
      (sun_size
         float
         (group Sun)
         (range 1.0e-2 20.0)
         (slider)
         (help
            "Apparent size of the sun (in degrees)"))
      (sun_intensity
         float
         (group Sun)
         (range 0.0 1000.0)
         (help
            "Intensity of direct sunlight (ie. looking straight at the sun)"))
      (sun_reflection_tint
         color
         (group Sun)
         (help
            "Tint applied to the reflected sun"))
      (sun_reflection_intensity
         float
         (group Sun)
         (range 0.0 1.0)
         (slider)
         (help
            "Intensity of the reflected sun (multiplier on [sun_reflection_tint]"))
      (sun_reflection_spec_power_range
         VECTOR2
         (group Sun)
         (help
            "Specular power range used to ramp in the sun reflection"))
      (inscatter_intensity
         float
         (range 0.0 1000.0)
         (help
            "Intensity of inscattered sunlight"))
      (inscatter_power
         float
         (range 1.0e-2 3.0)
         (slider)
         (help
            "Power curve applied to the intensity of inscattered sunlight; set to < 1 to effectively diminish blooming of inscattered light while preserving its intensity in non-blooming ranges"))
      (irradiance_intensity
         float
         (range 0.0 1000.0)
         (help
            "Intensity of precomputed indirect sky light (ie. irradiance)"))
      (average_ground_reflectance_color
         color
         (group Precomputation)
         (hide flow propanim)
         (help
            "Average reflectance of the ground, used in approximating precomputation of scattered light"))
      (average_ground_reflectance_strength
         float
         (group Precomputation)
         (range 1.0e-2 2.0)
         (slider)
         (hide flow propanim)
         (help
            "Multiplier on average_ground_reflectance_color"))
      (ground_haze_near_mult
         float
         (group Ground)
         (range 1.0e-2 50.0)
         (slider)
         (help
            "Near multiplier on how quickly opaque geometry hazes into the sky (1 neutral, > 1 for more haze)"))
      (ground_haze_far_mult
         float
         (group Ground)
         (range 1.0e-2 50.0)
         (slider)
         (help
            "Far multiplier on how quickly opaque geometry hazes into the sky (1 neutral, > 1 for more haze)"))
      (ground_haze_near_dist
         float
         (group Ground)
         (help
            "Distance (in Km) before which we use ground_haze_near_mult"))
      (ground_haze_far_dist
         float
         (group Ground)
         (help
            "Distance (in Km) after which we use ground_haze_far_mult"))
      (cloud_fwd_scatter_intensity
         float
         (group Clouds)
         (range 0.0 1000.0)
         (help
            "Intensity of forward-scattered light passing through clouds"))
      (cloud_fwd_scatter_angle
         float
         (group Clouds)
         (range 0.0 1.0)
         (slider)
         (help
            "Controls the angulare scattering of forward-scattered light passing through clouds"))
      (cloud_opacity_thresh
         float
         (group Clouds)
         (range 0.0 1.0)
         (slider)
         (help
            "Cloud thickness value above which clouds are completely opaque (ie. admit no forward-scattered light)"))
      (cloud_opacity_power
         float
         (group Clouds)
         (range 0.0 10.0)
         (slider)
         (help
            "Steepness of the transition from transparent clouds to fully opaque clouds (ie. from admitting to not admitting forward-scattered light"))
      (cloud_haze_mult
         float
         (group Clouds)
         (range 1.0e-2 20.0)
         (slider)
         (help
            "Multiplier on how quickly clouds haze into the sky (1 neutral, > 1 for more haze)"))
      (cloud_transmittance_saturation
         float
         (group Clouds)
         (range 0.0 1.0)
         (slider)
         (help
            "Controls how much color is introduced to the clouds from transmittance"))
      (num_scattering_orders
         int
         (group Precomputation)
         (hide flow propanim)
         (list
            (1 2 3 4 5 6)))
      (gen_textures
         script
         (group Precomputation)
         (script
            {$this gen_textures})
         (read_only
            {!
               [precompute_dirty]})
         (no_test))
      (precompute_dirty
         bool
         (tab debug)
         (read_only TRUE))
      (debug_mode
         int
         (list ATMOSCATTER_DEBUG_MODE)
         (tab debug)
         (no_test)
         (hide flow propanim))))
(Line
   (description
      "Line objects represent 3D lines with thickness, perspective, and optional end caps.")
   (category Graphics)
   (superclasses Draw Trans)
   (ext line)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material the line uses."))
      (width
         float
         (range 0 1000)
         (help
            "Width of the line"))
      (fold_angle
         float
         (range 0 180)
         (help
            "Degrees at which the line starts to fold"))
      (has_caps
         bool
         (help
            "The line has end caps"))
      (line_pairs
         bool
         (help
            "Consider the [points] as an array of pairs, rather than a continuous line"))
      (num_points
         int
         (range 0 1000)
         (help
            "Number of points in the line")
         (no_test readback))
      (points
         (array
            (struct
               (point
                  VECTOR3
                  (help
                     "Position of point"))
               (color
                  color
                  (help
                     "Color of point"))
               (alpha
                  float
                  (help
                     "Alpha of point")))))))
(MatBase
   (description
      "Base material class")
   (category Material)
   (group Material)
   (ext mat)
   (superclasses)
   (user_creatable FALSE)
   (allowed_dirs)
   (editor
      (toggle_forced_props
         script
         (script
            {$this
               set
               show_forced_props
               {!
                  {$this get show_forced_props}}})
         (help
            "Toggle display of properties which are set to Default/Force on my MatSpec"))
      (mat_spec
         object
         (class Object)
         (list
            {$this list_allowed_matspec_providers})
         (sort FALSE)
         (alias
            "material spec")
         (help
            "Material template which determines the general look of the material, and determines which properties can be set on the material")
         (hide flow propanim)
         (no_test))
      (resource_descriptor
         string
         (read_only TRUE)
         (tab debug))
      (resource_ref_count
         int
         (help
            "Number of references to my (possibly shared) resource")
         (read_only TRUE)
         (tab debug))))
(Mat
   (description
      "Material objects determine texturing, blending, and the\n        effect of lighting on drawn polys.")
   (category Material)
   (group Material)
   (ext mat)
   (superclasses MatBase)
   (allowed_dirs Entity Scene UIScreen UILabelDir RndDir)
   (editor
      (select_best_fit_matspec
         script
         (script
            {$this select_best_fit_matspec})
         (alias
            "Best-fit MatSpec")
         (help
            "Select a MatSpec which best fits the current settings for this Material")
         (no_test)
         (read_only
            {!
               [mat_spec]}))
      (next_pass
         object
         (class Mat)
         (list
            {$this get_allowed_next_pass_list})
         (help
            "Next material pass to use when drawing"))
      (sharing_type
         int
         (list MAT_SHARING_TYPES)
         (help
            "Specify whether or not this Material shares data with other Material instances")
         (hide flow propanim))
      (unique
         bool
         (help
            "Is this Material instance unique or not (driven by Sharing Type)")
         (read_only TRUE)
         (tab debug))
      (editor_force_unique
         bool
         (help
            "Is editing via edit-in-place mode forcing this material instance to be unique?")
         (read_only TRUE)
         (tab debug))
      (display_list_bucket
         int
         (list DISPLAY_LIST_BUCKET_ENUM)
         (help
            "Which bucket the display list will sort drawables using this material into")
         (read_only TRUE)
         (tab debug))))
#define kMeshFacing_PosX
(0)
#define kMeshFacing_NegX
(1)
#define kMeshFacing_PosY
(2)
#define kMeshFacing_NegY
(3)
#define kMeshFacing_PosZ
(4)
#define kMeshFacing_NegZ
(5)
#define MESH_FACING_ENUM
((("kMeshFacing_PosX"
         (alias
            "+X")
         (help
            "Create quad in the YZ plane, facing the +X axis"))
      ("kMeshFacing_NegX"
         (alias
            "-X")
         (help
            "Create quad in the YZ plane, facing the -X axis"))
      ("kMeshFacing_PosY"
         (alias
            "+Y")
         (help
            "Create quad in the XZ plane, facing the +Y axis"))
      ("kMeshFacing_NegY"
         (alias
            "-Y (use for billboarding)")
         (help
            "Create quad in the XZ plane, facing the -Y axis (appropriate for billboarding)"))
      ("kMeshFacing_PosZ"
         (alias
            "+Z")
         (help
            "Create quad in the XY plane, facing the +Z axis"))
      ("kMeshFacing_NegZ"
         (alias
            "-Z")
         (help
            "Create quad in the XY plane, facing the -Z axis"))))
(Mesh
   (description
      "A Mesh object is composed of triangle faces.")
   (category Graphics)
   (superclasses Draw Trans)
   (ext mesh)
   (converts_to Trans)
   (editor
      (mat
         object
         (class Mat)
         (list
            {list_allowed_mats $this})
         (help
            "Material used for rendering the Mesh"))
      (unique
         bool
         (help
            "Mark this mesh as a unique instance; if unchecked, geometry will be shared with other meshes."))
      (mutable
         bitfield
         (list MESH_MUTABLE_FLAGS))
      (keep_mesh_data
         bool
         (help
            "Whether or not to keep mesh vertices and faces.  Mutable meshes will always keep this data.")
         (read_only
            {!=
               [mutable]
               0}))
      (keep_face_octree
         bool
         (help
            "Whether or not to keep the face octree (for optimized picking at runtime; requires that [keep_mesh_data] be checked; does not work with skinned or mutable meshes)")
         (read_only
            {!
               [keep_mesh_data]}))
      (num_verts
         int
         (range 3 10000)
         (alias
            "verts count")
         (help
            "Number of verts in the mesh")
         (read_only TRUE)
         (no_test))
      (num_faces
         int
         (range 1 10000)
         (alias
            "face count")
         (help
            "Number of faces in the mesh")
         (read_only TRUE)
         (no_test))
      (geom_error_draw_filters
         bitfield
         (list GEOM_ERROR_FLAGS)
         (help
            "filter to show/hide CDB errors and warnings on mesh geometry")
         (tab debug))
      (skinned
         bool
         (read_only TRUE))
      (bones_per_vertex
         int
         (list
            (1 2 3 4))
         (read_only
            {!
               [skinned]})
         (help
            "Maximum number of bones influencing a single skinned vertex (lower values are faster!)"))
      (bones
         (array
            (struct
               (bone
                  object
                  (class Trans)
                  (help
                     "Trans of the bone"))))
         (read_only TRUE)
         (tab debug))
      (mesh_data_descriptor
         string
         (help
            "Descriptor string used by my mesh data resource.")
         (read_only TRUE)
         (hide propanim flow)
         (tab debug))
      (mesh_data_path_name
         string
         (help
            "Name and filepath used by my mesh data resource for notifies and whatnot (should be the first mesh instance).")
         (read_only TRUE)
         (hide propanim flow)
         (tab debug))
      (exported_from
         string
         (help
            "Source art file the mesh was exported from, if any")
         (read_only TRUE)
         (hide propanm flow)
         (tab debug))
      (instances
         (array
            object
            (class Mesh))
         (help
            "List of all instances sharing data with this mesh.")
         (read_only TRUE)
         (hide propanim flow)
         (tab debug)
         (no_test))
      (bake_xfm
         script
         (alias
            "Bake Transform")
         (group
            "Mesh Utilities")
         (script
            {foreach
               $i
               {$this get_trans_children}
               {forge record $i}}
            {$this bake_xfm})
         (help
            "Bakes the current transform into the vertices and resets the transform"))
      (bake_rotate_scale
         script
         (alias
            "Bake Rotation/Scale")
         (group
            "Mesh Utilities")
         (script
            {foreach
               $i
               {$this get_trans_children}
               {forge record $i}}
            {$this bake_rotate_scale})
         (help
            "Bakes the current rotation and scale into the vertices and resets the rotation/scale"))
      (bake_scale
         script
         (alias
            "Bake Scale")
         (group
            "Mesh Utilities")
         (script
            {foreach
               $i
               {$this get_trans_children}
               {forge record $i}}
            {$this bake_scale})
         (help
            "Bakes the current scale into the vertices and resets the scale"))
      (reset_normals
         script
         (group
            "Mesh Utilities")
         (script
            {$this reset_normals})
         (help
            "Resets the normals for this mesh"))
      (flip_normals
         script
         (group
            "Mesh Utilities")
         (script
            {$this flip_normals})
         (help
            "Inverts the normals for this mesh"))
      (delete_backfaces
         (indent
            (delete_backfaces_tolerance
               float
               (range 0.0 1.0)
               (slider)
               (alias
                  "tolerance")
               (no_test))
            (delete_backfaces_go
               script
               (alias
                  "go")
               (script
                  {$this
                     delete_backfaces
                     [delete_backfaces_tolerance]})))
         (group
            "Mesh Utilities"))
      (auto_select_bones_per_vertex
         script
         (group
            "Mesh Utilities")
         (script
            {$this auto_select_bones_per_vertex}))
      (fixup_skin_weights
         script
         (group
            "Mesh Utilities")
         (script
            {$this fixup_skin_weights}))
      (copy_geom_from
         object
         (class Mesh)
         (list
            {$this get_allowed_copy_from})
         (group
            "Mesh Utilities")
         (alias
            "Copy Geom From...")
         (help
            "Copy geometry from another mesh.")
         (inline_script
            "Go"
            (script
               {$this
                  copy_geom_from
                  [copy_geom_from]}
               {$this
                  set
                  copy_geom_from
                  ""}))
         (no_test))
      (comb_normals
         (indent
            (comb_normals_center
               VECTOR3
               (alias
                  "center")
               (help
                  "center point of the sphere to comb normals outward from"))
            (comb_normals_inner_radius
               float
               (alias
                  "inner radius")
               (help
                  "Inside of this distance, normals start to point down"))
            (comb_normals_down_factor
               float
               (alias
                  "down factor")
               (help
                  "Once in the inner radius, how far until the normals face entirely down"))
            (comb_normals_go
               script
               (alias
                  "go")
               (help
                  "Comb Normals")
               (script
                  {comb_normals
                     $this
                     ({$this
                           get
                           (comb_normals_center x)}
                        {$this
                           get
                           (comb_normals_center y)}
                        {$this
                           get
                           (comb_normals_center z)})
                     [comb_normals_inner_radius]
                     [comb_normals_down_factor]})))
         (group
            "Mesh Utilities")
         (alias
            "Comb Normals")
         (help
            "Comb normals, useful for tree's which want a volumus effect"))
      (combine_geom_from_settings
         (indent
            (combine_geom_from_source
               object
               (class Mesh)
               (list
                  {$this get_allowed_copy_from})
               (alias
                  "source mesh")
               (help
                  "Source mesh to combine geometry from")
               (no_test copy serialize))
            (combine_geom_from_delete_source
               bool
               (alias
                  "delete source")
               (help
                  "If checked, the source mesh will be deleted, otherwise it will remain intact")
               (no_test copy serialize))
            (combine_geom_from_go
               script
               (alias
                  "go")
               (help
                  "Combine with geometry from another mesh")
               (script
                  {$this
                     combine_geom_from
                     [combine_geom_from_source]
                     [combine_geom_from_delete_source]})
               (read_only
                  {!
                     [combine_geom_from_source]})))
         (group
            "Mesh Utilities")
         (alias
            "Combine Geom From...")
         (help
            "combine with geometry from another mesh"))
      (mesh_generate_heightfield
         (indent
            (gen_heightmap_color_map
               file
               (ext
                  "Bitmaps"
                  "bmp")
               (alias
                  "color texture")
               (help
                  "Diffuse data to bake into verticies"))
            (gen_heightmap_height_map
               file
               (ext
                  "PNGs"
                  "png")
               (alias height 'texture"')
               (help
                  "16bit per channel greyscale height map png"))
            (gen_heightmap_norm_map
               file
               (ext
                  "Bitmaps"
                  "bmp")
               (alias normal 'texture"')
               (help
                  "Normal map to bake into verticies"))
            (gen_heightmap_unit_size
               float
               (range 100 20000)
               (help
                  "size in units")
               (alias
                  "total size"))
            (gen_heightmap_meshes_per_side
               int
               (range 1 64)
               (help
                  "number of meshes per side")
               (alias
                  "meshes per side"))
            (gen_heightmap_subdiv_per_side
               int
               (range 1 256)
               (help
                  "number of subdivitions per side")
               (alias
                  "subdiv"))
            (gen_heightmap_height
               float
               (help
                  "height of displacement")
               (alias
                  "z scale"))
            (gen_heightmap_go
               script
               (alias
                  "go")
               (no_test)
               (help
                  "Do it!")
               (script
                  {mesh_generate_height_field
                     {$this dir}
                     [gen_heightmap_color_map]
                     [gen_heightmap_height_map]
                     [gen_heightmap_norm_map]
                     [gen_heightmap_unit_size]
                     [gen_heightmap_meshes_per_side]
                     [gen_heightmap_subdiv_per_side]
                     [gen_heightmap_height]})))
         (group
            "Mesh Utilities")
         (alias
            "Generate Heightfield")
         (help
            "generate a multi-mesh heightfield"))
      (mesh_displace_with_texture
         (indent
            (mesh_displace_with_texture_tex
               file
               (ext
                  "Texture files"
                  "bmp")
               (alias
                  "color texture")
               (help
                  "texture used to burn color into verts"))
            (mesh_displace_with_texture_disp
               file
               (ext
                  "Texture files"
                  "png")
               (alias
                  "height texture")
               (help
                  "texture used to define displacement"))
            (mesh_displace_with_texture_norm
               file
               (ext
                  "Texture files"
                  "bmp")
               (alias
                  "normal texture")
               (help
                  "burns normals into vertices"))
            (mesh_displace_with_texture_scale
               float
               (alias
                  "scale")
               (help
                  "distance in world units of maximum displacement"))
            (mesh_displace_with_texture_add
               bool
               (alias
                  "Add?")
               (help
                  "add displacement data instead of setting absolute values?"))
            (mesh_displace_with_texture_go
               script
               (alias
                  "go")
               (help
                  "Do it!")
               (no_test)
               (script
                  {mesh_displace_with_texture
                     $this
                     [mesh_displace_with_texture_tex]
                     [mesh_displace_with_texture_disp]
                     [mesh_displace_with_texture_norm]
                     [mesh_displace_with_texture_scale]
                     [mesh_displace_with_texture_add]
                     [mesh_displace_with_texture_u_top_left]
                     [mesh_displace_with_texture_v_top_left]
                     [mesh_displace_with_texture_u_bottom_right]
                     [mesh_displace_with_texture_v_bottom_right]})))
         (group
            "Mesh Utilities")
         (alias
            "Displace with Texture")
         (help
            "Burns color and displacement maps into vertex data"))
      (make_sphere_settings
         (indent
            (make_sphere_radius
               float
               (alias
                  "radius")
               (range 1.0e-3 1000.0))
            (make_sphere_subdiv_long
               int
               (alias
                  "longitude subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_sphere_subdiv_lat
               int
               (alias
                  "latitude subdivisions")
               (range 2 100)
               (test_range 2 32))
            (make_sphere_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a latitude/longitude sphere")
               (script
                  {convert_mesh_to_sphere
                     $this
                     [make_sphere_radius]
                     [make_sphere_subdiv_long]
                     [make_sphere_subdiv_lat]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Sphere")
         (help
            "Convert geometry to a latitude/longitude sphere"))
      (make_tri_settings
         (indent
            (make_tri_width_x
               float
               (alias
                  "x width")
               (range 1.0e-3 1000.0))
            (make_tri_width_y
               float
               (alias
                  "y width")
               (range 1.0e-3 1000.0))
            (make_tri_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a single tri.")
               (script
                  {convert_mesh_to_tri
                     $this
                     [make_tri_width_x]
                     [make_tri_width_y]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Tri")
         (help
            "Convert geometry to a single tri."))
      (make_quad_settings
         (indent
            (make_quad_width
               float
               (alias
                  "width")
               (range 1.0e-3 1000.0))
            (make_quad_height
               float
               (alias
                  "height")
               (range 1.0e-3 1000.0))
            (make_quad_subdiv_width
               int
               (alias
                  "width subdivisions")
               (range 1 256)
               (test_range 1 32))
            (make_quad_subdiv_height
               int
               (alias
                  "height subdivisions")
               (range 1 256)
               (test_range 1 32))
            (make_quad_facing
               int
               (list MESH_FACING_ENUM)
               (alias
                  "facing"))
            (make_quad_two_sided
               bool
               (alias
                  "two-sided?"))
            (make_quad_alt_diags
               bool
               (alias
                  "alternate diagonals?"))
            (make_quad_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a (possibly subdivided) quad.")
               (script
                  {convert_mesh_to_quad
                     $this
                     [make_quad_width]
                     [make_quad_height]
                     [make_quad_subdiv_width]
                     [make_quad_subdiv_height]
                     [make_quad_facing]
                     [make_quad_two_sided]
                     [make_quad_alt_diags]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Quad")
         (help
            "Convert geometry to a (possibly subdivided) quad."))
      (make_box_settings
         (indent
            (make_box_width_x
               float
               (alias
                  "x width")
               (range 1.0e-3 1000.0))
            (make_box_width_y
               float
               (alias
                  "y width")
               (range 1.0e-3 1000.0))
            (make_box_width_z
               float
               (alias
                  "z width")
               (range 1.0e-3 1000.0))
            (make_box_subdiv_x
               int
               (alias
                  "x subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_box_subdiv_y
               int
               (alias
                  "y subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_box_subdiv_z
               int
               (alias
                  "z subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_box_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a (possibly subdivided) box.")
               (script
                  {convert_mesh_to_box
                     $this
                     [make_box_width_x]
                     [make_box_width_y]
                     [make_box_width_z]
                     [make_box_subdiv_x]
                     [make_box_subdiv_y]
                     [make_box_subdiv_z]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Box")
         (help
            "Convert geometry to a (possibly subdivided) box."))
      (make_cylinder_settings
         (indent
            (make_cylinder_radius
               float
               (alias
                  "radius")
               (range 1.0e-3 1000.0))
            (make_cylinder_length
               float
               (alias
                  "length")
               (range 1.0e-3 1000.0))
            (make_cylinder_subdiv_radial
               int
               (alias
                  "radial subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_cylinder_subdiv_length
               int
               (alias
                  "length subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_cylinder_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a cylinder.")
               (script
                  {convert_mesh_to_cylinder
                     $this
                     [make_cylinder_radius]
                     [make_cylinder_length]
                     [make_cylinder_subdiv_radial]
                     [make_cylinder_subdiv_length]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Cylinder")
         (help
            "Convert geometry to a cylinder."))
      (make_cone_settings
         (indent
            (make_cone_radius
               float
               (alias
                  "radius")
               (range 1.0e-3 1000.0))
            (make_cone_length
               float
               (alias
                  "length")
               (range 1.0e-3 1000.0))
            (make_cone_subdiv_radial
               int
               (alias
                  "radial subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_cone_subdiv_length
               int
               (alias
                  "length subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_cone_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a cone.")
               (script
                  {convert_mesh_to_cone
                     $this
                     [make_cone_radius]
                     [make_cone_length]
                     [make_cone_subdiv_radial]
                     [make_cone_subdiv_length]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Cone")
         (help
            "Convert geometry to a cone."))
      (make_truncated_cone_settings
         (indent
            (make_truncated_cone_top_radius
               float
               (alias
                  "top radius")
               (range 1.0e-3 1000.0))
            (make_truncated_cone_bottom_radius
               float
               (alias
                  "bottom radius")
               (range 1.0e-3 1000.0))
            (make_truncated_cone_length
               float
               (alias
                  "length")
               (range 1.0e-3 1000.0))
            (make_truncated_cone_subdiv_radial
               int
               (alias
                  "radial subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_truncated_cone_subdiv_length
               int
               (alias
                  "length subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_truncated_cone_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a truncated cone.")
               (script
                  {convert_mesh_to_truncated_cone
                     $this
                     [make_truncated_cone_top_radius]
                     [make_truncated_cone_bottom_radius]
                     [make_truncated_cone_length]
                     [make_truncated_cone_subdiv_radial]
                     [make_truncated_cone_subdiv_length]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Truncated Cone")
         (help
            "Convert geometry to a truncated cone."))
      (make_truncated_rounded_cone_settings
         (indent
            (make_truncated_rounded_cone_top_radius
               float
               (alias
                  "top radius")
               (range 1.0e-3 1000.0))
            (make_truncated_rounded_cone_bottom_radius
               float
               (alias
                  "bottom radius")
               (range 1.0e-3 1000.0))
            (make_truncated_rounded_cone_length
               float
               (alias
                  "length")
               (range 1.0e-3 1000.0))
            (make_truncated_rounded_cone_subdiv_radial
               int
               (alias
                  "radial subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_truncated_rounded_cone_subdiv_length
               int
               (alias
                  "length subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_truncated_rounded_cone_subdiv_bottom
               int
               (alias
                  "bottom subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_truncated_rounded_cone_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a truncated rounded cone.")
               (script
                  {convert_mesh_to_truncated_rounded_cone
                     $this
                     [make_truncated_rounded_cone_top_radius]
                     [make_truncated_rounded_cone_bottom_radius]
                     [make_truncated_rounded_cone_length]
                     [make_truncated_rounded_cone_subdiv_radial]
                     [make_truncated_rounded_cone_subdiv_length]
                     [make_truncated_rounded_cone_subdiv_bottom]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Truncated Rounded Cone")
         (help
            "Convert geometry to a truncated rounded cone."))
      (make_capsule_settings
         (indent
            (make_capsule_radius
               float
               (alias
                  "radius")
               (range 1.0e-3 1000.0))
            (make_capsule_length
               float
               (alias
                  "length")
               (range 1.0e-3 1000.0))
            (make_capsule_subdiv_long
               int
               (alias
                  "longitude subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_capsule_subdiv_lat
               int
               (alias
                  "latitude subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_capsule_subdiv_length
               int
               (alias
                  "length subdivisions")
               (range 1 100)
               (test_range 1 32))
            (make_capsule_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a capsule.")
               (script
                  {convert_mesh_to_capsule
                     $this
                     [make_capsule_radius]
                     [make_capsule_length]
                     [make_capsule_subdiv_long]
                     [make_capsule_subdiv_lat]
                     [make_capsule_subdiv_length]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Capsule")
         (help
            "Convert geometry to a capsule."))
      (make_torus_settings
         (indent
            (make_torus_center_radius
               float
               (alias
                  "center radius")
               (range 1.0e-3 1000.0))
            (make_torus_tube_radius
               float
               (alias
                  "tube radius")
               (range 1.0e-3 1000.0))
            (make_torus_subdiv_long
               int
               (alias
                  "longitude subdivisions")
               (range 3 100)
               (test_range 3 32))
            (make_torus_subdiv_lat
               int
               (alias
                  "latitude subdivisions")
               (range 2 100)
               (test_range 2 32))
            (make_torus_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a torus.")
               (script
                  {convert_mesh_to_torus
                     $this
                     [make_torus_center_radius]
                     [make_torus_tube_radius]
                     [make_torus_subdiv_long]
                     [make_torus_subdiv_lat]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Torus")
         (help
            "Convert geometry to a torus."))
      (make_icosahedron_settings
         (indent
            (make_icosahedron_radius
               float
               (alias
                  "radius")
               (range 1.0e-3 1000.0))
            (make_icosahedron_smooth
               bool
               (alias
                  "smooth"))
            (make_icosahedron_go
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a icosahedron.")
               (script
                  {convert_mesh_to_icosahedron
                     $this
                     [make_icosahedron_radius]
                     [make_icosahedron_smooth]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Icosahedron")
         (help
            "Convert geometry to a icosahedron."))
      (make_spline_tube_settings
         (indent
            (make_spline_tube_spline
               object
               (class Spline)
               (alias
                  "spline")
               (help
                  "Spline to generate geo based on"))
            (make_spline_tube_radius
               float
               (alias
                  "radius")
               (range 1.0e-2 10000.0)
               (help
                  "Default tube radius"))
            (make_spline_tube_num_sides
               int
               (alias
                  "number of sides")
               (range 3 100)
               (help
                  "Number of sides for cross-section shape"))
            (make_spline_tube_seg_length
               float
               (alias
                  "segment length")
               (range 0.1 1000.0)
               (help
                  "Maximum segment length for spline"))
            (make_spline_tube_uv_tiling
               float
               (alias
                  "uv tiling")
               (range 0.1 1000.0)
               (help
                  "UV tiling length"))
            (make_spline_tube
               script
               (alias
                  "go")
               (help
                  "Convert geometry to a tube along a spline")
               (script
                  {convert_mesh_to_spline_tube
                     $this
                     [make_spline_tube_spline]
                     [make_spline_tube_radius]
                     [make_spline_tube_num_sides]
                     [make_spline_tube_seg_length]
                     [make_spline_tube_uv_tiling]})
               (read_only
                  {!
                     [make_spline_tube_spline]})))
         (group
            "Mesh Utilities")
         (alias
            "Make Spline Tube")
         (help
            "Convert geometry to a tube along a spline"))))
(MeshAnim
   (description
      "A MeshAnim object animates Mesh vertices. This should be\n        done only when an effect can't be achieved with material\n        animation, because animating vertices directly is less efficient.")
   (category Animation)
   (superclasses Anim)
   (ext msnm))
(Morph
   (description
      "A Morph object animates between multiple Mesh poses using weight keyframes. \n        This is an expensive technique, equivalent to a\n        MeshAnim for each active pose, so use only when skinning or a\n        single MeshAnim isn't enough. For example, we use it for\n        viseme-driven facial animation.")
   (category Animation)
   (group Animation)
   (superclasses Anim)
   (ext morph)
   (editor
      (target
         object
         (class Mesh)
         (help
            "Mesh for the morph to occur"))
      (intensity
         float
         (help
            "Modifier for weight interpolation"))
      (normals
         bool
         (help
            "Interpolates the normals if set to true, otherwise normals are not affected."))
      (spline
         bool
         (help
            "Smooths the interpolation of the morphing."))
      (poses
         (array
            (struct
               (mesh
                  object
                  (class Mesh)
                  (help
                     "Morph target for this pose"))
               (keys
                  (array
                     (struct
                        (key_value
                           (indent
                              (frame
                                 float
                                 (help
                                    "Frame for this animation"))
                              (value
                                 float
                                 (help
                                    "Weight of this keyframe")))
                           (help
                              "Keyframes for the morph")
                           (editor_type vector))))
                  (help
                     "Keyframes of the animation for this morph target"))))
         (help
            "List of all the pose meshes"))))
(Movie
   (description
      "A Movie object animates a compressed video through a\n        texture. It works on Xbox and PS2 now, soon GC.")
   (category Graphics)
   (group Animation)
   (superclasses Anim)
   (ext mov)
   (editor
      (movie_file
         file
         (ext
            "Bink Files"
            bik)
         (help
            "File - extension is automatically converted to platform"))
      (stream
         bool
         (help
            "Stream the file for this movie?"))
      (loop
         bool
         (help
            "Loop this movie?"))
      (tex
         object
         (class Tex)
         (help
            "Texture to animate."))))
(MultiMesh
   (description
      "A MultiMesh object draws a simple Mesh in many places\n        quickly. Create a multimesh by instancing the base mesh lots of\n        times in Max, then using the multiobject wizard.")
   (category Graphics)
   (superclasses Draw)
   (ext mm)
   (allowed_dirs))
#define kVortex
(0)
#define kGravityWell
(1)
#define kRepulsor
(2)
#define kSphereRepulsor
(3)
#define kSpherePusher
(4)
#define kChannel_0
(0)
#define kChannel_1
(1)
#define kChannel_2
(2)
#define kChannel_3
(4)
#define kChannel_4
(8)
#define kChannel_5
(16)
#define kChannel_6
(32)
#define kChannel_7
(64)
#define kChannel_8
(128)
#define AFFECTOR_TARGET_FLAGS
((("kChannel_0"
         (alias
            "All Channels")
         (help
            "Affected by all channels"))
      ("kChannel_1"
         (alias
            "Channel 1")
         (help
            "Affected by channel 1."))
      ("kChannel_2"
         (alias
            "Channel 2")
         (help
            "Affected by channel 2."))
      ("kChannel_3"
         (alias
            "Channel 3")
         (help
            "Affected by channel 3."))
      ("kChannel_4"
         (alias
            "Channel 4")
         (help
            "Affected by channel 4."))
      ("kChannel_5"
         (alias
            "Channel 5")
         (help
            "Affected by channel 5."))
      ("kChannel_6"
         (alias
            "Channel 6")
         (help
            "Affected by channel 6."))
      ("kChannel_7"
         (alias
            "Channel 7")
         (help
            "Affected by channel 7."))
      ("kChannel_8"
         (alias
            "Channel 8")
         (help
            "Affected by channel 8."))))
#define AFFECTOR_FLAGS
((("kChannel_1"
         (alias
            "Channel 1")
         (help
            "Affect channel 1."))
      ("kChannel_2"
         (alias
            "Channel 2")
         (help
            "Affect channel 2."))
      ("kChannel_3"
         (alias
            "Channel 3")
         (help
            "Affect channel 3."))
      ("kChannel_4"
         (alias
            "Channel 4")
         (help
            "Affect channel 4."))
      ("kChannel_5"
         (alias
            "Channel 5")
         (help
            "Affect channel 5."))
      ("kChannel_6"
         (alias
            "Channel 6")
         (help
            "Affect channel 6."))
      ("kChannel_7"
         (alias
            "Channel 7")
         (help
            "Affect channel 7."))
      ("kChannel_8"
         (alias
            "Channel 8")
         (help
            "Affect channel 8."))))
#define kParticleOrientAxis_Camera
(0)
#define kParticleOrientAxis_XPlus
(1)
#define kParticleOrientAxis_XMinus
(2)
#define kParticleOrientAxis_YPlus
(3)
#define kParticleOrientAxis_YMinus
(4)
#define kParticleOrientAxis_ZPlus
(5)
#define kParticleOrientAxis_ZMinus
(6)
#define kParticleOrientAxis_XY
(7)
#define PARTICLE_ORIENT_AXIS
((("kParticleOrientAxis_Camera"
         (alias
            "Camera")
         (help
            "Particles are always facing the camera."))
      ("kParticleOrientAxis_XPlus"
         (alias
            "+X")
         (help
            "Particles are always facing +X."))
      ("kParticleOrientAxis_XMinus"
         (alias
            "-X")
         (help
            "Particles are always facing -X."))
      ("kParticleOrientAxis_YPlus"
         (alias
            "+Y")
         (help
            "Particles are always facing +Y."))
      ("kParticleOrientAxis_YMinus"
         (alias
            "-Y")
         (help
            "Particles are always facing -Y."))
      ("kParticleOrientAxis_ZPlus"
         (alias
            "+Z")
         (help
            "Particles are always facing +Z."))
      ("kParticleOrientAxis_ZMinus"
         (alias
            "-Z")
         (help
            "Particles are always facing -Z."))
      ("kParticleOrientAxis_XY"
         (alias
            "XY")
         (help
            "Particles rotate around the Z axis to face the camera."))))
(ParticleSys
   (description
      "A ParticleSys object generates, animates, and draws large numbers of similar sprites.")
   (category Particles)
   (superclasses Poll Draw Trans Anim)
   (ext part)
   (editor
      (animate_uvs
         bool
         (group
            "UV Animation")
         (help
            "When this is checked, the material texture is used to create a flipbook-style animation.")
         (read_only
            [preserve]))
      (num_tiles_across
         int
         (alias
            "tiles across")
         (help
            "This sets the number of tiles 'across' in the specified texture.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (num_tiles_down
         int
         (alias
            "tiles down")
         (help
            "This sets the number of tiles 'down' in the specified texture.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (starting_tile
         int
         (alias
            "start frame tile")
         (help
            "This sets the start frame of the animation.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (num_tiles_total
         int
         (alias
            "total number of tiles")
         (help
            "This sets the total number of tiles used for the animation.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (loop_uv_anim
         bool
         (alias
            "loop animation?")
         (help
            "When this is checked, the animation loops to its beginning.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (random_anim_start
         bool
         (alias
            "random start point?")
         (help
            "When this is checked, the particle animation will start in a random location.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (tile_hold_time
         float
         (alias
            "tile hold time")
         (help
            "This sets the speed in seconds it takes to switch from one tile to the next.")
         (read_only
            {'||'
               [preserve]
               {!
                  [animate_uvs]}})
         (group
            "UV Animation"))
      (duration
         float
         (range 1.0e-2 1000000)
         (group Animation)
         (help
            "This sets the duration of the particle system.\nPropAnim and waveform properties will use this value to determine the length, in time (seconds, beats, etc.), of the particle system."))
      (is_anim
         bool
         (group Animation)
         (help
            "When this is checked, the particle system's emit rate is controlled by the animation system's weight.\n This allows you to treat particle systems like animations and have them emit only when animated."))
      (sort_back_to_front
         bool
         (help
            "When this is checked, the particles are sorted and drawn from back-to-front.")
         (group Render))
      (orient_axis
         int
         (list PARTICLE_ORIENT_AXIS)
         (group Render)
         (help
            "How the particles are oriented."))
      (mat
         object
         (group Basics)
         (class Mat)
         (list
            {list_allowed_mats $this})
         (help
            "This allows you to set a material for the particle system."))
      (particles_are_lights
         bool
         (group Basics)
         (help
            "If true, these particles are acting like light sources. You still need to hook up the right shadergraph magic, but this checkbox forces the material's bucket to work correctly for lights."))
      (screen_aspect
         float
         (help
            "Ratio of screen height to width")
         (group Basics))
      (active_parts
         int
         (alias
            "active particles")
         (help
            "This displays the number of currently active particles.")
         (group Basics)
         (read_only TRUE))
      (kill_all
         script
         (group Basics)
         (script
            {$this clear_all_particles})
         (help
            "Kills all active particles."))
      (max_parts
         int
         (alias
            "maximum particles")
         (range 0 3072)
         (help
            "This allows you to set the maximum number of particles (current maximum the system allows is 3072).")
         (group Basics))
      (emit_rate
         waveform_float
         (help
            "This allows you to set the rate of particle emission across the duration of the particle system.")
         (group Basics))
      (emit_rate_multiplier
         float
         (range 0 999)
         (group Basics)
         (help
            "Change the value of this property to ramp the emit rate up and down."))
      (emit_distance_per_particle
         float
         (group Basics)
         (help
            "How far this system must travel before a particle is emitted. 0 means don't emit based on distance."))
      (life
         waveform_float
         (help
            "This property allows you to determine how long the individual particles last.")
         (group Basics))
      (life_multiplier
         float
         (help
            "Multiplied against life waveform")
         (group Basics))
      (emit_can_kill_oldest
         bool
         (help
            "When checked, emission always succeeds by killing and reclaiming the oldest particles as necessary.")
         (group Basics))
      (never_kill_particles
         bool
         (help
            "When this is checked, no particles are ever removed from the system.")
         (group Basics))
      (speed
         waveform_float
         (help
            "This allows you to set the emit speed of spawned particles.")
         (group Basics))
      (speed_over_life
         waveform_float
         (alias
            "speed multiplier over life")
         (help
            "This allows you to adjust the speed of the particle over the course of its lifetime.")
         (group Basics))
      (drag
         float
         (range 0 1)
         (slider)
         (group Basics)
         (help
            "This allows you to add friction to a particle over the course of its lifetime."))
      (emit_size
         waveform_float
         (help
            "This allows you to set the size of particles at the time of emission. The curve time is tied to the duration of the particle system.")
         (group Basics))
      (uniform_scale_over_life
         bool
         (help
            "Are particles scaled uniformly or do they have separate x and y scales?")
         (group Basics)
         (read_only
            {$this is_property_read_only uniform_scale_over_life}))
      (x_scale_over_life
         waveform_float
         (help
            "This allows you to ramp the width/x-size of a particle over the course of its lifetime. Time is tied to the particle's timeline.")
         (group Basics))
      (y_scale_over_life
         waveform_float
         (help
            "This allows you to ramp the height/y-size of a particle over the course of its lifetime. Time is tied to the particle's timeline.")
         (group Basics)
         (read_only
            [uniform_scale_over_life]))
      (offset_then_scale
         bool
         (alias
            "Scale affects pivot")
         (help
            "Do we offset then scale (true)? Or scale then offset (false)?")
         (group Basics)
         (read_only
            {$this is_property_read_only offset_then_scale}))
      (x_pivot_point
         waveform_float
         (help
            "x/horizontal offset of pivot point. 0.5 means middle of the sprite.")
         (group Basics)
         (read_only
            {$this is_property_read_only x_pivot_point}))
      (y_pivot_point
         waveform_float
         (help
            "y/vertical offset of pivot point. 0.5 means middle of the sprite.")
         (group Basics)
         (read_only
            {$this is_property_read_only y_pivot_point}))
      (force_dir
         VECTOR3
         (group Basics)
         (help
            "This sets force direction in world or local coordinates, in units per frame added to each particle's velocity. Can be used for gravity.")
         (expand TRUE))
      (is_world_force_dir
         bool
         (group Basics)
         (help
            "When this is checked, force direction will be in world coordinates. Local coordinates will be used if unchecked."))
      (scale_size_with_entity
         bool
         (group Basics)
         (help
            "When this is checked, the size of each particle will scale with its entity (and/or if you just scale the system itself)."))
      (pause_offscreen
         bool
         (group Render)
         (help
            "When checked, particle motion is frozen when offscreen and all particles are freed when hidden, saving processing time."))
      (lod_break
         float
         (group Render)
         (range 0.0 1.0)
         (help
            "Screen height fraction below which this particle system will no longer update."))
      (color
         waveform_color
         (group Color)
         (help
            "This allows you to set the color of each particle over the course of its lifetime.")
         (read_only
            {$this is_property_read_only color}))
      (alpha
         waveform_float
         (group Color)
         (range 0 1)
         (help
            "This allows you to set the alpha for each particle over the course of its lifetime.")
         (read_only
            {$this is_property_read_only alpha}))
      (box_extent_1
         VECTOR3
         (group Emitter)
         (help
            "This allows you to configure the min and max points, in object coordinates, of the box region that emits particles.")
         (expand TRUE))
      (box_extent_2
         VECTOR3
         (group Emitter)
         (help
            "This allows you to configure the min and max points, in object coordinates, of the box region that emits particles.")
         (expand TRUE))
      (pitch
         waveform_float
         (group Emitter)
         (help
            "This sets the pitch offset for the direction of the emitter, tied to the particle system timeline."))
      (yaw
         waveform_float
         (group Emitter)
         (help
            "This sets the yaw offset for the direction of the emitter, tied to the particle system timeline."))
      (relative_motion
         float
         (group Emitter)
         (slider)
         (help
            "If [motion_parent] is set, this value represents the amount to make movement relative to it, from 0-1, where 1 is fully relative to the parent.")
         (range 0 1))
      (motion_parent
         object
         (group Emitter)
         (class Trans)
         (no_null)
         (allow_this)
         (help
            "Makes particles move relative to this Trans."))
      (birth_momentum
         bool
         (group Emitter)
         (help
            "When this is checked, the relative parent's momentum is added to each particle's initial speed."))
      (birth_momentum_amount
         float
         (group Emitter)
         (help
            "This allows you to set the amount of birth momentum to use. 0 is none; 1 is full amount; 2 is twice the momentum; -1 means use the opposite of the momentum relative to the motion parent."))
      (subsamples
         int
         (group Emitter))
      (pre_spawn
         bool
         (group Emitter)
         (help
            "When this is checked, particles spawn on enter. Makes it appear on start as if the system was already running."))
      (preserve
         bool
         (group Emitter)
         (help
            "When this is checked, the particle state exported from Max is preserved."))
      (bubble
         bool
         (group Movement)
         (help
            "turns on bubble motion"))
      (bubble_period
         waveform_float
         (range 1.0e-2 100)
         (group Movement)
         (read_only
            {!
               [bubble]}))
      (bubble_size
         waveform_float
         (group Movement)
         (read_only
            {!
               [bubble]}))
      (spin
         bool
         (group Movement)
         (help
            "When this is checked, each particle rotates around its center a random amount at the time of its birth.\nThis is only allowed if velocity_align is unchecked."))
      (rpm_over_life
         waveform_float
         (help
            "This allows you to change rotation amount over time.  RPM is revolutions per minute.")
         (group Movement)
         (read_only
            {!
               [spin]}))
      (rpm_drag
         float
         (range 0 1)
         (slider)
         (help
            "This allows you to reduce the amount of revolutions per minute over time.  Range 0 (no drag) to 1 (full drag).")
         (group Movement)
         (read_only
            {!
               [spin]}))
      (random_direction
         bool
         (help
            "When this is checked, particles will randomly spin in the opposite direction.\nThis is only possible if spin rpm is not zero.")
         (group Movement)
         (read_only
            {!
               [spin]}))
      (velocity_align
         bool
         (help
            "When this is checked, the particles are oriented to the direction in which they are moving.")
         (group Movement))
      (stretch_with_velocity
         bool
         (help
            "When this is checked, the particle stretches more as the it moves faster.")
         (read_only
            {!
               [velocity_align]})
         (group Movement))
      (stretch_scale
         float
         (read_only
            {'||'
               {!
                  [velocity_align]}
               {!
                  [stretch_with_velocity]}})
         (help
            "Controls the amount of stretching due to velocity.")
         (group Movement))
      (constant_area
         bool
         (read_only
            {'||'
               {!
                  [velocity_align]}
               [stretch_with_velocity]})
         (help
            "When this is checked, the area of particle (length x width) remains constant.")
         (group Movement))
      (perspective
         bool
         (read_only
            {'||'
               {!
                  [velocity_align]}
               [stretch_with_velocity]})
         (help
            "When this is checked, the particle is completely aligned with its motion.\nThis also increases the effect of stretch_scale.")
         (group Movement))
      (bounce
         object
         (class Trans)
         (group Physics)
         (help
            "Specify a collide plane to reflect particles. Used to bounce particles off surfaces."))
      (bounce_elasticity
         float
         (group Physics)
         (help
            "Multiplies the perpendicular speed of the particle when it hits the bounce plane. <1 means the particle bounces less high off the plane.")
         (read_only
            {!
               [bounce]}))
      (bounce_drag
         float
         (group Physics)
         (help
            "Multiplies the overall speed of the particle when it hits the bounce plane. <1 means the particle slows down when it hits.")
         (read_only
            {!
               [bounce]}))
      (kill_on_bounce
         bool
         (group Physics)
         (help
            "Do particles die when they hit the bounce plane?")
         (read_only
            {!
               [bounce]}))
      (use_dynamic_affectors
         bool
         (group Physics)
         (help
            "Do we respond to particle affector objects within our sphere? Make sure to set the draw sphere for this to work!"))
      (affectors
         (array
            object
            (class ParticleAffector)
            (no_null))
         (help
            "Add affectors to the list manually, avoiding the scan cost, etc")
         (group Physics))
      (affector_mult
         VECTOR3
         (group Physics)
         (help
            "Allows you to dampen or multiply the effect of affectors on a given axis")
         (expand TRUE))
      (affector_channel
         int
         (list AFFECTOR_TARGET_FLAGS)
         (group Physics)
         (help
            "which channel we're on for world filtering"))
      (sg_source_0
         int
         (list PARTICLESGFLOATSOURCE_ENUM)
         (help
            "Where does the data for the first shadergraph float come?")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_source_0}))
      (sg_waveform_0
         waveform_float
         (help
            "generic floating point waveform that gets sent to the shadergraph.")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_waveform_0}))
      (sg_source_1
         int
         (list PARTICLESGFLOATSOURCE_ENUM)
         (help
            "Where does the data for the second shadergraph float come?")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_source_1}))
      (sg_waveform_1
         waveform_float
         (help
            "generic floating point waveform that gets sent to the shadergraph.")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_waveform_1}))
      (sg_source_2
         int
         (list PARTICLESGFLOATSOURCE_ENUM)
         (help
            "Where does the data for the third shadergraph float come?")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_source_2}))
      (sg_waveform_2
         waveform_float
         (help
            "generic floating point waveform that gets sent to the shadergraph.")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_waveform_2}))
      (sg_source_3
         int
         (list PARTICLESGFLOATSOURCE_ENUM)
         (help
            "Where does the data for the fourth shadergraph float come?")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_source_3}))
      (sg_waveform_3
         waveform_float
         (help
            "generic floating point waveform that gets sent to the shadergraph.")
         (group ShaderGraph)
         (read_only
            {$this is_property_read_only sg_waveform_3})))
   (events_in
      (clear_all_particles
         (help
            "Kills all existing particles."))
      (launch
         (help
            "Launch a specific number of particles all at once.")
         (editor
            (launch_particle_count
               int
               (help
                  "How many particles to launch at once."))
            (launch_particle_trans
               object
               (class Trans)
               (help
                  "An optional Trans to launch from. If null, uses the particle system's origin."))))
      (launch_from_xyz
         (help
            "Launch a specific number of particles all at once.")
         (editor
            (launch_particle_count
               int
               (help
                  "How many particles to launch at once."))
            (launch_particle_position_x
               float
               (help
                  "Where to launch from in X."))
            (launch_particle_position_y
               float
               (help
                  "Where to launch from in Y."))
            (launch_particle_position_z
               float
               (help
                  "Where to launch from in Z."))
            (launch_particle_is_global
               bool
               (help
                  "Is the specified position local or global?"))))))
(ParticleAffector
   (description
      "Abstract superclass for objects which affect particles.")
   (category Particles)
   (superclasses Poll)
   (editor
      (disable_effect
         bool
         (help
            "Is the system active?"))
      (disable_scan
         bool
         (help
            "turns off automatic scene scanning"))
      (channel_mask
         bitfield
         (list AFFECTOR_FLAGS)
         (help
            "Channel masking bits, which allow you to filter out certain systems in the world"))
      (update_rate
         int
         (help
            "How often to querry for object intersection. 1 means every frame, 2 means every other frame. Use low values for fast moving objects and high values for slower objects"))))
(ParticleAttractor
   (browser_name
      "Particle Attractor")
   (description
      "Allows this object to affect particle systems with use_dynamic_attractors turned on")
   (category Particles)
   (superclasses Trans ParticleAffector)
   (ext attractor)
   (editor
      (attractor_type
         int
         (list
            (("kVortex"
                  (alias
                     "Vortex")
                  (help
                     "Pulls all particles in the system towards it"))
               ("kGravityWell"
                  (alias
                     "Gravity Well")
                  (help
                     "Pulls all particles in the system towards it, detroying particles as they enter the death radius. Particles taste like cookies.."))
               ("kRepulsor"
                  (alias
                     "Repulsor")
                  (help
                     "Repulses all particles away from it"))
               ("kSphereRepulsor"
                  (alias
                     "Sphere Repulsor")
                  (help
                     "Repulses any particle within the radius distance away from it"))
               ("kSpherePusher"
                  (alias
                     "Sphere Pusher")
                  (help
                     "Applies motion velocity from this object to particles within the radius"))))
         (help
            "controls the type of effect the attractor has on particles"))
      (radius
         float
         (help
            "physical size of the attrator")
         (hide
            {&&
               {!=
                  [attractor_type]
                  kSphereRepulsor}
               {!=
                  [attractor_type]
                  kSpherePusher}}))
      (death_size
         float
         (help
            "radius at which attractor eats particles. (Particles taste like cookies, btw)")
         (hide
            {!=
               [attractor_type]
               kGravityWell}))
      (death_count
         int
         (help
            "How many particles we ate last frame")
         (hide
            {!=
               [attractor_type]
               kGravityWell}))
      (strength
         float
         (help
            "how much force to apply, negative values for repulsion"))))
(ParticleSpringAffector
   (browser_name
      "Particle Spring Affector")
   (description
      "")
   (category Particles)
   (superclasses Trans ParticleAffector)
   (ext attractor)
   (editor
      (spring_coefficient
         float
         (help
            "The 'strength' of the spring. Bigger means a stronger force to push particles to the rest radius."))
      (spring_rest_radius
         float
         (help
            "The radius from our center at which a particle would receive no force. Effectively the slack length of the spring."))
      (inter_particle_fade_limit
         float
         (help
            "How much the 'last' particle in the chain is ultimately affected. Bigger means more effect."))
      (inter_particle_influence_fade
         float
         (help
            "How much each subsequent particle in the chain reduces the spring influence. 1.0 means no changes down the line. < 1.0 means each particle gets less effect."))
      (force_age
         bool
         (help
            "Do we force the age of a particle to be relative to its position in our chain?"))))
(ParticleMeshAttractor
   (browser_name
      "Particle Mesh Attractor")
   (description
      "Particles will be attracted to meshes.")
   (category Particles)
   (superclasses ParticleAffector)
   (ext meshattractor)
   (editor
      (max_speed
         float
         (help
            "Particles headed to a mesh won't move faster than this."))
      (slowdown
         float
         (help
            "How a particle comes to a stop. 1 means no slowdown. <1 means a longer slowdown."))
      (falloff_power
         float
         (help
            "Defines the falloff curve between a mesh's inner and outer radii. >1 means less attraction, <1 means more."))
      (rotate_to_normal_distance
         float
         (help
            "If non-zero, the velocity of the particle becomes aligned to the mesh's normal within this distance."))
      (collect_attractors
         script
         (script
            {$this collect_attractors}))))
(HyperParticleRenderer
   (browser_name
      "Hyper Particle Renderer")
   (description
      "Renders particles into a pair of ping-ponged textures, with an associated fade-out effect which fades the result over time")
   (category Particles)
   (superclasses Draw Poll)
   (ext hyperpart)
   (editor
      (samples_per_frame
         int
         (range 1 4)
         (slider)
         (help
            "How many times to poll and draw the particles per frame"))
      (fade_out_frame_count
         float
         (range 1.0 10.0)
         (slider)
         (help
            "How often we fade. Every frame or less often to have the effect persist longer."))
      (particle_systems
         (array
            object
            (class ParticleSys))
         (help
            "Particle systems to draw into the rendered texture"))
      (fade_out_input_texture
         prop_ref
         (class Mat)
         (allowed_prop_types
            (object
               (class Tex)))
         (help
            "Material used to render the fade-out effect after rendering particles, with a specified input texture property which receives the rendered particle result for this frame"))
      (texture_0
         object
         (class Tex)
         (list
            {$this get_available_textures})
         (help
            "The first rendered texture we ping-pong between"))
      (texture_1
         object
         (class Tex)
         (list
            {$this get_available_textures})
         (help
            "The second rendered texture we ping-pong between"))
      (cam
         object
         (class Cam)
         (help
            "Camera we draw the particles to"))
      (result_texture
         prop_ref
         (allowed_prop_types
            (object
               (class Tex)))
         (help
            "Texture property driven on a given frame to either [texture_0] or [texture_1]"))))
(Scene
   (description
      "A Scene is a lighting environment with visible objects in it.")
   (file_ext
      ".scene")
   (superclasses RndDir)
   (unique_allowed_dir)
   (allowed_dirs)
   (editor
      (use_background_color
         bool
         (help
            "Should we clear the background to the specified color?"))
      (background_color
         color
         (read_only
            {!
               [use_background_color]})
         (help
            "Color to clear the background to"))
      (sort_mode
         int
         (alias
            "static sort mode")
         (list SCENE_SORT_MODE_ENUM)
         (help
            "How the scene is sorted before drawing. This can significantly reduce opaque geo overdraw"))
      (sort_axis
         VECTOR3
         (alias
            "static sort axis")
         (read_only
            {!=
               [sort_mode]
               kSort_FrontToBack})
         (help
            "Primary direction the camera faces, used to compute front to back sort"))
      (hide_decals
         bool
         (hide flow propanim)
         (help
            "Force all decals to be hidden for the entire scene?")))
   (events_out
      (pre_poll
         (help
            "Before any components or objects are polled, including this superclass, but time is set"))
      (post_poll
         (help
            "After everything has been polled, including the physics"))))
(ScreenMask
   (description
      "Draws full screen quad with material and color.")
   (category Graphics)
   (allowed_dirs Entity UIScreen Scene)
   (superclasses Draw)
   (ext mask)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material to draw on full screen quad"))
      (color
         color
         (help
            "Color of full screen quad"))
      (alpha
         float
         (help
            "Translucency of full screen quad"))
      (screen_rect
         RECT
         (help
            "The area of the screen in normalized coordinates (0 to 1) to draw into."))
      (depth
         float
         (range 0.0 1.0)
         (slider)
         (help
            "Clip-space depth at which to draw the rect (0.0 means the near plane, 1.0 the far plane)"))
      (use_cam_rect
         bool
         (help
            "Use current camera screen_rect instead of the full screen"))))
(TexMovie
   (description
      "Renders bink movie to a texture.")
   (category Animation)
   (superclasses Draw Poll)
   (ext tmov)
   (editor
      (output_texture
         object
         (class Tex)
         (help
            "Texture to write to")
         (list
            {$this get_render_textures})
         (add_history
            [output_texture]))
      (bink_movie_file
         file
         (ext
            "Bink Files"
            bik)
         (help
            "Bink File"))
      (loop
         bool
         (help
            "Loop this movie?"))
      (preload
         bool
         (help
            "Load entire movie before playing?"))
      (paused
         bool
         (help
            "If the movie is paused."))
      (time_sync
         object
         (class BeatSource)
         (help
            "BeatSource to drive the time of this movie"))
      (time_sync_offset_secs
         float
         (help
            "offset from time sync in seconds"))
      (frame
         int
         (help
            "Currently playing frame"))
      (ms_per_frame
         float
         (read_only TRUE)
         (help
            "time in milliseconds per frame"))
      (time_ms
         float
         (help
            "current time in milliseconds")))
   (events_in
      (play_movie
         (editor
            (start_movie
               bool
               (default TRUE)
               (help
                  "If true, will start movie.  Otherwise it will stop it"))))
      (goto_frame
         (editor
            (goto_frame
               int
               (default 0)
               (help
                  "Jumps the movie to the given frame.")))))
   (events_out
      (movie_ended
         (help
            "Fired when the movie has ended."))))
(RndDir
   (description
      "A RndDir specially tracks drawable and animatable objects.")
   (category Graphics)
   (superclasses ObjectDir Draw Poll))
(PostProc
   (description
      "A PostProc drives post-processing effects.")
   (category Graphics)
   (ext pp)
   (user_creatable FALSE)
   (allowed_dirs Scene UIScreen)
   (editor
      (enabled
         bool
         (help
            "Is this PostProc enabled? (You can only have one UIScreen with an enabled PostProc)")
         (hide propanim))
      (bloom
         (indent
            (bloom_color
               color
               (help
                  "Color tint for bloom effect"))
            (bloom_threshold
               float
               (help
                  "Luminance intensity at which to bloom")
               (range 1.0e-2 500.0))
            (bloom_intensity
               float
               (help
                  "Multiply the bloom amount by this number"))
            (bloom_blur_type
               int
               (list POSTPROC_BLOOM_BLUR_TYPE_ENUM)
               (help
                  "Type of blur to apply during bloom pass"))
            (bloom_streak_attenuation
               float
               (read_only
                  {!=
                     [bloom_blur_type]
                     kBloomBlurStyle_Streak})
               (range -2.0 2.0)
               (slider)
               (help
                  "Attenuation (scattering amount) of light streak.\n0.9 to 0.95 is the sweet spot."))
            (bloom_streak_angle
               float
               (read_only
                  {!=
                     [bloom_blur_type]
                     kBloomBlurStyle_Streak})
               (range -360.0 360.0)
               (slider)
               (help
                  "Angle for light streak")))
         (read_only
            {!
               [enabled]}))
      (crepuscular_rays
         (indent
            (crepuscular_on
               bool
               (help
                  "Are crepuscular rays on at all?"))
            (crepuscular_source_trans
               object
               (class Trans)
               (help
                  "The rotation of this trans dictates the apparent source of the rays. If empty, uses the global, shadow-casting directional light.")
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_threshold
               float
               (help
                  "Pixels blooming less than this won't contribute rays. Smaller means more rays.")
               (range 0.0 5.0)
               (slider)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_use_depth_cut
               bool
               (help
                  "Enable cutting rays based on the depth buffer")
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_depth_cut
               float
               (help
                  "Pixels nearer than this won't contribute rays. Smaller means more rays from closer objects.")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {'||'
                     {!
                        [crepuscular_on]}
                     {!
                        [crepuscular_use_depth_cut]}}))
            (crepuscular_density
               float
               (help
                  "Controls density and length of rays. Smaller means shorter, more dense rays.")
               (range 0.0 2.0)
               (slider)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_decay
               float
               (help
                  "Controls the falloff down the length of a ray. Smaller means smoother falloff.")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_weight
               float
               (help
                  "Controls ray contribution.")
               (range 0.0 2.0)
               (slider)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_glancing_fade
               waveform_float
               (help
                  "Controls the diminishing of the rays as the light angles towards (0) and away (1) from the camera. Waveform position 0 means directly facing into the camera plane, 0.5 parallel to the camera plane, and 1.0 facing directly away.")
               (range 0.0 1.0)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_texture
               object
               (class Tex)
               (help
                  "An optional texture which is screened over the rays to simulate dust or smoke.")
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_texture_scale
               float
               (help
                  "The scale of the screened texture.")
               (range 1.0e-4 100.0)
               (slider)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_exposure
               float
               (help
                  "Controls the mixing of the rays with the original image.")
               (range 0.0 2.0)
               (slider)
               (read_only
                  {!
                     [crepuscular_on]}))
            (crepuscular_quality
               int
               (list POSTPROC_CREPUSC_QUALITY_ENUM)
               (help
                  "Controls the number of samples taken in the radial blur (more samples means it looks better but costs more GPU time)")
               (read_only
                  {!
                     [crepuscular_on]})))
         (read_only
            {!
               [enabled]}))
      (motion_blur
         (indent
            (motion_blur_velocity
               bool
               (alias
                  "velocity blur?")
               (help
                  "Use the velocity-based motion blur effect? (should be enabled almost all the time)"))
            (motion_blur_prev
               bool
               (alias
                  "previous-frame blur?")
               (help
                  "Blend the previous frame into the current frame?"))
            (motion_blur_prev_strength
               float
               (alias
                  "previous-frame strength")
               (help
                  "The amount of the previous frame to blend into the current frame")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [motion_blur_prev]}))
            (motion_blur_prev_color_weight
               color
               (alias
                  "previous-frame color channel weight")
               (help
                  "The weighting for individual color channels in the previous-frame blend")
               (read_only
                  {!
                     [motion_blur_prev]}))
            (motion_blur_prev_exposure_weight
               float
               (alias
                  "previous-frame exposure weight")
               (help
                  "The weighting for bright pixels in the previous-frame blend")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [motion_blur_prev]}))
            (motion_blur_mask
               object
               (class Tex)
               (help
                  "Texture mask applied to both velocity blur and previous-frame blur")
               (read_only
                  {&&
                     {!
                        [motion_blur_velocity]}
                     {!
                        [motion_blur_prev]}})))
         (help
            "Motion blur settings")
         (read_only
            {!
               [enabled]}))
      (gradient_map
         (indent
            (gradient_map
               object
               (class Tex)
               (alias
                  "texture")
               (help
                  "Gradient map; this texture should be layed out horizontally such that the color to use when the pixel is black is on the left and white is on the right.")
               (hide flow))
            (gradient_map_opacity
               float
               (alias
                  "opacity")
               (help
                  "The opacity of the gradient map effect.")
               (range 0.0 1.0)
               (slider))
            (gradient_map_index
               float
               (alias
                  "index")
               (help
                  "This indexes veritically into the gradient map texture. This is useful for storing multiple gradient map textures in a single texture, and to blend between them.")
               (range 0.0 1.0)
               (slider))
            (gradient_map_start
               float
               (alias
                  "depth start")
               (help
                  "The depth where the gradient map will begin to take effect.")
               (range 0.0 1.0)
               (slider))
            (gradient_map_end
               float
               (alias
                  "depth end")
               (help
                  "The depth where the gradient map will no longer take effect.")
               (range 0.0 1.0)
               (slider)))
         (help
            "Gradient map settings")
         (read_only
            {!
               [enabled]}))
      (chromatic_effects
         (indent
            (chromatic_aberration_offset
               float
               (alias
                  "offset")
               (help
                  "The size, in pixels, of the chromatic aberration or sharpen effect."))
            (chromatic_sharpen
               bool
               (alias
                  "sharpen")
               (help
                  "Whether to sharpen the chromatic image or apply the aberration effect.")))
         (help
            "Chromatic sharpen will sharpen the image, while chromatic aberration is an artifact where color channels are slightly shifted. This is useful to simulate old cameras, poor quality video, or underwater scenes.")
         (read_only
            {!
               [enabled]}))
      (refraction
         (indent
            (refract_map
               object
               (class Tex)
               (list
                  {list_normal_map_textures $this})
               (alias
                  "texture")
               (help
                  "This is a normal map used to distort the screen.")
               (hide flow))
            (refract_map_wrap
               int
               (list TEXWRAP_ENUM)
               (alias
                  "texture wrap")
               (help
                  "How the normal map is wrapped."))
            (refract_dist
               float
               (alias
                  "distance")
               (help
                  "The distance to refract each pixel of the screen. This can also be negative to reverse the direction. Set to zero to disable."))
            (refract_scale
               VECTOR2
               (alias
                  "scale")
               (help
                  "This scales the refraction texture before distorting the screen, in the X and Y directions."))
            (refract_panning
               VECTOR2
               (alias
                  "scroll amount")
               (help
                  "The amount to offset the refraction texture, in the X and Y directions. This is a fixed amount to offset the refraction effect."))
            (refract_velocity
               VECTOR2
               (alias
                  "scroll velocity")
               (help
                  "The velocity to scroll the refraction texture, in the X and Y directions. The value is specified in units per second, and will offset the refraction effect over time."))
            (refract_angle
               float
               (alias
                  "angle")
               (help
                  "The angle to rotate the refraction texture, in degrees.")
               (range 0.0 360.0)))
         (help
            "Full-screen refraction settings")
         (read_only
            {!
               [enabled]}))
      (luminance_map
         object
         (class Tex)
         (help
            "Luminance map")
         (hide flow)
         (read_only
            {!
               [enabled]}))
      (exposure_flicker
         (indent
            (flicker_intensity
               VECTOR2
               (alias
                  "intensity")
               (help
                  "Min and max intensity range [0..1], 0.0 to disable"))
            (flicker_secs_range
               VECTOR2
               (alias
                  "secs_range")
               (help
                  "Min and max number of seconds for a light to dark cycle")))
         (read_only
            {!
               [enabled]}))
      (noise
         (indent
            (noise_base_scale
               VECTOR2
               (help
                  "X and Y tiling of the noise map"))
            (noise_intensity
               float
               (help
                  "intensity of the noise, 0.0 to disable")
               (range -10.0 10.0)
               (slider))
            (noise_stationary
               bool
               (help
                  "keep the noise map static over the screen"))
            (noise_map
               object
               (class Tex)
               (help
                  "Optional noise bitmap")
               (hide flow))
            (noise_midtone
               bool
               (help
                  "Applies the noise using at mid-tones of the scene, using an Overlay blend mode.")))
         (read_only
            {!
               [enabled]}))
      (color_grading
         (indent
            (color_grading_lut_1
               object
               (class ColorLUT))
            (color_grading_mix
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "The mix of the two given LUTs. 0 means full LUT 1, 1 means full LUT 2."))
            (color_grading_lut_2
               object
               (class ColorLUT))
            (color_grading_separate_pass
               bool
               (alias
                  "separate pass?")
               (help
                  "Should we run the color grading in a separate pass from the main postproc? (allows the usage of the 'No color grading' material bucket)")))
         (read_only
            {!
               [enabled]}))
      (color_xfm
         COLOR_XFM
         (read_only
            {!
               [enabled]}))
      (posterize
         (indent
            (num_levels
               float
               (help
                  "Number of levels for posterization, 0 turns off")
               (range 0.0 255.0))
            (min_intensity
               float
               (help
                  "Minimum intensity to posterize, 1.0 is posterize all")
               (range 0.0 1.0)
               (slider)))
         (read_only
            {!
               [enabled]}))
      (kaleidoscope
         (indent
            (kaleidoscope_complexity
               float
               (alias complexity)
               (help
                  "Number of slices in kaleidoscope, 0 turns off, 2 for vertical mirror")
               (range 0.0 64.0))
            (kaleidoscope_size
               float
               (alias size)
               (help
                  "Smaller size means more repeated areas, but each area is smaller")
               (range 1.0e-2 64.0))
            (kaleidoscope_angle
               float
               (alias angle)
               (help
                  "Additional clockwise degrees of rotation around center.")
               (range 0.0 360.0))
            (kaleidoscope_radius
               float
               (alias radius)
               (help
                  "Additional distance from center")
               (range -0.5 0.5))
            (kaleidoscope_flipUVs
               bool
               (alias
                  "flipUVs?")
               (help
                  "Flip texture UV coords when reflect")))
         (help
            "Kaleidoscope settings")
         (read_only
            {!
               [enabled]}))
      (emulate_fps
         float
         (help
            "Frame rate to emulate, e.g. 24 for film. 0 disables emulation.")
         (range 0.0 60.0)
         (read_only
            {!
               [enabled]}))
      (light_trail
         (indent
            (threshold
               float
               (help
                  "Min pixel value to leave trails [0..1]")
               (range 0.0 1.0)
               (slider))
            (duration
               float
               (help
                  "Seconds for the trails to last")))
         (read_only
            {!
               [enabled]}))
      (hall_of_time
         (indent
            (hall_of_time_type
               int
               (alias
                  "type")
               (list POSTPROC_HALL_OF_TIME_ENUM)
               (help
                  "Should the effect be blended, or should it produce solid colors?"))
            (hall_of_time_rate
               float
               (alias
                  "rate")
               (help
                  "Speed of effect.  0 is off.  1 is regular speed.")
               (range -10.0 10.0)
               (slider)
               (read_only
                  {==
                     [hall_of_time_type]
                     kHallOfTime_Disabled}))
            (hall_of_time_color
               color
               (alias
                  "image color")
               (help
                  "Seconds for the trails to last.")
               (read_only
                  {==
                     [hall_of_time_type]
                     kHallOfTime_Disabled}))
            (hall_of_time_mix
               float
               (alias
                  "image color mix")
               (help
                  "Amount of color to blend. 0 is no color, 1 is solid color.\nNot applicable if solid rings checked.")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!=
                     [hall_of_time_type]
                     kHallOfTime_Blended})))
         (help
            "Video feedback effect")
         (read_only
            {!
               [enabled]}))
      (vignette
         (indent
            (vignette_color
               color
               (help
                  "Color tint for vignette effect"))
            (vignette_intensity
               float
               (range 0 2)
               (slider)
               (help
                  "0 for no effect, 1 for normal, less than one for smaller effect, 2 is full color"))
            (vignette_location
               int
               (list POSTPROC_VIGNETTE_ENUM)
               (alias
                  "location")
               (help
                  "What side of the screen should display the vignette effect?")))
         (read_only
            {!
               [enabled]}))
      (letterbox
         (indent
            (letterbox_color
               color
               (alias
                  "color")
               (help
                  "Color tint for vignette effect"))
            (letterbox_intensity
               float
               (alias
                  "intensity")
               (range 0 1)
               (slider)
               (help
                  "0 for no effect, 1 is fully filled in, 0.5 means half of screen is covered (top 25% and bottom 25%)")))
         (read_only
            {!
               [enabled]}))
      (anti_alias
         bool
         (alias
            "anti-aliasing")
         (help
            "Apply fast approximate anti-aliasing?")
         (read_only
            {!
               [enabled]}))
      (pixellate
         (indent
            (pixellate_enabled
               bool
               (help
                  "Enable pixellate effect"))
            (pixellate_amount
               float
               (alias
                  "pixel size")
               (help
                  "Amount of pixellation (0 turns off, higher values are pixel size)")
               (range 0 64)
               (slider)))
         (read_only
            {!
               [enabled]}))
      (Sense_Of_Speed
         (indent
            (sos_intensity
               float
               (alias
                  "Intensity")
               (range 0.0 1.0)
               (slider))
            (sos_color_xfm
               COLOR_XFM
               (alias
                  "Color"))
            (sos_color_xfm_ramp
               float
               (alias
                  "Color Ramp")
               (help
                  "Curve for color gradient, 0 turns off"))
            (exposure_flicker
               (indent
                  (sos_flicker_intensity
                     VECTOR2
                     (alias
                        "intensity")
                     (help
                        "Min and max intensity range [0..1], 0.0 to disable"))
                  (sos_flicker_secs_range
                     VECTOR2
                     (alias
                        "secs_range")
                     (help
                        "Min and max number of seconds for a light to dark cycle"))))
            (lens_effects
               (indent
                  (sos_lens_distortion_center
                     float
                     (alias
                        "distortion center")
                     (help
                        "Per channel lens distortion in the center of the screen. Small Negative numbers ie. -0.1 for barrel distortion and Small Positive numbers for pin cushion distortion")
                     (range -0.8 0.8)
                     (slider))
                  (sos_lens_distortion_top
                     float
                     (alias
                        "distortion vertical")
                     (help
                        "Per channel lens distortion at the top and bottom of the screen. Small Negative numbers ie. -0.1 for barrel distortion and Small Positive numbers for pin cushion distortion")
                     (range -0.8 0.8)
                     (slider))
                  (sos_lens_distortion_right
                     float
                     (alias
                        "distortion horizontal")
                     (help
                        "Per channel lens distortion at the left and right of the screen. Small Negative numbers ie. -0.1 for barrel distortion and Small Positive numbers for pin cushion distortion")
                     (range -0.8 0.8)
                     (slider))
                  (sos_lens_aberation_red_center
                     float
                     (alias
                        "aberation red center")
                     (help
                        "Amount of Green Chromatic Aberation in the center of the screen ")
                     (range 0.6 1.4)
                     (slider))
                  (sos_lens_aberation_blue_center
                     float
                     (alias
                        "aberation blue center")
                     (help
                        "Amount of Blue Chromatic Aberation in the center of the screen ")
                     (range 0.6 1.4)
                     (slider))
                  (sos_lens_aberation_red_edge
                     float
                     (alias
                        "aberation red edge")
                     (help
                        "Amount of Green Chromatic Aberation in the edge of the screen ")
                     (range 0.6 1.4)
                     (slider))
                  (sos_lens_aberation_blue_edge
                     float
                     (alias
                        "aberation blue edge")
                     (help
                        "Amount of Blue Chromatic Aberation in the edge of the screen ")
                     (range 0.6 1.4)
                     (slider))
                  (sos_lens_pre_scale
                     float
                     (alias
                        "distortion pre scale")
                     (help
                        "Pre distortion scale.  Used to eliminate oversampling")
                     (range 0.0 2.0)
                     (slider))
                  (sos_lens_post_scale
                     float
                     (alias
                        "distortion pre scale")
                     (help
                        "Pre distortion scale.  Used to eliminate oversampling")
                     (range 0.0 2.0)
                     (slider))
                  (sos_lens_lines_enabled
                     bool
                     (alias
                        "distortion preview lines")
                     (help
                        "Lines to help visualize lens distortion")))))
         (read_only
            {!
               [enabled]}))
      (accent
         (indent
            (accent_on
               bool
               (help
                  "Enable accent effect"))
            (accent_edge_thickness
               float
               (help
                  "How thick the accent line is.")
               (range 1.0e-3 8.0)
               (slider)
               (read_only
                  {!
                     [accent_on]}))
            (accent_color
               color
               (help
                  "The color of the edge of the accent.")
               (read_only
                  {!
                     [accent_on]}))
            (accent_flash_color
               color
               (help
                  "The color of the flash of the accent.")
               (read_only
                  {!
                     [accent_on]}))
            (accent_do_bloom
               bool
               (help
                  "Do we bloom the edge of the accent?")
               (read_only
                  {!
                     [accent_on]}))
            (accent_bloom_multiplier
               float
               (help
                  "How much the accent blooms [0, 4].")
               (range 0.0 10.0)
               (slider)
               (read_only
                  {!
                     [accent_on]}))
            (accent_intensity
               float
               (help
                  "Amount of accent [0, 1].")
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [accent_on]})))
         (read_only
            {!
               [enabled]}))
      (pre_layer_list_enabled
         bool
         (help
            "Is the Pre Layer List enabled?")
         (read_only
            {!
               [enabled]}))
      (pre_layer_list
         (array
            object
            (class PostProcLayer)
            (no_null))
         (help
            "The list of PostProcLayers that render before the PostProc")
         (read_only
            {!
               [enabled]}))))
(PostProcLayer
   (description
      "Layer of post proc")
   (superclasses MatBase)
   (category Graphics)
   (ext ppl)
   (allowed_dirs Scene UIScreen)
   (editor
      (enabled
         bool
         (help
            "If this layer will render or not."))
      (render_slot
         int
         (list PPLRENDERSLOT_ENUM)
         (alias
            "render slot")
         (help
            "When the layer renders."))))
(Tex
   (description
      "Tex objects represent bitmaps used by materials and render targets.")
   (ext tex)
   (allowed_dirs MatSpecDir ObjectDir Scene)
   (category Texture)
   (init
      {if
         {==
            [file_path]
            ''}
         {set
            [buffer_type]
            'Rendered (sRGB, No Z)'}})
   (editor
      (width
         int
         (range 1 8192)
         (read_only
            {==
               [buffer_type]
               Regular})
         (help
            "texel width")
         (no_test))
      (height
         int
         (range 1 8192)
         (read_only
            {==
               [buffer_type]
               Regular})
         (help
            "texel height")
         (no_test))
      (bpp
         int
         (list
            {$this list_allowed_bpp_values})
         (read_only
            {==
               [buffer_type]
               Regular})
         (help
            "bits per texel"))
      (buffer_type
         symbol
         (list
            {if_else
               {==
                  [buffer_type]
                  Regular}
               (Regular)
               ('Rendered (sRGB)' 'Rendered (sRGB, No Z)' 'Rendered (linear)' 'Rendered (linear, No Z)' 'Rendered Float' 'Rendered Float (No Z)' Scratch)}))
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary."))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled."))
      (file_path
         file
         (help
            "File where this bitmap came from")
         (hide propanim flow))))
(Tex1D
   (description
      "This class implements a 1D texture.")
   (category Graphics)
   (allowed_dirs MatSpecDir ObjectDir)
   (user_creatable FALSE)
   (editor
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary."))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled."))))
(TexArray
   (description
      "An array of 2D textures, used by specific materials where an atlas of textures is required")
   (ext texarr)
   (allowed_dirs MatSpecDir ObjectDir Scene)
   (category Texture)
   (editor
      (width
         int
         (help
            "Width of a single texture in the array")
         (read_only TRUE))
      (height
         int
         (help
            "Height of a single texture in the array")
         (read_only TRUE))
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary."))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled."))
      (update_from_path
         script
         (script
            {$this update_from_path})
         (help
            "Looks at the first texture in the array and goes through it's directory to load any textures in that array that fit the same pattern"))
      (files
         (array
            file
            (ext
               "Image files"
               "png"
               "bmp"))
         (help
            "The list of files (they must all have the same dimensions and format)")
         (hide propanim flow)
         (fixed_size TRUE)
         (read_only TRUE))
      (data_descriptor
         string
         (help
            "Descriptor string used by my texture array data resource")
         (read_only TRUE)
         (hide propanim flow)
         (tab debug))
      (data_path_name
         string
         (help
            "Path name used by my texture array data resource")
         (read_only TRUE)
         (hide propanim flow)
         (tab debug))))
(CubeTex
   (description
      "This class implements a cube map intended for environment mapping.")
   (category Graphics)
   (ext cube)
   (allowed_dirs MatSpecDir ObjectDir Entity Scene)
   (editor
      (right
         file
         (ext
            "Image files"
            "png"
            "bmp"))
      (left
         file
         (ext
            "Image files"
            "png"
            "bmp"))
      (top
         file
         (ext
            "Image files"
            "png"
            "bmp"))
      (bottom
         file
         (ext
            "Image files"
            "png"
            "bmp"))
      (back
         file
         (ext
            "Image files"
            "png"
            "bmp"))
      (front
         file
         (ext
            "Image files"
            "png"
            "bmp"))
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary."))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled."))))
(VolumeTex
   (description
      "This class implements a 3D volume texture.")
   (category Graphics)
   (ext voltex)
   (allowed_dirs MatSpecDir ObjectDir)
   (editor
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary."))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled."))
      (mesh
         object
         (class Mesh)
         (help
            "The mesh that will be voxelized into the texture")
         (no_test))
      (mip_levels
         int
         (help
            "Number of mip levels in addition to the base")
         (range 0 10))
      (blur
         script
         (group
            "Utilities")
         (script
            {$this blur})
         (help
            "Blurs with volume texture"))
      (create_noise_texture
         script
         (alias
            "Create Noise Texture")
         (group
            "Utilities")
         (script
            {$this set_dimensions 64 64 64}
            {$this generate_perlin_noise}
            {$this update})
         (help
            "Create a 3D perlin noise texture"))))
#define RNDTEXT_FONT_HIDE
((hide
      {do
         ($i
            {elem
               $editor_prop_path
               {-
                  {size $editor_prop_path}
                  2}})
         {!
            {&&
               [styles $i font_color_override]
               [styles $i font]}}}))
#define TEXT_FIT_TYPES
(("kFitWrap"
      (alias
         "Wrap")
      (help
         "Performs normal line wrapping if [width] is set"))
   ("kFitJust"
      (alias
         "Just Fit")
      (help
         "Shrinks the text until it fits within [width] and [height].  Note that this is a very expensive process, super slow, and so should never be used on dynamically changing text when in game"))
   ("kFitEllipsis"
      (alias
         "Ellipsis")
      (help
         "Constrains the text to one line of [width] with ellipses")))
#define TEXT_ALIGNMENTS
(("kTopLeft"
      (alias
         "Top Left")
      (help
         "Align text to the top (Y) left (X) of the rendering quad."))
   ("kTopCenter"
      (alias
         "Top Center")
      (help
         "Align text to the top (Y) center (X) of the rendering quad."))
   ("kTopRight"
      (alias
         "Top Right")
      (help
         "Align text to the top (Y) right (X) of the rendering quad."))
   ("kMiddleLeft"
      (alias
         "Middle Left")
      (help
         "Align text to the middle (Y) left (X) of the rendering quad."))
   ("kMiddleCenter"
      (alias
         "Middle Center")
      (help
         "Align text to the middle (Y) center (X) of the rendering quad."))
   ("kMiddleRight"
      (alias
         "Middle Right")
      (help
         "Align text to the middle (Y) right (X) of the rendering quad."))
   ("kBottomLeft"
      (alias
         "Bottom Left")
      (help
         "Align text to the bottom (Y) left (X) of the rendering quad."))
   ("kBottomCenter"
      (alias
         "Bottom Center")
      (help
         "Align text to the bottom (Y) center (X) of the rendering quad."))
   ("kBottomRight"
      (alias
         "Bottom Right")
      (help
         "Align text to the bottom (Y) right (X) of the rendering quad.")))
#define TEXT_CAPS_MODES
(("kCapsModeNone"
      (alias
         "None")
      (help
         "Leave the text as is"))
   ("kForceLower"
      (alias
         "Lower case")
      (help
         "Force text to all lower case"))
   ("kForceUpper"
      (alias
         "Upper case")
      (help
         "Force text to all upper case")))
#define TEXT_UV_MAPPINGS
((("kTextUVMapping_Char"
         (alias
            "Per-Character")
         (help
            "Each character gets the full 0-1 UV span"))
      ("kTextUVMapping_Line_Continuous"
         (alias
            "Per-Line (Continuous)")
         (help
            "U covers the full horizontal span of the entire block of text; V runs 0-1 for each character"))
      ("kTextUVMapping_Line_Discrete"
         (alias
            "Per-Line (Discrete)")
         (help
            "U covers the full horizontal span of the entire block of text, using the same U value for the entire character; V runs 0-1 for each character"))
      ("kTextUVMapping_Full_Continuous"
         (alias
            "Full Text (Continuous)")
         (help
            "UV covers the full horizontal and vertical span of the entire block of text"))
      ("kTextUVMapping_Full_Discrete"
         (alias
            "Full Text (Discrete)")
         (help
            "UV covers the full horizontal and vertical span of the entire block of text, using the same UV value for the entire character"))))
(Text
   (description
      "A Text object draws a 3D character string.")
   (category UI)
   (allowed_dirs UILabelDir)
   (superclasses Draw Trans)
   (ext txt)
   (editor
      (text
         string
         (help
            "Text value")
         (encoding utf8)
         (no_test))
      (align
         int
         (list
            (TEXT_ALIGNMENTS))
         (help
            "Alignment option for the text"))
      (caps_mode
         int
         (list
            (TEXT_CAPS_MODES))
         (help
            "Defines the CAPS mode for the text"))
      (uv_mapping
         int
         (list TEXT_UV_MAPPINGS)
         (help
            "Determines how the second UV set is mapped for this text (only useful when using an override material)"))
      (width
         float
         (range 0 10000)
         (help
            "Width of text until it wraps"))
      (height
         float
         (range 0 1000)
         (help
            "Height of the text, used for [fit_type] kFitJust"))
      (leading
         float
         (range -5 5)
         (help
            "Vertical distance between lines"))
      (fixed_length
         int
         (range 0 500)
         (help
            "Number of character maximum for the text, if non-zero makes underlying mesh mutable, so updates are faster"))
      (markup
         bool
         (help
            "Support markup or not.  In the text, use <alt>, <alt2>, <alt3>, etc to use the higher styles, <sup> to get a super script, <nobreak> for preventing linebreaks in a block, <it> for italics, <gtr> for Bryn's guitar chord formatting.  Example: Hit <it>Back</it> <alt>B</alt> to continue<sup>TM</sup> "))
      (fit_type
         int
         (list
            (TEXT_FIT_TYPES))
         (help
            "How to fit text in the width/height specified"))
      (fitjust_lowerbound
         float
         (help
            "Lower Bound for fitjust fit type (if under this value, ellipses will be used)"))
      (styles
         (array
            (struct
               (font
                  object
                  (class Font)
                  (help
                     "Font to use for this style")
                  (no_test))
               (mat_override
                  object
                  (class Mat)
                  (list
                     {list_allowed_mats $this})
                  (help
                     "Material to use when rendering this label; it should use a shadergraph with the FontMap node"))
               (size
                  float
                  (range 1.0e-3 1000)
                  (help
                     "Size of the text"))
               (text_color
                  color
                  (help
                     "Color of the text, put into mesh verts.  Modifed by <color=r,g,b,a> markup .  This will only work if the font mat has [prelit] set true and [use_environment] set false"))
               (text_alpha
                  float
                  (range 0 1)
                  (help
                     "Alpha value of the text, put into mesh verts.  This will only appear if the font mat has [prelit] set true"))
               (font_color_override
                  bool
                  (help
                     "If true, and if there's a font, you can change color and alpha during the draw"))
               (font_color
                  color
                  (help
                     "Color of the font during draw, can be changed dynamically")
                  (read_only
                     {!
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling mat_override}}}})
                  RNDTEXT_FONT_HIDE)
               (font_alpha
                  float
                  (range 0 1)
                  (help
                     "Alpha value of the font, can be changed dynamically")
                  (read_only
                     {!
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling mat_override}}}})
                  RNDTEXT_FONT_HIDE)
               (italics
                  float
                  (range -5 5)
                  (help
                     "Defines the slant of the text, changed by <it> tag"))
               (kerning
                  float
                  (help
                     "Extra kerning for the text"))
               (z_offset
                  float
                  (help
                     "vertical offset as fraction of size"))))
         (help
            "The different styles this text can have"))
      (spline_defn
         object
         (class Spline)
         (help
            "An optional spline definition that the text can follow")
         (alias
            "Spline Definition"))))
(Trans
   (description
      "Base class for transformable objects. Trans objects have\n        a 3D position, rotation, and scale.")
   (category Graphics)
   (group Transform)
   (allowed_dirs Scene Entity UIScreen Flow)
   (converts_to Marker)
   (ext trans)
   (editor
      (trans_parent
         object
         (class Trans)
         (alias
            "parent")
         (hide
            {==
               [trans_constraint]
               kConstraintUI2D})
         (list
            {$this get_trans_parent_list})
         (default
            [default_trans_parent])
         (help
            "Object this is linked to")
         (instance_prop))
      (actual_trans_parent
         object
         (class Trans)
         (read_only TRUE)
         (tab debug))
      (trans_constraint
         int
         (alias
            "constraint")
         (hide
            {==
               [trans_constraint]
               kConstraintPhysicsDriven})
         (list
            {$this get_trans_constraint_list})
         (help
            "Trans constraint for the object.")
         (instance_prop)
         (no_test)
         (record_all))
      (trans_target
         object
         (class Trans)
         (alias
            "target")
         (hide
            {'||'
               {==
                  [trans_constraint]
                  kConstraintPhysicsDriven}
               {==
                  [trans_constraint]
                  kConstraintUI2D}})
         (list
            {$this get_trans_constraint_target_list})
         (help
            "Target according to the constraint.")
         (instance_prop)
         (no_test))
      (preserve_scale
         bool
         (read_only
            {==
               {$this supports_preserve_scale}
               0})
         (hide
            {==
               [trans_constraint]
               kConstraintPhysicsDriven})
         (help
            "Preserve scale when using 'Look at target', 'Z billboard', 'XZ billboard' and 'XYZ billboard' constraints.")
         (instance_prop)
         (no_test))
      (local_xfm
         (struct
            (pitch
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsFixed kTransFlagsLocked2D}}))
            (roll
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (yaw
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsFixed kTransFlagsLocked2D}}))
            (x_scale
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsLockedScale kTransFlagsUniformOnly}}))
            (y_scale
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsLockedScale kTransFlagsUniformOnly}}))
            (z_scale
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsLockedScale kTransFlagsUniformOnly}}))
            (x
               float
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (y
               float
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsFixed kTransFlagsLocked2D}}))
            (z
               float
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed})))
         (help
            "The local transform of this object.")
         (tab debug)
         (read_only
            {&
               [trans_flags]
               kTransFlagsFixed})
         (poll)
         (no_test)
         (instance_prop)
         (alias
            "Local Transform"))
      (world_xfm
         (struct
            (pitch
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (roll
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (yaw
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (x_scale
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsLockedScale kTransFlagsLocalNonUniformOnly}}))
            (y_scale
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsLockedScale kTransFlagsLocalNonUniformOnly}}))
            (z_scale
               float
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     {'|' kTransFlagsLockedScale kTransFlagsLocalNonUniformOnly}}))
            (x
               float
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (y
               float
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (z
               float
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed}))
            (readable_token
               string
               (alias
                  "link")
               (no_test)
               (read_only
                  {&
                     [trans_flags]
                     kTransFlagsFixed})))
         (help
            "The world transform of this object.")
         (poll)
         (hide propanim)
         (tab debug)
         (read_only
            {&
               [trans_flags]
               {'|' kTransFlagsFixed kTransFlagsLocked2D}})
         (no_test)
         (instance_prop)
         (alias
            "World Transform"))
      (world_direction
         VECTOR3
         (help
            "y axis direction in world space")
         (read_only TRUE))
      (refresh_xfms
         script
         (script
            {do
               {set $noop 0}})
         (tab debug)
         (help
            "Refresh local/world xfms"))
      (fix_xfm
         script
         (script
            {$this fix_xfm})
         (tab debug)
         (help
            "Fixes transform to adhere to any trans_flags that have been set"))
      (trans_flags
         bitfield
         (list TRANS_FLAGS)
         (alias
            "Options")
         (read_only TRUE)
         (hide propanim flow)
         (tab debug)
         (help
            "Trans flags for the object describe what kind of trans operations the we can make on it in game and edit mode."))
      (position
         VECTOR3
         (propanim_type vector3 trans_pos)
         PROPANIM_ONLY
         (read_only
            {&
               [trans_flags]
               kTransFlagsFixed})
         (instance_prop))
      (rotation
         QUAT
         (propanim_type quat trans_quat)
         PROPANIM_ONLY
         (read_only
            {&
               [trans_flags]
               kTransFlagsFixed})
         (instance_prop))
      (scale
         VECTOR3
         (propanim_type vector3 trans_scale)
         PROPANIM_ONLY
         (read_only
            {&
               [trans_flags]
               kTransFlagsLockedScale})
         (instance_prop)))
   (events_in
      (set_uniform_scale
         (help
            "Sets the x, y, and z scales equally.")
         (editor
            (scale
               float
               (help
                  "Scale value."))))
      (set_trans_parent
         (editor
            (new_parent
               object
               (class Trans)
               (help
                  "Object to parent to"))
            (recalc
               bool
               (help
                  "Recalculate local world transform?")))
         (help
            "Allows you to set the trans parent without recalculating the local transform"))
      (reset_xfm
         (help
            "Reset transform to identity"))
      (copy_world_trans_from
         (editor
            (trans_to_copy
               object
               (class Trans)
               (help
                  "Trans to copy pos/rot from"))
            (copy_onto_local
               bool
               (default FALSE)
               (help
                  "Do we copy the world transform onto our local transform? (default is false)")))
         (help
            "Copy the full position, rotation, and scale from another trans onto this trans"))
      (copy_world_pos_from
         (editor
            (trans_to_copy
               object
               (class Trans)
               (help
                  "Trans to copy position from")))
         (help
            "Copy the position from another trans onto this trans")))
   (events_out
      (trans_modified
         (help
            "Sent when Trans has been modified; only sent in tool builds or when MessageOnDirtyCom is added!"))))
(TransProxy
   (description
      "Stand-in for a RndTransformable inside of a proxy, so you can use it")
   (category Control)
   (superclasses Trans)
   (test_superclasses FALSE)
   (allowed_dirs Scene Entity)
   (ext tp)
   (editor
      (proxy
         object
         (class Instance)
         (help
            "Instance this will look into."))
      (part
         symbol
         (list
            {object_list
               [proxy]
               Trans
               TRUE
               $this})
         (help
            "The part inside it"))))
(MeshDeform
   (description
      "Reskins target mesh according to exobones.")
   (category Character)
   (superclasses)
   (ext deform)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "The mesh we will change, set you can make a zero vert meshdeform just to clean up mutable character meshes"))
      (num_verts
         int
         (help
            "How many verts it holds")
         (read_only TRUE))
      (num_bones
         int
         (help
            "How many bones it holds")
         (read_only TRUE))))
(Wind
   (description
      "Object representing blowing wind, CharHair and Fur can point at them.")
   (category Character)
   (superclasses)
   (ext wind)
   (editor
      (prevailing
         VECTOR3
         (help
            "Prevailing wind in units/sec, along each world space axis, adds to random component, 1 mph == 17 inches/sec == .5 meter/sec"))
      (random
         VECTOR3
         (help
            "Random wind speed in units/sec, along each world axis, adds to prevailing wind, 1 mph == 17 inches/sec == .5 meter/sec"))
      (time_loop
         float
         (help
            "how long in seconds before the wind loops, 50 is a nice default"))
      (space_loop
         float
         (help
            "how far in units before the wind loops, 100 is a nice default"))
      (min_speed
         float
         (help
            "Minimum total wind speed"))
      (max_speed
         float
         (help
            "Maximum total wind speed"))
      (trans
         object
         (class Trans)
         (help
            "If set, transforms wind by this transform."))
      (about_z
         bool
         (class Trans)
         (read_only
            {!
               [trans]})
         (help
            "If set, rotates wind about z axis of [trans], like a tornado"))
      (wind_owner
         object
         (class Wind)
         (help
            "Wind owner for the wind, properties shown are not for the owner, however, you must edit it directly")
         (no_null)
         (allow_this)
         (no_test))
      (set_defaults
         script
         (help
            "set defaults for outside")
         (script
            {$this set_defaults}))
      (set_zero
         script
         (help
            "zero out the wind")
         (script
            {$this set_zero}))))
(Spline
   (description
      "Cubic spline")
   (category Control)
   (allowed_dirs Entity Scene UIScreen)
   (superclasses Trans)
   (ext spline)
   (editor
      (num_control_points
         int
         (range 0 200)
         (alias
            "Number of Control Points")
         (hide propanim flow)
         (record_all))
      (control_points
         (array
            (struct
               (local_xfm
                  TRANSFORM
                  (alias
                     "Local Transform")
                  (help
                     "Control Point transform (realtive to the Spline's main transform)."))
               (roll
                  float
                  (alias
                     "Roll")
                  (help
                     "This specifies the number of degrees around the curve to rotate at this point."))))
         (hide propanim flow))
      (is_looped
         bool
         (alias
            "Loop?")
         (help
            "If this is set, then the curve will loop back in on itself at the end.  NOTE: A Spline with only 2 control points cannot loop (workaround: add another control point).")
         (read_only
            {<=
               [num_control_points]
               2})
         (hide propanim flow))
      (length
         float
         (alias
            "Length")
         (read_only TRUE)
         (help
            "Length of the spline in world coordinates"))
      (reverse_control_points
         script
         (group 'Spline Utilities')
         (script
            {$this reverse_control_points})
         (hide propanim flow)
         (help
            "Reverse the order of the control points"))
      (make_offset_spline_settings
         (indent
            (make_offset_spline_src
               object
               (class Spline)
               (alias
                  "source spline"))
            (make_offset_spline_offset
               float
               (alias
                  "offset"))
            (make_offset_spline_world
               bool
               (alias
                  "world-space?"))
            (make_offset_spline_go
               script
               (alias
                  "go")
               (help
                  "Offset from another spline")
               (script
                  {$this
                     make_offset_spline
                     [make_offset_spline_src]
                     [make_offset_spline_offset]
                     [make_offset_spline_world]})
               (read_only
                  {!
                     [make_offset_spline_src]})))
         (group 'Spline Utilities')
         (alias
            "Make Offset Spline")
         (help
            "Offset from another spline")))
   (events_in
      (place_at_closest_point_on_spline
         (editor
            (compare_trans
               object
               (class Trans))
            (place_trans
               object
               (class Trans))))))
(SplineControlPoint
   (description
      "Spline Control Point")
   (category Control)
   (allowed_dirs)
   (editor
      (local_xfm
         TRANSFORM
         (alias
            "Local Transform")
         (help
            "Control Point transform (relative to the Spline's main transform)."))
      (roll
         float
         (alias
            "Roll")
         (help
            "This specifies the number of degrees around the curve to rotate at this point."))))
(MatSpecDir
   (description
      "A MatSpecDir is used to set up the MatSpec resource file for a given project.")
   (category Material)
   (superclasses ObjectDir)
   (unique_allowed_dir)
   (editor
      (default_matspec
         object
         (class MatSpec)
         (list
            {$this get_matspec_list})
         (alias
            "default MatSpec")
         (help
            "Default MatSpec used for newly created materials, and materials exported from Max.")
         (disk_prop))
      (tex_prev
         (array
            (struct
               (name
                  symbol
                  (help
                     "property name of texture"))
               (path
                  file
                  (help
                     "path to texture to use")))))))
(MatSpec
   (description
      "Material template with only the most basic options")
   (category Material)
   (allowed_dirs MatSpecDir)
   (superclasses)
   (ext mspec)
   (editor
      (cull_mode
         int
         (list CULL_ENUM)
         (group 'Render State')
         (help
            "Which polygons to cull")
         (hide
            {$this hide_props}))
      (z_mode
         int
         (list ZMODE_ENUM)
         (group 'Render State')
         (help
            "How to read and write z-buffer")
         (hide
            {$this hide_props}))
      (alpha_cut
         bool
         (group 'Render State')
         (help
            "Enable alpha cut?")
         (hide
            {$this hide_props}))
      (alpha_cut_thresh
         float
         (range 0.0 1.0)
         (slider)
         (group 'Render State')
         (help
            "Alpha threshold value below which pixels will get cut")
         (read_only
            {!
               [alpha_cut]})
         (hide
            {$this hide_props}))
      (blend_mode
         int
         (list BLEND_ENUM)
         (group 'Render State')
         (help
            "How to blend poly into screen")
         (hide
            {$this hide_props}
            propanim
            flow))
      (bucket
         int
         (list BUCKET_ENUM)
         (group 'Render State')
         (help
            "Special cases for controlling rendering order")
         (hide
            {$this hide_props}))
      (stencil_mode
         int
         (list STENCILMODE_ENUM)
         (group 'Render State')
         (help
            "How to read and write the stencil buffer")
         (hide
            {$this hide_props}))
      (crepusculate
         bool
         (group 'Render State')
         (help
            "Should this object emit crepuscular rays?")
         (hide
            {$this hide_props}))
      (clip_plane
         object
         (class Trans)
         (group 'Render State')
         (help
            "Optional clip plane to clip geometry (clipping by the local Z-axis of the trans)")
         (hide
            {$this hide_props}))
      (color
         color
         (group Diffuse)
         (help
            "Base material color")
         (hide
            {$this hide_props}))
      (alpha
         float
         (group Diffuse)
         (help
            "Base material color alpha channel")
         (range 0.0 1.0)
         (slider)
         (hide
            {$this hide_props}))
      (diffuse_tex
         object
         (class Tex)
         (group Diffuse)
         (help
            "Base texture map, modulated with color and alpha")
         (hide
            {$this hide_props}))
      (geom_usage_flags
         bitfield
         (list MAT_GEOM_FLAGS)
         (alias
            "geom usage")
         (help
            "Precache hints for intended geometry usage of this MatSpec.")
         (hide
            {$this hide_props}
            flow
            propanim))
      (shader_geom_usage_flags
         bitfield
         (list MAT_SHADER_GEOM_FLAGS)
         (alias
            "shader geom usage")
         (help
            "Shader-facting geometry usage flags")
         (read_only TRUE)
         (tab debug)
         (hide
            {$this hide_props}))
      (utility
         (indent
            (prototype
               bool
               (help
                  "Flag this as only used for prototyping, in which case:\n* Materials using this MatSpec will be able to select None textures\n* Shaders for this MatSpec will not be precached (so no disc builds)\n* You will get notifies for any Materials using this MatSpec.")
               (hide
                  {$this hide_props}
                  flow
                  propanim))
            (precache_shaders
               bool
               (help
                  "Uncheck this to completely exclude from shader precache")
               (hide
                  {$this hide_props}
                  flow
                  propanim))
            (cache_preinit_shaders
               bool
               (help
                  "Check this to indicate that this MatSpec is used at pre-init time (ie. for modal/splashing)")
               (read_only
                  {!
                     [precache_shaders]})
               (hide
                  {$this hide_props}
                  flow
                  propanim))
            (reload_shaders
               script
               (script
                  {handle
                     ($this reload_shaders)})
               (help
                  "Reload all shaders for materials using this mat-spec."))
            (num_vs_combos
               int
               (read_only TRUE)
               (help
                  "Number of vertex-shader combinations that will be generated in precache"))
            (num_ps_combos
               int
               (read_only TRUE)
               (help
                  "Number of pixel-shader combinations that will be generated in precache"))
            (cost_estimate_name
               symbol
               (alias
                  "cost estimate config")
               (no_test)
               (help
                  "Configuration upon which to base cost estimates.")
               (list
                  {$this get_cost_estimate_names})
               (hide
                  {$this hide_props}
                  flow
                  propanim))
            (compiled_vs_size
               int
               (read_only TRUE)
               (no_test)
               (tab debug)
               (help
                  "Size in bytes of the compiled vertex shader for this set of options"))
            (compiled_ps_size
               int
               (read_only TRUE)
               (no_test)
               (tab debug)
               (help
                  "Size in bytes of the compiled pixel shader for this set of options")))
         (help
            "Material debugging excellence."))
      (print_mat_objdef
         script
         (script
            {handle
               ($this print_mat_objdef)})
         (help
            "Print the DTA object definition for materials using this matspec")
         (tab debug)
         (no_test))
      (print_matspec_objdef
         script
         (script
            {handle
               ($this print_matspec_objdef)})
         (help
            "Print the DTA object definition for this matspec class")
         (tab debug)
         (no_test))))
(MatSpecFastCheap
   (description
      "Material template which provides fast + cheap lighting, mostly appropriate for debug graphics.")
   (category Material)
   (superclasses MatSpec)
   (allowed_dirs MatSpecDir)
   (ext mspec)
   (editor))
(MatSpecStd
   (description
      "Material template with standard lighting options")
   (category Material)
   (superclasses MatSpec)
   (allowed_dirs MatSpecDir)
   (ext mspec)
   (editor
      (lit
         bool
         (group Material)
         (help
            "Use lighting (if unchecked, material is purely emissive)."))
      (lighting_model
         int
         (list LIGHTING_MODEL_ENUM)
         (group Material)
         (help
            "Lighting model to use"))
      (use_vertex_color
         bool
         (group Material)
         (help
            "Use mesh vertex color (will modulate with the material diffuse color and alpha channel)."))
      (soft_depth
         bool
         (group 'Render State')
         (help
            "For SrcAlpha and SrcAlphaAdd blended materials, enable/disable fading alpha based on depth."))
      (soft_depth_distance
         float
         (group 'Render State')
         (help
            "For SrcAlpha blended materials, enable/disable fading alpha based on depth.")
         (range 0.0 100.0)
         (slider)
         (read_only
            {!
               [soft_depth]}))
      (tex_xfm_enabled
         bool
         (group 'Tex Xfm')
         (help
            "Enable/disable texture coordinate transformation."))
      (tex_xfm
         TRANSFORM
         (group 'Tex Xfm')
         (help
            "Texture coordinate transformation.")
         (read_only
            {!
               [tex_xfm_enabled]}))
      (tex_detail_tiling
         float
         (group 'Tex Xfm')
         (help
            "Texture tiling scale for any and all detail maps."))
      (diffuse_intensify
         bool
         (group Diffuse)
         (alias
            "intensify?")
         (help
            "Enables the diffuse lighting intensity multiplier."))
      (diffuse_intensity_mult
         float
         (group Diffuse)
         (alias
            "intensity mult")
         (help
            "Multiplier to increase or decrease diffuse lighting (1 is neutral, < 1 diminishes, > 1 exaggerates) (0 to 100).")
         (range 0.0 100.0)
         (slider)
         (read_only
            {!
               [diffuse_intensify]}))
      (diffuse_detail_map
         object
         (class Tex)
         (group Diffuse)
         (help
            "Diffuse detail texture; multiplied with the diffuse texture.")
         (read_only
            {!
               [diffuse_tex]}))
      (emissive_map
         object
         (class Tex)
         (group Emissive)
         (help
            "Map for self illumination."))
      (emissive_mult
         float
         (group Emissive)
         (help
            "Multiplier to apply to emissive map.")
         (read_only
            {!
               [emissive_map]}))
      (normal_map
         object
         (class Tex)
         (list
            {list_normal_map_textures $this})
         (group 'Normal Map')
         (help
            "Texture map to define lighting normals (per-pixel only)."))
      (normal_map_strength
         float
         (group 'Normal Map')
         (help
            "Strength of the normal map bumpiness (1 is neutral, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
         (range 1.0e-2 10.0)
         (slider)
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [normal_map]}}))
      (norm_detail_map
         object
         (class Tex)
         (list
            {list_normal_map_textures $this})
         (group 'Normal Map')
         (help
            "Detail map texture")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [normal_map]}}))
      (norm_detail_strength
         float
         (group 'Normal Map')
         (help
            "Strength of the detail map bumpiness (1 is neutral, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
         (range 1.0e-2 10.0)
         (slider)
         (read_only
            {'||'
               {!
                  [lit]}
               {'||'
                  {!
                     [normal_map]}
                  {!
                     [norm_detail_map]}}}))
      (specular_enabled
         bool
         (group Specular)
         (help
            "Enable/disable specularity in the lighting calculation."))
      (specular_color
         color
         (group Specular)
         (help
            "Specular color. If a specular texture is present, this color is multiplied by the specular texture RGB color.")
         (read_only
            {!
               [specular_enabled]}))
      (specular_power
         float
         (group Specular)
         (help
            "This is the maximum level of 'shininess' of the surface; higher numbers represent a shinier surface. If a specular texture is present, this value is multiplied by the specular texture alpha channel.")
         (read_only
            {!
               [specular_enabled]})
         (range 0.5 100.0)
         (slider))
      (specular_map
         object
         (class Tex)
         (group Specular)
         (help
            "Texture map for specular color (RGB channels) and glossiness (Alpha channel). Requires per-pixel lighting.")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [specular_enabled]}}))
      (rim_light_enabled
         bool
         (group 'Rim Lighting')
         (help
            "Enable/disable rim lighting"))
      (rim_color
         color
         (group 'Rim Lighting')
         (help
            "Rim lighting color; if a rim map is present, this color is multiplied by the rim texture RGB color")
         (read_only
            {!
               [rim_light_enabled]})
         (read_only
            {'||'
               {!
                  [rim_light_enabled]}
               {!
                  [lit]}}))
      (rim_power
         float
         (group 'Rim Lighting')
         (help
            "Rim lighting power; this is the sharpness of the wrap-around effect; higher numbers result in a sharper rim lighting effect; if a rim texture is present, this value is multiplied by the rim texture alpha channel")
         (range 0.5 100.0)
         (slider)
         (read_only
            {'||'
               {!
                  [rim_light_enabled]}
               {!
                  [lit]}}))
      (rim_map
         object
         (class Tex)
         (group 'Rim Lighting')
         (alias
            "rim map")
         (help
            "Texture map that defines the rim lighting color (in the RGB channels) and power (in the Alpha channel).")
         (read_only
            {'||'
               {!
                  [rim_light_enabled]}
               {!
                  [lit]}}))
      (subsurface_color
         color
         (group 'Subsurface Scattering')
         (help
            "Subsurface color; the color that appears when the light is pointing towards the eye")
         (read_only
            {!=
               [lighting_model]
               kMatLightingModel_Subsurface}))
      (subsurface_opacity
         float
         (group 'Subsurface Scattering')
         (help
            "Overall multiplier for opacity in subsurface scattering")
         (range 0.0 1.0)
         (slider)
         (read_only
            {!=
               [lighting_model]
               kMatLightingModel_Subsurface}))
      (subsurface_map
         object
         (class Tex)
         (group 'Subsurface Scattering')
         (help
            "Texture map which defines the subsurface color (in the RGB channels) and the amount of opacity (in the alpha channel)")
         (read_only
            {!=
               [lighting_model]
               kMatLightingModel_Subsurface}))
      (bloom_enabled
         bool
         (group Bloom)
         (help
            "Enable/disable writing bloom for this material (NOTE currently bloom only works with deferred-shading)"))
      (bloom_mult
         float
         (group Bloom)
         (help
            "Amount to adjust bloom for this material by (1 is normal, 0 means no bloom, greater than 1 means extra-bloom).")
         (range 0.0 4.0)
         (slider)
         (read_only
            {!
               [bloom_enabled]}))
      (fog_mult
         float
         (group Material)
         (help
            "Controls how much fog is applied to this material (< 1 for less fog, > 1 for more fog)")
         (range 0.0 2.0)
         (slider))
      (tessellation_enabled
         bool
         (group Tessellation)
         (help
            "Enable/disable tessellation shading stages (dx11-only)"))
      (tessellation_partitioning_fractional_
         bool
         (group Tessellation)
         (help
            "Enable/disable fractional partitioning tessellation (dx11-only)"))
      (tessellation_triangle_size
         float
         (group Tessellation)
         (help
            "Desired pixel size for a tessellated triangle")
         (range 1.0 2000.0)
         (read_only
            {!
               [tessellation_enabled]}))
      (tessellation_silhouette_mult
         float
         (group Tessellation)
         (help
            "Silhouette tessellation multiplier")
         (range 1.0 8.0)
         (slider))
      (displacement_map
         object
         (class Tex)
         (group Displacement)
         (help
            "Displacement map (rgb channels give the surface normal perturbation, alpha gives the displacement magnitude)"))
      (displacement_strength
         float
         (group Displacement)
         (help
            "Strength of the displacement map (0 for no displacement, < 0 inverts, < 1 diminishes, > 1 amplifies)")
         (range -100.0 100.0)
         (slider)
         (read_only
            {!
               [displacement_map]}))
      (displacement_uv_seam_sharpness
         float
         (group Displacement)
         (help
            "Sharpness (slope) of the transition to zero displacement at UV seams (1 = min sharpness)")
         (range 1.0 20.0)
         (slider)
         (read_only
            {!
               [displacement_map]}))
      (uses_directional_light
         bool
         (group 'Forward Shading Usage')
         (help
            "Use a real directional light for forward-shaded lighting?")
         (read_only
            {!
               [lit]}))
      (uses_shadows
         bool
         (group 'Forward Shading Usage')
         (help
            "Receive shadows from forward-shaded lighting?")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [uses_directional_light]}}))
      (max_point_lights_used
         int
         (group 'Forward Shading Usage')
         (help
            "Maximum number of real point-lights used for forward-shaded lighting.")
         (range 0 2)
         (read_only
            {!
               [lit]}))
      (uses_approx_lights
         bool
         (group 'Forward Shading Usage')
         (alias
            "uses approximated lights?")
         (help
            "Use approximated lights for forward-shaded lighting?")
         (read_only
            {!
               [lit]}))
      (uses_fog
         bool
         (group 'Forward Shading Usage')
         (help
            "Use forward-shaded fog?"))))
(MatSpecDecal
   (description
      "Material template for rendering projected decals")
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (writes_diffuse
         bool
         (group Decal)
         (help
            "Should this decal write diffuse material color? (if blend mode Src, we'll also write bloom multiplier)"))
      (writes_specular
         bool
         (group Decal)
         (help
            "Should this decal write specular material information? (specular gloss will not be written unless blend mode is Src)"))
      (writes_emissive
         bool
         (group Decal)
         (help
            "Should this decal write emissive material color?"))
      (writes_normals
         bool
         (group Decal)
         (help
            "Should this decal write surface normal information?"))))
(MatSpecFlipBook
   (description
      "Material template which provides texture-array-based texture flip-booking")
   (category Material)
   (superclasses MatSpecStd MatSpec)
   (allowed_dirs MatSpecDir)
   (ext mspec)
   (editor
      (flip_book_index
         float
         (group 'Tex Xfm')
         (help
            "Current index in any flip-booked textures"))
      (diffuse_flip_book
         object
         (class TexArray)
         (group Diffuse)
         (help
            "Flip-book of textures to use for the diffuse map"))))
#define kRefractAtGrazingAngles
(0)
#define kRefractAtDirectAngles
(1)
#define REFRACTION_FUNC_ENUM
((("kRefractAtGrazingAngles"
         (alias
            "Refract at Grazing Angles")
         (help
            "Maximum distortion at grazing angles, no distortion at direct angles"))
      ("kRefractAtDirectAngles"
         (alias
            "Refract at Direct Angles")
         (help
            "Maximum distortion at direct angles, no distortion at grazing angles"))))
(MatSpecRefractReflect
   (description
      "Material template for rendering refraction and reflection effects")
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (refraction_enabled
         bool
         (group Refraction)
         (alias
            "Refraction Enabled")
         (help
            "Enable/disable refraction effects"))
      (refraction_func
         int
         (list REFRACTION_FUNC_ENUM)
         (group Refraction)
         (alias
            "Refraction Function")
         (help
            "Controls how the refraction function behaves")
         (read_only
            {!
               [refraction_enabled]}))
      (refraction_color
         color
         (group Refraction)
         (alias
            "Refraction Color")
         (help
            "Tint applied to the refracted light")
         (read_only
            {!
               [refraction_enabled]}))
      (refraction_strength
         float
         (group Refraction)
         (alias
            "Refraction Strength")
         (help
            "How strong the refraction effect is; at zero, there should be no distortion")
         (range 0.0 1000.0)
         (read_only
            {!
               [refraction_enabled]}))
      (refraction_map
         object
         (class Tex)
         (group Refraction)
         (alias
            "Refraction Map")
         (help
            "The color channels multiply with Refraction Color, the alpha channel multiplies with Refraction Strength")
         (read_only
            {!
               [refraction_enabled]}))
      (reflection_enabled
         bool
         (group Reflection)
         (alias
            "Reflection Enabled")
         (help
            "Enable/disable reflection effects"))
      (reflection_source
         object
         (class Reflection)
         (group Reflection)
         (alias
            "Reflection Source")
         (help
            "The reflection object which is the source for the reflection")
         (read_only
            {!
               [reflection_enabled]}))
      (reflection_tint
         color
         (group Reflection)
         (alias
            "Reflection Tint")
         (help
            "Tint applied to the reflected light")
         (read_only
            {!
               [reflection_enabled]}))
      (reflection_falloff
         float
         (group Reflection)
         (alias
            "Reflection Falloff")
         (help
            "How sharply to fade out the reflection at grazing angles (with respect to the reflection plane normal)")
         (read_only
            {!
               [reflection_enabled]})
         (range 0.0 100.0))
      (reflection_distortion
         bool
         (group Reflection)
         (alias
            "Reflection Distortion")
         (help
            "Enable/disable distortion of the reflection based on deviation of the surface normal from the reflection plane normal")
         (read_only
            {!
               [reflection_enabled]}))
      (reflection_distortion_strength
         float
         (group Reflection)
         (alias
            "Reflection Distortion Strength")
         (help
            "Strength of the reflection distortion")
         (read_only
            {'||'
               {!
                  [reflection_enabled]}
               {!
                  [reflection_distortion]}}))
      (reflection_position_adjust
         bool
         (group Reflection)
         (alias
            "Reflection Position Adjust")
         (help
            "Enable/disable reflection adjustment based on position offset from the reflection plane")
         (read_only
            {!
               [reflection_enabled]}))
      (reflection_focus_target
         object
         (class Trans)
         (group Reflection)
         (alias
            "Reflection Focus Target")
         (help
            "When adjusting for position offset from the reflection plane, the offset amount is made assuming all reflected objects are at the distance determined by the focus target")
         (read_only
            {'||'
               {!
                  [reflection_enabled]}
               {!
                  [reflection_position_adjust]}}))))
#define kMatSpecStdBlended_TexMapping_Std
(0)
#define kMatSpecStdBlended_TexMapping_WorldProjection
(1)
#define MATSPECSTDBLENDED_TEXMAPPING
((("kMatSpecStdBlended_TexMapping_Std"
         (alias
            "Standard")
         (help
            "Standard vertex texture coordinates are used."))
      ("kMatSpecStdBlended_TexMapping_WorldProjection"
         (alias
            "World Projection")
         (help
            "Texture coordinates are projected in world space."))))
#define kMatSpecStdBlended_CombineMode_Blend
(0)
#define kMatSpecStdBlended_CombineMode_Mult
(1)
#define kMatSpecStdBlended_CombineMode_Add
(2)
#define kMatSpecStdBlended_CombineMode_Subtract
(3)
#define MATSPECSTDBLENDED_COMBINEMODE
((("kMatSpecStdBlended_CombineMode_Blend"
         (alias
            "Blend")
         (help
            "Colors are weighted based on opacity."))
      ("kMatSpecStdBlended_CombineMode_Mult"
         (alias
            "Multiply")
         (help
            "Colors are multiplied."))
      ("kMatSpecStdBlended_CombineMode_Add"
         (alias
            "Add")
         (help
            "Colors are added."))
      ("kMatSpecStdBlended_CombineMode_Subtract"
         (alias
            "Subtract")
         (help
            "Secondary is subtracted from primary."))))
#define kMatSpecStdBlended_BlendDir_WorldZ
(0)
#define kMatSpecStdBlended_BlendDir_RefTransZ
(1)
#define kMatSpecStdBlended_BlendDir_RefTransPos
(2)
#define kMatSpecStdBlended_BlendDir_CamPos
(3)
#define MATSPECSTDBLENDED_BLENDDIR
((("kMatSpecStdBlended_BlendDir_WorldZ"
         (alias
            "World Z-Axis")
         (help
            "Untransformed world Z-axis is used as the blend direction."))
      ("kMatSpecStdBlended_BlendDir_RefTransZ"
         (alias
            "Ref Trans: Z-Axis")
         (help
            "World Z-axis from [reference_trans] is used as the blend direction."))
      ("kMatSpecStdBlended_BlendDir_RefTransPos"
         (alias
            "Ref Trans: Pos")
         (help
            "Direction to the world position of [reference_trans] is used as the blend direction."))
      ("kMatSpecStdBlended_BlendDir_CamPos"
         (alias
            "Camera")
         (help
            "Direction to the world position of the camera is used as the blend direction."))))
(MatSpecStdBlended
   (description
      "Material template for blending between 2 sets of maps")
   (category Material)
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (primary_tex_mapping
         int
         (list MATSPECSTDBLENDED_TEXMAPPING)
         (group 'Tex Blending')
         (help
            "Texture coordinate mapping used for the primary set of maps."))
      (secondary_tex_mapping
         int
         (list MATSPECSTDBLENDED_TEXMAPPING)
         (group 'Tex Blending')
         (help
            "Texture coordinate mapping used for the secondary set of maps."))
      (world_projection_tex_scale
         float
         (group 'Tex Blending')
         (help
            "Texture scale for textures using a world-projection mapping (size in world units of a single texture tile).")
         (range 1.0e-2 10000.0))
      (blend_dir
         int
         (list MATSPECSTDBLENDED_BLENDDIR)
         (group 'Tex Blending')
         (alias
            "blend direction")
         (help
            "Direction to use for blending; we blend from the primary set of maps to the secondary set as the vertex surface normal approaches the blend direction."))
      (blend_bias
         float
         (range 0.0 1.0)
         (slider)
         (group 'Tex Blending')
         (help
            "Bias of the blend transition (0 to 1; 0 will bias fully toward the primary set of maps, 1 will bias fully toward the secondary set of maps)."))
      (blend_gain
         float
         (range 0.0 1.0)
         (slider)
         (group 'Tex Blending')
         (help
            "Gain of the blend transition (0 to 1; 0 gives a gradual transition, 1 gives a hard line)."))
      (reference_trans
         object
         (class Trans)
         (group 'Tex Blending')
         (help
            "Trans object used for determining the blend direction.")
         (read_only
            {&&
               {!=
                  [blend_dir]
                  kMatSpecStdBlended_BlendDir_RefTransZ}
               {!=
                  [blend_dir]
                  kMatSpecStdBlended_BlendDir_RefTransPos}}))
      (secondary_diffuse_map
         object
         (class Tex)
         (group Diffuse)
         (help
            "Secondary diffuse map which is blended with the primary diffuse map.")
         (read_only
            {!
               [diffuse_tex]}))
      (secondary_diffuse_detail_map
         object
         (class Tex)
         (group Diffuse)
         (help
            "Secondary diffuse detail map which is blended with the primary diffuse detail map.")
         (read_only
            {'||'
               {!
                  [diffuse_tex]}
               {!
                  [diffuse_detail_map]}}))
      (secondary_combine_mode
         int
         (list MATSPECSTDBLENDED_COMBINEMODE)
         (group Diffuse)
         (help
            "how the secondary maps are blended with the primary."))
      (secondary_emissive_map
         object
         (class Tex)
         (group Emissive)
         (help
            "Secondary emissive map which is blended with the primary emissive map.")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [emissive_map]}}))
      (secondary_normal_map
         object
         (class Tex)
         (list
            {list_normal_map_textures $this})
         (group 'Normal Map')
         (alias
            "secondary normal map")
         (help
            "Secondary normal map which is blended with the primary normal map.")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [normal_map]}}))
      (secondary_norm_detail_map
         object
         (class Tex)
         (list
            {list_normal_map_textures $this})
         (group 'Normal Map')
         (alias
            "secondary normal detail map")
         (help
            "Secondary norm detail map which is blended with the primary norm detail map.")
         (read_only
            {'||'
               {'||'
                  {!
                     [lit]}
                  {!
                     [normal_map]}
                  {!
                     [norm_detail_map]}}}))
      (secondary_specular_map
         object
         (class Tex)
         (group Specular)
         (help
            "Secondary specular map which is blended with the primary specular map.")
         (read_only
            {'||'
               {'||'
                  {!
                     [lit]}
                  {!
                     [specular_enabled]}
                  {!
                     [specular_map]}}}))))
(MatSpecSplat
   (description
      "Material template for rendering vertex based splat maps")
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (diffuse_maps
         object
         (class TexArray)
         (group Diffuse)
         (help
            "Diffuse texture tiles"))
      (specular_maps
         object
         (class TexArray)
         (group Specular)
         (help
            "Specular texture tiles"))
      (normal_maps
         object
         (class TexArray)
         (group 'Normal Map')
         (help
            "Normal texture tiles"))
      (displacement_maps
         object
         (class TexArray)
         (group Displacement)
         (help
            "Displacement texture tiles"))
      (displacement_maps_mip_bias
         float
         (group Displacement)
         (help
            "Displacement texture tiles mip bias"))
      (splat_scale
         float
         (group Splat)
         (help
            "Scales all splat map tile data"))
      (macro_micro_enabled
         bool
         (group Splat)
         (help
            "Enable/disable macro & micro blending"))
      (tile_data_array
         (array
            VECTOR4
            (fixed_size TRUE))
         (group Splat)
         (help
            "Tile data (x = scale, y = rotation, z = specular power, w = normal map strength)"))))
(MatSpecVolume
   (description
      "Material template for rendering translucent volume textures")
   (allowed_dirs MatSpecDir)
   (superclasses MatSpec)
   (ext mspec)
   (editor
      (volume_tex
         object
         (class VolumeTex)
         (group Volume)
         (help
            "Volume texture to draw"))
      (color_multiply
         float
         (group Volume)
         (help
            "Multiply the final output color by this"))
      (alpha_multiply
         float
         (group Volume)
         (help
            "Multiply the final output alpha by this"))
      (opacity
         float
         (group Volume)
         (help
            "How opaque each voxel is during the ray cast"))))
(MatSpecVegetation
   (description
      "Material template for wind blown vegetation")
   (category Material)
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (bend_amplitude
         float
         (group Wind)
         (help
            "How much should the wind blow the model around based on distance from the ground"))
      (leaf_bend
         float
         (group Wind)
         (help
            "Modify bend amplitude by data painted in the blue vertex color channel. Allows you to have the edges of leaves bend more"))
      (branch_amplitude
         float
         (group Wind)
         (help
            "How much should the twisting should we allow along the branches"))
      (detail_amplitude
         float
         (group Wind)
         (help
            "how much twitching should we apply to the edges of the leaves"))))
(MatSpecWater
   (description
      "Material template for rendering water")
   (category Material)
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecRefractReflect MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (wave0_settings
         (indent
            (wave0_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the first wave vertex animation"))
            (wave0_wavelength
               float
               (range 1.0e-2 100.0)
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the waves"))
            (wave0_amplitude
               float
               (range 0.0 10.0)
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the waves"))
            (wave0_sharpness
               float
               (range 0.0 1.0)
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "sharpness")
               (help
                  "Sharpness of the waves (1 for rolling waves, > 1 for sharp peaks)"))
            (wave0_angle
               float
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "angle")
               (help
                  "Direction the waves move in"))
            (wave0_speed
               float
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "speed")
               (help
                  "Speed for scrolling the wave without resorting to propanim")))
         (group Water)
         (alias
            "Wave 0")
         (help
            "Settings controlling the first wave vertex animation"))
      (wave1_settings
         (indent
            (wave1_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the second wave vertex animation"))
            (wave1_wavelength
               float
               (range 1.0e-2 100.0)
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the waves"))
            (wave1_amplitude
               float
               (range 0.0 10.0)
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the waves"))
            (wave1_sharpness
               float
               (range 0.0 1.0)
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "sharpness")
               (help
                  "Sharpness of the waves (1 for rolling waves, > 1 for sharp peaks)"))
            (wave1_angle
               float
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "angle")
               (help
                  "Direction the waves move in"))
            (wave1_speed
               float
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "speed")
               (help
                  "Speed for scrolling the wave without resorting to propanim")))
         (group Water)
         (alias
            "Wave 1")
         (help
            "Settings controlling the second wave vertex animation"))
      (ripple0_settings
         (indent
            (ripple0_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the first ripple vertex animation"))
            (ripple0_wavelength
               float
               (range 1.0e-2 10000.0)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the ripples"))
            (ripple0_amplitude
               float
               (range 0.0 10000.0)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the ripples"))
            (ripple0_sharpness
               float
               (range 1.0 100.0)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "sharpness")
               (help
                  "Sharpness of the ripples (1 for rolling waves, > 1 for sharp peaks)"))
            (ripple0_trans
               object
               (class Trans)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "center trans")
               (help
                  "Transformable object which defines the ripple center"))
            (ripple0_radius
               float
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "radius")
               (help
                  "Radius where the ripple is at full strength"))
            (ripple0_falloff_distance
               float
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "falloff distance")
               (help
                  "Distance from the radius at which the ripple falls off to zero"))
            (ripple0_falloff_strength
               float
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "falloff strength")
               (help
                  "How sharply the falloff distance is applied")))
         (group Water)
         (alias
            "Ripple 0")
         (help
            "Settings controlling the first ripple vertex animation"))
      (ripple1_settings
         (indent
            (ripple1_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the second ripple vertex animation"))
            (ripple1_wavelength
               float
               (range 1.0e-2 10000.0)
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the ripples"))
            (ripple1_amplitude
               float
               (range 0.0 10000.0)
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the ripples"))
            (ripple1_sharpness
               float
               (range 1.0 100.0)
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "sharpness")
               (help
                  "Sharpness of the ripples (1 for rolling waves, > 1 for sharp peaks)"))
            (ripple1_trans
               object
               (class Trans)
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "center trans")
               (help
                  "Transformable object which defines the ripple center"))
            (ripple1_radius
               float
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "radius")
               (help
                  "Radius where the ripple is at full strength"))
            (ripple1_falloff_distance
               float
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "falloff distance")
               (help
                  "Distance from the radius at which the ripple falls off to zero"))
            (ripple1_falloff_strength
               float
               (read_only
                  {!
                     [ripple1_enabled]})
               (alias
                  "falloff strength")
               (help
                  "How sharply the falloff distance is applied")))
         (group Water)
         (alias
            "Ripple 1")
         (help
            "Settings controlling the second ripple vertex animation"))
      (secondary_normal_map
         object
         (class Tex)
         (list
            {list_normal_map_textures $this})
         (group 'Normal Map')
         (help
            "Secondary texture map to define lighting normals (per-pixel only)."))
      (secondary_tex_xfm
         TRANSFORM
         (group 'Tex Xfm')
         (help
            "Texture coordinate transformation for the secondary normal and detail maps.")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [secondary_normal_map]}}))
      (secondary_normal_map_strength
         float
         (group 'Normal Map')
         (help
            "Strength of the normal map bumpiness (1 is neutral, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
         (range 1.0e-2 10.0)
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [secondary_normal_map]}}))
      (secondary_norm_detail_map
         object
         (class Tex)
         (list
            {list_normal_map_textures $this})
         (group 'Normal Map')
         (alias
            "secondary normal detail map")
         (help
            "Secondary detail map texture")
         (read_only
            {'||'
               {!
                  [lit]}
               {!
                  [secondary_normal_map]}}))
      (secondary_norm_detail_strength
         float
         (group 'Normal Map')
         (alias
            "secondary normal detail strength")
         (help
            "Strength of the secondary detail map bumpiness (1 is neutral, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
         (range 1.0e-2 10.0)
         (read_only
            {'||'
               {!
                  [lit]}
               {'||'
                  {!
                     [secondary_normal_map]}
                  {!
                     [secondary_norm_detail_map]}}}))
      (secondary_norm_detail_tiling
         float
         (group 'Normal Map')
         (alias
            "secondary normal detail tiling")
         (help
            "Texture tiling scale for the secondary detail map.")
         (read_only
            {'||'
               {!
                  [lit]}
               {'||'
                  {!
                     [secondary_normal_map]}
                  {!
                     [secondary_norm_detail_map]}}}))))
(MatSpecComplexWater
   (description
      "Material template for rendering complex water")
   (category Material)
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecRefractReflect MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (wave0_settings
         (indent
            (wave0_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the first wave vertex animation"))
            (wave0_wavelength
               float
               (range 1.0 200.0)
               (slider)
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the waves"))
            (wave0_amplitude
               float
               (range 0.1 10.0)
               (slider)
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the waves"))
            (wave0_steepness
               float
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "steepness")
               (help
                  "Steepness of the waves (0 for smooth, 1 for very steep)"))
            (wave0_angle
               float
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "angle")
               (help
                  "Direction the waves move in"))
            (wave0_speed
               float
               (read_only
                  {!
                     [wave0_enabled]})
               (alias
                  "speed")
               (help
                  "Speed for scrolling the wave without resorting to propanim")))
         (group DirectionalWaves)
         (alias
            "Wave 0")
         (help
            "Settings controlling the first wave vertex animation"))
      (wave1_settings
         (indent
            (wave1_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the second wave vertex animation"))
            (wave1_wavelength
               float
               (range 1.0 200.0)
               (slider)
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the waves"))
            (wave1_amplitude
               float
               (range 0.1 10.0)
               (slider)
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the waves"))
            (wave1_steepness
               float
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "steepness")
               (help
                  "Steepness of the waves (0 for smooth, 1 for very steep)"))
            (wave1_angle
               float
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "angle")
               (help
                  "Direction the waves move in"))
            (wave1_speed
               float
               (read_only
                  {!
                     [wave1_enabled]})
               (alias
                  "speed")
               (help
                  "Speed for scrolling the wave without resorting to propanim")))
         (group DirectionalWaves)
         (alias
            "Wave 1")
         (help
            "Settings controlling the second wave vertex animation"))
      (ripple0_settings
         (indent
            (ripple0_enabled
               bool
               (alias
                  "enabled")
               (help
                  "Enable/disable the first ripple vertex animation"))
            (ripple0_wavelength
               float
               (range 1.0e-2 1000.0)
               (slider)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "wavelength")
               (help
                  "Peak-to-peak length of the ripples"))
            (ripple0_amplitude
               float
               (range 1.0e-2 10.0)
               (slider)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "amplitude")
               (help
                  "Amplitude of the ripples"))
            (ripple0_steepness
               float
               (range 0.0 1.0)
               (slider)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "steepness")
               (help
                  "Steepness of the ripples (0 for rolling waves, 1 for sharp peaks)"))
            (ripple0_trans
               object
               (class Trans)
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "center trans")
               (help
                  "Transformable object which defines the ripple center"))
            (ripple0_speed
               float
               (read_only
                  {!
                     [ripple0_enabled]})
               (alias
                  "speed")
               (help
                  "Speed the ripple moves")))
         (group Ripples)
         (alias
            "Ripple 0")
         (help
            "Settings controlling the first ripple vertex animation"))
      (water_tesselation
         (indent
            (tess_modifier
               float
               (range 1.0 100.0)
               (slider)
               (alias
                  "modifier")
               (help
                  "screen space edge * modifier = number of times edge is tesselated"))
            (tess_min_edge
               float
               (range 1.0 100.0)
               (slider)
               (alias
                  "min edge")
               (help
                  "minimum tesselation per edge of triangle"))
            (tess_max_edge
               float
               (range 1.0 100.0)
               (slider)
               (alias
                  "max edge")
               (help
                  "maximum tesselation per edge of triangle"))
            (tess_min_patch
               float
               (range 1.0 100.0)
               (slider)
               (alias
                  "min patch")
               (help
                  "minimum tesselation in center of triangle"))
            (tess_max_patch
               float
               (range 1.0 100.0)
               (slider)
               (alias
                  "max patch")
               (help
                  "maximum tesselation in center of triangle")))
         (group 'Water Tesselation')
         (help
            "Settings controlling the first wave vertex animation"))
      (normal_maps0
         (indent
            (water_normal_map0
               object
               (class Tex)
               (list
                  {list_normal_map_textures $this})
               (help
                  "Secondary texture map to define lighting normals (per-pixel only)."))
            (water_normal_map0_min_strength
               float
               (help
                  "Strength of the normal map0 bumpiness at it's minimum level.")
               (range 0.0 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map0]
                        0}}))
            (water_normal_map0_strength
               float
               (help
                  "Strength of the normal map0 bumpiness at its max level(1 is neutral, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
               (range 1.0e-2 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map0]
                        0}}))
            (water_normal_map0_scale
               float
               (help
                  "Scale of the normal map0 in both u and v (1 is world units, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
               (range 1.0e-2 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map0]
                        0}}))
            (water_normal_map0_pan
               VECTOR2
               (help
                  "Panning speed of the normal map0 in both u and v (0 is no movement.)")
               (range -10.0 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map0]
                        0}})))
         (group WaterNormalMaps)
         (alias
            "NormalMap0")
         (help
            "Settings controlling the water normal maps"))
      (normal_maps1
         (indent
            (water_normal_map1
               object
               (class Tex)
               (list
                  {list_normal_map_textures $this})
               (help
                  "Secondary texture map to define lighting normals (per-pixel only)."))
            (water_normal_map1_min_strength
               float
               (help
                  "Strength of the normal map1 bumpiness at it's minimum level.")
               (range 0.0 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map0]
                        0}}))
            (water_normal_map1_strength
               float
               (help
                  "Strength of the normal map0 bumpiness (1 is neutral, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
               (range 1.0e-2 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map1]
                        0}}))
            (water_normal_map1_scale
               float
               (help
                  "Scale of the normal map0 in both u and v (1 is world units, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
               (range 1.0e-2 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map1]
                        0}}))
            (water_normal_map1_pan
               VECTOR2
               (help
                  "Panning speed of the normal map0 in both u and v (0 is no movement.)")
               (range -10.0 10.0)
               (read_only
                  {'||'
                     {!
                        [lit]}
                     {!
                        [water_normal_map1]
                        0}})))
         (group WaterNormalMaps)
         (alias
            "NormalMap1")
         (help
            "Settings controlling the water normal maps"))
      (water_maps
         (indent
            (water_data_map
               object
               (class Tex)
               (help
                  "r = wave height modifier, g = foam modifier, b = unused for now"))
            (water_color_map
               object
               (class Tex)
               (help
                  "Water color based on depth"))
            (fresnel_rim_power
               float
               (slider)
               (range 0.0 5.0)
               (help
                  "Controls the weight of refraction (low numbers) to reflectance (high numbers)")))
         (group WaterMaps)
         (alias
            "WaterMaps")
         (help
            "Settings controlling the flow of the water"))
      (foam
         (indent
            (foam_map
               object
               (class Tex)
               (help
                  "Texture that has 3 levels of foam stored in its rgb channels."))
            (foam_normal_map
               object
               (class Tex)
               (list
                  {list_normal_map_textures $this})
               (help
                  "Normal map used for foam."))
            (foam_normal_strength
               float
               (help
                  "Strength of the foam normal map bumpiness (1 is neutral, < 1 diminishes, > 1 exaggerates)")
               (range 1.0e-2 20.0))
            (foam_map_scale
               float
               (help
                  "Scale of the foam map in both u and v (1 is world units, < 1 diminishes, > 1 exaggerates) (0.01 to 10.0).")
               (range 1.0e-2 10.0)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (foam_min_height
               float
               (slider)
               (help
                  "Min height from water level where foam begins appearing")
               (range 0.0 10.0)
               (slider)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (foam_max_height
               float
               (slider)
               (help
                  "Height at which foam is fully on.")
               (range 0.0 10.0)
               (slider)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (foam0_angle
               float
               (slider)
               (help
                  "Direction of foam0")
               (range 0.0 360.0)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (foam0_speed
               float
               (slider)
               (help
                  "Speed of foam0")
               (range 0.0 10.0)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (foam1_angle
               float
               (help
                  "Direction of foam1")
               (range 0.0 360.0)
               (slider)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (foam1_speed
               float
               (slider)
               (help
                  "Speed of foam1")
               (range 0.0 10.0)
               (slider)
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (max_foam_dist
               float
               (help
                  "As far out as the foam will render")
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (land_foam_dist
               float
               (range 0.0 20.0)
               (slider)
               (help
                  "Distance from water surface (from eye) where foam will form")
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}}))
            (land_foam_mult
               float
               (range 0.0 4.0)
               (slider)
               (help
                  "Controls the amount of land foam.")
               (read_only
                  {'||'
                     {!
                        [foam_map]
                        0}})))
         (group Foam)
         (alias
            "Foam")
         (help
            "Settings controlling the foam"))))
(MatSpecGPUParticles
   (description
      "Material template for GPU particles")
   (category Material)
   (allowed_dirs MatSpecDir)
   (superclasses MatSpec)
   (ext mspec)
   (editor
      (per_particle_color_map
         object
         (class Tex)
         (group Diffuse)
         (alias
            "per particle color map")
         (help
            "Gradient color applied over the life of a particle."))))
(CheapParticles
   (browser_name
      "Particle System (Cheap)")
   (description
      "Fast and cheap GPU particles")
   (superclasses Draw Trans Poll)
   (category Particles)
   (ext cheap)
   (editor
      (active_parts
         int
         (help
            "number of currently active particles")
         (read_only TRUE))
      (max_parts
         int
         (range 0 65536)
         (help
            "Maximum number of particles. Will be rounded to a power of 2.")
         (no_test))
      (emit_rate
         VECTOR2
         (help
            "Number of particles generated per second.")
         (expand TRUE))
      (mat
         object
         (class Mat)
         (list
            {list_allowed_mats $this})
         (help
            "Material used for rendering the particles"))
      (force_dir
         VECTOR3
         (help
            "Force direction in world coordinates, in units per frame added to each particle's velocity. Can be used for gravity.")
         (expand TRUE))
      (size
         float
         (range 0 100)
         (help
            "Size, in world units, of particles."))
      (life
         VECTOR2
         (help
            "Frame range of particle life.")
         (expand TRUE))
      (speed
         VECTOR2
         (help
            "Speed range, in world units per frame, of particles.")
         (expand TRUE))
      (drag
         float
         (range 0 1)
         (help
            "Drag slows the particles down over time."))
      (pitch
         VECTOR2
         (help
            "Pitch range of particle life.")
         (expand TRUE))
      (yaw
         VECTOR2
         (help
            "Yaw range of particle life.")
         (expand TRUE))
      (bounce
         object
         (class Trans)
         (help
            "Specify a collision plane to reflect particles. Particles will bounce off this plane."))
      (box_extent_1
         VECTOR3
         (help
            "Min point and max point, in object coordinates, of box region from which particles are emitted.")
         (expand TRUE))
      (box_extent_2
         VECTOR3
         (help
            "Min point and max point, in object coordinates, of box region from which particles are emitted.")
         (expand TRUE))
      (sub_samples
         bool
         (help
            " interpolate emitted particles along line from last position?"))
      (spin
         bool
         (help
            "Rotate the particle around its center at the time of its birth."))
      (spin_rate
         float
         (help
            "How fast should the particles spin over their lifetime?")
         (read_only
            {!
               [spin]}))))
(PropertyTweaker
   (description
      "Property Tweaker (allows run time property changing)")
   (allowed_dirs ObjectDir Scene)
   (superclasses Poll)
   (ext ptk)
   (editor
      (entries
         (array
            (struct
               (property
                  prop_ref
                  (allowed_prop_types
                     (int float bool))
                  (help
                     "target property to be tweaked"))
               (friendly_name
                  string
                  (help
                     "Name for use in Tweaker display"))
               (increment
                  float
                  (help
                     "default increment value (use powers of 10: 0.01, 0.1, 1, 10, etc)"))
               (use_osc
                  bool
                  (help
                     "Should we enable controlling this property with OSC at the provided OSC address?"))
               (osc_address
                  string
                  (help
                     "Enable use_osc to use this. OSC address that will be used to tweak this property, must start with a /. Example: /propertytotweak")))
            (header
               {sprint
                  [entries
                     {elem $editor_prop_path 1}
                     target]
                  " : "
                  [entries
                     {elem $editor_prop_path 1}
                     property_name]})))))
(PropertyPeeker
   (description
      "Property Peeker (allows run time property watching)")
   (superclasses Poll)
   (ext ppk)
   (allowed_dirs ObjectDir Scene)
   (editor
      (ui_filename
         file
         (ext
            "UIScreen"
            uiscreen)
         (help
            "Filename of a ui that can represent this peeker."))
      (entries
         (array
            (struct
               (property
                  prop_ref
                  (allowed_prop_types
                     (int float bool))
                  (help
                     "target property to be peeked"))
               (friendly_name
                  string
                  (help
                     "Name for use in Peeker display")))
            (header
               [entries
                  {elem $editor_prop_path 1}
                  property_name])))))
#define kReflectDownsample_None
(0)
#define kReflectDownsample_2X
(1)
#define kReflectDownsample_4X
(2)
#define REFLECT_DOWNSAMPLE_ENUM
((("kReflectDownsample_None"
         (alias
            "Sharp")
         (help
            "An unblurred full-resolution reflection texture is used"))
      ("kReflectDownsample_2X"
         (alias
            "Somewhat Blurry")
         (help
            "A 2X downsample/blur reflection texture is used (somewhat blurry)"))
      ("kReflectDownsample_4X"
         (alias
            "Very Blurry")
         (help
            "A 4X downsample/blur reflection texture is used (very blurry)"))))
(Reflection
   (description
      "Generates a rendered texture by reflecting the current camera about a reflection plane")
   (superclasses Draw Trans)
   (ext refl)
   (allowed_dirs Entity Scene)
   (editor
      (only_reflect_flagged
         bool
         (alias
            "only reflect flagged objects?")
         (help
            "If checked, only objects in the scene flagged 'always reflect' will be reflected; otherwise, we will reflect all objects unless they are flagged 'never reflect'"))
      (disable_tessellation
         bool
         (alias
            "disable tessellation on reflected objects?"))
      (downsample_type
         int
         (list REFLECT_DOWNSAMPLE_ENUM)
         (alias
            "downsample type")
         (help
            "How much to downsample/blur the reflection texture"))
      (vertical_stretch
         float
         (range 1.0e-2 1000.0)
         (alias
            "vertical stretch")
         (help
            "How much to vertically stretch the reflection"))
      (clip_plane_offset
         float
         (alias
            "clip plane offset")
         (help
            "How far to offset the reflection clip plane from the actual plane of reflection"))
      (use_cull_rect
         bool
         (alias
            "use cull rect?"))
      (cull_width
         float
         (alias
            "cull width")
         (help
            "Width of the culling rectangle")
         (read_only
            {!
               [use_cull_rect]}))
      (cull_length
         float
         (alias
            "cull length")
         (help
            "Length of the culling rectangle")
         (read_only
            {!
               [use_cull_rect]}))))
(Volume
   (description
      "Volume")
   (category Graphics)
   (superclasses Draw Trans)
   (ext vol)
   (editor
      (mat
         object
         (class Mat)
         (alias
            "material")
         (help
            "Material to use"))
      (opacity
         float
         (help
            "How opaque each voxel is for the purposes of lighting"))
      (scattering
         float
         (range 0.0 1.0)
         (help
            "How much the light scatters inside the volume"))
      (brightness
         float
         (range 0.0 4.0)
         (help
            "How much light is reflected"))
      (lighting
         (indent
            (light_direction
               VECTOR3
               (no_test serialize))
            (light_color
               color
               (no_test serialize))
            (ambient_color
               color
               (no_test serialize))
            (preview_lighting
               script
               (script
                  {$this preview_lighting})
               (help
                  "Generate preview lighting (won't be saved to disk)")
               (no_test))))))
(VolumeScene
   (description
      "A lighting environment with volumes in it.")
   (category Graphics)
   (ext volscene)
   (superclasses)
   (allowed_dirs Scene)
   (editor
      (compute_lighting
         script
         (group
            "Lighting")
         (script
            {$this compute_lighting})
         (help
            "Computes lighting for volumes that need to be updated"))
      (force_compute_lighting
         script
         (group
            "Lighting")
         (script
            {$this force_compute_lighting})
         (help
            "Recomputes lighting for volumes even if they are up to date"))
      (force_fast_compute_lighting
         script
         (group
            "Lighting")
         (script
            {$this force_fast_compute_lighting})
         (help
            "Recomputes low quality lighting for volumes even if they are up to date. Suitable for preview, not shipping"))
      (tint_imposters
         bool
         (no_test))))
(PerfTestDraw
   (description
      "Performance test drawable")
   (category Graphics)
   (superclasses Draw Trans)
   (ext perftest)
   (editor
      (geometry
         (indent
            (subdivisions_x
               int
               (range 1 1000)
               (test_range 1 32))
            (subdivisions_y
               int
               (range 1 1000)
               (test_range 1 32))
            (overdraws int)
            (overdraw_type
               int
               (list PERFTESTDRAW_OVERDRAW_MODES))
            (back_faces
               float
               (range 0.0 1.0)
               (help
                  "Proportion of back facing triangles"))
            (tex_repeats VECTOR2)))
      (material
         (indent
            (tex_width
               int
               (range 8 2048)
               (no_test readback))
            (tex_height
               int
               (range 8 2048)
               (no_test readback))
            (tex_use_mips bool)
            (num_textures
               int
               (range 0 255)
               (no_test))
            (alpha_blend bool)
            (pixel_shader_op
               int
               (list PERFTESTDRAW_PIXEL_SHADER_OPS))
            (override_mat
               object
               (class Mat)
               (help
                  "Override perf test shader material"))))))
(ColorLUT
   (description
      "A color lookup table for color grading.")
   (category Graphics)
   (superclasses Instance)
   (file_ext
      "")
   (allowed_dirs Scene)
   (editor
      (disable_postprocs
         bool
         (help
            "Is the entire postproc pass disabled for screenshots?"))
      (screenshot_file
         file
         (help
            "The screenshot file we create and watch for changes.")
         (is_save_as TRUE)
         (ext
            "Bitmap file"
            "bmp"))
      (take_screenshot
         script
         (script
            {$this screenshot})
         (no_test)
         (help
            "Takes a screenshot and opens it in Photoshop (or another editor) for color grading."))
      (reload_screenshot
         script
         (script
            {$this import})
         (no_test)
         (help
            "Opens the screenshot and reads in the LUT from it."))))
#define TEX_CONVERT_DOWNSAMPLE_FACTORS
(((0
         (alias
            "None"))
      (1
         (alias
            "1/2"))
      (2
         (alias
            "1/4"))
      (3
         (alias
            "1/8"))
      (4
         (alias
            "1/16"))
      (5
         (alias
            "1/32"))))
#define TEX_CONVERT_PROPERTIES_HELP
((help
      "http://deki/Engine_Support/Documentation/Texture_Compression")
   (html TRUE))
(TexConvertOverride
   (description
      "Object used to get/set properties on texture files.  Creates a dta in parallel with the texture.")
   (allowed_dirs)
   (functest no_test)
   (editor
      (format
         int
         (list
            ((-1
                  (alias
                     "<No Format Override>")
                  (help
                     "No format override."))
               RNDBITMAP_FORMAT_TYPES))
         TEX_CONVERT_PROPERTIES_HELP)
      (encoder
         string
         (list
            ((""
                  (alias
                     "<No Encoder Override>"))
               ("BasicEncoder"
                  (help
                     "No Compression"))
               ("ATIEncoder")
               ("BC6BC7GPUEncoder")))
         TEX_CONVERT_PROPERTIES_HELP)
      (vectorize_channel
         bitfield
         (list
            ((1
                  (alias
                     "Red"))
               (2
                  (alias
                     "Green"))
               (4
                  (alias
                     "Blue"))
               (8
                  (alias
                     "Alpha"))))
         (help
            "which channels should get turned into signed distance fields"))
      (vectorize_scale
         int
         (hide
            {==
               [vectorize_channel]
               0})
         (list TEX_CONVERT_DOWNSAMPLE_FACTORS)
         (help
            "How much to scale down the image after conversion"))
      (vectorize_border
         int
         (hide
            {==
               [vectorize_channel]
               0})
         (help
            "max distance to edge to store"))
      (miptype
         int
         (list MIP_TYPES)
         TEX_CONVERT_PROPERTIES_HELP)
      (premultalpha bool TEX_CONVERT_PROPERTIES_HELP)
      (per_platform_data
         (array
            (struct
               (platform
                  int
                  (list PLATFORM_TARGETS)
                  (help
                     "Which platform this data is for."))
               (downsample_factor
                  int
                  (list TEX_CONVERT_DOWNSAMPLE_FACTORS)
                  (help
                     "How much smaller the texture is on this platform.")))))
      (texpath
         string
         (help
            "Path to the texture.")
         (read_only TRUE))
      (dtapath
         string
         (help
            "Path to the dta for this texture.")
         (read_only TRUE))))
(RndCommander
   (description
      "Rnd Commander")
   (category Graphics)
   (ext rndcmd)
   (editor
      (capture_next_frame
         (indent
            (capture_next_frame_ui
               bool
               (alias
                  "ui?")
               (help
                  "Should the frame capture be of the UI or the scene?")
               (no_test serialize))
            (capture_next_frame_go
               script
               (alias
                  "go")
               (script
                  {$this
                     capture_next_frame
                     [capture_next_frame_ui]})))
         (help
            "Capture the next frame; the capture is persistent until the next capture, available for use by the PersistentFrameCapture shader node")))
   (events_in
      (capture_next_frame
         (help
            "Capture the next frame (capture taken just before running postproc); the capture is persistent until the next capture, available for use by the PersistentFrameCapture shader node")
         (editor
            (ui
               bool
               (help
                  "Should the frame capture be of the UI or the scene?"))))))