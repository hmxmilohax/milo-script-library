#define kChoiceOrdered
(0)
#define kChoiceRandom
(1)
#define kChoiceRandomNoRepeat
(2)
#define kChoiceRandomJukeBox
(3)
#define kChoiceUseIndex
(4)
#define kIgnore
(0)
#define kQueue
(1)
#define kQueueOne
(2)
#define kImmediate
(3)
#define kWhenAble
(4)
#define kEqual
(0)
#define kNotEqual
(1)
#define kGreaterThan
(2)
#define kGreaterThanOrEqual
(3)
#define kLessThan
(4)
#define kLessThanOrEqual
(5)
#define kTransition
(6)
#define kDefault
(7)
#define kInt
(0)
#define kFloat
(1)
#define kBool
(2)
#define kString
(3)
#define kColor
(4)
#define kObject
(5)
#define kSymbolList
(6)
#define kFilePath
(7)
#define kStopImmediate
(0)
#define kStopLastFrame
(1)
#define kStopOnMarker
(2)
#define kStopBetweenMarkers
(3)
#define kReleaseAndContinue
(4)
#define kReleaseAndRampOut
(5)
#define kRampOutBeforeRelease
(6)
#define kDeactivateOnly
(0)
#define kRequestStopOnly
(1)
#define kAlways
(2)
#define kFlowStart
(0)
#define kFlowStopImmediate
(1)
#define kFlowStopWhenAble
(2)
#define FLOW_PROPANIM_COMMANDS_ENUM
((("kFlowStart"
         (alias
            "Start"))
      ("kFlowStopImmediate"
         (alias
            "Stop Immediately"))
      ("kFlowStopWhenAble"
         (alias
            "Request Stop"))))
#define kRange
(0)
#define kLoop
(1)
#define kWrap
(2)
#define kScrub
(3)
#define kUseIntensity
(0)
#define kIgnoreParentIntensity
(1)
#define kDontSetIntensity
(2)
#ifdef _DEBUG
#define kBreakNone
(0)
#define kBreakActivate
(1)
#define kBreakDeactivate
(2)
#define kBreakRequestStop
(3)
#define kBreakRequestStopCancel
(4)
#define kBreakChildFinished
(5)
#define kBreakReactivate
(6)
#define kBreakExecute
(7)
#define kBreakPoll
(8)
#define kBreakAll
(9)
#endif
#define kGateNone
(0)
#define kGatePercent
(1)
#define kGateCount
(2)
#define kEvent
(0)
#define kTrigger
(1)
#define WWISE_EVENT_ENUM
((("kEvent"
         (alias
            "Event")
         (help
            "posts a Wwise event"))
      ("kTrigger"
         (alias
            "Trigger")
         (help
            "posts a Wwise trigger"))))
#define kDelayUntilRegistered
(0)
#define kIgnoreIfUnregistered
(1)
#define WWISE_UNREGISTERED_BEHAVIOR_ENUM
((("kDelayUntilRegistered"
         (alias
            "Delay until registered")
         (help
            "Queue the event until the WwiseComponent becomes registered"))
      ("kIgnoreIfUnregistered"
         (alias
            "Ignore if unregistered")
         (help
            "Ignore the event if the WwiseComponent is unregistered"))))
#define kAlignNone
(0)
#define kAlignX
(1)
#define kAlignY
(2)
#define kAlignZ
(3)
#define kAdd
(0)
#define kMultiply
(1)
#define kReplace
(2)
#define kBlendHue
(3)
#define kBlendSaturation
(4)
#define kBlendLightness
(5)
#define kStartNone
(0)
#define kStartOnEnter
(1)
#define kStartOnFirstPoll
(2)
#define FLOWNODE_EDITORBLOCK
((comment
      string
      (disk_prop)
      (help
         "Notes about this node")
      (no_test uniqueness))
   (debug_output
      bool
      (disk_prop)
      (no_test)
      (help
         "Causes information about this node to be printed to the console for debugging, please set to false when done!"))
   (disabled
      bool
      (disk_prop)
      (no_test)
      (help
         "Disables this branch of the flow from running. Please clean up after yourself, and delete disabled nodes if they no longer have a use; they consume memory!"))
   #ifdef _DEBUG
   (breakpoint
      int
      (list
         (("kBreakNone"
               (help
                  "No Breakpoint"))
            ("kBreakActivate"
               (help
                  "Break on initial activation"))
            ("kBreakDeactivate"
               (help
                  "Break when forced to stop"))
            ("kBreakRequestStop"
               (help
                  "Break when asked to stop"))
            ("kBreakRequestStopCancel"
               (help
                  "Break when request stop is canceled"))
            ("kBreakChildFinished"
               (help
                  "Break when a child of this node is finished"))
            ("kBreakReactivate"
               (help
                  "Break on re-entrance due to event"))
            ("kBreakExecute"
               (help
                  "Break on execute function of this node"))
            ("kBreakPoll"
               (help
                  "Break on poll callback"))
            ("kBreakAll"
               (help
                  "Break on all functions within this node"))))
      (disk_prop)
      (help
         "To use breakpoints select the function which will call punt you into the debuger when hit. Not serialized with the file!")
      (no_test))
   #endif
   (debug_name
      string
      (read_only TRUE)
      (help
         "Internal name of this flow node")))
#define INTERRUPT_LIST
((("kIgnore"
         (alias
            "Ignore")
         (help
            "If we're activated, ignore the activation"))
      ("kQueue"
         (alias
            "Queue")
         (help
            "New activations go in the queue and are executed when this one finishes"))
      ("kQueueOne"
         (alias
            "Queue One")
         (help
            "New activations go into a one deep queue and are executed when this one finishes"))
      ("kImmediate"
         (alias
            "Immediate")
         (help
            "Forcably stop what we're doing and restart"))
      ("kWhenAble"
         (alias
            "Request Stop, then run")
         (help
            "Ask our children to stop, then run again when they finish"))))
#define FLOW_LOADING_DIR
((dir
      {if_else
         {&&
            {$this dir}
            {{$this dir}
               dir}}
         {{$this dir}
            dir}
         {$this dir}}))
#define FLOW_PTR_OBJECTS
((list
      {$this get_property_objects TRUE}))
#define DRIVE_PROPERTY_BUTTON
((inline_script
      ">"
      (script
         {$flow_editor
            edit_math_ops
            $this
            $editor_prop_path
            {$this get_property_objects FALSE}
            TRUE}
         {$flow_editor editor_spec_changed $this})
      (help
         "Press to bring up the expression editor."))
   (filter_type TRUE)
   (custom_history))
#define DRIVE_PROPERTY_BUTTON_NO_FILTER
((inline_script
      ">"
      (script
         {$flow_editor
            edit_math_ops
            $this
            $editor_prop_path
            {$this get_property_objects FALSE}
            FALSE}
         {$flow_editor editor_spec_changed $this})
      (help
         "Press to bring up the expression editor."))
   (filter_type FALSE)
   (custom_history))
#define USE_VALUE_ALIAS
((value_alias
      {$this is_driven_property $editor_prop_path}
      {$this get_driven_display $editor_prop_path}))
(Flow
   (description
      "A visual script")
   (category Flow)
   (file_ext
      ".flow")
   (allowed_dirs ObjectDir Scene UIScreen)
   (superclasses Instance)
   (tool_superclasses Trans)
   (hide_from_editor
      {$this is_embedded})
   (ext flow)
   (editor
      (start_on_enter
         int
         (alias
            "start mode")
         (list
            ((kStartNone
                  (alias
                     "None")
                  (help
                     "Do not start on enter"))
               (kStartOnEnter
                  (alias
                     "On Enter")
                  (help
                     "Start on enter call; useful for reset/init flows"))
               (kStartOnFirstPoll
                  (alias
                     "First Poll")
                  (help
                     "Defer start to first poll to give init code a chance to run"))))
         (disk_prop)
         (help
            "Should this Flow automatically run at enter or poll?"))
      (private
         bool
         (hide
            [start_on_enter])
         (disk_prop)
         (help
            "Are we hidden from run nodes?")
         (no_test))
      (interrupt
         int
         (list INTERRUPT_LIST)
         (hide
            [start_on_enter])
         (disk_prop)
         (help
            "Determines how we handle re-triggering of this flow")
         (no_test))
      (intensity
         float
         (read_only TRUE)
         (help
            "Current intensity of the running flow.")
         (disk_prop))
      (toggle_running
         int
         (disk_prop)
         (hide propedit flow)
         (list FLOW_PROPANIM_COMMANDS_ENUM)
         (no_test)
         (help
            "Property to start or stop a flow via a prop anim."))
      (dynamic_properties
         (array
            (struct
               (name
                  string
                  (help
                     "Name for the property"))
               (type
                  int
                  (list
                     (("kInt"
                           (alias
                              "Integer")
                           (help
                              "A number value with no decimal places. (17)"))
                        ("kFloat"
                           (alias
                              "Float")
                           (help
                              "A number value with decimal places. (10.276)"))
                        ("kBool"
                           (alias
                              "Boolean")
                           (help
                              "A true or false value"))
                        ("kString"
                           (alias
                              "String")
                           (help
                              "A text value (The rain in spain..)"))
                        ("kColor"
                           (alias
                              "Color")
                           (help
                              "A RGB color value"))
                        ("kObject"
                           (alias
                              "Object")
                           (help
                              "An object pointer"))
                        ("kSymbolList"
                           (alias
                              "Symbol List")
                           (help
                              "A list of named values. (Red Blue Bob)"))
                        ("kFilePath"
                           (alias
                              "File Path")
                           (help
                              "A path to a file"))))
                  (help
                     "the kind of property to create"))
               (object_class
                  symbol
                  (list
                     {$this get_class_list})
                  (no_test)
                  (hide
                     {!=
                        {$this
                           get
                           {editor_prop_path_sibling type}}
                        kObject}))
               (object_type
                  symbol
                  (list
                     {$this
                        get_type_list
                        {$this
                           get
                           {editor_prop_path_sibling object_class}}})
                  (no_test)
                  (hide
                     {!=
                        {$this
                           get
                           {editor_prop_path_sibling type}}
                        kObject}))
               (object_component
                  symbol
                  (list
                     {$this
                        get_component_list
                        {$this
                           get
                           {editor_prop_path_sibling object_class}}})
                  (no_test)
                  (hide
                     {!=
                        {$this
                           get
                           {editor_prop_path_sibling type}}
                        kObject}))
               (symbol_list
                  string
                  (help
                     "Space seperated list of symbols")
                  (no_test)
                  (hide
                     {!=
                        {$this
                           get
                           {editor_prop_path_sibling type}}
                        kSymbolList}))
               (initial_value
                  (indent
                     (initial_value_enabled
                        bool
                        (help
                           "If true, the initial value will be applied."))
                     (default_int
                        int
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kInt})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}}))
                     (default_bool
                        bool
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kBool})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}}))
                     (default_float
                        float
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFloat})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}}))
                     (default_string
                        string
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kString})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}}))
                     (default_color
                        color
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kColor})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}}))
                     (default_object
                        object
                        (class
                           [dynamic_properties
                              {elem $editor_prop_path 1}
                              object_class])
                        (type
                           [dynamic_properties
                              {elem $editor_prop_path 1}
                              object_type])
                        (component
                           [dynamic_properties
                              {elem $editor_prop_path 1}
                              object_component])
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kObject})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}})
                        (no_test))
                     (default_symbol
                        symbol
                        (list
                           [dynamic_properties
                              {elem $editor_prop_path 1}
                              get_symbol_list])
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kSymbolList})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}})
                        (no_test))
                     (default_file
                        file
                        (hide
                           {!=
                              {$this
                                 get
                                 {editor_prop_path_sibling type}}
                              kFilePath})
                        (read_only
                           {!
                              {$this
                                 get
                                 {editor_prop_path_sibling initial_value_enabled}}})))
                  (editor_type vector)
                  (help
                     "Optionally specifies a value to be applied to this dynamic property on Enter."))
               (help
                  string
                  (help
                     "Help string for the user"))
               (exposed
                  bool
                  (help
                     "Is this property exposed to the proxy using this flow?")
                  (disk_prop)))
            (header
               {$this
                  get
                  {editor_prop_path_child name}})
            (summary
               {do
                  ($name
                     {symbol
                        {$this
                           get
                           {editor_prop_path_child name}}})
                  {if_else
                     {strlen $name}
                     {do
                        ($type
                           {$this
                              get
                              {editor_prop_path_child type}})
                        ($value
                           {$this get $name})
                        {switch
                           $type
                           (kInt
                              {sprintf
                                 "Integer: %d"
                                 $value})
                           (kFloat
                              {sprintf
                                 "Float: %.4f"
                                 $value})
                           (kBool
                              {sprintf
                                 "Boolean: %s"
                                 {if_else
                                    $value
                                    "True"
                                    "False"}})
                           (kString
                              {sprintf
                                 "String: %s"
                                 $value})
                           (kColor
                              "Color")
                           (kObject
                              {sprintf
                                 "Object: %s"
                                 {if_else
                                    {== $value ''}
                                    "<None>"
                                    {$value name}}})
                           (kSymbolList
                              {sprintf
                                 "Symbol List: %s"
                                 $value})
                           ""}}
                     ""}}))
         (hide propanim flow)
         (disk_prop)
         (no_test))
      FLOWNODE_EDITORBLOCK)
   (events_out
      (test_event
         (editor
            (param1 float)
            (param2 float)))))
(FlowCommand
   (description
      "Runs a handler exposed by coders on an object")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fact)
   (hide_from_editor TRUE)
   (editor
      (target
         object
         (class Object)
         FLOW_LOADING_DIR
         (list
            {$this get_possible_targets})
         (help
            "The object which I'm going to trigger a handler on"))
      (handler
         symbol
         (alias
            "event")
         (list
            {$this
               get_handler_list
               [target]})
         (help
            "The event to fire on the target object"))
      FLOWNODE_EDITORBLOCK
      (parameters
         (struct))))
(FlowEventListener
   (description
      "Listens for/filters events and triggers children")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (hide_from_editor TRUE)
   (ext el)
   (editor
      (event_provider
         object
         (class Object)
         FLOW_LOADING_DIR
         (list
            {$this get_event_providers TRUE})
         (help
            "The Object that I listen to for events"))
      (trigger_events
         (array
            symbol
            (list
               {$this list_events_out})
            (help
               "Events that run this flow"))
         (no_test)
         (help
            "Events that run this flow"))
      (stop_events
         (array
            symbol
            (list
               {$this list_events_out})
            (help
               "Events that stop this flow"))
         (no_test)
         (help
            "Events that stop this flow"))
      (trigger_properties
         (array
            prop_ref
            FLOW_LOADING_DIR
            (list
               {$this get_property_objects TRUE})
            (prop_context flow)
            (help
               "A property that runs this node when changed."))
         (help
            "Properties that run this flow when changed."))
      (stop_properties
         (array
            prop_ref
            FLOW_LOADING_DIR
            (list
               {$this get_property_objects TRUE})
            (prop_context flow)
            (help
               "A property that stops this node when changed."))
         (help
            "Properties that stop this node when changed."))
      (hard_stop
         bool
         (help
            "force things to stop immediately?"))
      (interrupt
         int
         (list INTERRUPT_LIST)
         (help
            "Determines how we handle re-triggering of this flow"))
      (event_count
         int
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "How many events do we process before disabling ourselves? 0 is infinite"))
      (start_on_activate
         bool
         (help
            "When true, we will start our children when we begin listening for events"))
      FLOWNODE_EDITORBLOCK))
(FlowNode
   (description
      "A flow node")
   (allowed_dirs)
   (hide_from_editor TRUE)
   (ext fnode)
   (editor FLOWNODE_EDITORBLOCK)
   (mathops
      (scalar_to_db
         (help
            "convert 0 to 1 scalar value to -96 to 0 db")
         (script
            {do
               {set
                  $val
                  {ratio_to_db $val}}
               $val}))
      (db_to_scalar
         (help
            "convert a db value to a scalar 0 to 1 value")
         (script
            {do
               {set
                  $val
                  {db_to_ratio $val}}
               $val}))
      (range_to_scalar
         (help
            "convert a 0 to n value to 0 to 1 scalar")
         (script
            {do
               {set
                  $val
                  {clamp $val 0 $prop_val}}
               {if
                  {!= $prop_val 0}
                  {set
                     $val
                     {/ $val $prop_val}}}
               $val}))))
(FlowSequence
   (description
      "A sequence of flow objects")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (superclasses)
   (hide_from_editor TRUE)
   (ext fseq)
   (editor
      (looping
         bool
         (help
            "Loop forever?")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (repeats
         int
         (alias
            "repeat count")
         (help
            "how many times to reapeat this sequence")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (hide
            {==
               [looping]
               TRUE}))
      (stop_mode
         int
         (list
            (("kStopImmediate"
                  (alias
                     "Immediately")
                  (help
                     "Stop immediately."))
               ("kStopLastFrame"
                  (alias
                     "When Finished")
                  (help
                     "Stop when the sequence finishes naturally"))))
         (help
            "How should we handle stop requests?"))
      FLOWNODE_EDITORBLOCK))
(FlowMoveTo
   (description
      "Moves one object towards another")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (superclasses)
   (hide_from_editor TRUE)
   (ext mvt)
   (editor
      (mover
         object
         (class Trans)
         (help
            "The object to move")
         (list
            {$this get_target_list})
         FLOW_LOADING_DIR
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (target
         object
         (class Trans)
         (help
            "The object to move towards")
         (list
            {$this get_target_list})
         FLOW_LOADING_DIR
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate to use for time"))
      (stop_mode
         int
         (list
            (("kStopImmediate"
                  (alias
                     "Immediately")
                  (help
                     "Stop immediately."))
               ("kStopLastFrame"
                  (alias
                     "When Finished")
                  (help
                     "Stop at the end of this action."))))
         (help
            "How should we handle stop requests?"))
      (speed
         float
         (help
            "distance per unit to travel")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (acceleration
         float
         (help
            "how long it takes to reach maximum speed, 0 for instant")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (align
         int
         (list
            (("kAlignNone"
                  (alias
                     "None")
                  (help
                     "don't turn to face forwad"))
               ("kAlignX"
                  (alias
                     "Align to X")
                  (help
                     "turn to face the object down our X axis"))
               ("kAlignY"
                  (alias
                     "Align to Y")
                  (help
                     "turn to face the object down our Y axis"))
               ("kAlignZ"
                  (alias
                     "Align to Z")
                  (help
                     "turn to face the object down our Z axis"))))
         (help
            "align the mover towards the target. The axis chosen will control which axis on the mover is turned forward"))
      (chase
         bool
         (help
            "When true, target position will be updated when the target moves")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (arrive_ease
         float
         (help
            "At what distance do we start slowing down to stop?")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (stop_on_arrive
         bool
         (help
            "Do we stop running this node when we arrive?"))
      FLOWNODE_EDITORBLOCK))
(FlowAnimate
   (description
      "Plays an animation")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (superclasses)
   (hide_from_editor TRUE)
   (ext fanim)
   (editor
      (anim
         object
         (class Anim)
         FLOW_LOADING_DIR
         (alias
            "animation")
         (list
            {$this get_anim_targets TRUE})
         (help
            "Anim object to animate")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (anim_mode
         int
         (list
            (("kRange"
                  (alias
                     "Range")
                  (help
                     "play from start frame to end frame"))
               ("kLoop"
                  (alias
                     "Loop")
                  (help
                     "loop from start frame to end frame"))
               ("kWrap"
                  (alias
                     "Wrap")
                  (help
                     "play from start frame to end frame wraping the frame value into the allowed range. A wrap of 0 to 150 on an animation that is 100 frames would play through the animation 1.5 times"))
               ("kScrub"
                  (alias
                     "Single Frame")
                  (help
                     "play animation as if it's a single frame long. You can drive the frame value, so it will change when your expression is updated"))))
         (alias
            "playback mode")
         (help
            "Mode to use for animation playback"))
      (from_current_frame
         bool
         (help
            "When true, we use the current frame as the start frame for the animation (dest mode)")
         (hide
            {==
               [anim_mode]
               kScrub})
         (alias
            "play from current frame?")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (stop_mode
         int
         (list
            {if_else
               {==
                  [anim_mode]
                  kScrub}
               (("kStopImmediate"
                     (alias
                        "Immediately")
                     (help
                        "Stop immediately."))
                  ("kReleaseAndRampOut"
                     (alias
                        "Release and Ramp Out")
                     (help
                        "Stop tracking this node, but ramp the animation out over time."))
                  ("kRampOutBeforeRelease"
                     (alias
                        "Ramp out, then release")
                     (help
                        "Ramp the animation out, then release.")))
               (("kStopImmediate"
                     (alias
                        "Immediately")
                     (help
                        "Stop immediately."))
                  ("kStopLastFrame"
                     (alias
                        "Last frame")
                     (help
                        "Stop at the end of this action."))
                  ("kStopOnMarker"
                     (alias
                        "On Marker")
                     (help
                        "Stop at the next stop marker (stop) or at the end of this action."))
                  ("kStopBetweenMarkers"
                     (alias
                        "Between Markers")
                     (help
                        "Stop if between a stop and no_stop marker, or at the end of the action."))
                  ("kReleaseAndContinue"
                     (alias
                        "Release and Continue")
                     (help
                        "Stop tracking this node, but let the action continue untracked."))
                  ("kReleaseAndRampOut"
                     (alias
                        "Release and Ramp Out")
                     (help
                        "Stop tracking this node, but ramp the animation out over time."))
                  ("kRampOutBeforeRelease"
                     (alias
                        "Ramp Out, then release")
                     (help
                        "Ramp the animation out, then release")))})
         (help
            "How should we handle stop requests?"))
      (immediate_release
         bool
         (alias
            "fire and forget?")
         (hide
            {==
               [anim_mode]
               kScrub})
         (help
            "If true, Flow will not track/stop or otherwise affect this animation again."))
      (rate
         int
         (list RATE_ENUM)
         (help
            "Rate to animate"))
      (scale
         float
         (help
            "Scale of animation")
         (hide
            {==
               [anim_mode]
               kScrub})
         (read_only
            {!=
               [period]
               0.0})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (persistent_scale
         float
         (read_only
            {!=
               [period]
               0.0})
         (hide
            {==
               [anim_mode]
               kScrub})
         (help
            "dynamic scaling value, if you drive this with an expression, will update the scale of the animation when the value of any property in that expression changes")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (period
         float
         (hide
            {==
               [anim_mode]
               kScrub})
         (help
            "Period of animation if non-zero")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (ease
         int
         (hide
            {==
               [anim_mode]
               kScrub})
         (list EASING_TYPES)
         (help
            "Easing to apply to animation"))
      (ease_power
         float
         (hide
            {==
               [anim_mode]
               kScrub})
         (help
            "Modifier to easing equation")
         (range 0 10000)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (drive_intensity
         int
         (list
            (("kUseIntensity"
                  (alias
                     "Use")
                  (help
                     "Pass parent intensity through to the animatable, driving it's weight or blend"))
               ("kIgnoreParentIntensity"
                  (alias
                     "Ignore Parent")
                  (help
                     "Ignore incoming parent intensity, but still drive the intensity of the animatable"))
               ("kDontSetIntensity"
                  (alias
                     "Do not set")
                  (help
                     "Ignore the parent intensity and never set the intensity of the animatable"))))
         (help
            "How do we control the intensity of this animation?"))
      (ramp_in_time
         float
         (help
            "Time in units to ramp animation intensity in when starting this animation")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (ramp_out_time
         float
         (help
            "Time in units to ramp animation intensity out when starting this animation")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (release_on_ramp_out
         bool
         (hide
            {==
               [anim_mode]
               kScrub})
         (help
            "If true, we will release the flow node when it starts ramping out. This makes crossfading in a sequence possible, for instance"))
      (ramp_ease
         int
         (list EASING_TYPES)
         (help
            "Easing to apply to ramp in and out"))
      (ramp_ease_power
         float
         (help
            "Modifier to easing equation for ramp in and out")
         (range 0 10000)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (enable
         bool
         (hide
            {==
               [anim_mode]
               kScrub})
         (alias
            "enable frame override")
         (help
            "Enable start and end frame overrides")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (start
         float
         (hide
            {==
               [anim_mode]
               kScrub})
         (help
            "Start frame of animation")
         (read_only
            {!
               [enable]})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (end
         float
         (help
            {if_else
               {==
                  [anim_mode]
                  kScrub}
               "End frame of animation"
               "Frame value to scrub to"})
         (alias
            {if_else
               {==
                  [anim_mode]
                  kScrub}
               "frame"
               "end"})
         (read_only
            {&&
               {!=
                  [anim_mode]
                  kScrub}
               {==
                  [enable]
                  FALSE}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      FLOWNODE_EDITORBLOCK))
(FlowPickOne
   (description
      "Picks certain children and activates them")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fpick)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (choice_type
         int
         (list
            (("kChoiceOrdered"
                  (alias
                     "Ordered")
                  (help
                     "Picked in order"))
               ("kChoiceRandom"
                  (alias
                     "Random")
                  (help
                     "Pick randomly (can repeat)"))
               ("kChoiceRandomNoRepeat"
                  (alias
                     "Random, No Repeats")
                  (help
                     "Pick randomly, but don't repeat"))
               ("kChoiceRandomJukeBox"
                  (alias
                     "Jukebox Random")
                  (help
                     "Only repeat when everything from the list has been chosen"))
               ("kChoiceUseIndex"
                  (alias
                     "Use Choice Index")
                  (help
                     "Use the index property to decide which one to pick"))))
         (help
            "Style of choice made"))
      (index
         int
         (alias
            "Choice Index")
         (hide
            {!=
               [choice_type]
               kChoiceUseIndex})
         (help
            "The child to pick (0 is first child)")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (chance
         float
         (range 0 1)
         (slider)
         (help
            "0 to 1 value representing the chance this node runs when activated")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      FLOWNODE_EDITORBLOCK))
(FlowOnStop
   (description
      "Runs code when a flow is deactivated or requested to stop")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fstop)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (mode
         int
         (list
            (("kDeactivateOnly"
                  (alias
                     "Deactivate Only")
                  (help
                     "Only runs when deactivated (hard, forced stop)"))
               ("kRequestStopOnly"
                  (alias
                     "Request Stop Only")
                  (help
                     "Only runs when request stop is called (latent stop)"))
               ("kAlways"
                  (alias
                     "Always")
                  (help
                     "Runs on activate and request stop"))))
         (help
            "Do we only work on interuption request, or when forced to stop immediately"))
      FLOWNODE_EDITORBLOCK))
(FlowIf
   (description
      "a single case decision node")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext if)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (first_value
         int
         (help
            "left hand value in comparison")
         USE_VALUE_ALIAS
         DRIVE_PROPERTY_BUTTON_NO_FILTER
         (no_test)
         (no_validate))
      (operator
         int
         (list
            (("kEqual"
                  (alias
                     "Equal"))
               ("kNotEqual"
                  (alias
                     "Not Equal"))
               ("kGreaterThan"
                  (alias
                     "Greater Than"))
               ("kGreaterThanOrEqual"
                  (alias
                     "Greater Than or Equal"))
               ("kLessThan"
                  (alias
                     "Less Than"))
               ("kLessThanOrEqual"
                  (alias
                     "Less than or Equal"))))
         (hide
            {==
               [operator]
               kDefault})
         (help
            "equality case to use for comparison")
         (no_test))
      (second_value
         int
         (help
            "right hand value in comparison")
         USE_VALUE_ALIAS
         DRIVE_PROPERTY_BUTTON_NO_FILTER
         (no_test)
         (no_validate))
      FLOWNODE_EDITORBLOCK))
(FlowSwitch
   (description
      "activates children based on comparison cases")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fswitch)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (value
         int
         (value_alias
            TRUE
            {$this get_value_display})
         DRIVE_PROPERTY_BUTTON_NO_FILTER
         (help
            "The left hand side value of the comparison")
         (no_test))
      (first_valid_case_only
         bool
         (help
            "When true, the first case to be valid is the only one activated"))
      FLOWNODE_EDITORBLOCK))
(FlowSwitchCase
   (description
      "a case for a flow switch")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fcase)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (use_last_value
         bool
         (help
            "Use the last value to compare against"))
      (from_value
         int
         (hide
            {'||'
               {!=
                  [operator]
                  kTransition}
               {&&
                  {==
                     [operator]
                     kTransition}
                  {==
                     [use_last_value]
                     TRUE}}})
         (help
            "the value we're transitioning from")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (to_value
         int
         (alias
            {if_else
               {==
                  [operator]
                  kTransition}
               "to value"
               "value"})
         (help
            {if_else
               {&&
                  {$this
                     has
                     (operator)}
                  {==
                     [operator]
                     kTransition}}
               "the value we're transitioning to"
               "the value"})
         (hide
            {'||'
               {==
                  [operator]
                  kDefault}
               {&&
                  {!=
                     [operator]
                     kTransition}
                  {==
                     [use_last_value]
                     TRUE}}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (operator
         int
         (list
            (("kEqual"
                  (alias
                     "Equal"))
               ("kNotEqual"
                  (alias
                     "Not Equal"))
               ("kGreaterThan"
                  (alias
                     "Greater Than"))
               ("kGreaterThanOrEqual"
                  (alias
                     "Greater Than or Equal"))
               ("kLessThan"
                  (alias
                     "Less Than"))
               ("kLessThanOrEqual"
                  (alias
                     "Less than or Equal"))
               ("kTransition"
                  (alias
                     "Transition"))))
         (hide
            {==
               [operator]
               kDefault})
         (help
            "equality case to use for comparison")
         (no_test))
      (unregister_parent
         bool
         (help
            "When true, the while node will quit listening for events once this case is run")
         (hide
            {!
               {$this is_parent_while}}))
      FLOWNODE_EDITORBLOCK))
(FlowRun
   (description
      "Run or stop another Flow")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext frun)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (target_dir
         object
         FLOW_LOADING_DIR
         (class ObjectDir)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "Allows you to target flows inside of proxies"))
      (target
         object
         (list
            {$this get_target_list})
         (dir
            [target_dir])
         (no_test)
         (help
            "Flow to start or stop"))
      (stop
         bool
         (help
            "Stop instead of starting the target flow?")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (immediate_release
         bool
         (alias
            "fire and forget")
         (help
            "If true, we don't track the running state of the target flow")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      FLOWNODE_EDITORBLOCK))
(FlowTimer
   (description
      "Simple timer with child support")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext ftimer)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate to use for time"))
      (total_time
         float
         (help
            "total time of timer")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (stop_mode
         int
         (list
            (("kStopImmediate"
                  (alias
                     "Immediately")
                  (help
                     "Stop immediately."))
               ("kStopLastFrame"
                  (alias
                     "When Finished")
                  (help
                     "Stop when the timer is finished"))))
         (help
            "How should we handle stop requests?"))
      FLOWNODE_EDITORBLOCK))
(FlowValueCase
   (description
      "A value case")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fvcase)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (value
         float
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "Key frame value"))
      FLOWNODE_EDITORBLOCK))
(FlowLinkOut
   (description
      "A link out point from the flow that can be attached to other objects")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fout)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (link_name
         symbol
         (alias
            "name")
         (help
            "The name of the link out point"))
      (exposed_on_entity
         bool
         (help
            "When checked, this link node will appear as a link start point on the entity owning this Flow. \n			       When not checked, this link node will appear as a link start point on this Flow itself.")
         (hide
            {do
               ($dir
                  {{$this get_top_flow}
                     dir})
               {'||'
                  {== $dir ''}
                  {!
                     {$dir is_a Entity}}}}))
      (immediate_release
         bool
         (alias
            "fire and forget")
         (help
            "do not wait around for the link to finish?"))
      FLOWNODE_EDITORBLOCK))
(FlowLinkIn
   (description
      "A link in to the flow, which will run children when this link is activated if the node is running")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fout)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (link_name
         symbol
         (alias
            "name")
         (help
            "The name of the link out point"))
      (exposed_on_entity
         bool
         (help
            "When checked, this link node will appear as a link end point on the entity owning this Flow. \n			       When not checked, this link node will appear as a link end point on this Flow itself.")
         (hide
            {do
               ($dir
                  {{$this get_top_flow}
                     dir})
               {'||'
                  {== $dir ''}
                  {!
                     {$dir is_a Entity}}}}))
      (gate_type
         int
         (list
            (("kGateNone"
                  (alias
                     "None")
                  (help
                     "No gating, every link in activates"))
               ("kGatePercent"
                  (alias
                     "Percent")
                  (help
                     "Require some percentage of links to activate before activating children"))
               ("kGateCount"
                  (alias
                     "Count")
                  (help
                     "Require some number of links to activate before activating children"))))
         (help
            "Allows you to require multiple link ins to fire before running children"))
      (gate_value
         int
         (hide
            {==
               [gate_type]
               kGateNone})
         (help
            "Percent or Number of links which must fire before running children")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (activate_count
         int
         (range 0 1000000)
         (help
            "How many times do we activate before releasing to our parent? 0 for infinite"))
      (active_links_output_name
         symbol
         (help
            "If provided, this will create a parameter on the flow with the number of currently active links on it."))
      FLOWNODE_EDITORBLOCK))
(FlowRunLabel
   (description
      "Run the specified label node; useful for flow encapsulation or shared logic within a flow")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fout)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (label
         string
         (alias
            "name")
         (help
            "Name of the label to run"))
      (immediate_release
         bool
         (alias
            "fire and forget")
         (help
            "do not wait around for the label to finish?"))
      (stop
         bool
         (help
            "When true, we request the label to stop instead of running it"))
      FLOWNODE_EDITORBLOCK))
(FlowLabel
   (description
      "A label for flow encapsulation")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext flbl)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (interrupt
         int
         (list INTERRUPT_LIST)
         (help
            "Determines how we handle re-triggering of this label"))
      FLOWNODE_EDITORBLOCK))
(FlowPropertyEffect
   (description
      "Temporarily modifies a property while retaining base value")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (superclasses)
   (hide_from_editor TRUE)
   (ext pe)
   (editor
      (target
         prop_ref
         FLOW_LOADING_DIR
         (list
            {$this get_property_objects TRUE})
         (prop_context flow)
         (allow_read_only_props FALSE)
         (allowed_prop_types
            (int float color symbol string object bool waveform_float waveform_color))
         (help
            "The property this node affects."))
      (stop_mode
         int
         (list
            (("kStopImmediate"
                  (alias
                     "Immediately")
                  (help
                     "Stop immediately."))
               ("kStopLastFrame"
                  (alias
                     "When finished")
                  (help
                     "Stop at the end of this action."))
               ("kRampOutBeforeRelease"
                  (alias
                     "Ramp out, then release")
                  (help
                     "Ramp the animation out, then release"))))
         (help
            "How should we handle stop requests?"))
      (value
         int
         FLOW_LOADING_DIR
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (no_test)
         (help
            "value to modify this property by"))
      (persistent
         bool
         (help
            "Makes this node act like While node, updating automatically when a driven property changes"))
      (math_op
         int
         (list
            {$this get_op_types})
         (alias
            "math operation")
         (help
            "how to apply this value"))
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate for time"))
      (total_time
         float
         (help
            "total time of modification, 0 for until the node is stopped")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (ease_in_time
         float
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (hide
            {!
               {$this can_blend}})
         (help
            "time for ease in"))
      (ease_in_type
         int
         (list EASING_TYPES)
         (hide
            {!
               {$this can_blend}})
         (help
            "easing style to use"))
      (ease_in_power
         float
         (help
            "used in regular, elasic, and back easing")
         (hide
            {!
               {$this can_blend}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (ease_out_time
         float
         (hide
            {!
               {$this can_blend}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "time for ease in"))
      (ease_out_type
         int
         (list EASING_TYPES)
         (hide
            {!
               {$this can_blend}})
         (help
            "easing style to use"))
      (ease_out_power
         float
         (help
            "used in regular, elasic, and back easing")
         (hide
            {!
               {$this can_blend}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      FLOWNODE_EDITORBLOCK))
(FlowSetProperty
   (description
      "Set a property on an object")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fset)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (target
         prop_ref
         FLOW_LOADING_DIR
         (list
            {$this get_property_objects TRUE})
         (prop_context flow)
         (allow_read_only_props FALSE)
         (help
            "The property this node affects."))
      (value
         int
         FLOW_LOADING_DIR
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (no_test)
         (help
            "value to apply to this property"))
      (persistent
         bool
         (help
            "Makes this node act like While node, updating automatically when a driven property changes"))
      (ramp
         bool
         (help
            "Ramp property over time?")
         (hide
            {!
               {$this allow_ramp}})
         (no_test))
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate to animate")
         (hide
            {!
               {$this show_ramp}})
         (no_test))
      (blend_time
         float
         (help
            "total time of blend to value")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (no_test)
         (hide
            {!
               {$this show_ramp}}))
      (change_per_unit
         float
         (help
            "base time of blend of distance to value")
         (hide
            {!
               {$this show_ramp}})
         (no_test)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (ease
         int
         (list EASING_TYPES)
         (no_test)
         (help
            "easing style to use for blend")
         (hide
            {!
               {$this show_ramp}}))
      (ease_power
         float
         (help
            "used in regular, elasic, and back easing")
         (hide
            {!
               {$this show_ramp}})
         (range 0 10000)
         (no_test)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (stop_mode
         int
         (list
            (("kStopImmediate"
                  (alias
                     "Immediately")
                  (help
                     "Stop immediately."))
               ("kStopLastFrame"
                  (alias
                     "When Finished")
                  (help
                     "Stop at the end of this action."))))
         (no_test)
         (help
            "How should we handle stop requests?")
         (hide
            {&&
               {!
                  [persistent]}
               {!
                  {$this show_ramp}}}))
      FLOWNODE_EDITORBLOCK))
(FlowMultiSetProperty
   (description
      "Set a property a bunch of objects at once")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fmset)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (targets
         (array
            object
            (class Object)
            FLOW_LOADING_DIR
            (list
               {$this get_allowed_targets $editor_prop_path})
            (help
               "Object to set property on."))
         (help
            "Objects to set property on."))
      (property
         prop_ref
         (prop_context flow)
         (allow_read_only_props FALSE)
         (fixed_obj
            {if_else
               {>
                  {size
                     [targets]}
                  0}
               [targets 0]
               ''})
         (help
            "The property this node affects."))
      (value
         int
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (no_test)
         (help
            "value to apply to all objects"))
      FLOWNODE_EDITORBLOCK))
(FlowSlider
   (description
      "Ramps intensity up/down on child nodes based on value of slider")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fslide)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (value
         float
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "position on slider"))
      (persistent
         bool
         (help
            "Do we listen for changes on our value property?"))
      (always_run
         bool
         (help
            "If true, we run all children regardless of intensity. If false, we stop and start them based on intensity"))
      (ease
         int
         (list EASING_TYPES)
         (help
            "Easing to apply to slider intensity output"))
      (ease_power
         float
         (help
            "Modifier to easing equation")
         (range 0 10000)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (change_per_unit
         float
         (help
            "Maximum amount of change per unit of time allowed by the slider; will basically apply lag to the slider")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS)
      (change_rate
         int
         (list TASK_UNITS)
         (help
            "timeline to use for change_per_unit"))
      (wrap_size
         float
         (help
            "Allows you to create a circular slider that blends the last and first children together. To use, set this value to the value of the repeat point (in other words, the total size of the slider)"))
      FLOWNODE_EDITORBLOCK))
(FlowWhile
   (description
      "A while node; behaves as if constantly evaluting it's property")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fwhile)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (value
         int
         (value_alias
            TRUE
            {$this get_value_display})
         DRIVE_PROPERTY_BUTTON_NO_FILTER
         (help
            "Left hand side comparison value")
         (no_test))
      (first_valid_case_only
         bool
         (help
            "When true, the first case to be valid is the only one activated"))
      FLOWNODE_EDITORBLOCK))
(FlowDistance
   (description
      "Runs children when two trans objects are within a range")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext dist)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (one
         object
         (class Trans)
         FLOW_LOADING_DIR
         (list
            {$this get_property_objects TRUE Trans})
         (help
            "First object to compare")
         (no_test))
      (two
         object
         (class Trans)
         FLOW_LOADING_DIR
         (list
            {$this get_property_objects TRUE Trans})
         (help
            "Second object to compare")
         (no_test))
      (distance
         float
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "Distance used to drive intensity based on comparison. For instance, if this is 10 and the objects are >= 10 units away, then intensity will be 1"))
      (persistent
         bool
         (help
            "Is the node persistent?"))
      (run_in_range
         bool
         (help
            "Run children when closer than distance value"))
      (drive_intensity
         bool
         (help
            "Applies current distance to flow intensity, closer being higher intensity"))
      (distance_output_name
         symbol
         (help
            "If provided, this will create a parameter on the flow with the distance between object one and two on it"))
      FLOWNODE_EDITORBLOCK))
(FlowWwiseEvent
   (description
      "Fires an audio event")
   (allowed_dirs Flow)
   (user_creatable FALSE)
   (ext fwwise)
   (hide_from_editor TRUE)
   (superclasses)
   (editor
      (game_object_override
         object
         (class Object)
         (alias
            "audio emitter")
         (no_test)
         (list
            {$this get_property_objects TRUE})
         FLOW_LOADING_DIR
         (help
            "The target emitter for this event; i.e. the object that emits the sound.")
         DRIVE_PROPERTY_BUTTON)
      (event_type
         int
         (alias
            "type")
         (list WWISE_EVENT_ENUM)
         (help
            "The type of event to run"))
      (event_name
         symbol
         (list
            {$this valid_names})
         (help
            "Name of the event to fire")
         (alias
            {if_else
               {==
                  [event_type]
                  kEvent}
               "event"
               "trigger"}))
      (soundbank
         symbol
         (list
            {get_wwise_soundbank_names})
         (help
            "Name of the soundbank to load"))
      (timeline
         int
         (list TASK_UNITS)
         (alias
            "timeline")
         (help
            "Timeline to play and pause with."))
      (unregistered_behavior
         int
         (list WWISE_UNREGISTERED_BEHAVIOR_ENUM)
         (help
            "What should happen if the event is posted on an unregistered Wwise component"))
      (immediate_release
         bool
         (alias
            "fire and forget")
         (help
            "Do not wait for event to finish before finishing flow execution.  Disables the use of markers when true.")
         (hide
            {==
               [event_type]
               kTrigger}))
      (stop_mode
         int
         (list
            (("kStopImmediate"
                  (alias
                     "Immediately")
                  (help
                     "Stop immediately."))
               ("kReleaseAndContinue"
                  (alias
                     "Release and Continue")
                  (help
                     "When asked to stop, release but leave the sound playing.")))))
      (markers
         (array symbol)
         (hide
            [immediate_release])
         (help
            "List of expected markers.  Markers cannot be added if this event is marked fire and forget."))
      FLOWNODE_EDITORBLOCK))
#define kMathOpNotSet
(-2)
#define kMathOpInitValue
(-1)
#define kMathOpAdd
(0)
#define kMathOpSubtract
(1)
#define kMathOpMultiply
(2)
#define kMathOpDivide
(3)
#define kMathOpVariance
(4)
#define kMathOpClampMin
(5)
#define kMathOpClampMax
(6)
#define kMathOpWrap
(7)
#define kMathOpRound
(8)
#define kMathOpRoundDown
(9)
#define kMathOpRoundUp
(10)
#define kMathOpRangeToDb
(11)
#define kMathOpRangeToInverseDb
(12)
#define kMathOpAbsoluteValue
(13)
#define kMathOpSine
(14)
#define kMathOpCoSine
(15)
#define kMathOpPower
(16)
#define kMathOpScript
(17)
#define kMathOpArcSin
(18)
#define kMathOpArcCos
(19)
#define kMathOpArcTan
(20)
#define kMathOpLastC
(20)
#define kMathOpCustom
(100)
(mathops
   (kMathOpNotSet
      (name
         "Select...")
      (args
         "Value")
      (shorthand
         "%s")
      (display
         "%s")
      (help
         "Newly initialized operation; select a type"))
   (kMathOpInitValue
      (name
         "Initial Value")
      (args
         "Value")
      (shorthand
         "%s")
      (display
         "Initial Value %s")
      (help
         "Sets the initial value"))
   (kMathOpAdd
      (name
         "Add")
      (args
         "Value")
      (shorthand
         "+ %s")
      (display
         "Add %s")
      (help
         "Adds the value specified"))
   (kMathOpSubtract
      (name
         "Subtract")
      (args
         "Value")
      (shorthand
         "- %s")
      (display
         "Subtract %s")
      (help
         "Subtracts the value specified"))
   (kMathOpMultiply
      (name
         "Multiply")
      (args
         "Value")
      (shorthand
         "* %s")
      (display
         "Multiply %s")
      (help
         "Multiply by value specified"))
   (kMathOpDivide
      (name
         "Divide")
      (args
         "Value")
      (shorthand
         "/ %s")
      (display
         "Divide by %s")
      (help
         "Divide by value specified"))
   (kMathOpVariance
      (name
         "Variance")
      (args
         "Value")
      (shorthand
         "+-(rand %s)")
      (display
         "Vary by %s")
      (help
         "Vary by the value specified"))
   (kMathOpClampMin
      (name
         "Clamp Min")
      (args
         "Min")
      (shorthand
         "->clampMin(%s)")
      (display
         "Clamp Minimum %s")
      (help
         "Clamps the value to no less than the value specified"))
   (kMathOpClampMax
      (name
         "Clamp Max")
      (args
         "Max")
      (shorthand
         "->clampMax(%s)")
      (display
         "Clamp Maximum %s")
      (help
         "Clamps the value to no more than the value specified"))
   (kMathOpWrap
      (name
         "Wrap")
      (args
         "0 to")
      (shorthand
         "->wrap(%s)")
      (display
         "Wrap %s")
      (help
         "Wraps the value into a range of 0 to the value specified"))
   (kMathOpRound
      (name
         "Round")
      (args
         "Unit")
      (shorthand
         "->round(%s)")
      (display
         "Round %s")
      (help
         "Round to the nearest value unit specified"))
   (kMathOpRoundDown
      (name
         "Round Down")
      (args
         "Unit")
      (shorthand
         "->roundDown(%s)")
      (display
         "Round Down %s")
      (help
         "Round down to the nearest value unit specified"))
   (kMathOpRoundUp
      (name
         "Round Up")
      (args
         "Unit")
      (shorthand
         "->roundUp(%s)")
      (display
         "Round Up %s")
      (help
         "Round up to the nearest value unit specified"))
   (kMathOpRangeToDb
      (name
         "Range to DB")
      (args
         "0 to")
      (shorthand
         "->rangeToDb(%s)")
      (display
         "Range to DB (0 to %s)")
      (help
         "Convert 0 to value range to -96 to 0 db"))
   (kMathOpRangeToInverseDb
      (name
         "Range to Inverse DB")
      (args
         "0 to")
      (shorthand
         "->rangeToInverseDb(%s)")
      (display
         "Range to Inverse DB (0 to %s)")
      (help
         "Convert 0 to value range to 0 to -96 db"))
   (kMathOpAbsoluteValue
      (name
         "Absolute Value")
      (args)
      (shorthand
         "->abs()")
      (display
         "absolute value")
      (help
         "Absolute value makes a negative number positive"))
   (kMathOpSine
      (name
         "Sine")
      (args)
      (shorthand
         "->sin()")
      (display
         "Sine")
      (help
         "Value representing an angle expressed in radians"))
   (kMathOpCoSine
      (name
         "CoSine")
      (args)
      (shorthand
         "->cosin()")
      (display
         "CoSine")
      (help
         "Value representing an angle expressed in radians"))
   (kMathOpPower
      (name
         "Power")
      (args
         "Exponent")
      (shorthand
         "^(%s)")
      (display
         "Power %s")
      (help
         "Raises value by power exponent"))
   (kMathOpScript
      (name
         "Script")
      (args
         "Script")
      (shorthand
         "{%s})")
      (display
         "Script %s")
      (help
         "Custom DTA script, just type it in."))
   (kMathOpArcSin
      (name
         "ArcSin")
      (args)
      (shorthand
         "->asin()")
      (display
         "ArcSin")
      (help
         "Inverse sin"))
   (kMathOpArcCos
      (name
         "ArcCos")
      (args)
      (shorthand
         "->acos()")
      (display
         "ArcCos")
      (help
         "Inverse cos"))
   (kMathOpArcTan
      (name
         "ArcTan")
      (args)
      (shorthand
         "->atan()")
      (display
         "ArcTan")
      (help
         "Inverse tan"))
   (scalar_to_db
      (name
         "scalar_to_db")
      (args)
      (shorthand
         "->scalar_to_db()")
      (display
         "scalar to db")
      (help
         "Convert 0 to 1 scalar value to -96 to 0 db")
      (script
         {do
            {set
               $val
               {ratio_to_db $val}}
            $val}))
   (db_to_scalar
      (name
         "db_to_scalar")
      (args)
      (shorthand
         "->db_to_scalar()")
      (display
         "db to scalar")
      (help
         "Convert a db value to a scalar 0 to 1 value")
      (script
         {do
            {set
               $val
               {db_to_ratio $val}}
            $val}))
   (range_to_scalar
      (name
         "range_to_scalar")
      (args
         "0 to")
      (shorthand
         "->range_to_scalar(%s)")
      (display
         "range to scalar %s")
      (help
         "Convert a 0 to n value to 0 to 1 scalar")
      (script
         {do
            {set
               $val
               {clamp $val 0 $prop_val}}
            {if
               {!= $prop_val 0}
               {set
                  $val
                  {/ $val $prop_val}}}
            $val})))