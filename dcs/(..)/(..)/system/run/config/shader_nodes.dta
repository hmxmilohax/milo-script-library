#define SHADER_NODE_BASE
((allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node TRUE)
   (superclasses ShaderNode))
#define SHADER_MATH_NODE
((size 104 104)
   (inputs
      (x)
      (y))
   (outputs
      (out)))
#define SHADER_FUNC_FLOAT_NODE
((size 104 104)
   (inputs
      (x))
   (outputs
      (out)))
#define SHADER_FUNC_ANY_NODE
((size 104 104)
   (inputs
      (x))
   (outputs
      (out)))
#define SHADER_FUNC_FLOAT3_NODE
((size 104 104)
   (inputs
      (x)
      (y)
      (z))
   (outputs
      (out)))
#define TEX_SAMPLER_COLOR
((color 153 0 76))
#define SHADERNODE_Y_SIZE_INOUTS_1
(48)
#define SHADERNODE_Y_SIZE_INOUTS_2
(54)
#define SHADERNODE_Y_SIZE_INOUTS_3
(70)
#define SHADERNODE_Y_SIZE_INOUTS_4
(88)
#define SHADERNODE_Y_SIZE_INOUTS_5
(104)
#define SHADERNODE_Y_SIZE_INOUTS_6
(120)
#define SHADERNODE_Y_SIZE_INOUTS_7
(140)
#define SHADERNODE_Y_SIZE_INOUTS_8
(154)
#define SHADERNODE_Y_SIZE_INOUTS_10
(184)
#define SHADERNODE_Y_SIZE_INOUTS_12
(224)
#define SHADERNODE_Y_SIZE_INOUTS_13
(239)
#define SHADERNODE_Y_SIZE_INOUTS_14
(254)
#define SHADERNODE_Y_SIZE_INOUTS_15
(269)
#define SHADERNODE_PREVIEW_WIDTH
(104)
#define SHADERNODE_STANDARD_SIZE_X
(104)
#define SHADERNODE_STANDARD_SIZE
(104 104)
#define SHADERNODE_RGBA_OUTPUTS
((outputs
      (rgba
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (a
         (color 255 255 255))))
#define SHADERNODE_RGB_OUTPUTS
((outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))))
#define kShaderTextureChannelR
(0)
#define kShaderTextureChannelG
(1)
#define kShaderTextureChannelB
(2)
#define kShaderTextureChannelA
(3)
#define SHADER_TEXTURE_CHANNELS
((list
      (("kShaderTextureChannelR"
            (alias
               "R")
            (help
               "Red Channel"))
         ("kShaderTextureChannelG"
            (alias
               "G")
            (help
               "Green Channel"))
         ("kShaderTextureChannelB"
            (alias
               "B")
            (help
               "Blue Channel"))
         ("kShaderTextureChannelA"
            (alias
               "A")
            (help
               "Alpha Channel")))))
#define kPreviewTextureChannelAll
(0)
#define kPreviewTextureChannelR
(1)
#define kPreviewTextureChannelG
(2)
#define kPreviewTextureChannelB
(3)
#define kPreviewTextureChannelA
(4)
#define SHADER_PREVIEW_CHANNELS
((list
      (("kPreviewTextureChannelAll"
            (alias
               "All")
            (help
               "All Channels"))
         ("kPreviewTextureChannelR"
            (alias
               "R")
            (help
               "Red Channel"))
         ("kPreviewTextureChannelG"
            (alias
               "G")
            (help
               "Green Channel"))
         ("kPreviewTextureChannelB"
            (alias
               "B")
            (help
               "Blue Channel"))
         ("kPreviewTextureChannelA"
            (alias
               "A")
            (help
               "Alpha Channel")))))
#define SHADERNODE_PREVIEW_CHANNELS
((preview_channel
      int
      SHADER_PREVIEW_CHANNELS
      (alias
         "Preview Channel")
      (help
         "Texture channel to show for node preview")
      (history FALSE)
      (no_test copy serialize)))
(ShaderNodeRoot
   (superclasses ShaderNode))
(ShaderNodeUnlit
   (alias
      "UN-lit")
   (description
      "Root Node: Unlit")
   (superclasses ShaderNodeRoot)
   (allowed_dirs)
   (avail_shader_node FALSE)
   (hide_from_editor TRUE)
   (size 120 SHADERNODE_Y_SIZE_INOUTS_8)
   (inputs
      (vertex_offset
         (alias
            "Vertex Offset")
         (help
            "Input is added to the position of the vertex"))
      (vertex_normal
         (alias
            "Vertex Normal")
         (help
            "Direction for vertex normal"))
      (vertex_tangent
         (alias
            "Vertex Tangent")
         (help
            "Tangent direction for vertex normal"))
      (vertex_displacement
         (alias
            "Vertex Displacement")
         (help
            "Displaces verts along the normal"))
      (diffuse_color
         (alias
            "Diffuse Color")
         (help
            "The diffuse color for the pixel shader"))
      (alpha
         (alias
            "Alpha")
         (help
            "The alpha value for the pixel shader"))
      (bloom_mult
         (alias
            "Bloom Mult")
         (help
            "Amplifies the bloom effect in the pixel shader"))
      (fog_mult
         (alias
            "Fog Mult")
         (help
            "Controls how much fog is applied to this pixel (< 1 for less fog, > 1 for more fog)"))))
(ShaderNodeLitStd
   (alias
      "Lit (Standard)")
   (description
      "Root Node: Standard Lit")
   (superclasses ShaderNodeRoot)
   (allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node FALSE)
   (size 120 SHADERNODE_Y_SIZE_INOUTS_13)
   (editor
      (world_space_normal
         bool
         (help
            "If the vector plugged into the world surface normal input is in worldspace.")))
   (inputs
      (vertex_offset
         (alias
            "Vertex Offset")
         (help
            "Input is added to the position of the vertex"))
      (vertex_normal
         (alias
            "Vertex Normal")
         (help
            "Direction for vertex normal"))
      (vertex_tangent
         (alias
            "Vertex Tangent")
         (help
            "Tangent direction for vertex normal"))
      (vertex_displacement
         (alias
            "Vertex Displacement")
         (help
            "Displaces verts along the normal"))
      (diffuse_color
         (alias
            "Diffuse Color")
         (help
            "The diffuse color for the pixel shader"))
      (alpha
         (alias
            "Alpha")
         (help
            "The alpha value for the pixel shader"))
      (bloom_mult
         (alias
            "Bloom Mult")
         (help
            "Amplifies the bloom effect in the pixel shader"))
      (fog_mult
         (alias
            "Fog Mult")
         (help
            "Controls how much fog is applied to this pixel (< 1 for less fog, > 1 for more fog)"))
      (specular_color
         (alias
            "Specular Color")
         (help
            "The specular color for the pixel shader"))
      (specular_power
         (alias
            "Specular Power")
         (help
            "Controls the size of the specular highlight"))
      (emissive_color
         (alias
            "Emissive Color")
         (help
            "Emissive color of the pixel"))
      (surface_normal
         (alias
            "Surface Normal")
         (help
            "Normal direction for normal mapping"))
      (normal_strength
         (alias
            "Normal Strength")
         (help
            "Strength used for normal mapping"))))
(ShaderNodeLitSubsurface
   (alias
      "Lit (Subsurface)")
   (description
      "Root Node: Lit Subsurface Scattering (Dx11-only)")
   (superclasses ShaderNodeLitStd)
   (allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node FALSE)
   (size 120 SHADERNODE_Y_SIZE_INOUTS_15)
   (inputs
      (vertex_offset
         (alias
            "Vertex Offset")
         (help
            "Input is added to the position of the vertex"))
      (vertex_normal
         (alias
            "Vertex Normal")
         (help
            "Direction for vertex normal"))
      (vertex_tangent
         (alias
            "Vertex Tangent")
         (help
            "Tangent direction for vertex normal"))
      (vertex_displacement
         (alias
            "Vertex Displacement")
         (help
            "Displaces verts along the normal"))
      (diffuse_color
         (alias
            "Diffuse Color")
         (help
            "The diffuse color for the pixel shader"))
      (alpha
         (alias
            "Alpha")
         (help
            "The alpha value for the pixel shader"))
      (bloom_mult
         (alias
            "Bloom Mult")
         (help
            "Amplifies the bloom effect in the pixel shader"))
      (fog_mult
         (alias
            "Fog Mult")
         (help
            "Controls how much fog is applied to this pixel (< 1 for less fog, > 1 for more fog)"))
      (specular_color
         (alias
            "Specular Color")
         (help
            "The specular color for the pixel shader"))
      (specular_power
         (alias
            "Specular Power")
         (help
            "Controls the size of the specular highlight"))
      (emissive_color
         (alias
            "Emissive Color")
         (help
            "Emissive color of the pixel"))
      (surface_normal
         (alias
            "Surface Normal")
         (help
            "Normal direction for normal mapping"))
      (normal_strength
         (alias
            "Normal Strength")
         (help
            "Strength used for normal mapping"))
      (subsurface_color
         (alias
            "Subsurface Color")
         (help
            "Material color applied to light from subsurface scattering"))
      (subsurface_opacity
         (alias
            "Subsurface Opacity")
         (help
            "Opacity used to blend in subsurface scattering (1 for no subsurface scattering, 0 for maximal subsurface scattering)"))))
(ShaderNodeLitAnisotropic
   (alias
      "Lit (Anisotropic)")
   (description
      "Root Node: Lit with Anisotropic Highlighting (Dx11-only)")
   (superclasses ShaderNodeLitStd)
   (allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node FALSE)
   (size 120 SHADERNODE_Y_SIZE_INOUTS_15)
   (inputs
      (vertex_offset
         (alias
            "Vertex Offset")
         (help
            "Input is added to the position of the vertex"))
      (vertex_normal
         (alias
            "Vertex Normal")
         (help
            "Direction for vertex normal"))
      (vertex_tangent
         (alias
            "Vertex Tangent")
         (help
            "Tangent direction for vertex normal"))
      (vertex_displacement
         (alias
            "Vertex Displacement")
         (help
            "Displaces verts along the normal"))
      (diffuse_color
         (alias
            "Diffuse Color")
         (help
            "The diffuse color for the pixel shader"))
      (alpha
         (alias
            "Alpha")
         (help
            "The alpha value for the pixel shader"))
      (bloom_mult
         (alias
            "Bloom Mult")
         (help
            "Amplifies the bloom effect in the pixel shader"))
      (fog_mult
         (alias
            "Fog Mult")
         (help
            "Controls how much fog is applied to this pixel (< 1 for less fog, > 1 for more fog)"))
      (specular_color
         (alias
            "Specular Color")
         (help
            "The specular color for the pixel shader"))
      (specular_power
         (alias
            "Specular Power")
         (help
            "Controls the size of the specular highlight"))
      (emissive_color
         (alias
            "Emissive Color")
         (help
            "Emissive color of the pixel"))
      (surface_normal
         (alias
            "Surface Normal")
         (help
            "Normal direction for normal mapping"))
      (normal_strength
         (alias
            "Normal Strength")
         (help
            "Strength used for normal mapping"))
      (surface_tangent
         (alias
            "Surface Tangent")
         (help
            "Tangent of the surface across which the highlights are formed"))
      (anisotropy
         (alias
            "Highlight Offset")
         (help
            "Offsets anisotropic highlights towards the root of the hair"))))
(ShaderNodeSky
   (alias
      "Sky")
   (description
      "Root Node: Sky lighting model (intended to be drawn as a screenmask on the far plane)")
   (superclasses ShaderNode)
   (allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node FALSE)
   (size 120 320)
   (inputs
      (view_dir
         (alias
            "view vec")
         (help
            "World-space view direction"))
      (sky_color
         (alias
            "sky color")
         (help
            "Color of the open sky (before any atmosphere scattering occurs)"))
      (is_ground
         (alias
            "is ground?")
         (help
            "Is this a ground pixel?"))
      (ground_pos
         (alias
            "ground pos")
         (help
            "Ground position (in Km)"))
      (ground_normal
         (alias
            "ground normal")
         (help
            "World-space ground surface normal"))
      (ground_diffuse
         (alias
            "ground diffuse")
         (help
            "Diffuse color of the ground"))
      (ground_spec_color
         (alias
            "ground spec color")
         (help
            "Specular color of the ground"))
      (ground_spec_power
         (alias
            "ground spec power")
         (help
            "Specular power of the ground"))
      (cloud_pos_a
         (alias
            "A: cloud pos")
         (help
            "Cloud position at source A (in Km)"))
      (cloud_normal_a
         (alias
            "A: cloud normal")
         (help
            "World-space cloud surface normal at source A"))
      (cloud_tangent_a
         (alias
            "A: cloud tangent")
         (help
            "World-space cloud surface tangent at source A"))
      (cloud_thickness_a
         (alias
            "A: cloud thickness")
         (help
            "Cloud thickness at source A (0 to 1)"))
      (cloud_tint_a
         (alias
            "A: cloud tint")
         (help
            "Cloud tint at source A"))
      (cloud_alpha_a
         (alias
            "A: cloud alpha")
         (help
            "Cloud alpha at source A"))
      (cloud_pos_b
         (alias
            "B: cloud pos")
         (help
            "Cloud position at source B (in Km)"))
      (cloud_normal_b
         (alias
            "B: cloud normal")
         (help
            "World-space cloud surface normal at source B"))
      (cloud_tangent_b
         (alias
            "B: cloud tangent")
         (help
            "World-space cloud surface tangent at source B"))
      (cloud_thickness_b
         (alias
            "B: cloud thickness")
         (help
            "Cloud thickness at source B (0 to 1)"))
      (cloud_tint_b
         (alias
            "B: cloud tint")
         (help
            "Cloud tint at source B"))
      (cloud_alpha_b
         (alias
            "B: cloud alpha")
         (help
            "Cloud alpha at source B"))))
(ShaderNodeFog
   (alias
      "Fog")
   (description
      "Root Node: Fog lighting model (intended to be drawn the material for a Fog object)")
   (superclasses ShaderNode)
   (allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node FALSE)
   (size 120 SHADERNODE_Y_SIZE_INOUTS_1)
   (inputs
      (color
         (help
            "Final (fogged) color"))))
(ShaderNodePostProcLayer
   (alias
      "PostProcLayer")
   (description
      "Root Node: Layer that can be rendered before or after the main post proc")
   (superclasses ShaderNode)
   (allowed_dirs)
   (hide_from_editor TRUE)
   (avail_shader_node FALSE)
   (size 120 SHADERNODE_Y_SIZE_INOUTS_1)
   (inputs
      (color
         (help
            "Final color"))))
(ShaderNodeTime
   SHADER_NODE_BASE
   (alias
      "Time")
   (category Constants)
   (description
      "Time Output\nThe time node provides time from each of our timelines. This allows you to create time based animation and effects tied to any of our timelines (seconds, beat, tutorial, etc).")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_4)
   (key T)
   (outputs
      (seconds
         (alias
            "seconds")
         (help
            "Time in seconds"))
      (beat
         (alias
            "beat")
         (help
            "Time in beats"))
      (ui_seconds
         (alias
            "ui seconds")
         (help
            "time accourding to UI seconds timeline"))
      (tutorial_seconds
         (alias
            "tutorial seconds")
         (help
            "time according to the tutorial system, in seconds"))))
(ShaderNodeTargetSize
   SHADER_NODE_BASE
   (alias
      "Target Size")
   (category Constants)
   (description
      "Size of render target. Can use to find aspect ratio, etc.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_4)
   (outputs
      (w
         (alias
            "width")
         (help
            "Width of the render target"))
      (h
         (alias
            "height")
         (help
            "Height of the render target"))
      (pix_offset_x
         (alias
            "pix offset x")
         (help
            "1/2 pixel offset in x"))
      (pix_offset_y
         (alias
            "pix offset y")
         (help
            "1/2 pixel offset in y"))))
(ShaderNodeWind
   SHADER_NODE_BASE
   (alias
      "Wind")
   (category Constants)
   (description
      "Wind\nProvides the wind vector from a scene's wind object to the shader graph. This outputs a vector3 representing the direction and strength of the node.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_1)
   (outputs
      (wind
         (help
            "Wind vector"))))
(ShaderNodeScreenPos
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Screen Pos")
   (description
      "Screen Position\nOutputs the current screen position of the pixel being drawn, as 0 to 1 values representing the x/y pixel position.")
   (size SHADERNODE_STANDARD_SIZE))
(ShaderNodeViewDir
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "View Vec")
   (description
      "View Vector\nOutputs the view vector between the camera and the current pixel being drawn.")
   (size SHADERNODE_STANDARD_SIZE)
   (outputs
      (out
         (alias
            "view vec"))))
(ShaderNodeViewDirFromScreenUV
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "View Vec from Sceen UV")
   (description
      "Alternate (more expensive) version of View Vector derived from the Screen UV, use this for nonstandard geometry for which no good world position is available (eg. ScreenMask)")
   (size 130 SHADERNODE_STANDARD_SIZE_X)
   (inputs
      (screen_uv
         (alias
            "screen uv")))
   (outputs
      (view_dir
         (alias
            "view vec"))))
(ShaderNodeVertexColor
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Color")
   (description
      "Vertex Color\nOutputs the vertex color for the vertex being processed, or the interpolated vertex color for the pixel being processed.")
   (size SHADERNODE_STANDARD_SIZE)
   (key V)
   SHADERNODE_RGBA_OUTPUTS)
(ShaderNodeVertexTexcoord
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex UV0")
   (description
      "Vertex UV0\nOutputs the first UV coordinate set for the given vertex being processed, or the interpolated UV position for the pixel being drawn. This node has a built in multiplier that allows you to quickly scale a texture; just plug this into the UV input of a texture node.")
   (size SHADERNODE_STANDARD_SIZE)
   (key U)
   (editor
      (uv_scale
         VECTOR2
         (help
            "Built in multiplier to UV scale"))))
(ShaderNodeVertexTexcoord1
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex UV1")
   (description
      "Vertex UV1\nOutputs the second UV coordinate set for the given vertex being processed, or the interpolated UV position for the pixel being drawn. Just plug this into the UV input of a texture node.")
   (size SHADERNODE_STANDARD_SIZE))
(ShaderNodeVertexWorldPos
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Position (World)")
   (description
      "Vertex World Position\nOutputs the world space coordinate of the vertex being processed.")
   (size 128 SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodeVertexLocalPos
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Position (Local)")
   (description
      "Vertex Local Position\nOutputs the local space coordinate of the vertex being processed.")
   (size 128 SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodeVertexTangents
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Tangents")
   (description
      "Vertex Tangents\nOutputs the vertex tangent and bi-tangent at the given vertex being processed, or the interpolated vertex tangent and bi-tangent at the pixel being drawn.")
   (size SHADERNODE_PREVIEW_WIDTH SHADERNODE_Y_SIZE_INOUTS_2))
(ShaderNodeVertexNormal
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Normal")
   (description
      "Vertex Normal\nOutputs the vertex normal at the given vertex being processed, or the interpolated vertex normal for the pixel being drawn.")
   (size 72 SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodeVertexDisplacement
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Displacement")
   (description
      "Vertex Displacement\nOutputs the interpolated vertex displacement of the pixel being drawn. (pixel shader only)")
   (size 128 SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodeVertexOffset
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Vertex Offset")
   (description
      "Vertex Offset\nOutputs the interpolated vertex offset of the pixel being drawn. (pixel shader only)")
   (size 128 SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodePi
   SHADER_NODE_BASE
   (category Constants)
   (alias
      "Pi")
   (description
      "Pi")
   (size SHADERNODE_Y_SIZE_INOUTS_1 SHADERNODE_Y_SIZE_INOUTS_1))
(ShaderNodeNoise1D
   SHADER_NODE_BASE
   (category Noise)
   (alias
      "Noise 1D")
   (description
      "Generates 1D Noise, for when you only need be to one dimentional")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (pos
         (alias
            "in")
         (help
            "1d positional input; will use vertex U if not provided."))
      (freq
         (alias
            "frequency")
         (help
            "How large the pattern is"))
      (amp
         (alias
            "amplitude")
         (help
            "strength of output (contrast between lowest, highest value)"))
      (offset
         (help
            "built in offset from input position")))
   (editor
      (frequency
         float
         (help
            "Frequency of noise"))
      (amplitude
         float
         (help
            "Amplitude of noise, more = more white when applied to color space"))
      (offset
         float
         (help
            "Offset to position input"))
      (draw_preview
         bool
         (help
            "Graph the function onto the node preview as an overlay?"))))
(ShaderNodeNoise
   SHADER_NODE_BASE
   (category Noise)
   (alias
      "Noise 2D")
   (description
      "Generates FBM Noise\nAdd multiple noises together to create cloud like textures, or input noise into noise to create plazma like effects.")
   (size SHADERNODE_STANDARD_SIZE)
   (key N)
   (inputs
      (pos
         (alias
            "uv")
         (help
            "2d positional input; will use vertex UV if not provided."))
      (freq
         (alias
            "frequency")
         (help
            "How large the pattern is"))
      (amp
         (alias
            "amplitude")
         (help
            "strength of output (contrast between lowest, highest value)"))
      (offset
         (help
            "built in offset from uv input position")))
   (editor
      (frequency
         float
         (help
            "Frequency of noise"))
      (amplitude
         float
         (help
            "Amplitude of noise, more = more white when applied to color space"))
      (offset
         VECTOR2
         (help
            "Offset to position input"))))
(ShaderNodeNoise3d
   SHADER_NODE_BASE
   (category Noise)
   (alias
      "Noise 3D")
   (description
      "Generates Noise in 3d")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (pos
         (help
            "3d positional value, uses world position if not provided"))
      (freq
         (alias
            "frequency")
         (help
            "How large the pattern is"))
      (amp
         (alias
            "amplitude")
         (help
            "strength of output (contrast between lowest, highest value)"))
      (offset
         (help
            "built in offset from the input position")))
   (editor
      (frequency
         float
         (help
            "Frequency of noise"))
      (amplitude
         float
         (help
            "Amplitude of noise, more = more white when applied to color space"))
      (offset
         VECTOR3
         (help
            "Offset to position input"))))
(ShaderNodeNoiseCellular
   SHADER_NODE_BASE
   (category Noise)
   (alias
      "Cellular Noise")
   (description
      "Generates Cellular Noise")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (freq
         (alias
            "frequency")
         (help
            "How large the pattern is"))
      (amp
         (alias
            "amplitude")
         (help
            "strength of output (contrast between lowest, highest value)"))
      (offset
         (help
            "built in offset from uv input position")))
   (editor
      (frequency
         float
         (help
            "Frequency of noise"))
      (amplitude
         float
         (help
            "Amplitude of noise, more = more white when applied to color space"))
      (offset
         VECTOR2
         (help
            "Offset to position input"))))
(ShaderNodeNoisePerlin
   SHADER_NODE_BASE
   (category Noise)
   (alias
      "Perlin Noise")
   (description
      "Generates 'Classic' Perlin Noise")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (freq
         (alias
            "frequency")
         (help
            "How large the pattern is"))
      (amp
         (alias
            "amplitude")
         (help
            "strength of output (contrast between lowest, highest value)"))
      (offset
         (help
            "built in offset from uv input position")))
   (editor
      (frequency
         float
         (help
            "Frequency of noise"))
      (amplitude
         float
         (help
            "Amplitude of noise, more = more white when applied to color space"))
      (offset
         VECTOR2
         (help
            "Offset to position input"))))
(ShaderNodePanUV
   SHADER_NODE_BASE
   (alias
      "Pan UVs")
   (category UVs)
   (description
      "Moves UVs\nThis allows you to scroll a texture. Plug the output of the PanUV node into a UV input and it will begin to scroll based on the seconds timeline and the speed property.")
   (size SHADERNODE_STANDARD_SIZE)
   (key P)
   (editor
      (speed
         VECTOR2
         (help
            "speed of rotation"))
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate to animate"))))
(ShaderNodeParallaxUV
   SHADER_NODE_BASE
   (alias
      "Parallax UVs")
   (category UVs)
   (description
      "Offsets UVs to mimic depth based on camera view.")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (depth
         float
         (help
            "Apparent depth."))))
(ShaderNodeRefractUV
   SHADER_NODE_BASE
   (alias
      "Refract UVs")
   (category UVs)
   (description
      "Refracts UVs\nThis node allows you to rotate a texture around a center point. Like PanUV, this node assumes time and UV inputs if not provided, and van be paused to create a consistent offset by inputing a consistent time value.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (uv
         (help
            "The unrefracted UV coordinate (defaults to the screen UV)"))
      (normal
         (help
            "World-space surface normal used to determine how much to refract the UV"))
      (sharpness
         (help
            "How sharply we transition from unrefracted to fully refracted"))
      (strength
         (help
            "Scales the maximum offset applied to the UV")))
   (outputs
      (uv
         (alias
            "uv")
         (help
            "The refracted UV coordinate")))
   (editor
      (refract_at_grazing_angles
         bool
         (help
            "Governs how refraction responds to surface normal; for meshes, you typically want to refract at grazing angles, for particles, you typically want to refract at direct angles"))
      (flip_uv
         bool
         (help
            "Flips the final UV about the object's center position"))
      (sharpness
         float
         (range 0.0 10.0)
         (slider)
         (update_while_dragging FALSE)
         (help
            "Default refraction sharpness to use if no input specified; governs how sharply we transition from unrefracted to fully refracted"))
      (strength
         float
         (range -10.0 10.0)
         (slider)
         (update_while_dragging FALSE)
         (help
            "Default refraction strength to use if no input specified"))))
(ShaderNodeRotateUV
   SHADER_NODE_BASE
   (alias
      "Rotate UVs")
   (category UVs)
   (description
      "Rotates UVs\nThis node allows you to rotate a texture around a center point. Like PanUV, this node assumes time and UV inputs if not provided, and van be paused to create a consistent offset by inputing a consistent time value.")
   (size SHADERNODE_STANDARD_SIZE)
   (key R)
   (editor
      (center
         VECTOR2
         (help
            "center point of rotation"))
      (speed
         float
         (help
            "speed of rotation"))
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate to animate"))))
(ShaderNodeRippleUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Ripple UVs")
   (description
      "Generates a ripple UV pattern")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (freq
         (alias
            "frequency")
         (help
            "How large the pattern is"))
      (amp
         (alias
            "amplitude")
         (help
            "strength of output (contrast between lowest, highest value)"))
      (time
         (help
            "alternate time, seconds timeline will be used if not provided"))
      (falloff
         (help
            "Falloff for effect"))
      (center
         (help
            "position source of ripple effect")))
   (editor
      (frequency
         float
         (help
            "Frequency of ripples"))
      (amplitude
         float
         (help
            "Amplitude of ripples"))
      (speed_mult
         float
         (help
            "convienence multipler for time input"))
      (falloff
         float
         (help
            "falloff for the ripple effect"))
      (center
         VECTOR2
         (help
            "position source of ripple effect"))))
(ShaderNodeTwistUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Twist UVs")
   (description
      "Generates a twisted UV pattern")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided.")))
   (editor
      (angle
         float
         (help
            "Amount to twist as radian angle"))
      (radius
         float
         (help
            "Size of the effect in uv space"))
      (center
         VECTOR2
         (help
            "position source of twist effect"))))
(ShaderNodeBarrelUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Barrel UVs")
   (description
      "Barrel distort UVs")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided.")))
   (editor
      (power
         float
         (help
            "Amount of barrel distortion to apply"))))
(ShaderNodeTunnelUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Tunnel UVs")
   (description
      "Generates a zooming, circular tunnel UV coordinate and distance shading value")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (time
         (help
            "time input - seconds used if not provided")))
   (outputs
      (uv
         (alias
            "uv"))
      (shade
         (alias
            "shade")
         (help
            "Shading output - multiply with diffuse to create lighting effect"))))
(ShaderNodeSquareTunnelUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Square Tunnel UVs")
   (description
      "Generates a zooming, square tunnel UV coordinate and distance shading value")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (time
         (help
            "time input - seconds used if not provided")))
   (outputs
      (uv
         (alias
            "uv"))
      (shade
         (alias
            "shade")
         (help
            "Shading output - multiply with diffuse to create lighting effect"))))
(ShaderNodeKeleidoscopeUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Keleidoscope UVs")
   (description
      "Generates a swirling, keleidoscope style UV effect and shading value")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (time
         (help
            "time input - seconds used if not provided")))
   (outputs
      (uv
         (alias
            "uv"))
      (shade
         (alias
            "shade")
         (help
            "Shading output - multiply with diffuse to create lighting effect"))))
(ShaderNodeStarUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Star UVs")
   (description
      "Generates a swirling, star shape UV effect and shading value")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))
      (time
         (help
            "time input - seconds used if not provided")))
   (outputs
      (uv
         (alias
            "uv"))
      (shade
         (alias
            "shade")
         (help
            "Shading output - multiply with diffuse to create lighting effect"))))
(ShaderNodeSpriteMapUV
   SHADER_NODE_BASE
   (alias
      "Sprite Map UVs")
   (category UVs)
   (description
      "Shifts UVs to be a single tile on a sprite map.")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (wrap_around
         bool
         (help
            "Does the input index wrap back around (true) or is it pinned to the maximum value (false)?"))
      (index
         int
         (help
            "The sprite number to show. 0 is the top-left tile, 1 just to the right of it, etc."))
      (hCount
         int
         (help
            "How many tiles in the horizontal direction."))
      (vCount
         int
         (help
            "How many tiles in the vertical direction."))))
(ShaderNodeBumpOffset
   SHADER_NODE_BASE
   (category Texture)
   (alias
      "Bump Offset")
   (description
      "Offsets UV based on height value.")
   (size 104 104)
   (key B)
   (inputs
      (coord
         (alias
            "uv")))
   (editor
      (height_ratio
         float
         (alias
            "height ratio")
         (help
            "Multiplier on incoming height."))
      (reference_plane
         float
         (alias
            "reference plane")
         (help
            "Offset to the height."))))
(ShaderNodeSphereMapUV
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "Sphere Map UVs")
   (description
      "Generates UV coordinates for sphere mapping, a cheap form of environment mapping")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5))
(ShaderNodeUVDot
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "UV Dot")
   (description
      "Generates a gradient dot from the UV coordinates")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided.")))
   (editor
      (clamp
         bool
         (help
            "clamp the output to 0 to 1 range?"))))
(ShaderNodeUVBox
   SHADER_NODE_BASE
   (category UVs)
   (alias
      "UV Box")
   (description
      "Generates a gradient box from the UV coordinates")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "2d positional input; will use vertex UV if not provided."))))
(ShaderNodeUVInRange
   SHADER_NODE_BASE
   (alias
      "UVs in Range?")
   (category UVs)
   (description
      "help!")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (min VECTOR2)
      (max VECTOR2))
   (inputs
      (uv
         (alias
            "uv")
         (help
            "help!")))
   (outputs
      (in_range
         (alias
            "in range?")
         (help
            "help!"))))
(ShaderNodeCalcPixelWorldPos
   SHADER_NODE_BASE
   (alias
      "Calc Pixel World Position")
   (category Constants)
   (description
      "The Worldspace position of the pixel.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_2)
   (inputs
      (uv
         (alias
            "uv")
         (help
            "Input UV")))
   (outputs
      (pos
         (help
            "worldspace position"))))
(ShaderNodeCamPos
   SHADER_NODE_BASE
   (alias
      "Camera Pos")
   (category Constants)
   (description
      "The Worldspace position of the current Camera.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_4)
   (outputs
      (xyz
         (alias
            "xyz")
         (help
            "worldspace position"))
      (x
         (alias
            "x")
         (help
            "x of worldspace position"))
      (y
         (alias
            "y")
         (help
            "y of worldspace position"))
      (z
         (alias
            "z")
         (help
            "z of worldspace position"))))
(ShaderNodeCamRot
   SHADER_NODE_BASE
   (alias
      "Camera Rot")
   (category Constants)
   (description
      "The Worldspace rotation of the current Camera.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_4)
   (outputs
      (x
         (alias
            "x")
         (help
            "x vector of worldspace rotation"))
      (y
         (alias
            "y")
         (help
            "y vector of worldspace rotation"))
      (z
         (alias
            "z")
         (help
            "z vector of worldspace rotation"))))
(ShaderNodeObjPos
   SHADER_NODE_BASE
   (alias
      "Obj Position")
   (category Constants)
   (description
      "The Worldspace position of the current Object.")
   (size 72 SHADERNODE_Y_SIZE_INOUTS_4)
   (outputs
      (xyz
         (help
            "worldspace position"))))
(ShaderNodeObjRot
   SHADER_NODE_BASE
   (alias
      "Obj Rotation")
   (category Constants)
   (description
      "The Worldspace rotation of the object.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_3)
   (outputs
      (right
         (help
            "right vector"))
      (forward
         (help
            "forward vector"))
      (up
         (help
            "up vector"))))
(ShaderNodeObjScale
   SHADER_NODE_BASE
   (alias
      "Obj Scale")
   (category Constants)
   (description
      "The Worldspace scale of the object.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodeObjRadius
   SHADER_NODE_BASE
   (alias
      "Obj Radius")
   (category Constants)
   (description
      "The bounding radius of the object.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_1)
   (outputs
      (radius
         (alias
            "radius")
         (help
            "bounding radius"))))
(ShaderNodeSimplePointLight
   SHADER_NODE_BASE
   (alias
      "Simple Point Light")
   (category Texture)
   (description
      "Mimics a point light to illuminate diffuse only.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs)
   (editor
      (worldPos
         VECTOR3
         (help
            "The world position of the light."))
      (color
         color
         (help
            "The color of the light."))
      (intensity
         float
         (help
            "The intensity of the light."))
      (radius
         float
         (help
            "The radius of the light."))
      (falloff
         float
         (help
            "The falloff of the light.")))
   (outputs
      (output
         (help
            "The resultant color."))))
(ShaderNodeSelfShadow
   SHADER_NODE_BASE
   (category Texture)
   (alias
      "Cheap Self Shadow")
   (description
      "Generates a self shadow from a height field and a light vector.")
   (size 104 104)
   (inputs
      (tex
         (help
            "height texture sampler")
         TEX_SAMPLER_COLOR))
   (editor
      (height_ratio
         float
         (alias
            "height ratio")
         (help
            "Multiplier on incoming height."))
      (contrast
         float
         (alias
            "contrast")
         (help
            "Shadow contrast"))
      (tex_channel
         int
         SHADER_TEXTURE_CHANNELS
         (alias
            "Texture Channel")
         (help
            "Texture channel to sample height map from"))))
(ShaderNodePOM
   SHADER_NODE_BASE
   (category Texture)
   (alias
      "POM")
   (description
      "Generates a self shadow from a height field")
   (size 104 104)
   (inputs
      (height
         (alias
            "height")
         TEX_SAMPLER_COLOR
         (help
            "height texture to sample from"))
      (uv_in
         (alias
            "uv")
         (help
            "UV input"))
      (light
         (alias
            "light")
         (help
            "world space light vector")))
   (outputs
      (uv_out
         (alias
            "uv")
         (help
            "displaced UV output to sample other textures with"))
      (shadow
         (alias
            "shadow")
         (help
            "Output of shadow in 0 - 1 range; multiply with diffuse/spec")))
   (editor
      (height
         float
         (alias
            "height")
         (help
            "How large to make the displacement - displacement will appear to go into the surface"))
      (tex_channel
         int
         SHADER_TEXTURE_CHANNELS
         (alias
            "Texture Channel")
         (help
            "Texture channel to sample height map from"))
      (shadow_softness
         float
         (help
            "controls the softness of the shadow"))
      (silhouette
         bool
         (alias
            "silhouette clipping")
         (help
            "Clips silhouette edges"))))
(ShaderNodeSMSwitch
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Shader Model Switch")
   (description
      "Allows static compilation for different shader models")
   (size 110 104)
   (inputs
      (sm3
         (alias
            "sm3")
         (help
            "Shader Model 3 (Xbox)"))
      (sm5
         (alias
            "sm5")
         (help
            "Shader Model 5 (Xbox One, PS4, etc.)")))
   (outputs
      (uv_out
         (alias
            "uv")
         (help
            "displaced UV output to sample other textures with"))
      (shadow
         (alias
            "shadow")
         (help
            "Output of shadow in 0 - 1 range; multiply with diffuse/spec"))))
#define kFurClipNone
(0)
#define kFurClipUV
(1)
#define kFurClipFloor
(2)
#define kFurClipAllEdges
(3)
#define kFurClipAllEdgesAndFloor
(4)
#define kFurStrandShapeSquare
(0)
#define kFurStrandShapeCircle
(1)
#define kFurStrandShapeCone
(2)
(ShaderNodeFur
   SHADER_NODE_BASE
   (category Texture)
   (alias
      "Fur")
   (description
      "Fur rendering, using ray casting into concentric virtual shells. Dots representing strands go in the alpha channel, color in the color channels.\n                 Supports inner shadowing, gravity, wind animation, and silhouette clipping options")
   (size 104 104)
   (inputs
      (fur
         (alias
            "fur tex")
         TEX_SAMPLER_COLOR
         (help
            "Sampler for fur texture, should have heights in alpha channel"))
      (uv
         (help
            "uv coordinates"))
      (wind
         (help
            "wind offset vector in world space; can be used to blow strands around, or animate it for interactions")))
   (outputs
      (color
         (alias
            "color")
         (help
            "outputs the input sampler's RGB values with offset and shadow applied"))
      (uv
         (alias
            "uv")
         (help
            "offset UV to sample color texture with"))
      (depth
         (alias
            "depth")
         (help
            "depth of collision - blend with color texture to create a shadow, or use to map strand colors to height")))
   (editor
      (tex_channel
         int
         SHADER_TEXTURE_CHANNELS
         (alias
            "Texture Channel")
         (help
            "Texture channel to sample height map"))
      (shape
         int
         (list
            (("kFurStrandShapeSquare"
                  (alias
                     "Square")
                  (help
                     "Produces square extrutions"))
               ("kFurStrandShapeCircle"
                  (alias
                     "Circle")
                  (help
                     "Produces rounded extrusions"))
               ("kFurStrandShapeCone"
                  (alias
                     "Cone")
                  (help
                     "Produces rounded cone extrusions"))))
         (help
            "Controls the shape of the strands"))
      (height
         float
         (alias
            "height")
         (help
            "How large to make the displacement - displacement will appear to go into the surface"))
      (slices
         int
         (range 6 64)
         (slider)
         (help
            "how many concentric shells to generate; more == better close up quality but more expensive"))
      (gravity
         float
         (help
            "Gravity strength, which pulls down on hairs"))
      (silhouette
         int
         (list
            (("kFurClipNone"
                  (alias
                     "None")
                  (help
                     "No clipping"))
               ("kFurClipUV"
                  (alias
                     "UV")
                  (help
                     "Clip UV's when out of the 0-1 range"))
               ("kFurClipFloor"
                  (alias
                     "No Floor")
                  (help
                     "Clips any ray which intersects the floor or who's uv goes outside of the 0-1 range"))
               ("kFurClipAllEdges"
                  (alias
                     "All Edges")
                  (help
                     "Clips all UV border edges based on maximum ray depth; works from all angles"))
               ("kFurClipAllEdgesAndFloor"
                  (alias
                     "All Edges and Floor")
                  (help
                     "Like all edges, but also clips the floor"))))
         (alias
            "clipping")
         (help
            "Clips polygon border edges"))))
#define kCentralDifference
(0)
#define kSobel
(1)
(ShaderNodeHeightTextureToNormal
   SHADER_NODE_BASE
   (category Texture)
   (alias
      "HeightTex to Normal")
   (description
      "Generate a normal map from a height map")
   (size 104 104)
   (inputs
      (tex
         (help
            "height texture sampler")
         TEX_SAMPLER_COLOR))
   (editor
      (tex_channel
         int
         SHADER_TEXTURE_CHANNELS
         (alias
            "Texture Channel")
         (help
            "Texture channel to sample height map from"))
      (tex_size
         VECTOR2
         (help
            "Size of input texture"))
      (strength
         float
         (range 1.0e-2 20.0)
         (help
            "Normal map strength"))
      (technique
         int
         (list
            (("kCentralDifference"
                  (alias
                     "Central Difference")
                  (help
                     "Takes 3 samples from the texture and uses a central difference approach to generate a normal"))
               ("kSobel"
                  (alias
                     "Sobel")
                  (help
                     "Takes 9 samples and performs a sobel filter to generate gradients for the normals"))))
         (help
            "Type of processing to perform to convert height samples into normal"))))
(ShaderNodeSun
   SHADER_NODE_BASE
   (alias
      "Sun")
   (category Constants)
   (description
      "The direction vector, color, and intensity of the shadow casting directional light")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_3)
   (outputs
      (dir
         (alias
            "dir")
         (help
            "direction vector of the light"))
      (color
         (alias
            "color")
         (help
            "color of the light"))
      (intensity
         (alias
            "intensity")
         (help
            "intensity of the light"))))
(ShaderNodeParticleFloats
   SHADER_NODE_BASE
   (alias
      "ParticleFloats")
   (category Constants)
   (description
      "These are 4 floating point values that can be driven by a waveform from the particle system. This is not valid for non-particle geometry.")
   (size 64 SHADERNODE_Y_SIZE_INOUTS_4)
   (outputs
      (x
         (help
            "waveform 0"))
      (y
         (help
            "waveform 1"))
      (z
         (help
            "waveform 2"))
      (w
         (help
            "waveform 3"))))
(ShaderNodeTex
   (allowed_dirs)
   (hide_from_editor TRUE)
   (category Texture)
   (superclasses ShaderNode)
   (alias
      "Texture Sampler")
   (avail_shader_node FALSE)
   (description
      "Texture sampler node")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (outputs
      (rgba
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (a
         (color 255 255 255))
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Connect to a Texture Resample node to reuse a texture")))
   (editor
      SHADERNODE_PREVIEW_CHANNELS
      (path
         string
         (read_only TRUE)
         (help
            "path to the texture"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary.")
         (no_test))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled.")
         (no_test))))
(ShaderNodeCubeTex
   (allowed_dirs)
   (hide_from_editor TRUE)
   (category Texture)
   (superclasses ShaderNode)
   (alias
      "Cube Texture")
   (avail_shader_node FALSE)
   (description
      "Cube Texture sampler node")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (outputs
      (rgba
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (a
         (color 255 255 255))
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Connect to a Texture Resample node to reuse a texture")))
   (editor
      (paths
         (indent
            (path_right
               string
               (read_only TRUE)
               (help
                  "path to the texture"))
            (path_left
               string
               (read_only TRUE)
               (help
                  "path to the texture"))
            (path_top
               string
               (read_only TRUE)
               (help
                  "path to the texture"))
            (path_bottom
               string
               (read_only TRUE)
               (help
                  "path to the texture"))
            (path_front
               string
               (read_only TRUE)
               (help
                  "path to the texture"))
            (path_back
               string
               (read_only TRUE)
               (help
                  "path to the texture"))))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))))
(ShaderNodeTexResample
   SHADER_NODE_BASE
   (alias
      "Tex Resample")
   (category Texture)
   (description
      "This node allows you to resample a the same texture from another texture node")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (uv
         (help
            "UV coordinates for sample"))
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Texture sampler to resample")))
   SHADERNODE_RGBA_OUTPUTS)
(ShaderNodeTexResampleMip
   SHADER_NODE_BASE
   (alias
      "Sample Mip Map")
   (category Texture)
   (description
      "This node allows you to resample a texture at a specified mip level")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Texture sampler to resample"))
      (uv
         (help
            "UV coordinates for sample"))
      (level
         (help
            "Mip map level to sample; 0 is highest")))
   SHADERNODE_RGBA_OUTPUTS)
(ShaderNodeMipLevel
   SHADER_NODE_BASE
   (alias
      "Mip Level")
   (category Texture)
   (description
      "Outputs the mip map level the graphics card will use when sampling this texture.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (dims
         (help
            "Dimentions of texture; you can get this dynamically in DX11 with the TexDimensions node"))
      (uv
         (help
            "UV coordinates for sample")))
   SHADERNODE_RGBA_OUTPUTS)
(ShaderNodeTexDimensions
   SHADER_NODE_BASE
   (alias
      "Texture Dimensions")
   (category Texture)
   (description
      "Outputs the mip map level the graphics card will use when sampling this texture. DX11 Only")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Texture sampler to resample"))
      (uv
         (help
            "UV coordinates for sample")))
   SHADERNODE_RGBA_OUTPUTS)
(ShaderNodeSceneTex
   SHADER_NODE_BASE
   (alias
      "SceneTex")
   (category Texture)
   (description
      "This node allows you to use the captured scene buffer and use it as a texture.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler")))
   (editor
      (always_capture_scene_tex
         bool
         (help
            "If set, we'll always take a fresh capture of the scene texture before drawing (which is fairly expensive, so use with care!")))
   SHADERNODE_RGB_OUTPUTS)
(ShaderNodeDiffuseTex
   SHADER_NODE_BASE
   (alias
      "DiffuseTex")
   (category Texture)
   (description
      "This node allows you to use the captured scene's diffuse buffer and use it as a texture.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler")))
   SHADERNODE_RGB_OUTPUTS)
(ShaderNodePersistentFrameTex
   SHADER_NODE_BASE
   (alias
      "Persistent Frame Tex")
   (category Texture)
   (description
      "This node allows you to sample the persistent frame capture")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler")))
   SHADERNODE_RGB_OUTPUTS)
(ShaderNodeSceneNormals
   SHADER_NODE_BASE
   (alias
      "SceneNormals")
   (category Texture)
   (description
      "This node allows you to use the captured scene buffer's normals and use it as a texture.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler")))
   (editor)
   SHADERNODE_RGB_OUTPUTS)
(ShaderNodeSceneDOF
   SHADER_NODE_BASE
   (alias
      "SceneDOF")
   (category Texture)
   (description
      "This node allows you to use the captured scene buffer's DOF blur maps and use them as textures.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler")))
   (editor
      (dof_index
         int
         (help
            "Which blur map we use. [0, 2]. Higher is blurrier.")))
   SHADERNODE_RGB_OUTPUTS)
(ShaderNodeSceneDepth
   SHADER_NODE_BASE
   (alias
      "SceneDepth")
   (category Texture)
   (description
      "This node allows you to access the depth buffer during forward rendering.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (outputs
      (out
         (help
            "depth value. Smaller is nearer."))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the depth texture sampler")))
   (editor
      (meters
         bool
         (help
            "Output value will be in meters."))))
(ShaderNodeFontTex
   SHADER_NODE_BASE
   (alias
      "FontTex")
   (category Texture)
   (description
      "Provides access to the texture for the current font page when rendering text")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgba
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (a
         (color 255 255 255))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler"))))
(ShaderNodeVertexWindEffect
   SHADER_NODE_BASE
   (alias
      "Vertex Wind Effect")
   (category 'Vertex Animation')
   (description
      "Vertex Wind Effect\nThis is a vertex only shader than moves verticies based on wind. Simply plug its output into the vertex offset input on the root node and tune the values to your liking.")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_6)
   (editor
      (cheap
         bool
         (help
            "When true, only simple bending is applied. When false, vertex color is used to control several types of motion."))
      (bend_amplitude
         float
         (help
            "How much should the wind blow the model around based on distance from the ground"))
      (branch_amplitude
         float
         (hide
            [cheap])
         (help
            "How much up and down motion should we allow on branches"))
      (leaf_amplitude
         float
         (hide
            [cheap])
         (help
            "Modify bend amplitude by data painted in the blue mask channel. Allows you to have the edges of leaves bend more"))
      (detail_amplitude
         float
         (hide
            [cheap])
         (help
            "how much twitching should we apply to the edges of the leaves"))))
(ShaderNodeScrollingSin
   SHADER_NODE_BASE
   (alias
      "Scrolling Sine")
   (category 'Vertex Animation')
   (description
      "Scrolls sine wave along an axis over time.")
   (size SHADERNODE_Y_SIZE_INOUTS_7 SHADERNODE_Y_SIZE_INOUTS_7)
   (inputs
      (position
         (help
            "vertex position"))
      (wavePosition
         (help
            "position of the wave in the mesh"))
      (amplitude
         (help
            "height of the wave"))
      (speed
         (help
            "how quickly the wave scrolls"))
      (time
         (help
            "current time"))
      (falloff
         (help
            "distance over which the wave falls off"))
      (frequency
         (help
            "frequency of the generated wave")))
   (editor
      (frequency
         float
         (help
            "size of the effect"))
      (amplitude
         float
         (help
            "magnitude of the effect"))
      (falloff
         float
         (help
            "how quickly the effect falls off from the center point"))
      (speed
         float
         (help
            "speed of the effect"))
      (wave_position
         VECTOR3
         (help
            "center of the effect"))))
(ShaderNodeRotateAroundAxis
   SHADER_NODE_BASE
   (alias
      "Rotate Around Axis")
   (category 'Vertex Transformation')
   (description
      "Rotate verticies around a specific axis and pivot location")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (pos
         (help
            "Position to rotate. Vertex local position is used if un-connected"))
      (axis
         (help
            "Axis to rotate around; will be normalized"))
      (pivot
         (help
            "local space pivot point"))
      (angle
         (help
            "Angle of rotation, in radians")))
   (editor
      (axis
         VECTOR3
         (help
            "Axis to rotate around (1,0,0 for X; 0,1,0 for Y; etc)"))
      (pivot_offset
         VECTOR3
         (help
            "offset to pivot point; pivot point is, by default, the object's position plus this vector"))
      (angle
         float
         (help
            "angle of rotation in radians"))))
(ShaderNodeFaceCamera
   SHADER_NODE_BASE
   (alias
      "Face Camera")
   (category 'Vertex Transformation')
   (description
      "Rotate verticies around a pivot to face the camera")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_1)
   (inputs
      (offset
         (help
            "Offset to pivot location")))
   (editor
      (no_z
         bool
         (help
            "When true, rotation will only happen around the vertical axis"))
      (preserve_scale
         bool
         (help
            "When true, preserves any scale on the object. A little faster if false tho..."))))
(ShaderNodeLocalToWorld
   SHADER_NODE_BASE
   (alias
      "Local To World")
   (category 'Vertex Transformation')
   (description
      "Transform a position in local space to world space")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_4))
(ShaderNodeAdd
   SHADER_NODE_BASE
   (category 'Math Ops')
   (alias
      "Add")
   (description
      "Add\nAdds two inputs (vectors or scalars).")
   (key A)
   SHADER_MATH_NODE
   (editor
      (value
         float
         (help
            "default value to add if no input is provided"))))
(ShaderNodeSubtract
   SHADER_NODE_BASE
   (category 'Math Ops')
   (alias
      "Subtract")
   (description
      "Subtract\nSubtracts two inputs (vectors or scalars).")
   (key S)
   SHADER_MATH_NODE
   (editor
      (value
         float
         (help
            "default value to subtract if no input is provided"))))
(ShaderNodeMultiply
   SHADER_NODE_BASE
   (category 'Math Ops')
   (alias
      "Multiply")
   (description
      "Multiply\nMultiplies two inputs (vectors or scalars).")
   (key M)
   SHADER_MATH_NODE
   (editor
      (value
         float
         (help
            "default value to multiply if no input is provided"))))
(ShaderNodeDivide
   SHADER_NODE_BASE
   (category 'Math Ops')
   (alias
      "Divide")
   (description
      "Divide\nDivides two inputs (vectors or scalars).")
   (key D)
   SHADER_MATH_NODE
   (editor
      (value
         float
         (help
            "default value to divide by if no input is provided"))))
(ShaderNodeAbs
   SHADER_NODE_BASE
   (alias
      "Absolute Value")
   (category 'Math Ops')
   (description
      "Absolute Value\nOutputs the input as positive value.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeCos
   SHADER_NODE_BASE
   (alias
      "Cosine")
   (category 'Math Ops')
   (description
      "Cosine\nThe CoSine node outputs the cosine of the value input (in radians). Most commonly, this is used to output a continuous oscillating waveform by connecting a Time expression to its input.")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (period
         float
         (help
            "Scale the period of the Cosine function. Really, just a convienence multiplier on input value.")
         (alias
            "frequency"))
      (amplitude
         float
         (help
            "Scale the amplitude of the Cosine function. Really, just a convienence multiplier on the output value."))
      (normalize
         bool
         (help
            "Normalizes the input period so that a change of 1 value is one cycle; really, just multiplies input by PI"))))
(ShaderNodeFloor
   SHADER_NODE_BASE
   (alias
      "Floor")
   (category 'Math Ops')
   (description
      "Floor\nRounds the number down to the nearest integer.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeDistance
   SHADER_NODE_BASE
   (alias
      "Distance")
   (category 'Math Ops')
   (description
      "Distance\nReturns a distance scalar between two vectors.")
   SHADER_MATH_NODE)
(ShaderNodeMin
   SHADER_NODE_BASE
   (alias
      "Min")
   (category 'Math Ops')
   (description
      "Minimum\nSelects the lesser of inputs.")
   SHADER_MATH_NODE)
(ShaderNodeMax
   SHADER_NODE_BASE
   (alias
      "Max")
   (category 'Math Ops')
   (description
      "Maximum\nSelects the greater of inputs.")
   SHADER_MATH_NODE)
(ShaderNodeSin
   SHADER_NODE_BASE
   (alias
      "Sine")
   (category 'Math Ops')
   (description
      "Sine\nThe Sine node outputs the sine of the value input (in radians). Most commonly, this is used to output a continuous oscillating waveform by connecting a Time expression to its input.")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (period
         float
         (help
            "Scale the period of the Sine function. Really, just a convienence multiplier on input value.")
         (alias
            "frequency"))
      (amplitude
         float
         (help
            "Scale the amplitude of the Sine function. Really, just a convienence multiplier on the output value."))
      (normalize
         bool
         (help
            "Normalizes the input period so that a change of 1 value is one cycle; really, just multiplies input by PI"))))
(ShaderNodeTan
   SHADER_NODE_BASE
   (alias
      "Tan")
   (category 'Math Ops')
   (description
      "Tangent\nReturns the tangent of the specified value.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeCeil
   SHADER_NODE_BASE
   (alias
      "Ceil")
   (category 'Math Ops')
   (description
      "Ceil\nReturns the smallest integer value that is greater than or equal to the specified value.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeRound
   SHADER_NODE_BASE
   (alias
      "Round")
   (category 'Math Ops')
   (description
      "Round\nRounds the specified value to the nearest integer.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeSaturate
   SHADER_NODE_BASE
   (alias
      "Saturate")
   (category 'Math Ops')
   (description
      "Saturate\nClamps the specified value within the range of 0 to 1.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeNormalize
   SHADER_NODE_BASE
   (alias
      "Normalize")
   (category 'Math Ops')
   (description
      "Normalizes\nNormalizes the specified floating-point vector according to x / length(x).")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeFMod
   SHADER_NODE_BASE
   (alias
      "FMod")
   (category 'Math Ops')
   (description
      "FMod\nReturns the floating-point remainder of x/y.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (input0
         (alias
            "x"))
      (input1
         (alias
            "y")))
   (outputs
      (out)))
(ShaderNodeLength
   SHADER_NODE_BASE
   (alias
      "Length")
   (category 'Math Ops')
   (description
      "Length\nReturns the length of the specified floating-point vector.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeLerp
   SHADER_NODE_BASE
   (alias
      "Lerp")
   (category Interpolation)
   (description
      "Lerp\nLinear Interpolates between two values based on a input value. This is often used to blend between textures, colors, or other values.")
   (size SHADERNODE_STANDARD_SIZE)
   (key L)
   (inputs
      (input0
         (alias
            "zero"))
      (input1
         (alias
            "one"))
      (input2
         (alias
            "amount")
         (help
            "Interpolation factor between A and B, 0 to 1")))
   (outputs
      (out)))
(ShaderNodeSmoothStep
   SHADER_NODE_BASE
   (alias
      "Smooth Step")
   (category Interpolation)
   (description
      "Smooth Step\nLike lerp, but uses hermite interpolation instead of linear interpolation. The blend value is expected to be between the two input values.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (input0
         (alias
            "one"))
      (input1
         (alias
            "two"))
      (input2
         (alias
            "amount")
         (help
            "Interpolation factor between A and B, 0 to 1")))
   (outputs
      (out)))
(ShaderNodeHeightLerp
   SHADER_NODE_BASE
   (alias
      "Height Lerp")
   (category Interpolation)
   (description
      "Height Lerp\nA height lerp produces an interpolant value based on two height values and an input blend. It's primarily used in producing high quality splat maps and masks, and provides a contrast property which allows you to tighten or soften the blend.")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (key H)
   (inputs
      (height_a
         (alias
            "height a"))
      (height_b
         (alias
            "height b"))
      (blend
         (help
            "Blend factor, often a vertex color channel, etc")))
   (outputs
      (out))
   (editor
      (contrast_multiplier
         float
         (slider)
         (range 1.0e-2 0.99)
         (help
            "built in multiplier for contrast input"))))
(ShaderNodeStep
   SHADER_NODE_BASE
   (alias
      "Step")
   (category Interpolation)
   (description
      "Step\nCompares two values, returning 0 or 1 based on which value is greater.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (input0
         (alias
            "x"))
      (input1
         (alias
            "y"))))
#define kSGClampBoth
(0)
#define kSGClampMin
(1)
#define kSGClampMax
(2)
(ShaderNodeClamp
   SHADER_NODE_BASE
   (alias
      "Clamp")
   (category 'Math Ops')
   (description
      "Clamp\nClamps the specified value to the specified minimum and maximum range.")
   (size SHADERNODE_STANDARD_SIZE)
   (key C)
   (editor
      (mode
         int
         (list
            ((kSGClampBoth
                  (alias
                     "Both")
                  (help
                     "Clamp to min and max values"))
               (kSGClampMin
                  (alias
                     "Min")
                  (help
                     "Only clamp to the minimum value"))
               (kSGClampMax
                  (alias
                     "Max")
                  (help
                     "Only clamp to the maximum value"))))
         (help
            "Do you want to clamp to the max, min, or both max and min values?"))
      (min
         float
         (help
            "Clamp to this minimum value when min input is not connected"))
      (max
         float
         (help
            "Clamp to this maxumum value when min input is not connected"))))
(ShaderNodeOneMinus
   SHADER_NODE_BASE
   (category 'Math Ops')
   (alias
      "One Minus")
   (description
      "One Minus\nSubtracts the input value from one. This has the effect of inverting an input texture.")
   (size SHADERNODE_STANDARD_SIZE)
   (key O))
(ShaderNodeCross
   SHADER_NODE_BASE
   (alias
      "Cross")
   (category 'Math Ops')
   (description
      "Cross\nReturns the cross product of two floating-point, 3D vectors.")
   SHADER_MATH_NODE)
(ShaderNodeDot
   SHADER_NODE_BASE
   (alias
      "Dot")
   (category 'Math Ops')
   (description
      "Dot\nComputes the length of one vector projected onto another.")
   SHADER_MATH_NODE)
(ShaderNodePow
   SHADER_NODE_BASE
   (alias
      "Pow")
   (category 'Math Ops')
   (description
      "Pow\nMultiplies the first input by itself the second inputs number of times. Power can be used as a quick way to increase contrast, or as an easing function.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (x
         (alias
            "input"))
      (y
         (alias
            "amount")))
   (outputs
      (out)))
(ShaderNodeExpand
   SHADER_NODE_BASE
   (alias
      "Expand")
   (category 'Math Ops')
   (description
      "Converts from the range [0,1] to [-1,1] (the opposite of Narrow)")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeNarrow
   SHADER_NODE_BASE
   (alias
      "Narrow")
   (category 'Math Ops')
   (description
      "Converts from the range [-1,1] to [0,1] (the opposite of Expand; useful for inspecting surface normals as a color)")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeScaleBias
   SHADER_NODE_BASE
   (alias
      "Scale Bias")
   (category 'Math Ops')
   (description
      "scale and bias input value; output = input * scale + bias")
   (size 104 104)
   (editor
      (scale
         float
         (help
            "amount to multiply"))
      (bias
         float
         (help
            "amount to add"))))
(ShaderNodeReRange
   SHADER_NODE_BASE
   (alias
      "ReRange")
   (category 'Math Ops')
   (description
      "Changes the range of the input value so that [in_min, in_max] maps to [out_min, out_max].")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (clamp
         bool
         (help
            "Is the output clamped to [out_min, out_max] or not?"))
      (in_min
         float
         (help
            "Input minimum value."))
      (in_max
         float
         (help
            "Input maximum value."))
      (out_min
         float
         (help
            "Output minimum value."))
      (out_max
         float
         (help
            "Output maximum value."))))
#define kShaderNodeEasePreviewNone
(0)
#define kShaderNodeEasePreviewGraph
(1)
#define kShaderNodeEasePreviewOverlay
(2)
#define SHADER_NODE_EASE_PREVIEW_MODES
((list
      (("kShaderNodeEasePreviewNone"
            (alias
               "None")
            (help
               "Draw node previews normally"))
         ("kShaderNodeEasePreviewGraph"
            (alias
               "Graph")
            (help
               "Graph the output of the easing function in the node preview"))
         ("kShaderNodeEasePreviewOverlay"
            (alias
               "Overlay")
            (help
               "Graph the preview as an overlay on the regular preview image")))))
#define kShaderEasePolyIn
(0)
#define kShaderEasePolyOut
(1)
#define kShaderEaseCircIn
(2)
#define kShaderEaseCircOut
(3)
#define kShaderEaseSigmoid
(4)
#define kShaderEaseSineIn
(5)
#define kShaderEaseSineOut
(6)
#define kShaderEaseSineInOut
(7)
#define kShaderEaseAtanIn
(8)
#define kShaderEaseAtanOut
(9)
#define kShaderEaseAtanInOut
(10)
#define kShaderEaseHermite
(11)
#define kShaderEaseQuintic
(12)
#define kShaderEaseImpulse
(13)
(ShaderNodeEasing
   SHADER_NODE_BASE
   (alias
      "Ease")
   (category Interpolation)
   (description
      "Ease\nEase replicates a sub-set of the easing curves used in Flow and other systems. Easing is useful for a number of effects, such as warping an occilating uv animation, or as a type of non-linear contrast effect on a texture.")
   (size SHADERNODE_STANDARD_SIZE)
   (key E)
   (editor
      (preview_mode
         int
         SHADER_NODE_EASE_PREVIEW_MODES
         (help
            "allows custom rendering for node previews in the shader graph."))
      (ease_type
         int
         (alias
            "type")
         (help
            "Easing function to use; these control the shape of the ease")
         (list
            (("kShaderEasePolyIn"
                  (alias
                     "Poly In")
                  (help
                     "Polynomial ease using the power value or input for strength.\nout = pow(abs(in), power);"))
               ("kShaderEasePolyOut"
                  (alias
                     "Poly Out")
                  (help
                     "Inverse polynomial ease.\nout = pow(abs(1-in), power);"))
               ("kShaderEaseCircIn"
                  (alias
                     "Circular In")
                  (help
                     "Circular ease in; power is ignored.\nout = -(sqrt(1-in*in)-1);"))
               ("kShaderEaseCircOut"
                  (alias
                     "Circular Out")
                  (help
                     "Circular ease out; power is ignored.\nout = sqrt(1-in*in);"))
               ("kShaderEaseSigmoid"
                  (alias
                     "Sigmoid In")
                  (help
                     "Sigmoidal ease; power is ignored.\nout = clamp(0,1,3 * in * in - 2 * in * in * in);"))
               ("kShaderEaseSineIn"
                  (alias
                     "Sine In")
                  (help
                     "Sinusoidal ease in; power is ignored.\nout = 1 - cos(in * PI * 0.5);"))
               ("kShaderEaseSineOut"
                  (alias
                     "Sine Out")
                  (help
                     "Sinusoidal ease out; power is ignored.\nout = sin(in * PI * 0.5);"))
               ("kShaderEaseSineInOut"
                  (alias
                     "Sine In/Out")
                  (help
                     "Sinusoidal ease in and out; power is ignored.\nout = -0.5 * (cos(PI * in) - 1);"))
               ("kShaderEaseAtanIn"
                  (alias
                     "Atan In")
                  (help
                     "Arc-Tangent ease in.\nout = atan((in - 1) * power) / atan(power) + 1;"))
               ("kShaderEaseAtanOut"
                  (alias
                     "Atan Out")
                  (help
                     "Arc-Tangent ease out.\nout = atan(in*power) / atan(power)"))
               ("kShaderEaseAtanInOut"
                  (alias
                     "Atan In/Out")
                  (help
                     "Arc-Tangent ease in and out.\nout = atan((in - 0.5) * power) / (2 * atan(0.5 * a) ) + 0.5;"))
               ("kShaderEaseHermite"
                  (alias
                     "Hermite")
                  (help
                     "Hermite interpolation; in * in * (3 - 2 * in)"))
               ("kShaderEaseQuintic"
                  (alias
                     "Quintic")
                  (help
                     "Quintic interpolation; in * in * in * (in * (in * 6 - 15) + 10)"))
               ("kShaderEaseImpulse"
                  (alias
                     "Impulse")
                  (help
                     "Impulse curve, great for music pulses, etc. Note that the peak will occure at 1/power. (in * power) * exp(1 - (in*power))")))))
      (power
         float
         (help
            "Only for poly, atan, and Impulse easing; allows you to specify the strength of the ease. Bigger values produce a stronger easing function"))))
#define kSNCE_Custom
(-1)
#define kSNCE_Linear
(0)
#define kSNCE_InCubic
(1)
#define kSNCE_OutCubic
(2)
#define kSNCE_InOutCubic
(3)
#define kSNCE_OutInCubic
(4)
#define kSNCE_InQuintic
(5)
#define kSNCE_OutQuintic
(6)
#define kSNCE_InOutQuintic
(7)
#define kSNCE_OutInQuartic
(8)
#define kSNCE_BackInCubic
(9)
#define kSNCE_BackOutCubic
(10)
#define kSNCE_BackInQuartic
(11)
#define kSNCE_BackOutQuartic
(12)
#define kSNCE_InElasticSmall
(13)
#define kSNCE_OutElasticSmall
(14)
#define kSNCE_InElasticLarge
(15)
#define kSNCE_OutElasticLarge
(16)
(ShaderNodeCustomEase
   SHADER_NODE_BASE
   (alias
      "Custom Ease")
   (category Interpolation)
   (description
      "Allows you to create custom easing functions by manipulating control points. Outputs as pure math, so no texture lookups")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (preview_mode
         int
         SHADER_NODE_EASE_PREVIEW_MODES
         (help
            "allows custom rendering for node previews in the shader graph."))
      (preset
         int
         (list
            (("kSNCE_Custom"
                  (alias
                     "Custom")
                  (help
                     "You have custom control settings"))
               ("kSNCE_Linear"
                  (alias
                     "Linear")
                  (help
                     "linear, for reference only"))
               ("kSNCE_InCubic"
                  (alias
                     "In Cubic")
                  (help
                     ""))
               ("kSNCE_OutCubic"
                  (alias
                     "Out Cubic")
                  (help
                     ""))
               ("kSNCE_InOutCubic"
                  (alias
                     "In/Out Cubic")
                  (help
                     ""))
               ("kSNCE_OutInCubic"
                  (alias
                     "Out/In Cubic")
                  (help
                     ""))
               ("kSNCE_InQuintic"
                  (alias
                     "In Quintic")
                  (help
                     ""))
               ("kSNCE_OutQuintic"
                  (alias
                     "Out Quintic")
                  (help
                     ""))
               ("kSNCE_InOutQuintic"
                  (alias
                     "In/Out Quintic")
                  (help
                     ""))
               ("kSNCE_OutInQuartic"
                  (alias
                     "Out/In Quartic")
                  (help
                     ""))
               ("kSNCE_BackInCubic"
                  (alias
                     "Back In Cubic")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_BackOutCubic"
                  (alias
                     "Back Out Cubic")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_BackInQuartic"
                  (alias
                     "Back In Quartic")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_BackOutQuartic"
                  (alias
                     "Back Out Quartic")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_InElasticSmall"
                  (alias
                     "In Elastic Small")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_OutElasticSmall"
                  (alias
                     "Out Elastic Small")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_InElasticLarge"
                  (alias
                     "In Elastic Large")
                  (help
                     "exceeds 0-1 range"))
               ("kSNCE_OutElasticLarge"
                  (alias
                     "Out Elastic Large")
                  (help
                     "exceeds 0-1 range"))))
         (help
            "preset curves, select one to load settings"))
      (p1
         float
         (range -5 5)
         (slider)
         (help
            "First control point, at begining of curve"))
      (p2
         float
         (range -5 5)
         (slider)
         (help
            "Second control point, at begining of curve"))
      (p3
         float
         (range -5 5)
         (slider)
         (help
            "Middle control point"))
      (p4
         float
         (range -5 5)
         (slider)
         (help
            "Second to last control point"))
      (p5
         float
         (range -5 5)
         (slider)
         (help
            "Last control point at the end of curve"))))
(ShaderNodeImpulse
   SHADER_NODE_BASE
   (alias
      "Impulse")
   (category Interpolation)
   (description
      "Generates regular impulses with a fast attack and adjustable decay, perfect for beat synced pulses")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (offset
         (help
            "offset the peak of the impulse in time"))
      (time
         (help
            "time input"))
      (frequency
         (help
            "how often the impulse happens in rate time"))
      (decay
         (help
            "how quickly the impulse fades; also affects attack time")))
   (editor
      (offset
         float
         (help
            "offsets the peak of the impulse in time"))
      (frequency
         float
         (help
            "how often the pulse happens"))
      (decay
         float
         (help
            "controls the attack and release time of the impulse"))
      (amplitude
         float
         (help
            "built in convienence multiplier for output"))
      (rate
         int
         (list TASK_UNITS)
         (help
            "Rate to use for animation if time is not provided via input"))))
(ShaderNodeGradientInOut
   SHADER_NODE_BASE
   (alias
      "Gradient In/Out")
   (category Interpolation)
   (description
      "Generates a 0 to 1 to 0 linear gradient given a value, center point and width; can be used to isolate features, and eased for non-linear gradients")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs)
   (editor
      (center
         float
         (help
            "center of effect"))
      (width
         float
         (help
            "width of gradient"))))
(ShaderNodeBlur3x3
   SHADER_NODE_BASE
   (alias
      "Blur 3x3")
   (category Post-Proc)
   (description
      "a 3x3 blur kernal")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (offset
         VECTOR2
         (help
            "offset for filter kernal"))))
(ShaderNodeOutline3x3
   SHADER_NODE_BASE
   (alias
      "Outline 3x3")
   (category Post-Proc)
   (description
      "a 3x3 outline effect")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (offset
         VECTOR2
         (help
            "offset for filter kernal"))))
(ShaderNodeEmboss3x3
   SHADER_NODE_BASE
   (alias
      "Emboss 3x3")
   (category Post-Proc)
   (description
      "Emboss effect")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (offset
         VECTOR2
         (help
            "offset for filter kernal"))))
(ShaderNodeDither
   SHADER_NODE_BASE
   (alias
      "Dither")
   (category NPR)
   (description
      "A pattern dither effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_7)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (colorBlend
         float
         (help
            "How much color is in the dithering. [0, 1]."))
      (horizontalSteps
         float
         (help
            "How many steps in the horizontal direction. Bigger means finer samples."))
      (verticalSteps
         float
         (help
            "How many steps in the vertical direction. Bigger means finer samples."))
      (blackPoint
         float
         (help
            "Input black point. [0, 1]."))
      (whitePoint
         float
         (help
            "Input white point. [0, 1]."))))
(ShaderNodeHalftone
   SHADER_NODE_BASE
   (alias
      "Halftone")
   (category NPR)
   (description
      "Halftone effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_8)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (steps
         float
         (help
            "Bigger means finer samples."))
      (red_angle
         float
         (help
            "Red screen angle."))
      (green_angle
         float
         (help
            "Green screen angle."))
      (blue_angle
         float
         (help
            "Blue screen angle."))
      (blackPoint
         float
         (help
            "Input black point. [0, 1]."))
      (whitePoint
         float
         (help
            "Input white point. [0, 1]."))))
(ShaderNodeHalftoneLines
   SHADER_NODE_BASE
   (alias
      "HalftoneLines")
   (category NPR)
   (description
      "Halftone Lines effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_14)
   (inputs
      (tex TEX_SAMPLER_COLOR)
      (alttex TEX_SAMPLER_COLOR)
      (gradientTex TEX_SAMPLER_COLOR))
   (editor
      (altScroll
         float
         (help
            "Scroll speed multiplier in beats. + means up, - means down."))
      (altScale
         float
         (help
            "Width multiplier for lines. Driven by the audio."))
      (altMix
         float
         (help
            "How much of the alt texture is influencing the widths."))
      (hSteps
         float
         (help
            "Horizontal steps. Bigger means finer samples."))
      (vSteps
         float
         (help
            "Vertical steps. Bigger means finer samples."))
      (gradientBlend
         float
         (help
            "How much of the gradient we output instead of solid white."))
      (lightColor
         color
         (help
            "Color of the lines when not using the gradient."))
      (darkColor
         color
         (help
            "Color of the background when not using the gradient."))
      (blackPoint
         float
         (help
            "Input black point. [0, 1]."))
      (whitePoint
         float
         (help
            "Input white point. [0, 1]."))
      (transitionBlend
         float
         (help
            "Degree of transition from lines to color. [0, 1]."))))
(ShaderNodeHatch
   SHADER_NODE_BASE
   (alias
      "Hatch")
   (category NPR)
   (description
      "Hatch effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_10)
   (inputs
      (color)
      (hatchTex1 TEX_SAMPLER_COLOR)
      (hatchTex2 TEX_SAMPLER_COLOR)
      (depth))
   (editor
      (levelsPerTex
         int
         (help
            "How many different levels are in one hatching texture."))
      (levelScaler
         int
         (help
            "Changes how many effective textures there are."))
      (levelOffset
         int
         (help
            "Offsets the texture levels and shifts them up. Used to act like completely empty lower textures exist."))
      (steps
         float
         (help
            "How fine the hatching texture is applied. Bigger means finer."))
      (angle1
         float
         (help
            "Angle (in degrees) of the first (lightest) hatching texture."))
      (angle2
         float
         (help
            "Angle (in degrees) of the second hatching texture."))
      (depthDivisions
         float
         (help
            "How many planes we slice depth into. More means more seems, but more accurate alignment."))
      (depthRange
         float
         (range 0.0 1.0)
         (help
            "What range of depth matters."))
      (depthCoefficient
         float
         (help
            "A number used to scale the translation of the hatching texture."))))
(ShaderNodeFindDepthEdges
   SHADER_NODE_BASE
   (alias
      "Find Depth Edges")
   (category NPR)
   (description
      "Depth edge detect effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (distance
         float
         (help
            "The distance across which we find edges. Bigger means fatter edges, but may cause gaps."))
      (nearDepth
         float
         (help
            "Depth values closer than this are ignored. [0, 1]."))
      (farDepth
         float
         (help
            "Depth values farther than this are ignored. [0, 1]."))
      (scale
         float
         (help
            "Scales the output value to emphasize or flatten the edges."))))
(ShaderNodeFindNormalsEdges
   SHADER_NODE_BASE
   (alias
      "Find Normals Edges")
   (category NPR)
   (description
      "Normals edge detect effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_4)
   (inputs
      (tex TEX_SAMPLER_COLOR))
   (editor
      (distance
         float
         (help
            "The distance across which we find edges. Bigger means fatter edges, but may cause gaps."))
      (scale
         float
         (help
            "Scales the output value to emphasize or flatten the edges."))))
(ShaderNodeGraphicPen
   SHADER_NODE_BASE
   (alias
      "GraphicPen")
   (category NPR)
   (description
      "Graphic pen effect")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_12)
   (inputs
      (tex TEX_SAMPLER_COLOR)
      (noiseTex TEX_SAMPLER_COLOR)
      (normalsTex TEX_SAMPLER_COLOR))
   (editor
      (steps
         float
         (help
            ""))
      (lineLength
         float
         (help
            ""))
      (colorBlend
         float
         (help
            ""))
      (animateTime
         float
         (help
            ""))
      (blackPoint
         float
         (help
            "Input black point. [0, 1]."))
      (whitePoint
         float
         (help
            "Input white point. [0, 1]."))))
#define kSwizzleZero
(0)
#define kSwizzleOne
(1)
#define kSwizzleX
(2)
#define kSwizzleY
(3)
#define kSwizzleZ
(4)
#define kSwizzleW
(5)
#define kSwizzleOff
(6)
#define SWIZZLE_LIST
(((kSwizzleZero
         (alias
            "Zero")
         (help
            "Write 0 in for this element"))
      (kSwizzleOne
         (alias
            "One")
         (help
            "Write 1 in for this element"))
      (kSwizzleX
         (alias
            "X (r)")
         (help
            "Write the incoming X value"))
      (kSwizzleY
         (alias
            "Y (g)")
         (help
            "Write the incoming Y value"))
      (kSwizzleZ
         (alias
            "Z (b)")
         (help
            "Write the incoming Z value"))
      (kSwizzleW
         (alias
            "W (a)")
         (help
            "Write the incoming W value"))
      (kSwizzleOff
         (alias
            "Off")
         (help
            "Do not output this element"))))
(ShaderNodeSwizzle
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Swizzle")
   (description
      "Extract and re-arrange elements from one vector into another.")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (x
         int
         (list SWIZZLE_LIST)
         (help
            "What to put in the X channel"))
      (y
         int
         (list SWIZZLE_LIST)
         (help
            "What to put in the Y channel"))
      (z
         int
         (list SWIZZLE_LIST)
         (help
            "What to put in the Z channel"))
      (w
         int
         (list SWIZZLE_LIST)
         (help
            "What to put in the W channel"))))
(ShaderNodeAppendVector
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Append Vector")
   (description
      "Append Vector\nCombines floats and vectors together, allowing you to add a channel to a vector2 to produce a vector3, etc.")
   (size SHADERNODE_STANDARD_SIZE))
(ShaderNodeSplitVector2
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Split Vector2")
   (description
      "Split Vector2\nTakes a vector2 and outputs the individual channels as x and y components.")
   (size SHADERNODE_STANDARD_SIZE))
(ShaderNodeSplitVector3
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Split Vector3")
   (description
      "Split Vector3\nTakes a vector3 and outputs the individual channels as x, y and z components.")
   (size SHADERNODE_STANDARD_SIZE))
(ShaderNodeSplitVector4
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Split Vector4")
   (description
      "Split Vector4\nTakes a vector4 and outputs the individual channels as x, y, z, and w components.")
   (size SHADERNODE_STANDARD_SIZE))
#define ShaderNodeIfEqual
(0)
#define ShaderNodeIfGreaterThan
(1)
#define ShaderNodeIfLessThan
(2)
(ShaderNodeIf
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "If")
   (description
      "If\nBranches based on two float values; can be expensive, so try to use other techniques when possible.")
   (size SHADERNODE_STANDARD_SIZE)
   (key I)
   (editor
      (operator
         int
         (list
            (("ShaderNodeIfEqual"
                  (alias
                     "a == b")
                  (help
                     "Equal"))
               ("ShaderNodeIfGreaterThan"
                  (alias
                     "a > b")
                  (help
                     "Greater Than"))
               ("ShaderNodeIfLessThan"
                  (alias
                     "a < b")
                  (help
                     "Less Than")))))))
(ShaderNodeTangentToWorld
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Tangent To World")
   (description
      "Converts a vector in tangent space (usually a normal map.) to world space.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (tangent
         (alias
            "tangent"))
      (strength
         (alias
            "strength")))
   (outputs
      (output
         (alias
            "world"))))
(ShaderNodeWorldToTangent
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "World To Tangent")
   (description
      "Converts a vector in world space into tangent space")
   (size SHADERNODE_STANDARD_SIZE))
#define kVectorMaskNone
(0)
#define kVectorMaskGradientOutline
(1)
#define kVectorMaskHardOutline
(2)
(ShaderNodeVectorMask
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Vector Texture Effects")
   (description
      "Provides effects for signed distance fields; useful for font rendering. You must preprocess your texture's alpha into a signed distance field.\n")
   (size SHADERNODE_Y_SIZE_INOUTS_7 SHADERNODE_Y_SIZE_INOUTS_7)
   (inputs
      (alpha
         (help
            "distance field input"))
      (color
         (help
            "main color of the effect"))
      ('outline color'
         (help
            "color for the outline effect"))
      ('outline width'
         (help
            "size of outline effect"))
      ('shadow alpha'
         (help
            "distance field input for the shadow; offset the uv's of the texture sampler to control the drop shadow angle and distance."))
      ('shadow color'
         (help
            "color for the shadow"))
      ('shadow width'
         (help
            "size of drop shadow or outer glow")))
   (outputs
      (output_color
         (alias
            "color")
         (help
            "color output"))
      (output_alpha
         (alias
            "alpha")
         (help
            "alpha clip output")))
   (editor
      (threshold
         float
         (help
            "distance value at which to start the anti-aliasing; 0 for none"))
      (outline
         int
         (list
            (("kVectorMaskNone"
                  (alias
                     "None")
                  (help
                     "No outline"))
               ("kVectorMaskGradientOutline"
                  (alias
                     "Gradient Outline")
                  (help
                     "interpolate between colors along the outline edge"))
               ("kVectorMaskHardOutline"
                  (alias
                     "Hard Outline")
                  (help
                     "produce a hard outline around the vector texture"))))
         (help
            "Which type of vector mask to output"))
      (outline_width
         float
         (help
            "distance to start the outline"))
      (outline_color
         color
         (help
            "color of outline"))
      (shadow_color
         color
         (help
            "color for drop shadow; note, you must plug in the alpha sample with a uv offset which control the drop shadow offset for this to work"))
      (shadow_width
         float
         (help
            "size of drop shadow width"))))
#define kSGBlendNormal
(0)
#define kSGBlendAdd
(1)
#define kSGBlendMultiply
(2)
#define kSGBlendSubtract
(3)
#define kSGBlendLighten
(4)
#define kSGBlendDarken
(5)
#define kSGBlendAverage
(6)
#define kSGBlendDifference
(7)
#define kSGBlendNegation
(8)
#define kSGBlendExclusion
(9)
#define kSGBlendScreen
(10)
#define kSGBlendOverlay
(11)
#define kSGBlendSoftLight
(12)
#define kSGBlendHardLight
(13)
#define kSGBlendColorDodge
(14)
#define kSGBlendColorBurn
(15)
#define kSGBlendLinearLight
(16)
#define kSGBlendVividLight
(17)
#define kSGBlendPinLight
(18)
#define kSGBlendHardMix
(19)
#define kSGBlendDetailMap
(20)
(ShaderNodeBlend
   SHADER_NODE_BASE
   (alias
      "Blend")
   (category Interpolation)
   (description
      "Blend\nAllows for Photoshop-style blending modes.")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (base
         (alias
            "source color")
         (help
            "Like the background layer in photoshop"))
      (blend
         (alias
            "blend color")
         (help
            "Like a layer above the background layer in photoshop")))
   (editor
      (mode
         int
         (list
            (("kSGBlendNormal"
                  (alias
                     "Normal")
                  (help
                     "Normal; basically, no blend"))
               ("kSGBlendAdd"
                  (alias
                     "Add")
                  (help
                     "base + blend. Blending with black produces no change."))
               ("kSGBlendMultiply"
                  (alias
                     "Multiply")
                  (help
                     "base * blend. Blending with white produces no change"))
               ("kSGBlendSubtract"
                  (alias
                     "Subtract")
                  (help
                     "base - blend."))
               ("kSGBlendLighten"
                  (alias
                     "Lighten")
                  (help
                     "Looks at the color information in each channel and selects the base or blend color--whichever is lighter--as the result color."))
               ("kSGBlendDarken"
                  (alias
                     "Darken")
                  (help
                     "Looks at the color information in each channel and selects the base or blend color--whichever is darker--as the result color."))
               ("kSGBlendAverage"
                  (alias
                     "Average")
                  (help
                     "Average of the two color values"))
               ("kSGBlendDifference"
                  (alias
                     "Difference")
                  (help
                     "Looks at the color information in each channel and subtracts either the blend color from the base color or the base color from the blend color, depending on which has the greater brightness value."))
               ("kSGBlendNegation"
                  (alias
                     "Negation")
                  (help
                     "Negation"))
               ("kSGBlendExclusion"
                  (alias
                     "Exclusion")
                  (help
                     "Creates an effect similar to but lower in contrast than the Difference mode. Blending with white inverts the base color values. Blending with black produces no change."))
               ("kSGBlendScreen"
                  (alias
                     "Screen")
                  (help
                     "Looks at each channel's color information and multiplies the inverse of the blend and base colors. The result color is always a lighter color. Screening with black leaves the color unchanged."))
               ("kSGBlendOverlay"
                  (alias
                     "Overlay")
                  (help
                     "Multiplies or screens the colors, depending on the base color. Patterns or colors overlay the existing pixels while preserving the highlights and shadows of the base color. The base color is not replaced, but mixed with the blend color to reflect the lightness or darkness of the original color."))
               ("kSGBlendSoftLight"
                  (alias
                     "Soft Light")
                  (help
                     "Darkens or lightens the colors, depending on the blend color. The effect is similar to shining a diffused spotlight on the image. If the blend color (light source) is lighter than 50% gray, the image is lightened as if it were dodged."))
               ("kSGBlendHardLight"
                  (alias
                     "Hard Light")
                  (help
                     "Multiplies or screens the colors, depending on the blend color. The effect is similar to shining a harsh spotlight on the image. If the blend color (light source) is lighter than 50% gray, the image is lightened, as if it were screened. "))
               ("kSGBlendColorDodge"
                  (alias
                     "Color Dodge")
                  (help
                     "Looks at the color information in each channel and brightens the base color to reflect the blend color by decreasing contrast between the two. Blending with black produces no change."))
               ("kSGBlendColorBurn"
                  (alias
                     "Color Burn")
                  (help
                     "Looks at the color information in each channel and darkens the base color to reflect the blend color by increasing the contrast between the two. Blending with white produces no change."))
               ("kSGBlendLinearLight"
                  (alias
                     "Linear Light")
                  (help
                     "Burns or dodges the colors by decreasing or increasing the brightness, depending on the blend color. If the blend color (light source) is lighter than 50% gray, the image is lightened by increasing the brightness. If the blend color is darker than 50% gray, the image is darkened by decreasing the brightness."))
               ("kSGBlendVividLight"
                  (alias
                     "Vivid Light")
                  (help
                     "Burns or dodges the colors by increasing or decreasing the contrast, depending on the blend color. If the blend color (light source) is lighter than 50% gray, the image is lightened by decreasing the contrast. If the blend color is darker than 50% gray, the image is darkened by increasing the contrast."))
               ("kSGBlendPinLight"
                  (alias
                     "Pin Light")
                  (help
                     "Replaces the colors, depending on the blend color. If the blend color (light source) is lighter than 50% gray, pixels darker than the blend color are replaced, and pixels lighter than the blend color do not change."))
               ("kSGBlendHardMix"
                  (alias
                     "Hard Mix")
                  (help
                     "If blend > base, color channel is 1, else it's 0"))
               ("kSGBlendDetailMap"
                  (alias
                     "Detail Texture")
                  (help
                     "Classic detial map math, which is similar to overlay but much faster; grey will have no affect, < 50% darkens, > 50% lightens"))))
         (help
            "blend mode to use"))
      (amount
         float
         (slider)
         (range 0.0 1.0)
         (help
            "Amount to blend effect into base texture"))
      (clamp
         bool
         (help
            "Clamp the output to the 0 to 1 range?"))))
#define kSGBlendNormalFast
(0)
#define kSGBlendNormalWrinkle
(1)
#define kSGBlendNormalDisplace
(2)
(ShaderNodeBlendNormals
   SHADER_NODE_BASE
   (alias
      "Blend Normals")
   (category Interpolation)
   (description
      "Blend two normals together")
   (size SHADERNODE_STANDARD_SIZE)
   (inputs
      (base
         (alias
            "a")
         (help
            "first normal"))
      (blend
         (alias
            "b")
         (help
            "second normal")))
   (editor
      (mode
         int
         (list
            (("kSGBlendNormalFast"
                  (alias
                     "Fast")
                  (help
                     "Fast normal map blending as described on the UDN. About 5 instructions."))
               ("kSGBlendNormalWrinkle"
                  (alias
                     "Wrinkle")
                  (help
                     "Works well for blending in small details, such as wrinkle maps, etc. Can have issues as offset approaches 90 degrees. About 8 instuctions."))
               ("kSGBlendNormalDisplace"
                  (alias
                     "Displace")
                  (help
                     "Treats second normal as displacement off of first. About 6 instructions."))))
         (help
            "blend mode to use"))))
(ShaderNodeDesaturate
   SHADER_NODE_BASE
   (category Color)
   (alias
      "Adjust Saturation")
   (description
      "Adjust Saturation\nDesaturate with negative values, increase with positive")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (editor
      (amount
         float
         (help
            "amount of saturation adjustment, negative to desaturate, positive to boost saturation"))))
(ShaderNodeAdjustContrast
   SHADER_NODE_BASE
   (category Color)
   (alias
      "Adjust Contrast")
   (description
      "Contrast\nAdjust contrast of incoming color")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (editor
      (contrast
         float
         (help
            "contrast amount to apply"))
      (clamp
         bool
         (help
            "Clamp output to not extend beyond the 0 to 1 range?"))))
(ShaderNodeAdjustHue
   SHADER_NODE_BASE
   (category Color)
   (alias
      "Adjust Hue")
   (description
      "Adjust Hue\nRotate hue of input color")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (editor
      (hue
         float
         (help
            "hue shift in degrees"))))
(ShaderNodeRGBToHSV
   SHADER_NODE_BASE
   (category Color)
   (alias
      "RGB to HSV")
   (description
      "Convert RGB into HSV")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (outputs
      (hsv
         (alias
            "hsv"))
      (h
         (alias
            "hue"))
      (s
         (alias
            "saturation"))
      (v
         (alias
            "value")))
   (editor))
(ShaderNodeHSVToRGB
   SHADER_NODE_BASE
   (category Color)
   (alias
      "HSV to RGB")
   (description
      "Convert HSV into RGB")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (hsv
         (help
            "HSV color input"))
      (h
         (help
            "hue"))
      (s
         (help
            "saturation"))
      (v
         (help
            "lightness value")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255)))
   (editor))
(ShaderNodeFresnel
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Fresnel")
   (description
      "Fresnel lighting approximation.")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_3)
   (key F)
   (inputs
      (normal
         (help
            "world space normal"))
      (view
         (help
            "uses the camera vector by default, but you can plug in a different one if you'd like"))
      (power
         (help
            "power value")))
   (editor
      (power
         float
         (alias
            "power")
         (help
            "Power used in calculation."))))
(ShaderNodeSoftDepth
   SHADER_NODE_BASE
   (category Utility)
   (alias
      "Soft Depth")
   (description
      "Updates alpha based on distance of pixel to depth buffer.")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_2)
   (inputs
      (alpha
         (help
            "alpha coming in"))
      (depth
         (help
            "distance to depth buffer")))
   (outputs
      (alpha
         (help
            "alpha going out")))
   (editor
      (depth_dist
         float
         (alias
            "depth_dist")
         (help
            "Distance to depth buffer used on calculation."))))
(ShaderNodeNormalizedRange
   SHADER_NODE_BASE
   (alias
      "Normalized Range")
   (category Utility)
   (description
      "Computes the normalized range between a given min and max (ie. computes ( x - min ) / ( max - min ))")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (clamp_output bool)
      (min
         float
         (help
            "Default minimum to use when the min input is left unspecified"))
      (max
         float
         (help
            "Default maximum to use when the max input is left unspecified")))
   (inputs
      (input
         (alias
            "input"))
      (min
         (alias
            "min"))
      (max
         (alias
            "max")))
   (outputs
      (output
         (alias
            "output"))))
(ShaderNodeExpFalloff
   SHADER_NODE_BASE
   (alias
      "Exp Falloff")
   (category Utility)
   (description
      "Computes an exponential falloff for a given range; returns 0 for x <= min, approaches 1 as x goes to infinity")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (min
         float
         (help
            "Default minimum to use when the min input is left unspecified"))
      (max
         float
         (help
            "Default maximum to use when the max input is left unspecified"))
      (power
         float
         (range 1.0e-2 100.0)
         (help
            "Default power to use when the max input is left unspecified")))
   (inputs
      (input
         (alias
            "input"))
      (min
         (alias
            "min"))
      (max
         (alias
            "max")))
   (outputs
      (output
         (alias
            "output"))))
(ShaderNodeFloat
   SHADER_NODE_BASE
   (category Values)
   (alias
      "Float")
   (description
      "Float\nA float value.")
   (key 1)
   (size 104 SHADERNODE_Y_SIZE_INOUTS_1)
   (editor
      (default_value
         float
         (alias
            "value")
         (help
            "Default float value (also determines the value used for previewing)"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))
      (use_range
         bool
         (help
            "Specify a range for the exposed property?")
         (read_only
            {!
               [exposed]}))
      (range
         (indent
            (min float)
            (max float))
         (read_only
            {&&
               {!
                  [use_range]}
               {!
                  [exposed]}})
         (editor_type vector)
         (help
            "Range for the exposed property"))
      (use_slider
         bool
         (read_only
            {&&
               {!
                  [use_range]}
               {!
                  [exposed]}})
         (help
            "Use a slider for the exposed property?"))))
(ShaderNodeVector2
   SHADER_NODE_BASE
   (category Values)
   (alias
      "Vector2")
   (description
      "Vector2\nTwo float values.")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_3)
   (key 2)
   (editor
      (default_value
         VECTOR2
         (alias
            "value")
         (help
            "Default vector2 value (also determines the value used for previewing)"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))))
(ShaderNodeVector3
   SHADER_NODE_BASE
   (category Values)
   (alias
      "Vector3")
   (description
      "Vector3\nThree float values.")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_4)
   (key 3)
   (editor
      (default_value
         VECTOR3
         (alias
            "value")
         (help
            "vector3 value"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))))
(ShaderNodeVector4
   SHADER_NODE_BASE
   (category Values)
   (alias
      "Vector4")
   (description
      "Vector4\nFour float values.")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_5)
   (key 4)
   (editor
      (default_value
         VECTOR4
         (alias
            "value")
         (help
            "vector4 value"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))))
(ShaderNodeColorRGB
   SHADER_NODE_BASE
   (category Values)
   (alias
      "Color")
   (description
      "Color\nA RGB color value (no alpha).")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_4)
   SHADERNODE_RGB_OUTPUTS
   (key 5)
   (editor
      (default_value
         color
         (alias
            "value")
         (help
            "Default color value"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))))
(ShaderNodeColorRGBA
   SHADER_NODE_BASE
   (category Values)
   (alias
      "Color4")
   (description
      "Color4\nA color value with alpha.")
   (size 104 SHADERNODE_Y_SIZE_INOUTS_5)
   (key 6)
   SHADERNODE_RGBA_OUTPUTS
   (editor
      (color_default
         color
         (alias
            "color")
         (help
            "Default color (rgb) value"))
      (alpha_default
         float
         (alias
            "alpha")
         (help
            "alpha value (also determines the value used for previewing)"))
      (exposed
         bool
         (help
            "Expose to Material instances?")
         (no_test))
      (color_prop_name
         symbol
         (help
            "Property name for my exposed property")
         (read_only
            {!
               [exposed]}))
      (color_prop_help
         string
         (help
            "Help string for my exposed property")
         (read_only
            {!
               [exposed]}))
      (alpha_prop_name
         symbol
         (help
            "Property name for my exposed alpha property")
         (read_only
            {!
               [exposed]}))
      (alpha_prop_help
         string
         (help
            "Help string for my exposed alpha property")
         (read_only
            {!
               [exposed]}))
      (prop_group
         symbol
         (help
            "Controls how exposed properties are organized on a Mat")
         (read_only
            {!
               [exposed]}))))
#define kWFTexSize8
(8)
#define kWFTexSize16
(16)
#define kWFTexSize32
(32)
#define kWFTexSize64
(64)
#define kWFTexSize128
(128)
#define kWFTexSize256
(256)
(ShaderNodeWaveformFloat
   SHADER_NODE_BASE
   (alias
      "Waveform Floats")
   (key 7)
   (category Values)
   (description
      "4 waveform curves, which get turned into a texture")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_6)
   (outputs
      (rgba
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (a
         (color 255 255 255))
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Connect to a Texture Resample node to reuse a texture")))
   (editor
      (tex_size
         int
         (list
            (("kWFTexSize8"
                  (alias
                     "8"))
               ("kWFTexSize16"
                  (alias
                     "16"))
               ("kWFTexSize32"
                  (alias
                     "32"))
               ("kWFTexSize64"
                  (alias
                     "64"))
               ("kWFTexSize128"
                  (alias
                     "128"))
               ("kWFTexSize256"
                  (alias
                     "256"))))
         (no_test)
         (help
            "Size of texture to generate"))
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary.")
         (no_test))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled.")
         (no_test))
      (waveform0
         waveform_float
         (no_test)
         (range 0 1.0)
         (help
            "waveform data for red channel"))
      (waveform1
         waveform_float
         (no_test)
         (range 0 1.0)
         (help
            "waveform data for green channel"))
      (waveform2
         waveform_float
         (no_test)
         (range 0 1.0)
         (help
            "waveform data for blue channel"))
      (waveform3
         waveform_float
         (no_test)
         (range 0 1.0)
         (help
            "waveform data for alpha channel"))))
(ShaderNodeWaveformColor
   SHADER_NODE_BASE
   (alias
      "Waveform Color")
   (key 8)
   (category Values)
   (description
      "A waveform color and alpha")
   (size SHADERNODE_Y_SIZE_INOUTS_5 SHADERNODE_Y_SIZE_INOUTS_6)
   (outputs
      (rgba
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (a
         (color 255 255 255))
      (sampler
         TEX_SAMPLER_COLOR
         (help
            "Connect to a Texture Resample node to reuse a texture")))
   (editor
      (tex_size
         int
         (list
            (("kWFTexSize8"
                  (alias
                     "8"))
               ("kWFTexSize16"
                  (alias
                     "16"))
               ("kWFTexSize32"
                  (alias
                     "32"))
               ("kWFTexSize64"
                  (alias
                     "64"))
               ("kWFTexSize128"
                  (alias
                     "128"))
               ("kWFTexSize256"
                  (alias
                     "256"))))
         (no_test)
         (help
            "Size of texture to generate"))
      (wrap_mode
         int
         (list TEXWRAP_ENUM)
         (alias
            "wrap mode")
         (help
            "How the texture behaves outside its boundary.")
         (no_test))
      (filter_mode
         int
         (list TEXFILTER_ENUM)
         (alias
            "filter mode")
         (help
            "How the texture is sampled.")
         (no_test))
      (waveform_color
         waveform_color
         (no_test)
         (help
            "waveform data for color channels"))
      (waveform_alpha
         waveform_float
         (no_test)
         (range 0 1.0)
         (help
            "waveform data for alpha channel"))))
(ShaderNodeRadians
   SHADER_NODE_BASE
   (alias
      "To Radians")
   (category 'Advanced Math')
   (description
      "To Radians\nConverts degrees to radians.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeDegrees
   SHADER_NODE_BASE
   (alias
      "To Degrees")
   (category 'Advanced Math')
   (description
      "To Degrees\nConverts radians to degrees.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeCosH
   SHADER_NODE_BASE
   (alias
      "Cosh")
   (category 'Advanced Math')
   (description
      "Cosh\nHyperbolic Cosine")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeACos
   SHADER_NODE_BASE
   (alias
      "ACos")
   (category 'Advanced Math')
   (description
      "ACos\nArc Cosine")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeASin
   SHADER_NODE_BASE
   (alias
      "ASin")
   (category 'Advanced Math')
   (description
      "ASin\nArc Sine")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeATan
   SHADER_NODE_BASE
   (alias
      "ATan")
   (category 'Advanced Math')
   (description
      "ATan\nReturns the arctangent of the input value.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeATan2
   SHADER_NODE_BASE
   (alias
      "ATan2")
   (category 'Advanced Math')
   (description
      "ATan2\nReturns the arctangent of two values. Output ranges from -pi to +pi.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeLog
   SHADER_NODE_BASE
   (alias
      "Log")
   (category 'Math Ops')
   (description
      "Log\nBase-e logarithm.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeLog10
   SHADER_NODE_BASE
   (alias
      "Log10")
   (category 'Advanced Math')
   (description
      "Log10\nBase 10 logarithm.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeLog2
   SHADER_NODE_BASE
   (alias
      "Log2")
   (category 'Advanced Math')
   (description
      "Log2\nBase 2 logarithm.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeExp
   SHADER_NODE_BASE
   (alias
      "Exp")
   (category 'Advanced Math')
   (description
      "Exp\nBase-e exponential.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeExp2
   SHADER_NODE_BASE
   (alias
      "Exp2")
   (category 'Advanced Math')
   (description
      "Exp2\nBase 2 exponential.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeSinH
   SHADER_NODE_BASE
   (alias
      "SinH")
   (category 'Advanced Math')
   (description
      "SinH\nOutputs the hyperbolic sine of the input.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeSqrt
   SHADER_NODE_BASE
   (alias
      "Sqrt")
   (category 'Advanced Math')
   (description
      "Sqrt\nOutputs the square root of the input.")
   (key Q)
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeTanH
   SHADER_NODE_BASE
   (alias
      "TanH")
   (category 'Advanced Math')
   (description
      "TanH\nOutputs the hyperbolic tangent of the input.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeTrunc
   SHADER_NODE_BASE
   (alias
      "Trunc")
   (category 'Advanced Math')
   (description
      "Trunc\nTruncates a value to its integer component.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeRSqrt
   SHADER_NODE_BASE
   (alias
      "RSqrt")
   (category 'Advanced Math')
   (description
      "RSqrt\nOutputs the reciprocal of the square root.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeFrac
   SHADER_NODE_BASE
   (alias
      "Frac")
   (category 'Advanced Math')
   (description
      "Frac\nOutputs the fractional part of the input.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeAny
   SHADER_NODE_BASE
   (alias
      "Any")
   (category 'Advanced Math')
   (description
      "Ouputs 1 if any of the input vector values are non 0")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeAll
   SHADER_NODE_BASE
   (alias
      "All")
   (category 'Advanced Math')
   (description
      "Ouputs 1 if all of the input vector values are non 0")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeSign
   SHADER_NODE_BASE
   (alias
      "Sign")
   (category 'Advanced Math')
   (description
      "Outputs -1 if input is less than zero; 0 if input equals zero; and 1 if input is greater than zero")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeReflect
   SHADER_NODE_BASE
   (alias
      "Reflect")
   (category 'Advanced Math')
   (description
      "Calculates the reflection vector using the formula output = vector - 2 * normal * dot(vector * normal)")
   (size 104 104)
   (inputs
      (input0
         (alias
            "vector")
         (help
            "ray direction"))
      (input1
         (alias
            "normal")
         (help
            "surface normal"))))
(ShaderNodeRefract
   SHADER_NODE_BASE
   (alias
      "Refract")
   (category 'Advanced Math')
   (description
      "Calculates a refraction vector given an incoming vector, normal, and refraction scale")
   (size 104 104)
   (inputs
      (vector
         (help
            "ray direction"))
      (normal
         (help
            "surface normal"))
      (scale
         (help
            "strength of refraction")))
   (editor
      (scale
         float
         (help
            "strength of refraction"))))
(ShaderNodeDDX
   SHADER_NODE_BASE
   (alias
      "DDX")
   (category 'Advanced Math')
   (description
      "the partial derivative of the specified value with respect to the screen-space x-coordinate; Useful for antialiasing edges based on view scale.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeDDY
   SHADER_NODE_BASE
   (alias
      "DDY")
   (category 'Advanced Math')
   (description
      "the partial derivative of the specified value with respect to the screen-space y-coordinate; Useful for antialiasing edges based on view scale.")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeFWidth
   SHADER_NODE_BASE
   (alias
      "FWidth")
   (category 'Advanced Math')
   (description
      "Computes the addition of the abbsolute value of ddx and ddy; Useful for antialiasing edges based on view scale. output = (ddx(x)) + abs(ddy(x))")
   SHADER_FUNC_FLOAT_NODE)
(ShaderNodeAnglesToVec
   SHADER_NODE_BASE
   (alias
      "Angles to Vec")
   (category 'Advanced Math')
   (description
      "Given 2 spherical angles and 2 orienting basis vectors, generate a vector")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (normalize_inputs
         bool
         (help
            "Should we normalize the input vectors?"))
      (forward_axis
         VECTOR3
         (help
            "Default forward-axis to use when the forward-axis input is left unspecified"))
      (up_axis
         VECTOR3
         (help
            "Default up-axis to use when the up-axis input is left unspecified")))
   (inputs
      (horiz_angle
         (alias
            "horiz angle")
         (description
            "The counterclockwise angle about the up-axis as measured from the forward-axis (in radians)"))
      (vert_angle
         (alias
            "vert angle")
         (description
            "The angle from the plane perpendicular to the up-axis (in radians)"))
      (fwd_axis
         (alias
            "fwd axis")
         (description
            "The forward-axis we measure the horizontal angle from (it already should be normalized)"))
      (up_axis
         (alias
            "up axis")
         (description
            "The up-axis we measure the vertical angle to (it already should be normalized)")))
   (outputs
      (vec
         (alias
            "vec")
         (description
            "The newly minted vector"))))
#define kAngleUnits_Radians
(0)
#define kAngleUnits_Degrees
(1)
#define kAngleUnits_Normalized
(2)
#define ANGLE_UNITS_ENUM
((("kAngleUnits_Radians"
         (alias
            "Radians")
         (help
            "Angles in radians"))
      ("kAngleUnits_Degrees"
         (alias
            "Degrees")
         (help
            "Angles in degrees"))
      ("kAngleUnits_Normalized"
         (alias
            "Normalized")
         (help
            "Normalized angles (0-1)"))))
(ShaderNodeVecToAngles
   SHADER_NODE_BASE
   (alias
      "Vec to Angles")
   (category 'Advanced Math')
   (description
      "Compute the spherical angles between a vector and 2 orienting basis vectors")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (normalize_inputs
         bool
         (help
            "Should we normalize the input vectors?"))
      (output_units
         int
         (list ANGLE_UNITS_ENUM)
         (help
            "What units should we use to output the angles?"))
      (forward_axis
         VECTOR3
         (help
            "Default forward-axis to use when the forward-axis input is left unspecified"))
      (up_axis
         VECTOR3
         (help
            "Default up-axis to use when the up-axis input is left unspecified")))
   (inputs
      (vec
         (alias
            "vec")
         (description
            "The vector we'll compute angles for"))
      (fwd_axis
         (alias
            "fwd axis")
         (description
            "The forward-axis we measure the horizontal angle from (it already should be normalized)"))
      (up_axis
         (alias
            "up axis")
         (description
            "The up-axis we measure the vertical angle to (it already should be normalized)")))
   (outputs
      (horiz_angle
         (alias
            "horiz angle")
         (description
            "The counterclockwise angle about the up-axis as measured from the forward-axis"))
      (vert_angle
         (alias
            "vert angle")
         (description
            "The angle from the plane perpendicular to the up-axis"))))
(ShaderNodeFogInputs
   SHADER_NODE_BASE
   (category Fog)
   (allowed_roots ShaderNodeFog)
   (alias
      "Fog Inputs")
   (description
      "Provides data which should be used to determine pixel fogginess")
   (size SHADERNODE_STANDARD_SIZE)
   (outputs
      (world_pos
         (alias
            "world pos")
         (help
            "World position of the pixel being fogged"))
      (distance
         (alias
            "distance")
         (help
            "World-space distance from the camera to the pixel being fogged"))
      (view_dir
         (alias
            "view_dir")
         (help
            "World-space direction from the pixel being fogged to the camera"))))
(ShaderNodeSkyLayer
   SHADER_NODE_BASE
   (category Sky)
   (allowed_roots ShaderNodeSky)
   (alias
      "Sky Layer")
   (description
      "Convert world-space view vector to position (in Km) and surface normal on a sky sphere (only for use with Sky shader graphs)")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (elevation
         float
         (help
            "Elevation of the sky layer above the planet surface (in Km)")
         (range 0.0 1000.0))
      (use_planet_center
         bool
         (help
            "Should we center the sky sphere on the planet's center?"))
      (radius
         float
         (help
            "Radius of the sky sphere (ignored if centering on the planet center)")
         (range 0.0 10000.0)
         (read_only
            [use_planet_center]))
      (use_projected_uv
         bool
         (help
            "Should we use projected or angular UVs?"))
      (angular_width
         float
         (range 1.0e-2 360.0)
         (slider)
         (read_only
            [use_projected_uv])
         (help
            "Angular width of angular UVs"))
      (angular_height
         float
         (range 1.0e-2 180.0)
         (slider)
         (read_only
            [use_projected_uv])
         (help
            "Angular height of angular UVs"))
      (azimuth_angle
         float
         (range 0.0 360.0)
         (slider)
         (read_only
            [use_projected_uv])
         (help
            "Azimuth angle (angle about the Z axis) of angular UV center"))
      (altitude_angle
         float
         (range -90.0 90.0)
         (slider)
         (read_only
            [use_projected_uv])
         (help
            "Altitude angle (angle from the XY plane) of angular UV center")))
   (inputs
      (view_dir
         (alias
            "view vec")
         (help
            "World-space view vector, generally taken from a View Vec from Screen UV node")))
   (outputs
      (sky_pos
         (alias
            "sky pos")
         (help
            "Sky position in Km (distance from center of the planet in sky_pos.w)"))
      (uv
         (alias
            "uv")
         (help
            "Sky position xy projected as world UV"))
      (normal
         (alias
            "normal")
         (help
            "World-space surface normal"))
      (tangent
         (alias
            "tangent")
         (help
            "World-space surface tangent (handedness in tangent.w)"))
      (intersect
         (alias
            "intersect?")
         (help
            "1 if this pixel intersects the specified sky sphere, otherwise 0"))))
(ShaderNodeSkyBillboard
   SHADER_NODE_BASE
   (category Sky)
   (allowed_roots ShaderNodeSky)
   (alias
      "Sky Billboard")
   (description
      "Convert world-space view vector to sky billboard position (in Km) and surface normal (only for use with Sky shader graphs)")
   (size SHADERNODE_STANDARD_SIZE)
   (editor
      (distance
         float
         (range 1.0 10000.0)
         (alias
            "distance (Km)")
         (help
            "Distance to the billboard (as measured along the ground, in Km)"))
      (elevation
         float
         (range -100.0 100.0)
         (alias
            "elevation (Km)")
         (help
            "Elevation of the bottom edge of the billboard above the planet surface (in Km)"))
      (height
         float
         (range 0.0 100.0)
         (alias
            "height (Km)")
         (help
            "Height of the billboard (in Km)"))
      (angle
         float
         (range 0.0 360.0)
         (help
            "Angle in degrees positioning the billboard center"))
      (angular_width
         float
         (range 0.0 360.0)
         (help
            "Angular width of the billboard (about the Z axis)")))
   (inputs
      (view_dir
         (alias
            "view vec")
         (help
            "World-space view vector, generally taken from a View Vec from Screen UV node")))
   (outputs
      (sky_pos
         (alias
            "sky pos")
         (help
            "Sky position in Km"))
      (uv
         (alias
            "uv")
         (help
            "help!"))
      (normal
         (alias
            "normal")
         (help
            "World-space surface normal"))
      (tangent
         (alias
            "tangent")
         (help
            "World-space surface tangent (handedness in tangent.w)"))
      (intersect
         (alias
            "intersect?")
         (help
            "1 if this pixel intersects the specified sky billboard, otherwise 0"))))
(ShaderNodeSkyNormalMap
   SHADER_NODE_BASE
   (category Sky)
   (allowed_roots ShaderNodeSky)
   (alias
      "Apply Sky Normal Map")
   (description
      "Apply normal map sample in the sky shader (maps unperturbed world-space surface normal and normal map sample to perturbed world-space normal)")
   (size 130 SHADERNODE_STANDARD_SIZE_X)
   (inputs
      (orig_normal
         (alias
            "orig. normal")
         (help
            "The original (unperturbed) world-space surface normal"))
      (orig_tangent
         (alias
            "orig. tangent")
         (help
            "The original (unperturbed) world-space surface tangent (handedness in tangent.w)"))
      (normal_map_sample
         (alias
            "normal map sample")
         (help
            "The normal map sample (or blended normal map samples) -- ie. the perturbed tangent-space surface normal"))
      (strength
         (alias
            "strength")
         (help
            "Strength with which to perturb the original surface normal")))
   (outputs
      (new_normal
         (alias
            "new normal")
         (help
            ""))))
(ShaderNodeSkyCombineCloudThickness
   SHADER_NODE_BASE
   (category Sky)
   (allowed_roots ShaderNodeSky)
   (alias
      "Combine Sky Cloud Thickness")
   (description
      "Combine two sources of sky cloud thickness data")
   (size 160 SHADERNODE_Y_SIZE_INOUTS_4)
   (inputs
      (thickness_a
         (alias
            "A: thickness"))
      (scale_a
         (alias
            "A: thickness scale"))
      (thickness_b
         (alias
            "B: thickness"))
      (scale_b
         (alias
            "B: thickness scale")))
   (outputs
      (thickness)))
(ShaderNodeSkyCombineGround
   SHADER_NODE_BASE
   (category Sky)
   (allowed_roots ShaderNodeSky)
   (alias
      "Combine Sky Ground")
   (description
      "Combine two sources of sky ground data, selecting the closest to the viewer")
   (size 200 SHADERNODE_Y_SIZE_INOUTS_12)
   (inputs
      (is_ground_a
         (alias
            "A: is ground?")
         (help
            "Is source A a ground pixel?"))
      (ground_pos_a
         (alias
            "A: ground pos")
         (help
            "Ground position at source A (in Km)"))
      (ground_normal_a
         (alias
            "A: ground normal")
         (help
            "World-space ground surface normal at source A"))
      (ground_diffuse_a
         (alias
            "A: ground diffuse")
         (help
            "Diffuse color of the ground at source A"))
      (ground_spec_color_a
         (alias
            "A: ground spec color")
         (help
            "Specular color of the ground at source A"))
      (ground_spec_power_a
         (alias
            "A: ground spec power")
         (help
            "Specular power of the ground at source A"))
      (is_ground_b
         (alias
            "B: is ground?")
         (help
            "Is source B a ground pixel?"))
      (ground_pos_b
         (alias
            "B: ground pos")
         (help
            "Ground position at source B (in Km)"))
      (ground_normal_b
         (alias
            "B: ground normal")
         (help
            "World-space ground surface normal at source B"))
      (ground_diffuse_b
         (alias
            "B: ground diffuse")
         (help
            "Diffuse color of the ground at source B"))
      (ground_spec_color_b
         (alias
            "B: ground spec color")
         (help
            "Specular color of the ground at source B"))
      (ground_spec_power_b
         (alias
            "B: ground spec power")
         (help
            "Specular power of the ground at source B")))
   (outputs
      (is_ground
         (alias
            "is ground?")
         (help
            "Is this a ground pixel?"))
      (ground_pos
         (alias
            "ground pos")
         (help
            "Ground position (in Km)"))
      (ground_normal
         (alias
            "ground normal")
         (help
            "World-space ground surface normal"))
      (ground_diffuse
         (alias
            "ground diffuse")
         (help
            "Diffuse color of the ground"))
      (ground_spec_color
         (alias
            "ground spec color")
         (help
            "Specular color of the ground"))
      (ground_spec_power
         (alias
            "ground spec power")
         (help
            "Specular power of the ground"))))
(ShaderNodeKinectDepthBuffer
   SHADER_NODE_BASE
   (alias
      "NUIDepthTex")
   (category Texture)
   (description
      "This node allows you to use the NUI depth buffer.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_3)
   (outputs
      (depth
         (help
            "depth value. Smaller is nearer."))
      (platformIndependentDepth
         (help
            "platform independent depth value, scaled to durango range on other platforms. Smaller is nearer."))
      (depthTex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the depth texture sampler"))))
(ShaderNodeKinectColorBuffer
   SHADER_NODE_BASE
   (alias
      "NUIColorTex")
   (category Texture)
   (description
      "This node allows you to use the NUI color buffer.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_5)
   (outputs
      (color
         (help
            "Color value."))
      (colorTex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the color texture sampler"))))
(ShaderNodeKinectPlayerIDBuffer
   SHADER_NODE_BASE
   (alias
      "NUIPlayerIDTex")
   (category Texture)
   (description
      "This node allows you to use the NUI player IDbuffer.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_1))
(ShaderNodeKinectIrBuffer
   SHADER_NODE_BASE
   (alias
      "NUIIRTex")
   (category Texture)
   (description
      "This node allows you to use the NUI IR buffer.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_2))
(ShaderNodeViperLightWall
   SHADER_NODE_BASE
   (alias
      "Viper Light Wall")
   (category Viper)
   (description
      "Renders a wall of light bulbs.")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_15)
   (inputs
      (driverColor)
      (driverTex TEX_SAMPLER_COLOR)
      (bulbTex TEX_SAMPLER_COLOR)
      (filamentTex TEX_SAMPLER_COLOR)
      (maskTex TEX_SAMPLER_COLOR)
      (lightColorTex TEX_SAMPLER_COLOR))
   (editor
      (driverBlend
         float
         (help
            "[0, 1] Where we get the image to show on the lights. 0 means all driverColor, 1 means all driverTex."))
      (hCount
         float
         (help
            "How many bulbs in the horizontal direction."))
      (vCount
         float
         (help
            "How many bulbs in the vertical direction."))
      (bulbDepth
         float
         (help
            "How deep the bulbs appear to be in the wall. Bigger number means deeper."))
      (bulbSize
         float
         (help
            "How big the bulbs are. Oddly, bigger means smaller. Sorry."))
      (holeSize
         float
         (help
            "How big the holes are. Strangely enough, bigger means smaller. How odd."))))
(ShaderNodeViperLaserBeam
   SHADER_NODE_BASE
   (alias
      "Viper Laser Beam")
   (category Viper)
   (description
      "Renders a laser beam.")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_8)
   (inputs
      (responseCurves TEX_SAMPLER_COLOR))
   (editor
      (splitAngle
         float
         (help
            "<<< unused! >>>"))
      (beamColor
         color
         (help
            "What color the core beam is."))
      (beamBrightness
         float
         (help
            "How bright the core beam is."))
      (beamSize
         float
         (help
            "How big the core beam is."))
      (glowColor
         color
         (help
            "What color the foggy glow is."))
      (glowBrightness
         float
         (help
            "How bright the foggy glow is."))
      (glowSize
         float
         (help
            "How big the foggy glow is."))))
(ShaderNodeViperRippleGenerator
   SHADER_NODE_BASE
   (alias
      "Viper Ripple Generator")
   (category Viper)
   (description
      "Creates a 2D field of ripples.")
   (size 120 SHADERNODE_Y_SIZE_INOUTS_5)
   (inputs
      (heightTex TEX_SAMPLER_COLOR)
      (speedTex TEX_SAMPLER_COLOR)
      (driver))
   (editor
      (viscosity
         float
         (help
            "How thick the ripples are.")
         (range 0.0 1.0)
         (slider))))
(ShaderNodeViperAudioLevels
   SHADER_NODE_BASE
   (alias
      "Viper Audio Levels")
   (category Viper)
   (description
      "The audio levels from the current song being played.")
   (size 104 104)
   (outputs
      (x
         (alias
            "low band"))
      (y
         (alias
            "mid band"))
      (z
         (alias
            "high band"))
      (w
         (alias
            "all bands"))))
(ShaderNodeViperAudioLevelsOverSeconds
   SHADER_NODE_BASE
   (alias
      "Audio Levels Over Seconds")
   (category Viper)
   (description
      "a 1d texture of the music amplitude over the last 8 seconds")
   (size 104 104)
   (outputs
      (rgba
         (alias
            "combined"))
      (r
         (alias
            "low band"))
      (g
         (alias
            "mid band"))
      (b
         (alias
            "high band"))
      (a
         (alias
            "all bands"))))
(ShaderNodeViperAudioLevelsOverBeats
   SHADER_NODE_BASE
   (alias
      "Audio Levels Over Beats")
   (category Viper)
   (description
      "a 1d texture of the music amplitude over the last 8 beats")
   (size 104 104)
   (outputs
      (rgba
         (alias
            "combined"))
      (r
         (alias
            "low band"))
      (g
         (alias
            "mid band"))
      (b
         (alias
            "high band"))
      (a
         (alias
            "all bands"))))
(ShaderNodeReflectionTex
   SHADER_NODE_BASE
   (alias
      "ReflectionTex")
   (category Texture)
   (description
      "This node allows you to use the last rendered reflection texture.")
   (size SHADERNODE_STANDARD_SIZE_X SHADERNODE_Y_SIZE_INOUTS_6)
   (inputs
      (uv
         (alias
            "uv")))
   (outputs
      (rgb
         (color))
      (r
         (color 255 0 0))
      (g
         (color 0 255 0))
      (b
         (color 0 0 255))
      (tex
         TEX_SAMPLER_COLOR
         (help
            "Outputs the texture sampler"))))
(ShaderNodePeakColorCore
   SHADER_NODE_BASE
   (alias
      "Peak Color Core")
   (category Viper)
   (size 104 104))
(ShaderNodePeakColorFringe
   SHADER_NODE_BASE
   (alias
      "Peak Color Fringe")
   (category Viper)
   (size 104 104))
(ShaderNodeNebulaColor0
   SHADER_NODE_BASE
   (alias
      "Nebula Color 0")
   (category Viper)
   (size 104 104))
(ShaderNodeNebulaColor1
   SHADER_NODE_BASE
   (alias
      "Nebula Color 1")
   (category Viper)
   (size 104 104))
(ShaderNodeUIAlpha
   SHADER_NODE_BASE
   (alias
      "UI Alpha")
   (category Viper)
   (size 104 104))
(ShaderNodeAvgPlayerDepth
   SHADER_NODE_BASE
   (alias
      "Average Player Depth")
   (category Viper)
   (size 104 104))
(ShaderNodePlayerSidesSwapped
   SHADER_NODE_BASE
   (alias
      "Player Sides Swapped")
   (category Viper)
   (size 104 104))