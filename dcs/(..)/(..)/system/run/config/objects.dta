(Object
   (description
      "The Object class is the root of the class hierarchy. Every class has Object as a superclass.")
   (editor
      (name
         string
         (hide propedit propanim flow)
         (help
            "name of the object")
         (no_test)
         (group System))
      (layer
         string
         (hide propedit propanim flow)
         (read_only TRUE)
         (help
            "which layer we are in")
         (instance_prop)
         (group System))
      (refs
         (array
            object
            (class Object))
         (hide propanim flow)
         (tab debug)
         (alias
            "Used by:")
         (help
            "Objects pointing to this or pointing to components on this, capped at 100")
         (read_only TRUE)
         (allow_copy FALSE))
      (components
         (array symbol)
         (hide
            {==
               {size
                  [components]}
               0}
            propanim
            flow)
         (read_only TRUE)
         (group System)
         (tab debug)
         (help
            "Components added to this object."))))
(ObjectDir
   (description
      "An ObjectDir keeps track of a set of Objects.")
   (file_ext
      ".dir")
   (user_creatable FALSE)
   (editor
      (path_name
         file
         (tab debug)
         (group System)
         (help
            "Where this came from")
         (read_only TRUE))
      (layers
         (array
            (struct
               (name
                  string
                  (help
                     "Name of this layer"))
               (keep_on_disk
                  bool
                  (help
                     "Flag for making this layer be cached to disk"))
               (path
                  file
                  (help
                     "Where this layer lives, if external, empty if internal")
                  (ext
                     "LAYER files"
                     layer))
               (persistent
                  bool
                  (help
                     "If true, means other milo files use exactly the same loaded objects that are in this layer"))))
         (hide propanim flow)
         (tab debug)
         (read_only TRUE)
         (group System)
         (disk_prop))
      (globals
         (array
            symbol
            (help
               "Name of the global to subscribe to")
            (list
               {$this list_globals})
            (disk_prop))))
   (globals
      (global_mgrs
         "globals/main.layer")))
(Instance
   (description
      "An Instanced ObjectDir, has a path to a description on disk")
   (superclasses ObjectDir)
   (editor
      (proxy_file
         file
         (hide
            {$this always_inline}
            propanim
            flow)
         (instance_prop)
         (class
            {$this class_name})
         (tab debug)
         (group System))))
(JoypadDataSource
   (description
      "An object that let's you access joypad events and state from Flow. FOR PROTOTYPING ONLY (disabled in SHIP builds)!")
   (superclasses Poll)
   (ext joypad)
   (allowed_dirs ObjectDir Scene)
   (editor
      (enabled
         bool
         (help
            "When enabled, will send out joypad events and update state properties. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (pad_num
         int
         (help
            "Which pad are we receiving data from - 0, 1, 2, or 3. FOR PROTOTYPING ONLY (disabled in SHIP builds)!")
         (range 0 3))
      (left_stick_x
         float
         (read_only TRUE)
         (help
            "Horizontal position of left analog stick - -1 being completely left, 0 is centered, and 1 is completely right. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (left_stick_y
         float
         (read_only TRUE)
         (help
            "Vertical position of left analog stick - -1 being completely left, 0 is centered, and 1 is completely right. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (right_stick_x
         float
         (read_only TRUE)
         (help
            "Horizontal position of right analog stick - -1 being completely left, 0 is centered, and 1 is completely right. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (right_stick_y
         float
         (read_only TRUE)
         (help
            "Vertical position of right analog stick - -1 being completely left, 0 is centered, and 1 is completely right. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (left_trigger
         float
         (read_only TRUE)
         (help
            "From 0 to 1, the position of the left analog trigger. 1 is fully pressed, 0 is unpressed. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (right_trigger
         float
         (read_only TRUE)
         (help
            "From 0 to 1, the position of the left analog trigger. 1 is fully pressed, 0 is unpressed. FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (dpad_up
         bool
         (read_only TRUE)
         (help
            "Is the up dpad pressed? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (dpad_down
         bool
         (read_only TRUE)
         (help
            "Is the up dpad pressed? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (dpad_left
         bool
         (read_only TRUE)
         (help
            "Is the up dpad pressed? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (dpad_right
         bool
         (read_only TRUE)
         (help
            "Is the up dpad pressed? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (ltrigger_pressed
         bool
         (read_only TRUE)
         (help
            "Is left trigger down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (rtrigger_pressed
         bool
         (read_only TRUE)
         (help
            "Is right trigger down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (lbutton
         bool
         (read_only TRUE)
         (help
            "Is left button down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (rbutton
         bool
         (read_only TRUE)
         (help
            "Is right button down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (y
         bool
         (read_only TRUE)
         (help
            "Is Y button down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (b
         bool
         (read_only TRUE)
         (help
            "Is B button down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (a
         bool
         (read_only TRUE)
         (help
            "Is A button down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (x
         bool
         (read_only TRUE)
         (help
            "Is X button down? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (lstick_clicked
         bool
         (read_only TRUE)
         (help
            "Is left stick clicked in? FOR PROTOTYPING ONLY (disabled in SHIP builds)!"))
      (rstick_clicked
         bool
         (read_only TRUE)
         (help
            "Is right stick clicked in? FOR PROTOTYPING ONLY (disabled in SHIP builds)!")))
   (events_out
      (joypad_button_down
         (editor
            (which_button
               int
               (list
                  (XBOX_BUTTON_ALIASES DPAD_BUTTON_ALIASES))
               (help
                  "which button was just pressed?")))
         (help
            "called when button is pressed, passes you the button"))
      (joypad_button_up
         (editor
            (which_button
               int
               (list
                  (XBOX_BUTTON_ALIASES DPAD_BUTTON_ALIASES))
               (help
                  "which button was just released?")))
         (help
            "called when a button press is released, passes you the button"))
      (press_a)
      (press_b)
      (press_x)
      (press_y)
      (press_rt)
      (press_lt)
      (press_rb)
      (press_lb)
      (press_rs)
      (press_ls)
      (press_up)
      (press_down)
      (press_left)
      (press_right)))
(MidiParser
   (allowed_dirs)
   (description
      "Parses midi files into messages to send to other objects or itself")
   (init))
#define BPM_SLIDER
((slider)
   (interpolator
      (exp 20 500 0 1 2.58))
   (range 20.0 500.0)
   (min_digits 4)
   (units
      "BPM"))
(BeatClock
   (description
      "Class that provides a beat without any music")
   (allowed_dirs Scene Entity)
   (superclasses BeatSource)
   (category Control)
   (ext bc)
   (group Time)
   (editor
      (bpm
         float
         (alias
            "beats per minute")
         (help
            "beats per minute")
         BPM_SLIDER)
      (beats_per_measure
         int
         (alias
            "beats per measure")
         (help
            "beats per measure")
         (range 1 20))
      (measures_per_phrase
         int
         (help
            "measures per phrase.  Use 0 to disable phrases.")
         (range 0 10000))
      (16th_note
         int
         (help
            "Current 16th note subdivision of the beat (four ber beat)")
         (read_only TRUE))
      (reset
         script
         (script
            {$this reset})
         (help
            "Reset this beat clock to 0")
         (no_test)))
   (events_in
      (start
         (help
            "Start the beat clock"))
      (reset
         (help
            "Reset the beat clock"))
      (set_as_beat_provider
         (help
            "Forces this clock to be the global beat provider")))
   (events_out
      (on_reset
         (help
            "The beatclock has just been reset"))))
(BeatProvider
   (description
      "A global object that provides beat information to flows, driven by the engine's beat timeline")
   (allowed_dirs)
   (superclasses BeatSource)
   (functest singleton no_test)
   (group Time)
   (editor
      (source_object
         object
         (class BeatSource)
         (alias
            "source")
         (help
            "the object that is driving the beat")
         (read_only TRUE))
      (global_elapsed_seconds
         float
         (read_only TRUE))
      (global_elapsed_beats
         float
         (read_only TRUE))
      (tempo
         float
         (help
            "current tempo in beats per minute")
         (read_only TRUE))
      (secs_per_beat
         float
         (help
            "The current tempo in seconds per beat, 60.0/tempo (for convenience)")
         (read_only TRUE))
      (beats_per_measure
         int
         (help
            "Time signature info: the current beats per measure")
         (read_only TRUE))
      (subdivision
         int
         (alias 16th_note)
         (help
            "Current 16th note subdivision of the beat (four per beat)")
         (read_only TRUE))
      (default_tempo
         float
         (alias
            "Default Tempo")
         (no_test)
         BPM_SLIDER)
      (default_beats_per_measure
         int
         (alias
            "Default Meter")
         (range 1 20)
         (no_test)))
   (events_in
      (start_default_clock
         (help
            "Start the default beat clock for testing"))
      (pause_game_timelines
         (editor
            (pause bool))
         (help
            "pause/unpause seconds and beat game timelines on the timemgr")))
   (events_out
      (on_measure
         (help
            "New measure"))
      (on_beat
         (help
            "New beat"))
      (on_subdivision
         (alias on_16th_note)
         (help
            "New 16th note subdisivion of the beat"))
      (on_phrase
         (help
            "New phrase"))
      (on_beat_provider_updated
         (help
            "Called each frame after beat provider has updated all its state"))
      (on_playing
         (help
            "Called when the transport state changes to playing"))
      (on_paused
         (help
            "Called when the transport state changes to playing"))
      (on_stopped
         (help
            "Called when the transport state changes to stopped"))))
(BeatSource
   (description
      "Source of beat time")
   (category Sound)
   (group Time)
   (editor
      (play
         script
         (script
            {$this play})
         (no_test)
         (history FALSE)
         (help
            "Plays or resumes the source"))
      (pause
         script
         (script
            {$this pause})
         (no_test)
         (history FALSE)
         (help
            "Pauses the source"))
      (stop
         script
         (script
            {$this stop})
         (no_test)
         (history FALSE)
         (help
            "Stops the source and moves the play head back to the beginning"))
      (transport_state
         symbol
         (alias State)
         (list TRANSPORT_STATES)
         (help
            "indicates playing, paused, or stopped status")
         (read_only TRUE))
      (elapsed_seconds
         float
         (help
            "Elapsed time in seconds")
         (no_test))
      (elapsed_beats
         float
         (help
            "Elapsed time in beats")
         (read_only TRUE))
      (phrase
         int
         (help
            "current phrase")
         (read_only TRUE))
      (measure
         int
         (help
            "current measure")
         (read_only TRUE))
      (beat
         int
         (help
            "current beat")
         (read_only TRUE))
      (tick
         int
         (help
            "current tick")
         (read_only TRUE)))
   (events_in
      (play
         (help
            "play the source"))
      (pause
         (help
            "pause the source"))
      (stop
         (help
            "stop the source"))
      (set_position
         (editor
            (time
               float
               (help
                  "time in seconds")))
         (help
            "seek the source"))))
(Poll
   (description
      "Abstract base class for pollable objects")
   (editor
      (poll_active
         bool
         (help
            "Should we be actively polling right now, set false to freeze it and anything in it, if it's an ObjectDir.")
         (group Poll)
         (no_test))
      (poll_children
         (array string)
         ("pollable children")
         (tab debug)
         (hide propanim flow)
         (read_only TRUE)
         (group Poll))
      (full_poll_graph
         script
         (script
            {$this show_poll_dep_graph FALSE})
         (help
            "click to see a full pollable dependency graph")
         (tab debug)
         (group Poll)
         (no_test))
      (polls_only_graph
         script
         (script
            {$this show_poll_dep_graph TRUE})
         (help
            "click to see a poll-only dependency graph")
         (tab debug)
         (group Poll)
         (no_test))
      (sub_tree_graph
         script
         (script
            {$this show_poll_dep_graph TRUE 1000 1000})
         (help
            "click to see the tree involving this pollable")
         (tab debug)
         (group Poll)
         (no_test))
      (start_poll
         script
         (script
            {do
               {$this stop_poll}
               {$this start_poll}})
         (disk_prop)
         (tab debug)
         (no_test))
      (stop_poll
         script
         (script
            {$this stop_poll})
         (disk_prop)
         (tab debug)
         (no_test)))
   (events_out
      (enter
         (help
            "Broadcast on enter, which is after all our [poll_children] have entered"))
      (exit
         (help
            "Broadcast on exit, which is after all our children have exited"))))
(WatchSet
   (description
      "Objects and properties used by the Forge Watch Window.")
   (allowed_dirs ObjectDir Scene)
   (user_creatable TRUE)
   (hx_tool_only TRUE)
   (superclasses Poll)
   (category Debug)
   (ext watch)
   (editor))
(PlatformMgr
   (description
      "Global Manager of Platforms")
   (category Platforms)
   (allowed_dirs)
   (editor
      (game_is_trial
         bool
         (read_only TRUE)
         (help
            "Whether or not the game is running on a game trial license.")
         (no_test))
      (game_has_focus
         bool
         (read_only TRUE)
         (help
            "FALSE when the the system has UI up or the game is backgrounded."))
      (ignore_system_gestures
         bool
         (help
            "Ignores system kinect gestures while enabled.")
         (no_test))
      (current_platform
         int
         (alias
            "Current Platform")
         (help
            "Sets the current platform for testing platform-specific values. (in  Flow or PlatformPropertyCom)")
         (list
            {platform_mgr get_supported_platforms_enum})
         (no_test)))
   (events_out
      (on_activate)
      (on_deactivate)
      (on_suspend)
      (on_resume)
      (gamer_picture_gotten)))
#define PROPERTYRANGEMAPPER_STRUCT
((array
      (struct
         (input_val
            float
            (help
               "Input from which to map"))
         (output_val
            float
            (help
               "Output to which to map the input"))
         (interpolation_exponent
            float
            (help
               "Exponent for this range mapping entry (1 = linear)"))
         (flip
            bool
            (help
               "Flips the curve between convex and concave")))))
(PropertyRangeMapper
   (description
      "Object to map a value from one range to another")
   (allowed_dirs Entity Scene UIScreen)
   (superclasses Object)
   (ext rangemapper)
   (editor
      (property
         prop_ref
         (allowed_prop_types
            (int float))
         (help
            "The property to drive input with."))
      (is_enabled
         bool
         (help
            "Is this range mapper enabled?"))
      (range_mapping
         PROPERTYRANGEMAPPER_STRUCT
         (help
            "Rules for mapping an input range to an output range"))
      (output_drivers
         (array
            PROPREF_FLOAT
            (help
               "Property driver for output value")))
      (output_value
         float
         (help
            "Output value in the specified range")
         (read_only TRUE))))
(PropertySmoother
   (description
      "Smooths input value to output value")
   (allowed_dirs ObjectDir Scene UIScreen Entity)
   (superclasses Poll)
   (ext smooth)
   (editor
      (enabled
         bool
         (help
            "True if the smoother is currently running"))
      (float_val
         float
         (read_only TRUE)
         (help
            "Output smoothed value"))
      (float_target
         float
         (help
            "Target value of the smoother"))
      (float_target_scale
         float
         (help
            "Scale to apply to the target value of the smoother"))
      (rate
         float
         (help
            "Smoothing rate in units/second"))
      (func
         int
         (list PROPERTYSMOOTHER_FUNCS)
         (help
            "Desired smoothing function"))
      (mode
         int
         (list PROPERTYSMOOTHER_MODES)
         (help
            "Desired smoothing mode"))
      (input_driver
         PROPREF_FLOAT
         (help
            "Property driver for input value"))
      (output_drivers
         (array
            PROPREF_FLOAT
            (help
               "Property driver for input value")))))
(PropertyBlender
   (description
      "Property Blender (allows run time property blending between configurations)")
   (superclasses Poll)
   (ext propblender)
   (allowed_dirs ObjectDir Scene)
   (editor
      (is_enabled
         bool
         (help
            "Is this blender enabled?")
         (no_test))
      (current_config
         symbol
         (list
            {$this get_config_names})
         (help
            "Name of config to select"))
      (blend_time
         float
         (help
            "duration of blending to target config value"))
      (blend_time_units
         int
         (list TASK_UNITS)
         (help
            "The time units that the blend time is specified in."))
      (blend_curve
         waveform_float
         (range 0 1)
         (help
            "waveform for easing curve"))
      (propanim_to_import
         object
         (class PropAnim)
         (tab debug)
         (help
            "The propanim to import")
         (no_test))
      (import_template
         script
         (script
            {if
               [propanim_to_import]
               {forge start_transaction}
               {forge record $this import_template object}
               {$this
                  import_template
                  [propanim_to_import]}
               {forge end_transaction}})
         (tab debug)
         (no_test)
         (custom_history))
      (propertyblender_to_import
         object
         (class PropertyBlender)
         (tab debug)
         (help
            "The property blender to import")
         (no_test))
      (import_template_from_blender
         script
         (script
            {if
               [propertyblender_to_import]
               {forge start_transaction}
               {forge record $this import_template_from_blender object}
               {$this
                  import_template_from_blender
                  [propertyblender_to_import]}
               {forge end_transaction}})
         (tab debug)
         (no_test)
         (custom_history))
      (select_template_entries
         script
         (script
            {$this select_template_entries})
         (custom_history)
         (help
            "select one or more template entries to add"))
      (template_entries
         (array
            (struct
               (target_object
                  object
                  (class Object)
                  (help
                     "target object to be blended"))
               (property_entries
                  (array
                     prop_ref
                     (fixed_obj
                        {$this
                           get
                           {editor_prop_path_uncle target_object}})
                     (allowed_prop_types
                        (float int color bool))
                     (allow_read_only_props FALSE)
                     (help
                        "a property to blend"))
                  (help
                     "the properties to blend")))
            (header
               {do
                  ($obj
                     [template_entries
                        {elem $editor_prop_path 1}
                        target_object])
                  {if_else
                     $obj
                     {$obj name}
                     "(none)"}})))
      (config_entries
         (array
            (struct
               (config_name
                  symbol
                  (help
                     "Name of configuration"))
               (blend_time_override
                  float
                  (help
                     "Blend time when setting this config (-1 means use global blend time)"))
               (use_blend_curve_override
                  bool
                  (help
                     "should we use the waveform override for easing curve"))
               (blend_curve_override
                  waveform_float
                  (range 0 1)
                  (hide
                     {!
                        {$this
                           get
                           {editor_prop_path_sibling use_blend_curve_override}}})
                  (help
                     "waveform overridefor easing curve"))
               (import_config
                  script
                  (script
                     {forge start_transaction}
                     {forge record $this import_config object}
                     {$this
                        import_config_data
                        {elem $editor_prop_path 1}}
                     {forge end_transaction})
                  (no_test)
                  (custom_history))
               (select_config
                  script
                  (script
                     {forge start_transaction}
                     {forge record $this select_config object}
                     {$this
                        select_config_data_index
                        {elem $editor_prop_path 1}}
                     {forge end_transaction})
                  (no_test)
                  (custom_history))
               (values
                  (array
                     (struct
                        (float_val
                           float
                           (alias
                              {$this
                                 get
                                 {editor_prop_path_sibling property_name}})
                           (help
                              "float value of property")
                           (hide
                              {!
                                 {$this
                                    get
                                    {editor_prop_path_sibling is_float_val}}})
                           (enable_reset_to_default FALSE))
                        (int_val
                           int
                           (alias
                              {$this
                                 get
                                 {editor_prop_path_sibling property_name}})
                           (help
                              "int value of property")
                           (hide
                              {!
                                 {$this
                                    get
                                    {editor_prop_path_sibling is_int_val}}})
                           (enable_reset_to_default FALSE))
                        (enum_val
                           int
                           (alias
                              {$this
                                 get
                                 {editor_prop_path_sibling property_name}})
                           (help
                              "enum (int) value of property")
                           (hide
                              {!
                                 {$this
                                    get
                                    {editor_prop_path_sibling is_enum_val}}})
                           (list
                              {$this get_enum_values $editor_prop_path})
                           (enable_reset_to_default FALSE))
                        (color_val
                           color
                           (alias
                              {$this
                                 get
                                 {editor_prop_path_sibling property_name}})
                           (help
                              "color value of property")
                           (hide
                              {!
                                 {$this
                                    get
                                    {editor_prop_path_sibling is_color_val}}})
                           (enable_reset_to_default FALSE)))
                     (header
                        {do
                           ($obj
                              {$this
                                 get
                                 {editor_prop_path_child target_object}})
                           {if_else
                              $obj
                              {sprint
                                 {$obj name}
                                 ": "
                                 {$this
                                    get
                                    {editor_prop_path_child property_name}}}
                              "(none)"}}))
                  (fixed_size TRUE)))
            (header
               {$this
                  get
                  {editor_prop_path_child config_name}}))
         (no_test)))
   (events_in
      (select_config_data
         (help
            "Selects a config to be blended to")
         (editor
            (config_name
               symbol
               (list
                  {[target]
                     get_config_names})
               (help
                  "Name of config to select"))))
      (select_config_data_over_time
         (help
            "Selects a config to be blended to")
         (editor
            (config_name
               symbol
               (list
                  {[target]
                     get_config_names})
               (help
                  "Name of config to select"))
            (blend_time_override
               float
               (help
                  "When >= 0, this blend time is used"))))))
(CheatsManager
   (description
      "Manages cheats.")
   (user_creatable FALSE)
   (functest no_test singleton)
   (is_flow_provider TRUE)
   (editor
      (unlock_all
         bool
         (help
            "Whether or not unlock all is on."))))
#include rnd_objects.dta
#include phys_objects.dta
#include flow.dta
#include wwise_objects.dta
#include ../char/char_objects.dta
#include ../ui/ui_objects.dta
#include ../world/world_objects.dta
#merge types.dta
#ifdef INIT_AXE
#include ../axe/axe_objects.dta
#endif
#include ../gesture/gesture_objects.dta
#ifdef INIT_FORGE
#include forge_objects.dta
#endif