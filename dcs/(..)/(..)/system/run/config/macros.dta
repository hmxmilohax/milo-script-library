#ifdef TRUE
#else
#define FALSE
(0)
#define TRUE
(1)
#define kPlatformNone
(0)
#define kPlatformXbox
(2)
#define kPlatformPC
(3)
#define kPlatformDurango
(5)
#define kPlatformWiiU
(6)
#define kPlatformOrbis
(7)
#define PLATFORM_NONE
(("kPlatformNone"
      (alias
         "None")
      (help
         "Sets target platform to None")))
#define PLATFORM_XBOX
(("kPlatformXbox"
      (alias
         "XBox360")
      (help
         "Sets target platform to XBox360")))
#define PLAFORM_PC
(("kPlatformPC"
      (alias
         "PC")
      (help
         "Sets target platform to PC")))
#define PLAFORM_DURANGO
(("kPlatformDurango"
      (alias
         "Durango")
      (help
         "Sets target platform to Durango")))
#define PLAFORM_ORBIS
(("kPlatformOrbis"
      (alias
         "Orbis")
      (help
         "Sets target platform to Orbis")))
#define PLATFORM_TARGETS
((PLAFORM_PC PLATFORM_XBOX PLAFORM_DURANGO PLAFORM_ORBIS))
#define kOldGfx
(0)
#define kNewGfx
(1)
#define kDataInt
(0)
#define kDataFloat
(1)
#define kDataVar
(2)
#define kDataFunc
(3)
#define kDataObject
(4)
#define kDataSymbol
(5)
#define kDataArray
(16)
#define kDataCommand
(17)
#define kDataString
(18)
#define kDataProperty
(19)
#define kMergeMerge
(0)
#define kMergeReplace
(1)
#define kMergeKeep
(2)
#define kMergeIgnore
(3)
#define kLoadFront
(0)
#define kLoadBack
(1)
#define kLoadFrontStayBack
(2)
#define kLoadStayBack
(3)
#define kCopyAll
(0)
#define kCopyFromMax
(1)
#define kCopyGeometryOnly
(2)
#define kTaskSeconds
(0)
#define kTaskBeats
(1)
#define kTaskUISeconds
(2)
#define kTaskTutorialSeconds
(3)
#define TASK_UNITS
((("kTaskSeconds"
         (alias
            "Seconds")
         (help
            "Use the game's seconds timeline for time reference"))
      ("kTaskBeats"
         (alias
            "Beats")
         (help
            "Use the game's beat timeline for time reference"))
      ("kTaskUISeconds"
         (alias
            "UI seconds")
         (help
            "Use the UI's seconds timeline for time reference, will not pause when game is paused"))
      ("kTaskTutorialSeconds"
         (alias
            "Tutorial seconds")
         (help
            "Use the tutorial seconds timeline for time reference, will not pause when game or UI are paused"))))
#define kIconPivot_Bottom
(0)
#define kIconPivot_Center
(1)
#define kIconPivot_Top
(2)
#define ICON_PIVOT_ENUM
((("kIconPivot_Bottom"
         (alias
            "Bottom")
         (help
            "Pivot point is at the bottom of the icon mesh"))
      ("kIconPivot_Center"
         (alias
            "Center")
         (help
            "Pivot point is at the center of the icon mesh"))
      ("kIconPivot_Top"
         (alias
            "Top")
         (help
            "Pivot point is at the top of the icon mesh"))))
#define kLODTypeNone
(0)
#define kLODTypeUser
(1)
#define kLODTypeGenerated
(2)
#define LODTYPE_ENUM
((("kLODTypeNone"
         (alias
            "None")
         (help
            "No LOD"))
      ("kLODTypeUser"
         (alias
            "User Generated")
         (help
            "User generated LOD"))
      ("kLODTypeGenerated"
         (alias
            "Computer Generated")
         (help
            "Computer generated LOD"))))
#define kRemeshTogether
(0)
#define kRemeshApart
(1)
#define kRemeshAvoid
(2)
#define REMESH_ENUM
((("kRemeshTogether"
         (alias
            "together")
         (help
            "This is the default value.  Remesh my meshes and all my childrens' meshes together, so they all switch at once.  Child entity [remesh] values will be ignored."))
      ("kRemeshApart"
         (alias
            "apart")
         (help
            "Remesh my meshes and child entities apart in their own remesh nodes, used for 'terrain' entities or whenever meshes/child entities are not spatially coherent or you don't care if some parts pop before other parts."))
      ("kRemeshAvoid"
         (alias
            "avoid")
         (help
            "Don't remesh my meshes or my childrens' meshes, use if this entity moves around, animates internally even at a distance, or is show/hidable."))))
#define kSquareAspect
(0)
#define kRegularAspect
(1)
#define kWidescreenAspect
(2)
#define kLetterboxAspect
(3)
#define ASPECT_ENUM
((("kSquareAspect"
         (alias
            "Square"))
      ("kRegularAspect"
         (alias
            "Regular"))
      ("kWidescreenAspect"
         (alias
            "Wide screen"))
      ("kLetterboxAspect"
         (alias
            "Letterbox"))))
#define kProcessNone
(0)
#define kProcessWorld
(1)
#define kProcessPost
(2)
#define kProcessChar
(4)
#define kProcessPostChar
(6)
#define kProcessAll
(7)
#define kHighlightWireframe
(0)
#define kHighlightSphere
(1)
#define kHighlightNone
(2)
#define kHighlightWireframeWithNormals
(3)
#define HIGHLIGHT_ENUM
((("kHighlightWireframe"
         (alias
            "Wireframe"))
      ("kHighlightWireframeWithNormals"
         (alias
            "Wireframe with normals"))
      ("kHighlightSphere"
         (alias
            "Sphere"))
      ("kHighlightNone"
         (alias
            "None"))))
#define k30_fps
(0)
#define k480_fpb
(1)
#define k30_fps_ui
(2)
#define k1_fpb
(3)
#define k30_fps_tutorial
(4)
#define RATE_ENUM
((("k30_fps"
         (alias
            "30 FPS")
         (help
            "30 frames is equivelent to 1 second on the game timeline"))
      ("k480_fpb"
         (alias
            "480 FPB")
         (help
            "480 frames is equivelent to 1 beat on the game timeline"))
      ("k30_fps_ui"
         (alias
            "30 FPS UI")
         (help
            "30 frames is equivelent to 1 second on the UI timeline"))
      ("k1_fpb"
         (alias
            "1 FPB")
         (help
            "1 frame is equivelent to 1 beat on the game timeline"))
      ("k30_fps_tutorial"
         (alias
            "30 FPS tutorial")
         (help
            "30 frames is equivelent to 1 second on the tutorial timeline"))))
#define PI
(3.1415927)
#define kHugeFloat
(1.0e30)
#define kSmallFloat
(1.0e-4)
#define kFirstFit
(0)
#define kBestFit
(1)
#define kLRUFit
(2)
#define kLastFit
(3)
#define kTimeKeeperPause
(0)
#define kTimeKeeperUnpause
(1)
#define kTimeKeeperIgnore
(2)
#define kPad_L2
(0)
#define kPad_R2
(1)
#define kPad_L1
(2)
#define kPad_R1
(3)
#define kPad_Tri
(4)
#define kPad_Circle
(5)
#define kPad_X
(6)
#define kPad_Square
(7)
#define kPad_Select
(8)
#define kPad_L3
(9)
#define kPad_R3
(10)
#define kPad_Start
(11)
#define kPad_DUp
(12)
#define kPad_DRight
(13)
#define kPad_DDown
(14)
#define kPad_DLeft
(15)
#define kPad_LStickUp
(16)
#define kPad_LStickRight
(17)
#define kPad_LStickDown
(18)
#define kPad_LStickLeft
(19)
#define kPad_RStickUp
(20)
#define kPad_RStickRight
(21)
#define kPad_RStickDown
(22)
#define kPad_RStickLeft
(23)
#define DPAD_BUTTON_ALIASES
(("kPad_DUp"
      (alias
         "Up"))
   ("kPad_DRight"
      (alias
         "Right"))
   ("kPad_DDown"
      (alias
         "Down"))
   ("kPad_DLeft"
      (alias
         "Left")))
#ifdef HX_PC
#define kPad_ConsoleButton
(24)
#define kPad_NumButtons
(25)
#else
#define kPad_NumButtons
(24)
#endif
#define kPad_Xbox_LT
(0)
#define kPad_Xbox_RT
(1)
#define kPad_Xbox_LB
(2)
#define kPad_Xbox_RB
(3)
#define kPad_Xbox_Y
(4)
#define kPad_Xbox_B
(5)
#define kPad_Xbox_A
(6)
#define kPad_Xbox_X
(7)
#define kPad_Xbox_LS
(9)
#define kPad_Xbox_RS
(10)
#define XBOX_BUTTON_ALIASES
(("kPad_Xbox_LT"
      (alias
         "left trigger"))
   ("kPad_Xbox_RT"
      (alias
         "right trigger"))
   ("kPad_Xbox_LB"
      (alias
         "left button"))
   ("kPad_Xbox_RB"
      (alias
         "left button"))
   ("kPad_Xbox_Y"
      (alias
         "Y button"))
   ("kPad_Xbox_B"
      (alias
         "B button"))
   ("kPad_Xbox_A"
      (alias
         "A button"))
   ("kPad_Xbox_X"
      (alias
         "X button"))
   ("kPad_Xbox_LS"
      (alias
         "left stick"))
   ("kPad_Xbox_RS"
      (alias
         "right stick")))
#define kAction_None
(0)
#define kAction_Confirm
(1)
#define kAction_Cancel
(2)
#define kAction_Option
(3)
#define kAction_Start
(4)
#define kAction_ViewModify
(5)
#define kAction_Up
(6)
#define kAction_Right
(7)
#define kAction_Down
(8)
#define kAction_Left
(9)
#define kAction_PageUp
(10)
#define kAction_PageDown
(11)
#define kAction_ExtendedOption1
(12)
#define kAction_ExtendedOption2
(13)
#define kAction_ShellOption
(14)
#define kLeftAnalog
(0)
#define kRightAnalog
(1)
#define kJoypadNone
(0)
#define kJoypadDigital
(1)
#define kJoypadAnalog
(2)
#define kJoypadDualShock
(3)
#define kJoypadMidi
(4)
#define kJoypadXboxHxGuitar
(5)
#define kJoypadXboxHxGuitarRb2
(6)
#define kJoypadXboxRoGuitar
(7)
#define kJoypadXboxDrums
(8)
#define kJoypadXboxDrumsRb2
(9)
#define kJoypadXboxRoDrums
(10)
#define kJoypadXboxStageKit
(11)
#define kJoypadPs3HxGuitar
(12)
#define kJoypadPs3HxGuitarRb2
(13)
#define kJoypadPs3HxDrums
(14)
#define kJoypadPs3HxDrumsRb2
(15)
#define kJoypadPs3RoGuitar
(16)
#define kJoypadPs3RoDrums
(17)
#define kJoypadPs3KonamiDrums
(18)
#define kJoypadXboxCoreGuitar
(19)
#define kJoypadXboxButtonGuitar
(20)
#define kJoypadXboxRealGuitar22Fret
(21)
#define kJoypadXboxMidiBoxKeyboard
(22)
#define kJoypadXboxMidiBoxDrums
(23)
#define kJoypadXboxKeytar
(24)
#define kJoypadPs3CoreGuitar
(25)
#define kJoypadPs3ButtonGuitar
(26)
#define kJoypadPs3RealGuitar22Fret
(27)
#define kJoypadPs3MidiBoxKeyboard
(28)
#define kJoypadPs3MidiBoxDrums
(29)
#define kJoypadPs3Keytar
(30)
#define kJoypadNumTypes
(31)
#define kBMAction_None
(0)
#define kBMAction_Lane0
(1)
#define kBMAction_Lane1
(2)
#define kBMAction_Lane2
(3)
#define kBMAction_TrackUp
(4)
#define kBMAction_TrackDown
(5)
#define kBMAction_UsePowerUp
(6)
#define kGame
(0)
#define kVCal
(1)
#define kACal
(2)
#define kPractice90
(3)
#define kPractice80
(4)
#define kPractice70
(5)
#define kNumLagContexts
(6)
#define kJoypadAccelQuery
(0)
#define kJoypadAccelDisableAll
(1)
#define kJoypadAccelSetXOnly
(3)
#define kJoypadAccelSetYOnly
(5)
#define kJoypadAccelSetXYOnly
(7)
#define kJoypadAccelSetZOnly
(9)
#define kJoypadAccelSetXZOnly
(11)
#define kJoypadAccelSetYZOnly
(13)
#define kJoypadAccelSetEnableAll
(15)
#define kJoypadCalbertOff
(0)
#define kJoypadCalbertPhoto
(1)
#define kJoypadCalbertAudio
(2)
#define kJoypadCalbertBothOn
(254)
#define KB_ENTER
(10)
#define KB_BACKSPACE
(8)
#define KB_TAB
(9)
#define KB_SPACE
(32)
#define KB_a
(97)
#define KB_b
(98)
#define KB_c
(99)
#define KB_d
(100)
#define KB_e
(101)
#define KB_f
(102)
#define KB_g
(103)
#define KB_h
(104)
#define KB_i
(105)
#define KB_j
(106)
#define KB_k
(107)
#define KB_l
(108)
#define KB_m
(109)
#define KB_n
(110)
#define KB_o
(111)
#define KB_p
(112)
#define KB_q
(113)
#define KB_r
(114)
#define KB_s
(115)
#define KB_t
(116)
#define KB_u
(117)
#define KB_v
(118)
#define KB_w
(119)
#define KB_x
(120)
#define KB_y
(121)
#define KB_z
(122)
#define KB_CAP_LOCK
(290)
#define KB_NUM_LOCK
(291)
#define KB_SCROLL_LOCK
(292)
#define KB_PRINT
(300)
#define KB_PAUSE
(301)
#define KB_ESCAPE
(302)
#define KB_INSERT
(310)
#define KB_DELETE
(311)
#define KB_HOME
(312)
#define KB_END
(313)
#define KB_PAGE_UP
(314)
#define KB_PAGE_DOWN
(315)
#define KB_LEFT
(320)
#define KB_RIGHT
(321)
#define KB_UP
(322)
#define KB_DOWN
(323)
#define KB_F1
(401)
#define KB_F2
(402)
#define KB_F3
(403)
#define KB_F4
(404)
#define KB_F5
(405)
#define KB_F6
(406)
#define KB_F7
(407)
#define KB_F8
(408)
#define KB_F9
(409)
#define KB_F10
(410)
#define KB_F11
(411)
#define KB_F12
(412)
#define kMCNoError
(0)
#define kMCNoCard
(1)
#define kMCNotFormatted
(2)
#define kMCDifferentCard
(3)
#define kMCReadWriteFailed
(4)
#define kMCCorrupt
(5)
#define kMCNotEnoughSpace
(6)
#define kMCFileExists
(7)
#define kMCFileNotFound
(8)
#define kMCMultipleFilesFound
(9)
#define kMCObsoleteVersion
(10)
#define kMCNewerVersion
(11)
#define kMCGeneralError
(12)
#define kMCUnsupported
(13)
#define kMCAccessError
(14)
#define kUserPrivilegeBlocked
(0)
#define kUserPrivilegeFriendsOnly
(1)
#define kUserPrivilegeAllowed
(2)
#define kOSNotifyTopRight
(0)
#define kOSNotifyBottomCenter
(1)
#define kRegionNone
(0)
#define kRegionUS
(1)
#define kRegionCanada
(2)
#define kRegionMexico
(3)
#define kRegionEurope
(4)
#define kRegionJapan
(5)
#define kRegionBrazil
(6)
#define kNumRegions
(7)
#define k1KHz
(300000)
#define k2KHz
(150000)
#define k4KHz
(75000)
#define k10KHz
(30000)
#define k20KHz
(15000)
#define kDrawContext_HideReflections
(1)
#define kDrawContext_HideShadows
(2)
#define kDrawContext_ShowReflections
(4)
#define kDrawContext_ShowShadows
(8)
#define kDrawContext_ShowMotionBlur
(16)
#define kDrawContext_HideAccent
(32)
#define kDrawContext_ShowDirectionalShadows
(128)
#define kDrawContext_ShowPointShadows
(256)
#define kDrawContext_ShowSpotShadows
(512)
#define DRAW_CONTEXT
((("kDrawContext_HideReflections"
         (alias 'never reflect')
         (help
            "Never cast reflections"))
      ("kDrawContext_ShowReflections"
         (alias 'always reflect')
         (help
            "Always cast reflections"))
      ("kDrawContext_HideShadows"
         (alias 'never cast shadows')
         (help
            "Never cast shadows"))
      ("kDrawContext_ShowShadows"
         (alias 'always cast shadows')
         (help
            "Always cast shadows"))
      ("kDrawContext_ShowDirectionalShadows"
         (alias 'always cast directional shadows')
         (help
            "Always cast shadows from directional lights"))
      ("kDrawContext_ShowPointShadows"
         (alias 'always cast point shadows')
         (help
            "Always cast shadows from point lights"))
      ("kDrawContext_ShowSpotShadows"
         (alias 'always cast spot shadows')
         (help
            "Always cast shadows from spotlights"))
      ("kDrawContext_ShowMotionBlur"
         (alias 'motion blur')
         (help
            "Generate per-object motion blur for this object (only used by Meshes)"))
      ("kDrawContext_HideAccent"
         (alias 'never draw accent')
         (help
            "Never draw to the accent buffer"))))
#define kDrawSort_Center
(0)
#define kDrawSort_Back
(1)
#define kDrawSort_Front
(2)
#define DRAW_SORT_TYPE
((("kDrawSort_Center"
         (alias 'Sphere Center')
         (help
            "Sort using the bounding sphere center"))
      ("kDrawSort_Back"
         (alias 'Sphere Back')
         (help
            "Sort using the bounding sphere back"))
      ("kDrawSort_Front"
         (alias 'Sphere Front')
         (help
            "Sort using the bounding sphere front"))))
#define kMutableNone
(0)
#define kMutableVerts
(31)
#define kMutableFaces
(32)
#define kMutableAll
(63)
#define MESH_MUTABLE_FLAGS
((("kMutableVerts"
         (alias verts)
         (help
            "Mark mesh verts mutable"))
      ("kMutableFaces"
         (alias faces)
         (help
            "Mark mesh faces mutable"))))
#define kUVTransformFlipX
(0)
#define kUVTransformFlipY
(1)
#define kUVTransformRotateC
(2)
#define kUVTransformRotate180
(3)
#define kUVTransformRotateCC
(4)
#define UV_TRANSFORM_LIST
((("kUVTransformFlipX"
         (alias
            "X Flip"))
      ("kUVTransformFlipY"
         (alias
            "Y Flip"))
      ("kUVTransformRotateC"
         (alias
            "Rotate Clockwise"))
      ("kUVTransformRotate180"
         (alias
            "Rotate 180"))
      ("kUVTransformRotateCC")
      (alias
         "Rotate Counter-Clockwise")))
#define kTransFlagsFixed
(1)
#define kTransFlagsLocalNonUniformOnly
(2)
#define kTransFlagsUniformOnly
(4)
#define kTransFlagsLockedScale
(8)
#define kTransFlagsLocked2D
(16)
#define TRANS_FLAGS
((("kTransFlagsFixed"
         (alias
            "Fixed")
         (help
            "Transform cannot be changed in game mode. It can only be edited by the AxisGizmo."))
      ("kTransFlagsLocalNonUniformOnly"
         (alias
            "Local, non uniform only")
         (help
            "Transform can only be non-uniform scaled in local space and uniformed scaled in world space."))
      ("kTransFlagsUniformOnly"
         (alias
            "Uniform scale")
         (help
            "Transform is limited to uniform scaling."))
      ("kTransFlagsLockedScale"
         (alias
            "Locked scale")
         (help
            "Transform scale is locked and cannot be animated by PropAnim, Flow, etc."))
      ("kTransFlagsLocked2D"
         (alias
            "Locked 2D")
         (help
            "Transform can't be moved in Y, pitched, or yawed, and can only be moved/rotated in local mode, not world"))))
#define kFaceOutOfRange
(1)
#define kNegativeWeights
(2)
#define kUnnormalizedWeights
(4)
#define kDegenerateTris
(8)
#define kBadNormals
(16)
#define kBadUVs
(32)
#define kDegenerateUVs
(64)
#define kInvalidTangentSpace
(128)
#define GEOM_ERROR_FLAGS
((("kFaceOutOfRange"
         (alias
            "invalid faces")
         (help
            "Show faces that reference non-existant vertices."))
      ("kNegativeWeights"
         (alias
            "negative weights")
         (help
            "Show weights with negative values on skinned mesh"))
      ("kUnnormalizedWeights"
         (alias
            "unnormalized weights")
         (help
            "Show unnormalized weights on skinned mesh"))
      ("kDegenerateTris"
         (alias
            "degenerate triangles")
         (help
            "Show degenerate triangles."))
      ("kBadNormals"
         (alias
            "bad vertex normals")
         (help
            "Show vertices that have bad vertex normals."))
      ("kBadUVs"
         (alias
            "corrupted texture UVs")
         (help
            "Show vertices that have bad texture coordinate values."))
      ("kInvalidTangentSpace"
         (alias
            "invalid tangent vectors")
         (help
            "Show verteces that have bad tangent vectors on meshes that use normal maps. These can be causes by bad UV values, degenate triangles or Max smoothing groups."))
      ("kDegenerateUVs"
         (alias
            "degenerate texture UVs")
         (help
            "Show verteces that have degenerate texture coordinates on meshes that use normal maps. These errors can cause invalid tangents to be generated."))))
#define kConstraintNone
(0)
#define kConstraintLocalRotateScale
(1)
#define kConstraintParentWorld
(2)
#define kConstraintLookAtTarget
(3)
#define kConstraintBillboardZ
(5)
#define kConstraintBillboardXZ
(6)
#define kConstraintBillboardXYZ
(7)
#define kConstraintFastBillboardXYZ
(8)
#define kConstraintTargetWorld
(9)
#define kConstraintNoParentRotationScale
(10)
#define kConstraintSkyBox
(11)
#define kConstraintSkyBoxXY
(12)
#define kConstraintPushParent
(13)
#define kConstraintPhysicsDriven
(14)
#define kConstraintUI2D
(15)
#define kConstraintTargetXY
(16)
#define CONSTRAINT_ENUM
((("kConstraintNone"
         (alias
            "None")
         (help
            "no constraint"))
      ("kConstraintLocalRotateScale"
         (alias
            "Local rotate and scale")
         (help
            "Uses own local rotation and scale as world rotation and scale."))
      ("kConstraintParentWorld"
         (alias
            "Parent world")
         (help
            "Uses the 'parent' property's world transform as this objects transform. 'Preserve Scale' won't work with this constraint."))
      ("kConstraintLookAtTarget"
         (alias
            "Look at target")
         (help
            "Points Y axis of this object at the object specified in the 'target' property"))
      ("kConstraintBillboardZ"
         (alias
            "Z billboard")
         (help
            "Billboard about Z axis only, relative to the 'target' property if set, otherwise relative to current camera"))
      ("kConstraintBillboardXZ"
         (alias
            "XZ billboard")
         (help
            "Billboard about XZ axes only (no roll), relative to the 'target' property if set, otherwise relative to current camera"))
      ("kConstraintBillboardXYZ"
         (alias
            "XYZ billboard")
         (help
            "Billboards about XYZ axes, relative to the 'target' property if set, otherwise relative to current camera"))
      ("kConstraintFastBillboardXYZ"
         (alias
            "Fast XYZ billboard")
         (help
            "Billboards w/o perspective correction, relative to the 'target' property if set, otherwise relative to current camera"))
      ("kConstraintTargetWorld"
         (alias
            "Target world")
         (help
            "Uses 'target' property's world transform as own. 'Preserve Scale' won't work with this constraint."))
      ("kConstraintNoParentRotationScale"
         (alias
            "Ignore parent rotation and scale")
         (help
            "Ignores the 'parent' properties rotation and scale."))
      ("kConstraintSkyBox"
         (alias
            "Skybox")
         (help
            "Uses current camera as though it were the specified in the 'parent' property, ignoring its rotation, relative to the 'target' property if set, otherwise relative to current camera"))
      ("kConstraintSkyBoxXY"
         (alias
            "XY Skybox")
         (help
            "Uses current camera as though it were specified in the 'parent' property, ignoring its rotation, and ignoring the z value, good for skybox bases, relative to the 'target' property if set, otherwise relative to current camera"))
      ("kConstraintTargetXY"
         (alias
            "XY Target")
         (help
            "Uses the the target (or camera if no target) world x and y coords, the rest are as normal"))
      ("kConstraintPushParent"
         (alias
            "Push Parent")
         (help
            "Pushes the object specified in the 'parent' property around.  This is so that Entities can be moved around by their Dir, and Physics object can move their Dir around"))
      ("kConstraintUI2D"
         (alias
            "2d")
         (help
            "Makes this a 2D UI component that will be parented to the UI camera and be constrained to a plane"))))
#define COPY_DEFAULT
(0)
#define COPY_LITKEYS
(2)
#define COPY_MATKEYS
(4)
#define COPY_MESHGEOM
(8)
#define COPY_SHARETRANS
(16)
#define COPY_MESHKEYS
(64)
#define COPY_PARTKEYS
(128)
#define COPY_TRANSKEYS
(256)
#define COPY_CHILDREN
(512)
#define COPY_PARTS
(1024)
#define COPY_CAMKEYS
(2048)
#define COPY_ENVKEYS
(4096)
#define COPY_BASEONLY
(8192)
#define kLeft
(1)
#define kCenter
(2)
#define kRight
(4)
#define kTop
(16)
#define kMiddle
(32)
#define kBottom
(64)
#define kTopLeft
(17)
#define kTopCenter
(18)
#define kTopRight
(20)
#define kMiddleLeft
(33)
#define kMiddleCenter
(34)
#define kMiddleRight
(36)
#define kBottomLeft
(65)
#define kBottomCenter
(66)
#define kBottomRight
(68)
#define kCapsModeNone
(0)
#define kForceLower
(1)
#define kForceUpper
(2)
#define kTextUVMapping_Char
(0)
#define kTextUVMapping_Line_Continuous
(1)
#define kTextUVMapping_Line_Discrete
(2)
#define kTextUVMapping_Full_Continuous
(3)
#define kTextUVMapping_Full_Discrete
(4)
#define kTexRegular
(1)
#define kTexRendered
(2)
#define kTexBackBuffer
(8)
#define kTexFrontBuffer
(24)
#define kTexRenderedNoZ
(34)
#define kMatLightingModel_Unlit
(0)
#define kMatLightingModel_Std
(1)
#define kMatLightingModel_Subsurface
(2)
#define kMatLightingModel_Anisotropic
(3)
#define LIGHTING_MODEL_ENUM
((("kMatLightingModel_Unlit"
         (alias
            "Unlit")
         (help
            "Unlit, will behave as if purely emissive"))
      ("kMatLightingModel_Std"
         (alias
            "Lit (Standard)")
         (help
            "Uses our standard lighting model (diffuse, phong specular, and emissive)"))
      ("kMatLightingModel_Subsurface"
         (alias
            "Lit (Subsurface Scattering)")
         (help
            "Uses an alternate lighting model with subsurface scattering (Dx11 only)"))
      ("kMatLightingModel_Anisotropic"
         (alias
            "Lit (Anisotropic)")
         (help
            "Standard diffuse and emmisive lighting with anisotropic specular highlights (Dx11 only)"))))
#define kShaderRoot_Unlit
(0)
#define kShaderRoot_LitStd
(1)
#define kShaderRoot_LitSubsurface
(2)
#define kShaderRoot_Sky
(3)
#define kShaderRoot_LitAnisotropic
(4)
#define kShaderRoot_Fog
(5)
#define kShaderRoot_PostProcLayer
(6)
#define SHADER_ROOT_TYPE_ENUM
((("kShaderRoot_Unlit"
         (alias
            "Unlit")
         (help
            "Unlit, will behave as if purely emissive"))
      ("kShaderRoot_LitStd"
         (alias
            "Lit (Standard)")
         (help
            "Uses our standard lighting model (diffuse, phong specular, and emissive)"))
      ("kShaderRoot_LitSubsurface"
         (alias
            "Lit (Subsurface Scattering)")
         (help
            "Uses an alternate lighting model with subsurface scattering (Dx11 only)"))
      ("kShaderRoot_LitAnisotropic"
         (alias
            "Lit (Anisotropic)")
         (help
            "Standard diffuse and emmisive lighting with anisotropic specular highlights (Dx11 only)"))
      ("kShaderRoot_Fog"
         (alias
            "Fog")
         (help
            "Custom lighting model for rendering fog"))
      ("kShaderRoot_Sky"
         (alias
            "Sky")
         (help
            "Custom lighting model for rendering the sky"))
      ("kShaderRoot_PostProcLayer"
         (alias
            "Post Proc Layer")
         (help
            "Layer that can render before or after the main post proc"))))
#define kFlareTestType_None
(0)
#define kFlareTestType_Point
(1)
#define kFlareTestType_Square
(2)
#define kFlareTestType_Sphere
(3)
#define FLARE_TEST_TYPE_ENUM
((("kFlareTestType_None"
         (alias
            "None"))
      ("kFlareTestType_Point"
         (alias
            "Point"))
      ("kFlareTestType_Square"
         (alias
            "Square"))
      ("kFlareTestType_Sphere"
         (alias
            "Sphere"))))
#define kDefaultLighting_Auto
(0)
#define kDefaultLighting_Off
(1)
#define kDefaultLighting_On
(2)
#define DEFAULT_LIGHTING_ENUM_ENTITY
((("kDefaultLighting_Auto"
         (alias
            "Auto")
         (help
            "Always use the default light (a fixed directional) when editing this entity"))
      ("kDefaultLighting_Off"
         (alias
            "Off")
         (help
            "Never use the default light when editing this entity"))))
#define DEFAULT_LIGHTING_ENUM_SCENE
((("kDefaultLighting_Auto"
         (alias
            "Auto")
         (help
            "Only use the default light (a fixed directional) when there are no other lights in the scene"))
      ("kDefaultLighting_Off"
         (alias
            "Off")
         (help
            "Never use the default light when editing this scene"))
      ("kDefaultLighting_On"
         (alias
            "On")
         (help
            "Always use the default light (a fixed directional) when editing this scene"))))
#define kLightAmbient_Flat
(0)
#define kLightAmbient_2Color
(1)
#define kLightAmbient_3Color
(2)
#define LIGHT_AMBIENT_TYPE_ENUM
((("kLightAmbient_Flat"
         (alias Flat)
         (help
            "Flat ambient lighting"))
      ("kLightAmbient_2Color"
         (alias '2 Color')
         (help
            "2-Color ambient lighting, blending based on surface normal"))
      ("kLightAmbient_3Color"
         (alias '3 Color')
         (help
            "3-Color ambient lighting, blending based on surface normal"))))
#define kFogType_None
(0)
#define kFogType_Simple
(1)
#define kFogType_BiLevel
(2)
#define FOG_TYPE_ENUM
((("kFogType_None"
         (alias None)
         (help
            "No fog"))
      ("kFogType_Simple"
         (alias Simple)
         (help
            "Simple single-level fog model"))
      ("kFogType_BiLevel"
         (alias Bi-Level)
         (help
            "Bi-level fog model, varying from low to high based on elevation (ie. the world Z coordinate)"))))
#define kDOFQuality_Low
(0)
#define kDOFQuality_Medium
(1)
#define kDOFQuality_High
(2)
#define DOF_QUALITY_ENUM
((("kDOFQuality_Low"
         (alias Low)
         (help
            "Only uses 1 level of blur"))
      ("kDOFQuality_Medium"
         (alias Medium)
         (help
            "Uses multiple levels of blur, but omits the slightly-blurry level"))
      ("kDOFQuality_High"
         (alias High)
         (help
            "Uses multiple levels of blur, including the slightly-blurry level"))))
#define kMatGeomFlag_Mesh
(1)
#define kMatGeomFlag_SkinnedMesh
(2)
#define kMatGeomFlag_Decal
(4)
#define kMatGeomFlag_Particles
(8)
#define kMatGeomFlag_CheapParticles
(16)
#define kMatGeomFlag_SplatMappedMesh
(32)
#define MAT_GEOM_FLAGS
((("kMatGeomFlag_Mesh"
         (alias
            "Meshes")
         (help
            "Used by unskinned meshes?"))
      ("kMatGeomFlag_SkinnedMesh"
         (alias
            "Skinned Meshes")
         (help
            "Used by skinned meshes?"))
      ("kMatGeomFlag_SplatMappedMesh"
         (alias
            "Splat-Mapped Meshes")
         (help
            "Used by splat-mapped meshes?"))
      ("kMatGeomFlag_Particles"
         (alias
            "Particles")
         (help
            "Used by particles?"))
      ("kMatGeomFlag_CheapParticles"
         (alias
            "Cheap Particles")
         (help
            "Used by cheap particles?"))
      ("kMatGeomFlag_Decal"
         (alias
            "Decals")
         (help
            "Used by decals?"))))
#define kMatShaderGeomFlag_Mesh
(1)
#define kMatShaderGeomFlag_SkinnedMesh
(2)
#define kMatShaderGeomFlag_InstancedMesh
(4)
#define kMatShaderGeomFlag_Particles
(8)
#define kMatShaderGeomFlag_CheapParticles
(16)
#define kMatShaderGeomFlag_SplatMappedMesh
(32)
#define MAT_SHADER_GEOM_FLAGS
((("kMatShaderGeomFlag_Mesh"
         (alias
            "Meshes")
         (help
            "Used by unbatched meshes"))
      ("kMatShaderGeomFlag_SkinnedMesh"
         (alias
            "Skinned Meshes")
         (help
            "Used by skinned meshes"))
      ("kMatShaderGeomFlag_InstancedMesh"
         (alias
            "Instanced Meshes")
         (help
            "Used by batched meshes"))
      ("kMatShaderGeomFlag_SplatMappedMesh"
         (alias
            "Splat-Mapped Meshes")
         (help
            "Used by splat-mapped meshes"))
      ("kMatShaderGeomFlag_Particles"
         (alias
            "Particles")
         (help
            "Used by particles"))
      ("kMatShaderGeomFlag_CheapParticles"
         (alias
            "Cheap Particles")
         (help
            "Used by cheap particles"))))
#define kMatSharing_Shared
(0)
#define kMatSharing_Unique
(1)
#define kMatSharing_Auto
(2)
#define MAT_SHARING_TYPES
((("kMatSharing_Auto"
         (alias Auto)
         (help
            "If targeted by Flows or PropAnims, this Material won't share data with other Material instances, otherwise it will"))
      ("kMatSharing_Shared"
         (alias Shared)
         (help
            "This Material will share data with other Material instances"))
      ("kMatSharing_Unique"
         (alias Unique)
         (help
            "This Material will not share data with other Material instances"))))
#define kBlendDest
(0)
#define kBlendSrc
(1)
#define kBlendAdd
(2)
#define kBlendSrcAlpha
(3)
#define kBlendSrcAlphaAdd
(4)
#define kBlendSubtract
(5)
#define kBlendMultiply
(6)
#define kBlendPreMultAlpha
(7)
#define kBlendScreen
(8)
#define kBlendLighten
(9)
#define kBlendDarken
(10)
#define BLEND_ENUM
((("kBlendDest"
         (alias Dest)
         (help
            "Don't show this material at all; just show the frame buffer"))
      ("kBlendSrc"
         (alias Src)
         (help
            "Don't blend this material at all (default)"))
      ("kBlendAdd"
         (alias Add)
         (help
            "Output is material + frame buffer"))
      ("kBlendSrcAlpha"
         (alias Src-Alpha)
         (help
            "Output is (material x mat alpha) + (frame buffer x (1 - mat alpha))"))
      ("kBlendSrcAlphaAdd"
         (alias 'Src-Alpha Add')
         (help
            "Output is (material x mat alpha) + frame buffer"))
      ("kBlendSubtract"
         (alias Subtract)
         (help
            "Output is frame buffer - material"))
      ("kBlendMultiply"
         (alias Multiply)
         (help
            "Output is frame buffer x material"))
      ("kBlendPreMultAlpha"
         (alias 'Pre-Mult Alpha')
         (help
            "Output is material + (frame buffer x (1 - mat alpha).  This mode removes grey halos around transparent things, the source texture must end in _pma to be processed as premultiplied alpha"))
      ("kBlendScreen"
         (alias Screen)
         (help
            "Lightens the frame buffer based on the lightness of the material"))
      ("kBlendLighten"
         (alias Lighten)
         (help
            "Compares the material and frame buffer and picks the lightest value, per channel"))
      ("kBlendDarken"
         (alias Darken)
         (help
            "Compares the material and frame buffer and picks the darkest value, per channel"))))
#define kBucketAuto
(0)
#define kBucketSkyBox
(1)
#define kBucketForwardShading
(2)
#define kBucketNoDOF
(3)
#define kBucketNoDecals
(4)
#define kBucketWater
(5)
#define kBucketNoColorGrading
(6)
#define BUCKET_ENUM
((("kBucketAuto"
         (alias Auto)
         (help
            "Automatically assign a bucket based on material and drawable type (recommended for most things)"))
      ("kBucketForwardShading"
         (alias 'Forward Shading')
         (help
            "Force to use forward shading"))
      ("kBucketSkyBox"
         (alias 'Sky box')
         (help
            "Special mode for the sky box, render after opaque but before transparent"))
      ("kBucketWater"
         (alias Water)
         (help
            "Water (implies forward-shading, drawing after deferred but before skybox and anything else forward-shaded)"))
      ("kBucketNoDOF"
         (alias 'No depth-of-field')
         (help
            "Draw after depth-of-field has been applied to the scene (implies forward-shading; when color grading is drawn in a separate pass, also implies no color grading)"))
      ("kBucketNoColorGrading"
         (alias 'No color grading')
         (help
            "Draw after color grading has been applied to the scene (implies forward-shading; only works when color grading is drawn in a separate pass)"))
      ("kBucketNoDecals"
         (alias 'No decals')
         (help
            "If deferred, draw after deferred decals have drawn"))))
#define kDLBucket_Invalid
(-1)
#define kDLBucket_Deferred
(0)
#define kDLBucket_DeferredDecal
(1)
#define kDLBucket_DeferredPostDecal
(2)
#define kDLBucket_DeferredLight
(3)
#define kDLBucket_Opaque
(4)
#define kDLBucket_Water
(5)
#define kDLBucket_SkyBox
(6)
#define kDLBucket_Alpha
(7)
#define kDLBucket_PostColorGrading
(8)
#define kDLBucket_PostDOF
(9)
#define DISPLAY_LIST_BUCKET_ENUM
((("kDLBucket_Invalid")
      ("kDLBucket_Deferred")
      ("kDLBucket_DeferredDecal")
      ("kDLBucket_DeferredPostDecal")
      ("kDLBucket_DeferredLight")
      ("kDLBucket_Opaque")
      ("kDLBucket_Water")
      ("kDLBucket_SkyBox")
      ("kDLBucket_Alpha")
      ("kDLBucket_PostColorGrading")
      ("kDLBucket_PostDOF")))
#define kZModeDisable
(0)
#define kZModeNormal
(1)
#define kZModeTransparent
(2)
#define kZModeForce
(3)
#define kZModeDecal
(4)
#define kZModeAuto
(5)
#define ZMODE_ENUM
((("kZModeAuto"
         (alias Auto)
         (help
            "automatically select best z-mode based on blend mode, sorting bucket, etc."))
      ("kZModeDisable"
         (alias Disable)
         (help
            "always draw but don't update z-buffer"))
      ("kZModeNormal"
         (alias Normal)
         (help
            "draw and update z-buffer if closer than z-buffer (default)"))
      ("kZModeTransparent"
         (alias Transparent)
         (help
            "draw if closer than or equal z-buffer but don't update z-buffer. Often used with SrcAlpha or Add blending so those objects don't occlude other similar objects"))
      ("kZModeForce"
         (alias Force)
         (help
            "always draw and update z-buffer"))
      ("kZModeDecal"
         (alias Decal)
         (help
            "draw and update z-buffer if closer than or equal to z-buffer"))))
#define kStencilIgnore
(0)
#define kStencilWrite
(1)
#define kStencilTest
(2)
#define STENCILMODE_ENUM
((("kStencilIgnore"
         (alias Ignore)
         (help
            "Neither write nor test against the stencil buffer (default)"))
      ("kStencilWrite"
         (alias Write)
         (help
            "Write to the stencil buffer"))
      ("kStencilTest"
         (alias Test)
         (help
            "Test against the stencil buffer, only drawing to color/depth buffers if the stencil test passes"))))
#define kTexWrapClamp
(0)
#define kTexWrapRepeat
(1)
#define kTexBorderBlack
(2)
#define kTexBorderWhite
(3)
#define kTexWrapMirror
(4)
#define TEXWRAP_ENUM
((("kTexWrapClamp"
         (alias Clamp)
         (help
            "UVs outside the range [0,1] are clamped"))
      ("kTexWrapRepeat"
         (alias Repeat)
         (help
            "The image repeats itself across the surface (default)"))
      ("kTexBorderBlack"
         (alias 'Border (Black)')
         (help
            "texels outside the UV range [0,1] are black"))
      ("kTexBorderWhite"
         (alias 'Border (White)')
         (help
            "texels outside the UV range [0,1] are white"))
      ("kTexWrapMirror"
         (alias Mirror)
         (help
            "The image repeats itself, but is flipped every other repetition"))))
#define kTexFilterPoint
(0)
#define kTexFilterLinear
(1)
#define TEXFILTER_ENUM
((("kTexFilterPoint"
         (alias Point)
         (help 'Use for a pixellated look.'))
      ("kTexFilterLinear"
         (alias Linear)
         (help 'Normal texture filtering.'))))
#define kTexGenNone
(0)
#define kTexGenXfm
(1)
#define kTexGenSphere
(2)
#define kTexGenProjected
(3)
#define kTexGenXfmOrigin
(4)
#define kTexGenEnviron
(5)
#define TEXGEN_ENUM
((("kTexGenNone"
         (help
            "use vertex UV unchanged"))
      ("kTexGenXfm"
         (help
            "transform vertex UV about center with stage xfm"))
      ("kTexGenSphere"
         (help
            "sphere map that rotates around object with camera, xfm is direction of map, fast on gpu slow on cpu, flips at poles"))
      ("kTexGenProjected"
         (help
            "project from direction of stage xfm in world coords"))
      ("kTexGenXfmOrigin"
         (help
            "like Xfm but about origin rather than center"))
      ("kTexGenEnviron"
         (help
            "reflection map, like sphere map but perspective correct and does not flip, fast on cpu but slow on gpu"))))
#define kShaderVariationNone
(0)
#define kShaderVariationSkin
(1)
#define kShaderVariationHair
(2)
#define SHADERVARIATION_ENUM
(("kShaderVariationNone"
      "kShaderVariationSkin"
      "kShaderVariationHair"))
#define kAOMethod_Disabled
(0)
#define kAOMethod_Standard
(1)
#define kAOMethod_Directional
(2)
#define AMBIENTOCCLUSIONMETHOD_ENUM
(("kAOMethod_Disabled"
      "kAOMethod_Standard"
      "kAOMethod_Directional"))
#define kCullNone
(0)
#define kCullRegular
(1)
#define kCullBackwards
(2)
#define CULL_ENUM
((("kCullNone"
         (alias None)
         (help
            "No culling.  User sees both front and back of polygon."))
      ("kCullRegular"
         (alias Regular)
         (help
            "Only the front face is drawn.  The back face of the polygon is not drawn."))
      ("kCullBackwards"
         (alias Backwards)
         (help
            "The back face of polygone is drawn, but not the front."))))
#define kPropForce
(0)
#define kPropEdit
(1)
#define MATSPEC_PROP_ENUM_EDIT
(("kPropForce"
      (alias Force)
      (help 'Force Materials to use a specific value; will be read-only in Material editor.'))
   ("kPropEdit"
      (alias Edit)
      (help 'Set default value used by Materials; will be editable in the Material editor.')))
#define MATSPEC_PROP_ENUM_NOEDIT
(("kPropForce"
      (alias Force)
      (help 'Force Materials to use a specific value; will be read-only in Material editor.')))
#define kNoLights
(0)
#define kDirLights
(1)
#define kTwoPointLights
(2)
#define kFourPointLights
(3)
#define kCrepuscularQuality_Low
(0)
#define kCrepuscularQuality_Medium
(1)
#define kCrepuscularQuality_High
(2)
#define kCrepuscularQuality_VeryHigh
(3)
#define POSTPROC_CREPUSC_QUALITY_ENUM
((("kCrepuscularQuality_Low"
         (alias
            "Low (16 samples)")
         (help
            "Fewest samples, lowest cost!"))
      ("kCrepuscularQuality_Medium"
         (alias
            "Medium (32 samples)"))
      ("kCrepuscularQuality_High"
         (alias
            "High (48 samples)"))
      ("kCrepuscularQuality_VeryHigh"
         (alias
            "Very High (64 samples)")
         (help
            "Most samples, greatest cost!"))))
#define kHallOfTime_Disabled
(0)
#define kHallOfTime_Blended
(1)
#define kHallOfTime_SolidRingsDepth
(2)
#define kHallOfTime_SolidRingsAlpha
(3)
#define POSTPROC_HALL_OF_TIME_ENUM
((("kHallOfTime_Disabled"
         (alias
            "Disabled")
         (help
            "Disable the hall-of-time effect"))
      ("kHallOfTime_Blended"
         (alias
            "Blended")
         (help
            "Blend in the previous frame"))
      ("kHallOfTime_SolidRingsDepth"
         (alias
            "Solid Rings (Depth)")
         (help
            "Solid color rings, masked by scene depth"))
      ("kHallOfTime_SolidRingsAlpha"
         (alias
            "Solid Rings (Alpha)")
         (help
            "Solid color rings, masked by scene alpha channel"))))
#define kVignette_FullScreen
(0)
#define kVignette_Right
(1)
#define kVignette_Left
(2)
#define kVignette_Top
(3)
#define kVignette_Bottom
(4)
#define POSTPROC_VIGNETTE_ENUM
((("kVignette_FullScreen"
         (alias 'Full Screen')
         (help 'Display vignette in every corner.'))
      ("kVignette_Right"
         (alias Right)
         (help 'Only display vignette on right side of screen.'))
      ("kVignette_Left"
         (alias Left)
         (help 'Only display vignette on left side of screen.'))
      ("kVignette_Top"
         (alias Top)
         (help 'Only display vignette on top part of screen.'))
      ("kVignette_Bottom"
         (alias Bottom)
         (help 'Only display vignette on bottom part of screen.'))))
#define kBloomBlurStyle_Gaussian
(0)
#define kBloomBlurStyle_Streak
(1)
#define kBloomBlurStyle_Glare
(2)
#define kBloomBlurStyle_Bokeh
(3)
#define POSTPROC_BLOOM_BLUR_TYPE_ENUM
((("kBloomBlurStyle_Gaussian"
         (alias Gaussian)
         (help 'Basic gaussian blur.'))
      ("kBloomBlurStyle_Streak"
         (alias Streak)
         (help 'Blur with directional light streaks.'))
      ("kBloomBlurStyle_Glare"
         (alias Glare)
         (help 'Blur with glare effects.'))
      ("kBloomBlurStyle_Bokeh"
         (alias Bokeh)
         (help 'Camera like hexagonal bokeh blur.'))))
#define kFluid_DisplayDensity
(0)
#define kFluid_DisplayVelocity
(1)
#define kFluid_DisplayPressure
(2)
#define kFluid_DisplayDivergence
(3)
#define kFluid_DisplayNormalMap
(4)
#define kFluid_DisplayGrayScale
(5)
#define FLUID_DISPLAY_ENUM
((("kFluid_DisplayDensity"
         (alias Default)
         (help 'Display fluid density.'))
      ("kFluid_DisplayVelocity"
         (alias Velocity)
         (help 'Display fluid velocity in 2 dimensions.'))
      ("kFluid_DisplayPressure"
         (alias Pressure)
         (help 'Display fluid pressure.'))
      ("kFluid_DisplayDivergence"
         (alias Divergence)
         (help 'Display fluid divergence.'))
      ("kFluid_DisplayNormalMap"
         (alias 'Normal Map')
         (help 'Display normal map based on fluid density.'))
      ("kFluid_DisplayGrayScale"
         (alias 'Gray Scale')
         (help 'Display gray scale filter to fluid density.'))))
#define kFluid_VelocityForwards
(0)
#define kFluid_VelocityBackwards
(1)
#define kFluid_VelocityDown
(2)
#define FLUID_VELOCITY_DIRECTION_ENUM
((("kFluid_VelocityForwards"
         (alias Forwards)
         (help 'Push fluid in the direction of movement.'))
      ("kFluid_VelocityBackwards"
         (alias Backwards)
         (help 'Push fluid in the opposite direction of movement.'))
      ("kFluid_VelocityDown"
         (alias Down)
         (help 'Push fluid towards the bottom of the texture.'))))
#define kRecordRegular
(0)
#define kRecordCreated
(1)
#define kRecordDeleted
(2)
#define kNetUnreliable
(0)
#define kNetReliable
(1)
#define ADD_USER_RESULT_MSG
(add_user_result
   ($success))
#define NEW_REMOTE_USER_MSG
(new_remote_user
   ($user))
#define REMOVING_REMOTE_USER_MSG
(removing_remote_user
   ($user))
#define REMOTE_USER_LEFT_MSG
(remote_user_left
   ($user))
#define REMOTE_USER_UPDATED_MSG
(remote_user_updated
   ($user))
#define PROCESSED_JOIN_REQUEST_MSG
(processed_join_request
   ($accepted))
#define GAME_ENDED_MSG
(game_ended
   ($result))
#define INVITE_ACCEPTED_MSG
(invite_accepted
   ($pad_num $session_id $expired))
#define VIRTUAL_KEYBOARD_RESULT_MSG
(virtual_keyboard_result_msg
   ($ok $text))
#define UI_CHANGED_MSG
(ui_changed
   ($showing))
#ifdef HX_XBOX
#define KINECT_GUIDE_GESTURE_MSG
(kinect_guide_gesture
   ($engaged))
#define SPEECH_RECO_MSG
(speech_reco
   ($token $confidence))
#endif
#define SIGNIN_CHANGED_MSG
(signin_changed
   ($signin_mask $signin_changed_mask))
#define BUTTON_DOWN_MSG
(button_down
   ($user $raw_button $action $pad_num))
#define BUTTON_UP_MSG
(button_up
   ($user $raw_button $action $pad_num))
#define JOYPAD_CONNECT_MSG
(joypad_connect
   ($user $connected))
#define KEY_MSG
(key
   ($key $shift $control $alt))
#define MEMCARD_RESULT_MSG
(memcard_result
   ($result))
#define SELECT_MSG
(ui_select
   ($widget $user $selectCmd))
#define SELECT_DONE_MSG
(ui_select_done
   ($widget $user $selectCmd))
#define SCROLL_SELECT_MSG
(ui_scroll_select
   ($widget $user $selected))
#define SCROLL_START_MSG
(ui_scroll_start
   ($widget $user))
#define SCROLL_MSG
(ui_scroll
   ($widget $user))
#define TRANSITION_MSG
(ui_transition
   ($stratum $old_screen $new_screen $back))
#define TRANSITION_DONE_MSG
(ui_transition_done
   ($stratum $old_screen $new_screen))
#define kUINormal
(0)
#define kUIFocused
(1)
#define kUIDisabled
(2)
#define kUISelecting
(3)
#define kUISelected
(4)
#define UISTATE_ENUM
((("kUINormal"
         (alias
            "Normal")
         (help
            "The default state of a focusable widget. The widget does not have focus at this time"))
      ("kUIFocused"
         (alias
            "Focused")
         (help
            "The widget has focus and is ready to receive input"))
      ("kUIDisabled"
         (alias
            "Disabled")
         (help
            "The widget will not receive focus from navigation"))
      ("kUISelecting"
         (alias
            "Selecting")
         (help
            "The intermediate state for a focused wiget when it receives a confirmation action (aka SELECT_MSG)"))
      ("kUISelected"
         (alias
            "Selected")
         (help
            "Deprecated"))))
#define kNavHorizontal
(0)
#define kNavVertical
(1)
#define UINAVDIRECTION_ENUM
((("kNavHorizontal"
         (alias
            "Horizontal")
         (help
            "The player navigates left/right through the widgets when using the joypad"))
      ("kNavVertical"
         (alias
            "Vertical")
         (help
            "The player navigates up/down through the widgets when using the joypad"))))
#define kFontQuality_AntiAliased
(0)
#define kFontQuality_ClearType
(1)
#define kFontQuality_Default
(2)
#define FONTQUALITY_ENUM
((("kFontQuality_AntiAliased"
         (alias
            "Anti-Aliased"))
      ("kFontQuality_ClearType"
         (alias
            "Clear Type"))
      ("kFontQuality_Default"
         (alias
            "Default"))))
#define kFontSuperSample_None
(0)
#define kFontSuperSample_2x
(1)
#define kFontSuperSample_4x
(2)
#define FONTSUPERSAMPLE_ENUM
((("kFontSuperSample_None"
         (alias
            "None")
         (help
            "no smoothing"))
      ("kFontSuperSample_2x"
         (alias
            "2x")
         (help
            "smoother, makes texture 4x as big"))
      ("kFontSuperSample_4x"
         (alias
            "4x")
         (help
            "smoothest, makes texture 16x as big"))))
#define kFontWeight_Normal
(400)
#define kFontWeight_Bold
(700)
#define kFontWeight_ExtraBold
(800)
#define kFontWeight_Heavy
(900)
#define FONTWEIGHT_ENUM
((("kFontWeight_Normal"
         (alias
            "Normal")
         (help
            "thin text"))
      ("kFontWeight_Bold"
         (alias
            "Bold")
         (help
            "thick text"))
      ("kFontWeight_ExtraBold"
         (alias
            "Extra Bold")
         (help
            "thicker text"))
      ("kFontWeight_Heavy"
         (alias
            "Heavy")
         (help
            "thickest text"))))
#define kComponentNormal
(0)
#define kComponentFocused
(1)
#define kComponentDisabled
(2)
#define kComponentSelecting
(3)
#define kComponentSelected
(4)
#define kFitWrap
(0)
#define kFitJust
(2)
#define kFitEllipsis
(3)
#define kNoFocus
(0)
#define kMaybeFocus
(1)
#define kAlwaysFocus
(2)
#define kLODPerFrame
(-1)
#define kLOD0
(0)
#define kLOD1
(1)
#define kLOD2
(2)
#define kCompressNone
(0)
#define kCompressRots
(1)
#define kCompressVects
(2)
#define kCompressQuats
(3)
#define kCompressionDistance
(0)
#define kCompressionAverageDistance
(1)
#define kCompressionSumDistances
(2)
#define kCompressionAccumulatedDistance
(3)
#define kCompressionDistanceAndSpeed
(4)
#define kPlayNow
(1)
#define kPlayNoBlend
(2)
#define kPlayFirst
(3)
#define kPlayLast
(4)
#define kPlayDirty
(8)
#define kPlayNoLoop
(16)
#define kPlayLoop
(32)
#define kPlayGraphLoop
(48)
#define kPlayNodeLoop
(64)
#define kPlayRealTime
(512)
#define kPlayUserTime
(1024)
#define kPlayBeatAlign1
(4096)
#define kPlayBeatAlign2
(8192)
#define kPlayBeatAlign4
(16384)
#define kPlayBeatAlign8
(32768)
#define kPlayNoDefault
(0)
#define kPlayBeatTime
(0)
#define PLAY_BLEND_FLAGS
(("kPlayNoDefault"
      "kPlayNow"
      "kPlayDirty"
      "kPlayNoBlend"
      "kPlayFirst"
      "kPlayLast"))
#define PLAY_LOOP_FLAGS
(("kPlayNoDefault"
      "kPlayNoLoop"
      "kPlayLoop"
      "kPlayGraphLoop"
      "kPlayNodeLoop"))
#define PLAY_TIME_FLAGS
(("kPlayBeatTime"
      "kPlayRealTime"
      "kPlayBeatAlign1"
      "kPlayBeatAlign2"
      "kPlayBeatAlign4"
      "kPlayBeatAlign8"))
#define kRotNone
(8)
#define kRotFull
(3)
#define kRotX
(4)
#define kRotY
(5)
#define kRotZ
(6)
#define kApplyBlend
(0)
#define kApplyAdd
(1)
#define kApplyRotateTo
(2)
#define kApplyBlendWeights
(3)
#define kCollidePlane
(0)
#define kCollideSphere
(1)
#define kCollideInsideSphere
(2)
#define kCollideCigar
(3)
#define kCollideInsideCigar
(4)
#define kApplyRotationX
(0)
#define kApplyRotationY
(1)
#define kApplyRotationZ
(2)
#define kDbSilence
(-96.0)
#define LOCAL_EXTS
("*.dta"
   "*.scene"
   "*.layer"
   "*.dir"
   "*.cliptype"
   "*.char"
   "*.entity"
   "*.png"
   "*.bmp"
   "*.tif")
#define STD_EXTS
(.dtb .mid .bk2 .bik .bnk .wem .gbd)
#define XBOX_EXTS
(.scene_xbox .layer_xbox .dir_xbox .cliptype_xbox .char_xbox .entity_xbox .uiscreen_xbox _keep.wav .wav_xbox '_keep*.png_xbox' '_keep*.bmp_xbox' .xbv .mogg xbox_shaders xbox_preinit_shaders .bin .xma)
#define DURANGO_EXTS
(.scene_durango .layer_durango .dir_durango .cliptype_durango .char_durango .entity_durango .uiscreen_durango '_keep*.png_durango' '_keep*.bmp_durango' .xbv .mogg durango_shaders durango_preinit_shaders)
#define PC_EXTS
(.scene_pc .layer_pc .dir_pc .cliptype_pc .char_pc .entity_pc .uiscreen_pc '_keep*.png_dx11_pc' '_keep*.bmp_dx11_pc' .xbv .hxma .mogg pc_shaders pc_preinit_shaders .xma .ogg)
#define ORBIS_EXTS
(.scene_orbis .layer_orbis .dir_orbis .cliptype_orbis .char_orbis .entity_orbis .uiscreen_orbis '_keep*.png_orbis' '_keep*.bmp_orbis' .xbv .mogg orbis_shaders orbis_preinit_shaders)
#define STD_SKIP_DIRS
("./arks"
   "./test"
   "./config/arkbuild"
   "./collections"
   "./mc"
   ".cache")
#define XBOX_SKIP_DIRS
("./audio/soundbanks/Windows"
   "./audio/soundbanks/Durango"
   "./audio/soundbanks/PS4")
#define DURANGO_SKIP_DIRS
("./audio/soundbanks/XBox360"
   "./audio/soundbanks/Windows"
   "./audio/soundbanks/PS4")
#define ORBIS_SKIP_DIRS
("./audio/soundbanks/XBox360"
   "./audio/soundbanks/Windows"
   "./audio/soundbanks/Durango")
#define PC_SKIP_DIRS
("./audio/soundbanks/XBox360"
   "./audio/soundbanks/Durango"
   "./audio/soundbanks/PS4")
#define SYSTEM_SUBDIRS
("../../system/run/bink"
   "../../system/run/char"
   "../../system/run/config"
   "../../system/run/gesture"
   "../../system/run/rndobj"
   "../../system/run/shaders"
   "../../system/run/shared"
   "../../system/run/ui"
   "../../system/run/world")
#define SYSTEM_PRECACHE_EXCLUDE_DIRS
("forge_autobackup"
   "facefx"
   "gen"
   "test")
#define XBOX_HD_EXTS
(.dta .seq .mid .bin .scene .layer .dir .xnse .xbnk .xbv .mogg .png .png_xbox .bmp .ltf .acs .acg)
#define kStageOff
(0)
#define kStageOn
(1)
#define kStageBass
(2)
#define kStageDrumKick
(3)
#define kStageDrumSnare
(4)
#define kStageDrumCrash
(5)
#define kStageGuitar
(6)
#define kStageVocal
(7)
#define kStageSweepLeft_slow
(8)
#define kStageSweepLeft_medium
(9)
#define kStageSweepLeft_fast
(10)
#define kStageSweepRight_slow
(11)
#define kStageSweepRight_medium
(12)
#define kStageSweepRight_fast
(13)
#define kStageOne
(0)
#define kStageTwo
(1)
#define kStageFour
(2)
#define kStageOneOffset
(3)
#define kStageTwoOffset
(4)
#define kStageFourOffset
(5)
#define kStageAll
(6)
#define kStageStrobeOff
(0)
#define kStageStrobe6
(6)
#define kStageStrobe8
(8)
#define kStageStrobe10
(10)
#define kStageStrobe12
(12)
#define kStoreErrorSuccess
(0)
#define kStoreErrorNoContent
(1)
#define kStoreErrorLiveServer
(2)
#define kStoreErrorStoreServer
(3)
#define kStoreErrorSignedOut
(4)
#define kStoreErrorDroppedOut
(5)
#define kStoreErrorNoMetadata
(6)
#define kStoreErrorNoEthernetCable
(7)
#define kSTArtist
(0)
#define kSTPackName
(1)
#define kSTName
(2)
#define kSTDateReleased
(3)
#define kSTRank
(4)
#define kSTGenre
(5)
#define kSTLeftSide
(6)
#define kGuideVertical
(0)
#define kGuideHorizontal
(1)
#define UIGUIDE_ENUM
(("kGuideVertical"
      "kGuideHorizontal"))
#define kGridFillColumnFirst
(0)
#define kGridFillRowFirst
(1)
#define kNoGrid
(2)
#define UIGRIDLAYOUT_ENUM
(("kGridFillColumnFirst"
      "kGridFillRowFirst"
      "kNoGrid"))
#define kKeyboard_Normal
(0)
#define kKeyboard_Numeric
(1)
#define kBufferColor
(0)
#define kBufferDepth
(1)
#define kBufferPlayer
(2)
#define kBufferPlayerColor
(3)
#define kBufferNum
(4)
#define kHandStateOpen
(0)
#define kHandStateClosed
(1)
#define kHandStateLasso
(2)
#define kHandStateUnknown
(3)
#define kHandStateNum
(4)
#define HANDSTATE_ENUM
(("kHandStateOpen"
      "kHandStateClosed"
      "kHandStateLasso"
      "kHandStateUnknown"))
#define kSkeletonAssignmentMode_None
(0)
#define kSkeletonAssignmentMode_FrontAndCenter
(1)
#define kSkeletonAssignmentMode_FirstValid
(2)
#define kSkeletonAssignmentMode_LeftRight
(3)
#define kSkeletonAssignmentMode_RightLeft
(4)
#define kSkeletonAssignmentMode_RaisedRightHand
(5)
#define kSkeletonAssignmentMode_LeftRightNoSwap
(6)
#define kSkeletonAssignmentMode_LeftRightNoSwapRaisedHand
(7)
#define kSkeletonAssignmentMode_Manual
(8)
#define kInterpStep
(0)
#define kInterpLinear
(1)
#define kInterpSpline
(2)
#define kInterpSlerp
(3)
#define kInterpHermite
(4)
#define kInterpEaseIn
(5)
#define kInterpEaseOut
(6)
#define kEaseLinear
(0)
#define kEasePolyIn
(1)
#define kEasePolyOut
(2)
#define kEasePolyInOut
(3)
#define kEasePolyOutIn
(4)
#define kEaseBackIn
(5)
#define kEaseBackOut
(6)
#define kEaseBackInOut
(7)
#define kEaseBackOutIn
(8)
#define kEaseBounceIn
(9)
#define kEaseBounceOut
(10)
#define kEaseBounceInOut
(11)
#define kEaseBounceOutIn
(12)
#define kEaseCircIn
(13)
#define kEaseCircOut
(14)
#define kEaseCircInOut
(15)
#define kEaseCircOutIn
(16)
#define kEaseElasticIn
(17)
#define kEaseElasticOut
(18)
#define kEaseElasticInOut
(19)
#define kEaseElasticOutIn
(20)
#define kEaseExpoIn
(21)
#define kEaseExpoOut
(22)
#define kEaseExpoInOut
(23)
#define kEaseExpoOutIn
(24)
#define kEaseSigmoid
(25)
#define kEaseSineIn
(26)
#define kEaseSineOut
(27)
#define kEaseSineInOut
(28)
#define kEaseSineOutIn
(29)
#define kEaseStairstep
(30)
#define kEaseThirdStairstep
(31)
#define kEaseQuarterStairstep
(32)
#define kEaseHalfQuarterStairstep
(33)
#define kEaseQuarterHalfStairstep
(34)
#define EASING_TYPES
((("kEaseLinear"
         (alias
            "None")
         (help
            "No Ease"))
      ("kEasePolyIn"
         (alias
            "In")
         (help
            "Non-linear ease in"))
      ("kEasePolyOut"
         (alias
            "Out")
         (help
            "Non-linear ease out"))
      ("kEasePolyInOut"
         (alias
            "In, then Out")
         (help
            "Non-linear ease in, then out"))
      ("kEasePolyOutIn"
         (alias
            "Out, then In")
         (help
            "Non-linear ease out, then in"))
      ("kEaseBackIn"
         (alias
            "Back In")
         (help
            "Overarching ease in"))
      ("kEaseBackOut"
         (alias
            "Back Out")
         (help
            "Overarching ease out"))
      ("kEaseBackInOut"
         (alias
            "Back In, then Out")
         (help
            "Overarching ease in, then out"))
      ("kEaseBackOutIn"
         (alias
            "Back Out, then In.")
         (help
            "Overarching ease out, then in"))
      ("kEaseBounceIn"
         (alias
            "Bounce In")
         (help
            "Bouncing ease in"))
      ("kEaseBounceOut"
         (alias
            "Bounce Out")
         (help
            "Bouncing ease out"))
      ("kEaseBounceInOut"
         (alias
            "Bounce In, then Out")
         (help
            "Bouncing ease in, then out"))
      ("kEaseBounceOutIn"
         (alias
            "Bounce Out, then In")
         (help
            "Bouncing ease out, then in"))
      ("kEaseCircIn"
         (alias
            "Circular In")
         (help
            "Circular ease in"))
      ("kEaseCircOut"
         (alias
            "Circular Out")
         (help
            "Circular ease out"))
      ("kEaseCircInOut"
         (alias
            "Circular In, then Out")
         (help
            "Circular ease in/out"))
      ("kEaseCircOutIn"
         (alias
            "Circular Out, then In")
         (help
            "Circular ease out/in"))
      ("kEaseElasticIn"
         (alias
            "Elastic In")
         (help
            "Overshoots target and returns"))
      ("kEaseElasticOut"
         (alias
            "Elastic Out")
         (help
            "Overshoots target and returns"))
      ("kEaseElasticInOut"
         (alias
            "Elastic In, then Out")
         (help
            "Overshoots target and returns"))
      ("kEaseElasticOutIn"
         (alias
            "Elastic Out, then In")
         (help
            "Overshoots target and returns"))
      ("kEaseExpoIn"
         (alias
            "Exponential In")
         (help
            "quick ease in"))
      ("kEaseExpoOut"
         (alias
            "Exponential Out")
         (help
            "quick ease out"))
      ("kEaseExpoInOut"
         (alias
            "Exponential In, then Out")
         (help
            "quick ease in/out"))
      ("kEaseExpoOutIn"
         (alias
            "Exponential Out, then In")
         (help
            "quick ease out/in"))
      ("kEaseSigmoid"
         (alias
            "Sigmoid")
         (help
            "Sigmoidal ease"))
      ("kEaseSineIn"
         (alias
            "Sine In")
         (help
            "Sinusoidal ease in"))
      ("kEaseSineOut"
         (alias
            "Sine Out")
         (help
            "Sinusoidal ease out"))
      ("kEaseSineInOut"
         (alias
            "Sine In, then Out")
         (help
            "Sinusoidal ease in/out"))
      ("kEaseSineOutIn"
         (alias
            "Sine Out, then In")
         (help
            "Sinusoidal ease out/in"))
      ("kEaseStairstep"
         (alias
            "Stair Step")
         (help
            "jerky ease"))
      ("kEaseThirdStairstep"
         (alias
            "1/3 Stair Step")
         (help
            "jerky ease"))
      ("kEaseQuarterStairstep"
         (alias
            "1/4 Stair Step")
         (help
            "jerky ease"))
      ("kEaseHalfQuarterStairstep"
         (alias
            "1/2 Stair Step")
         (help
            "jerky ease"))
      ("kEaseQuarterHalfStairstep"
         (alias
            "1/8 Stair Step")
         (help
            "jerky ease"))))
#define SPHERE
((struct
      (x float)
      (y float)
      (z float)
      (radius float)))
#define VECTOR4
((struct
      (x float)
      (y float)
      (z float)
      (w float))
   (editor_type vector))
#define VECTOR3
((struct
      (x float)
      (y float)
      (z float))
   (editor_type vector))
#define SPHERICALVECTOR3
((struct
      (r float)
      (theta float)
      (phi float))
   (editor_type vector))
#define SPHERICALHARMONICS3
((struct
      (y0 float)
      (y1 float)
      (y2 float)
      (y3 float)
      (y4 float)
      (y5 float)
      (y6 float)
      (y7 float)
      (y8 float)))
#define VECTOR2
((struct
      (x float)
      (y float))
   (editor_type vector))
#define MINMAXVECTOR2
((struct
      (x
         float
         (alias
            "Minimum"))
      (y
         float
         (alias
            "Maximum")))
   (editor_type vector))
#define COLOR
((struct
      (r float)
      (g float)
      (b float)))
#define RECT
((struct
      (x float)
      (y float)
      (w float)
      (h float)))
#define MATRIX3
((struct
      (pitch
         float
         (no_test))
      (roll
         float
         (no_test))
      (yaw
         float
         (no_test))
      (x_scale
         float
         (no_test))
      (y_scale
         float
         (no_test))
      (z_scale
         float
         (no_test))))
#define TRANSFORM
((struct
      (pitch
         float
         (no_test))
      (roll
         float
         (no_test))
      (yaw
         float
         (no_test))
      (x_scale
         float
         (no_test))
      (y_scale
         float
         (no_test))
      (z_scale
         float
         (no_test))
      (x float)
      (y float)
      (z float)))
#define QUAT
((struct
      (x float)
      (y float)
      (z float)
      (w float)))
#define BOX
((struct
      (min VECTOR3)
      (max VECTOR3)))
#define RESOURCE_DIR_PTR
(string
   (list
      {$this
         get
         {flatten $editor_prop_path list}})
   (no_test))
#define LINEAR_INTERPOLATOR
((struct
      (p0
         VECTOR2
         (help
            "first point x vs y"))
      (p1
         VECTOR2
         (help
            "second point x vs y"))
      (highlight
         bool
         (help
            "Show this curve on screen in milo"))))
#define EXP_INTERPOLATOR
((struct
      (p0
         VECTOR2
         (help
            "first point x vs y"))
      (p1
         VECTOR2
         (help
            "second point x vs y"))
      (power
         float
         (help
            "power curve to use to go between them, 2 is good default"))
      (highlight
         bool
         (help
            "Show this curve on screen in milo"))))
#define INVEXP_INTERPOLATOR
((struct
      (p0
         VECTOR2
         (help
            "first point x vs y"))
      (p1
         VECTOR2
         (help
            "second point x vs y"))
      (power
         float
         (help
            "power curve to use to go between them, 2 is good default"))
      (highlight
         bool
         (help
            "Show this curve on screen in milo"))))
#define ATAN_INTERPOLATOR
((struct
      (p0
         VECTOR2
         (help
            "first point x vs y"))
      (p1
         VECTOR2
         (help
            "second point x vs y"))
      (severity
         float
         (help
            "power curve to use to go between them, 2 is good default"))
      (highlight
         bool
         (help
            "Show this curve on screen in milo"))))
#define PIECEWISELINEAR_INTERPOLATOR
((struct
      (keys
         (array
            (struct
               (frame
                  float
                  (help
                     "x"))
               (value
                  float
                  (help
                     "y")))))
      (highlight
         bool
         (help
            "Show this curve on screen in milo"))))
#define CUBIC_INTERPOLATOR
((struct
      (deadzone
         float
         (help
            "end of deadzone, y is zero between 0 and [deadzone]")
         (range 0 10000))
      (x0
         float
         (help
            "first point after [deadzone], can be more or less than [p1 x]")
         (no_test))
      (sr0
         float
         (help
            "slope at [x0] / slope at [deadzone]"))
      (p1
         VECTOR2
         (help
            "Point that determines a y value vs the max x value, must be greater than [deadzone]")
         (no_test))
      (sr1
         float
         (help
            "slope at [p1] / slope at [deadzone]"))
      (highlight
         bool
         (help
            "Show this curve on screen in milo")))
   (header
      "cubic interpolator"))
#define kPhysAxisX
(1)
#define kPhysAxisY
(2)
#define kPhysAxisZ
(4)
#define kPhysDrawGeometry
(1)
#define kPhysDrawAABB
(2)
#define kPhysDrawConstraints
(4)
#define kPhysDrawContacts
(8)
#define PHYS_DEBUG_DRAW_FILTERS
((("kPhysDrawGeometry"
         (alias
            "show world collision geometry")
         (help
            "show ALL the collision geometry in the physics world."))
      ("kPhysDrawAABB"
         (alias
            "show world body AABBs")
         (help
            "show ALL the axis aligned boxes of all the physics bodies in the physics world."))
      ("kPhysDrawConstraints"
         (alias
            "show world constraints")
         (help
            "show ALL the constraints in the physics world."))
      ("kPhysDrawContacts"
         (alias
            "show world collision constacts")
         (help
            "show ALL the collision contacts between rigigbodies in the physics world."))))
#define kPhysMotionPhysicsDriven
(0)
#define kPhysMotionAnimatable
(1)
#define kPhysMotionFixed
(2)
#define PHYS_MOTION_TYPES
((("kPhysMotionPhysicsDriven"
         (alias
            "Physics Driven")
         (help
            "NOTE: This motion type will make this RigidBody drive the transform of its Trans Parent! My motion is fully derived from the physics engine. Gravity will pull me down and others can push me around."))
      ("kPhysMotionAnimatable"
         (alias
            "Animation Driven")
         (help
            "I can be moved around by animations, but gravity does not affect me."))))
#define kDrawPhysMotionDriven
(1)
#define kDrawPhysMotionAnimatable
(2)
#define kDrawPhysMotionFixed
(4)
#define EDITDRAW_PHYS_MOTION_TYPES
((("kDrawPhysMotionDriven"
         (alias
            "Physics Driven RigidBodies")
         (help
            "Show all physics driven RigidBodies"))
      ("kDrawPhysMotionAnimatable"
         (alias
            "Animation Driven RigidBodies")
         (help
            "Show all animation driven RigidBodies"))
      ("kDrawPhysMotionFixed"
         (alias
            "Fixed RigidBodies")
         (help
            "Show all fixed/static RigidBodies"))))
#define kDrawSensorAABB
(1)
#define kDrawSensorOrientedShape
(2)
#define EDITDRAW_PHYYS_SENSOR_TYPES
((("kDrawSensorAABB"
         (alias
            "AABB Physics Sensors")
         (help
            "Show Sensors that only do fast AABB overlap checking"))
      ("kDrawSensorOrientedShape"
         (alias
            "Oriented Shape Physics Sensors")
         (help
            "Show Sensors that do accurate shape overlap checking"))))
#define kPhysShapeTriMesh
(0)
#define kPhysShapeHull
(1)
#define kPhysShapeSphere
(2)
#define kPhysShapeBox
(3)
#define kPhysShapeZCapsule
(4)
#define PHYS_SHAPE_TRIMESH
(("kPhysShapeTriMesh"
      (alias
         "Triangle Mesh Shape")
      (help
         "Triangle soup collision that uses the actual triangles in the geometry to do collision. WARNING! This only works with PhysicsSensors and RigidBodies of motion type set to Fixed or Animatable.")))
#define PHYS_SHAPE_HULL
(("kPhysShapeHull"
      (alias
         "Convex Hull Shape")
      (help
         "Creates a convex hull out of the geometry data and uses that for collision")))
#define PHYS_SHAPE_SPHERE
(("kPhysShapeSphere"
      (alias
         "Sphere Shape")
      (help
         "Creates a bounding sphere out of the geometry data and uses that for collision")))
#define PHYS_SHAPE_BOX
(("kPhysShapeBox"
      (alias
         "Box Shape")
      (help
         "Creates a bounding box out of the geometry data and uses that for collision")))
#define PHYS_SHAPE_ZCAPSULE
(("kPhysShapeZCapsule"
      (alias
         "Z-Axis Oriented Capsule Shape")
      (help
         "Creates a bounding capsule aligned the local z axis out of the geometry data and uses that for collision")))
#define PHYS_CONVEX_SHAPE_TYPES
((PHYS_SHAPE_HULL PHYS_SHAPE_SPHERE PHYS_SHAPE_BOX PHYS_SHAPE_ZCAPSULE))
#define PHYS_SHAPE_TYPES
((PHYS_SHAPE_TRIMESH PHYS_SHAPE_HULL PHYS_SHAPE_SPHERE PHYS_SHAPE_BOX PHYS_SHAPE_ZCAPSULE))
#define kContactFilter_SleepTime
(1)
#define kContactFilter_MaxContacts
(2)
#define kContactFilter_Mass
(4)
#define kContactFilter_Material
(8)
#define kContactFilter_ImpactAngle
(16)
#define CONTACT_FILTER_TYPES
((("kContactFilter_SleepTime"
         (alias
            "Sleep Timer Filter")
         (help
            "Put the RigidBodyImpactFilterCom to sleep after colliding."))
      ("kContactFilter_MaxContacts"
         (alias
            "Max Contacts Filter")
         (help
            "Report only up to specified number of contacts."))
      ("kContactFilter_Mass"
         (alias
            "Mass Range Filter")
         (help
            "Report contacts between other bodies that have a mass withing the range."))
      ("kContactFilter_Material"
         (alias
            "Material Filter")
         (help
            "Report contacts with bodies that has a specific physics material"))
      ("kContactFilter_ImpactAngle"
         (alias
            "Angle Of Impact Filter")
         (help
            "Report contacts when our angle of impact is withing angle range"))))
#define kConstraintPointPoint
(0)
#define kConstraintHinge
(1)
#define kConstraintConeTwist
(2)
#define kConstraint6DOF
(3)
#define PHYS_CONSTRAINT_TYPES
((("kConstraintPointPoint"
         (alias
            "Ball and Socket")
         (help
            "a simple ball and socket constraint between two rigid bodies"))
      ("kConstraintHinge"
         (alias
            "Hinge")
         (help
            "a door hinge type of constraint"))
      ("kConstraintConeTwist"
         (alias
            "Cone Twist")
         (help
            "a ball and socket, but with limits to how much it can swing and twist"))
      ("kConstraint6DOF"
         (alias
            "Six Degree's of Freedom")
         (help
            "a constraint that has limits on how much it can twist and travel in all three axis "))))
#define kFilterTypeRB
(1)
#define kFilterTypeSensor
(2)
#define kSync_TicksOnly
(0)
#define kSync_BeatsAndTicks
(1)
#define kSync_MeasuresBeatsAndTicks
(2)
#define BEATCLOCK_SYNC_MODES
((("kSync_TicksOnly"
         (alias
            "Ticks Only")
         (help
            "Copy only the fractional part of the current beat over"))
      ("kSync_BeatsAndTicks"
         (alias
            "Beats and Ticks")
         (help
            "Copy over beat and ticks"))
      ("kSync_MeasuresBeatsAndTicks"
         (alias
            "Measure Beats and Ticks")
         (help
            "Copy measure, beat, and ticks"))))
#define kRangeMapping_Linear
(0)
#define RANGEMAPPER_FUNCTION_ENUM
(("kRangeMapping_Linear"
      (alias
         "linear interpolation")))
#define RANGEMAPPER_STRUCT
((struct
      (raw_val
         float
         (help
            "Raw input value for the rangemapper to map"))
      (normalized_val
         float
         (help
            "Mapped output value. (The result of the mapping)")
         (read_only TRUE))
      (raw_range
         VECTOR2
         (help
            "Range of the input mapping"))
      (normalized_range
         VECTOR2
         (help
            "Range of the output mapping"))
      (function
         int
         (list RANGEMAPPER_FUNCTION_ENUM)
         (help
            "Mapping function to use"))
      (clamp
         bool
         (help
            "TRUE to clamp the output value to the normalized range"))))
#define kAssetApprovalStateAwaitingApproval
(0)
#define kAssetApprovalStateApproved
(1)
#define kAssetApprovalStateRejected
(2)
#define kAssetApprovalStateTempApproved
(3)
#define kAssetApprovalStateNeedsDelete
(4)
#define kTimerType_CPUTimer
(0)
#define kTimerType_GPUTimer
(1)
#define kTimerType_GPUStatsQuery
(2)
#define kOverdraw_BackToFront
(0)
#define kOverdraw_FrontToBack
(1)
#define kOverdraw_Random
(2)
#define PERFTESTDRAW_OVERDRAW_MODES
((("kOverdraw_BackToFront"
         (alias
            "Back to front"))
      ("kOverdraw_FrontToBack"
         (alias
            "Front to back"))
      ("kOverdraw_Random"
         (alias
            "Random"))))
#define kPixelShaderOp_Add
(0)
#define PERFTESTDRAW_PIXEL_SHADER_OPS
((("kPixelShaderOp_Add"
         (alias
            "Add"))))
#define kRibbonVertSpline
(1)
#define kRibbonVertTagSeam
(2)
#define kRibbonVertTagProgression
(4)
#define RIBBON_VERTEX_FLAGS
((("kRibbonVertSpline"
         (alias
            "Hermite Spline")
         (help
            "Should the sample points be used to make a curve?"))
      ("kRibbonVertTagSeam"
         (alias
            "Tag Seams")
         (help
            "Tag seam verts with Alpha = 1"))
      ("kRibbonVertTagProgression"
         (alias
            "Tag Progression")
         (help
            "Tag tube progression in the Red channel (0 to 1)"))))
#define SIMPLE_RANGED_FLOAT
((struct
      (start_value float)
      (end_value float))
   (editor_type vector))
#define SIMPLE_RANGED_FLOAT_0_TO_1
((struct
      (start_value
         float
         (range 0.0 1.0))
      (end_value
         float
         (range 0.0 1.0)))
   (editor_type vector))
#define SIMPLE_RANGED_RATIO
((struct
      (start_value float)
      (0 to 1)
      (end_value float)
      (0 to 1))
   (editor_type vector))
#define SIMPLE_RANGED_INT
((struct
      (start_value int)
      (end_value int))
   (editor_type vector))
#define kVisibilityStatus_Unknown
(0)
#define kVisibilityStatus_Inactive
(1)
#define kVisibilityStatus_OnScreenUnobstructed
(2)
#define kVisibilityStatus_OnScreenFullyObstructed
(3)
#define kVisibilityStatus_Offscreen
(4)
#define kVisibilityStatus_HiddenInView
(5)
#define kVisibilityStatus_HiddenOutOfView
(6)
#define VISIBILITY_STATUS
((("kVisibilityStatus_Unknown"
         (alias
            "Unknown")
         (help
            "Has not been calculated yet. Make sure it is on and has enough time to do its heartbeat"))
      ("kVisibilityStatus_Inactive"
         (alias
            "Inactive")
         (help
            "Off because the 'active' checkbox on VisibilityStatusCom got turned off... maybe by a LookTriggerCom"))
      ("kVisibilityStatus_OnScreenUnobstructed"
         (alias
            "OnScreenUnobstructed")
         (help
            "On the screen. This includes PARTIALLY obstructed"))
      ("kVisibilityStatus_OnScreenFullyObstructed"
         (alias
            "OnScreenFullyObstructed")
         (help
            "Technically on screen but obstructed by something in the world. This means 100% completely obstructed"))
      ("kVisibilityStatus_Offscreen"
         (alias
            "OffScreen")
         (help
            "Completely off screen. Doesn't matter whether it is obstructed or not"))
      ("kVisibilityStatus_HiddenInView"
         (alias
            "HiddenInView")
         (help
            "The Entity that owns this VisibilityStatusCom is currently hidden and being looked at the by the camera, so you might not want to make it appear just yet... or do you?"))
      ("kVisibilityStatus_HiddenOutOfView"
         (alias
            "HiddenOutOfView")
         (help
            "The Entity that owns this VisibilityStatusCom is currently hidden and safely out of camera view, so maybe this is a good time to surreptitiously spawn that NPC"))))
#define kARGB
(0)
#define kDXT1
(8)
#define kDXT5
(24)
#define kDXN
(32)
#define kGreyscale16
(64)
#define kGreyscale16f
(4096)
#define kBC6HU
(128)
#define kBC6HS
(256)
#define kBC7
(512)
#define kARGB_sRGB
(2048)
#define kDXT1_sRGB
(2056)
#define kDXT5_sRGB
(2072)
#define kBC7_sRGB
(2560)
#define RNDBITMAP_FORMAT_TYPES
(("kARGB_sRGB"
      (alias
         "32bpp ARGB (uncompressed, gamma)")
      (help
         "Can be used to help with banding issues, but you might want to consider BC7 instead"))
   ("kARGB"
      (alias
         "32bpp ARGB (uncompressed, linear)")
      (help
         "Useful when you want to store data in a texture, such as flow maps, uv distortions, etc"))
   ("kGreyscale16"
      (alias
         "16bpp Greyscale (uncompressed)")
      (help
         "Useful for greyscale images; one channel of 16 bit data."))
   ("kGreyscale16f"
      (alias
         "16bpp Greyscale Float (uncompressed)")
      (help
         "Useful for greyscale images and displacement maps; one channel of 16 bit floating point data. Signed (can go positive or negative)"))
   ("kDXT1_sRGB"
      (alias
         "BC1 / DXT1 (gamma)")
      (help
         "Default for color maps with no alpha. 5-6-5bpc or 5-5-5-1bpc. This format actually has a 1 bit alpha, so you can force this format if your alpha is alpha cut"))
   ("kDXT1"
      (alias
         "BC1 / DXT1 (linear)")
      (help
         "Can be used to pack 4 channels of data into a texture with compression, with a 4-4-4-1bpc format"))
   ("kDXT5_sRGB"
      (alias
         "BC3 / DXT5 (gamma)")
      (help
         "Default for color maps with alpha. 4-4-4-4bpc"))
   ("kDXT5"
      (alias
         "BC3 / DXT5 (linear)")
      (help
         "Can be used to pack 4 channels of data into a texture with compression, with 4 bits of precision per channel"))
   ("kDXN"
      (alias
         "BC5 / DXN")
      (help
         "Normal map compression; actual format depends on platform"))
   ("kBC6HU"
      (alias
         "BC6HU (unsigned)")
      (help
         "16 bit per pixel, 3 channel floating point texture with no sign (cannot go negative)"))
   ("kBC6HS"
      (alias
         "BC6HS (signed)")
      (help
         "Default for displacement maps. 16 bit per pixel, 3 channel floating point texture with sign (can go positive or negative)"))
   ("kBC7_sRGB"
      (alias
         "BC7 (gamma)")
      (help
         "16 bit per pixel color format, 3 channels, useful for HDR images"))
   ("kBC7"
      (alias
         "BC7 (linear)")
      (help
         "16 bit per pixel color format, 3 channels, in linear space (good for data)")))
#define kMipType_None
(0)
#define kMipType_BoxFilter
(1)
#define MIP_TYPES
((("kMipType_None"
         (alias
            "None")
         (help
            "No mips."))
      ("kMipType_BoxFilter"
         (alias
            "Box Filter")
         (help
            "2x2 box filter"))))
#define BEAT_SOURCE_OFFSET
((struct
      (ticks int)
      (ms float)
      (beats float)
      (measures int)
      (phrase int)))
#define BEAT_SOURCE_RANGE
((struct
      (name
         symbol
         (read_only TRUE))
      (offset
         BEAT_SOURCE_OFFSET
         (read_only TRUE))
      (duration
         BEAT_SOURCE_OFFSET
         (read_only TRUE))
      (has_duration
         bool
         (read_only TRUE))))
#define BEAT_SOURCE_RANGE_OFFSET
((struct
      (offset
         BEAT_SOURCE_OFFSET
         (read_only TRUE))
      (range
         BEAT_SOURCE_RANGE
         (read_only TRUE))))
#define BEAT_SOURCE_RANGE_HISTORY
((struct
      (current_offset
         BEAT_SOURCE_OFFSET
         (read_only TRUE))))
#define SONG_POS
((struct
      (elapsed_seconds
         float
         (read_only TRUE))
      (elapsed_ticks
         float
         (read_only TRUE))
      (elapsed_beats
         float
         (read_only TRUE))
      (phrase
         int
         (read_only TRUE))
      (measure
         int
         (read_only TRUE))
      (beat
         int
         (read_only TRUE))
      (tick
         int
         (read_only TRUE))))
#define SONG_SEGMENT
((struct
      (type
         symbol
         (read_only TRUE))
      (name
         symbol
         (read_only TRUE))
      (offset
         BEAT_SOURCE_OFFSET
         (read_only TRUE))
      (duration
         BEAT_SOURCE_OFFSET
         (read_only TRUE))
      (has_duration
         bool
         (read_only TRUE))
      (auto_advance
         bool
         (read_only TRUE))
      (subsegments
         (array BEAT_SOURCE_RANGE)
         (read_only TRUE))))
#define PROPREF_FLOAT
(prop_ref
   (allowed_prop_types
      (int float)))
#define PROPREF_INT
(prop_ref
   (allowed_prop_types
      (int)))
#define PROPANIM_ONLY
((hide propedit flow)
   (no_test)
   (no_validate))
#define kSmoothNone
(0)
#define kSmoothLinear
(1)
#define kSmoothRubberBand
(2)
#define kSmoothAverage
(3)
#define PROPERTYSMOOTHER_FUNCS
(("kSmoothNone"
      "kSmoothLinear"
      "kSmoothRubberBand"
      "kSmoothAverage"))
#define kSmootherModeNormal
(0)
#define kSmootherModeIncreaseOnly
(1)
#define kSmootherModeDecreaseOnly
(2)
#define PROPERTYSMOOTHER_MODES
(("kSmootherModeNormal"
      "kSmootherModeIncreaseOnly"
      "kSmootherModeDecreaseOnly"))
#define kWaveformValue
(0)
#define kWaveformValuePair
(1)
#define kWaveformCurve
(2)
#define kWaveformCurvePair
(3)
#define kWaveformRandomEvenBlend
(0)
#define kWaveformRandomSlopedBlend
(1)
#define kWaveformRandomNoise
(2)
#define kNoSmoothing
(0)
#define kLinearSmoothing
(1)
#define kRubberBandSmoothing
(2)
#define SMOOTHED_FLOAT
((struct
      (smoothing_constant
         float
         (help
            "Average change per second"))
      (smoothing_type
         int
         (list
            ("kNoSmoothing"
               "kLinearSmoothing"
               "kRubberBandSmoothing"))
         (help
            "Smoothing type"))
      (smoothed_value
         float
         (read_only TRUE)
         (no_test readback)
         (help
            "Current smoothed value"))))
#define SMOOTHED_VECTOR
((struct
      (smoothing_constant
         float
         (help
            "Average change per second"))
      (smoothing_type
         int
         (list
            ("kNoSmoothing"
               "kLinearSmoothing"
               "kRubberBandSmoothing"))
         (help
            "Smoothing type"))
      (smoothed_value
         VECTOR3
         (read_only TRUE)
         (no_test readback)
         (help
            "Current smoothed value"))))
#define TRANSPORT_STATES
((Invalid PlayRequested Playing Paused Stopped Stopping Unknown))
#define kSort_None
(0)
#define kSort_FrontToBack
(1)
#define kSort_SmallestToLargest
(2)
#define kSort_LargestToSmallest
(3)
#define SCENE_SORT_MODE_ENUM
((("kSort_None"
         (alias None)
         (help
            "No sorting - use this if you do not have a relatively fixed camera"))
      ("kSort_FrontToBack"
         (alias 'Front to Back')
         (help
            "Sort front to back - this is probably the most common choice for relatively fixed cameras (note that this sorts by back of sphere)"))
      ("kSort_SmallestToLargest"
         (alias 'Smallest to Largest')
         (help
            "Sort smallest to largest - this can be useful when the foreground is generally comprised of small objects covering large ones"))
      ("kSort_LargestToSmallest"
         (alias 'Largest to Smallest')
         (help
            "Sort largest to smallest - use this if the scene has large objects in the foreground covering much of the scene"))))
#define kRenderPreAlpha
(0)
#define kRenderPostAlpha
(1)
#define PPLRENDERSLOT_ENUM
((("kRenderPreAlpha"
         (alias 'Pre Alpha')
         (help
            "Renders before transparent objects"))
      ("kRenderPostAlpha"
         (alias 'Post Alpha')
         (help
            "Renders after transparent objects and before final post proc."))))
#define kParticleSGFloatSource_None
(-1)
#define kParticleSGFloatSource_Waveform
(0)
#define kParticleSGFloatSource_NormalizedAge
(1)
#define kParticleSGFloatSource_VelocityX
(2)
#define kParticleSGFloatSource_VelocityY
(3)
#define kParticleSGFloatSource_VelocityZ
(4)
#define kParticleSGFloatSource_Speed
(5)
#define kParticleSGFloatSource_TileIndex
(6)
#define kParticleSGFloatSource_PositionX
(7)
#define kParticleSGFloatSource_PositionY
(8)
#define kParticleSGFloatSource_PositionZ
(9)
#define PARTICLESGFLOATSOURCE_ENUM
((("kParticleSGFloatSource_None"
         (alias None)
         (help
            "Sends 0.0 to the shadergraph. Most efficient if you're not using a shadergraph float."))
      ("kParticleSGFloatSource_Waveform"
         (alias Waveform)
         (help
            "Sends the waveform value to the shadergraph."))
      ("kParticleSGFloatSource_NormalizedAge"
         (alias 'Normalized Age')
         (help
            "Sends the particle's normalized age to the shadergraph. [0, 1]."))
      ("kParticleSGFloatSource_VelocityX"
         (alias 'Velocity X')
         (help
            "Sends the particle's x-axis velocity to the shadergraph."))
      ("kParticleSGFloatSource_VelocityY"
         (alias 'Velocity Y')
         (help
            "Sends the particle's y-axis velocity to the shadergraph."))
      ("kParticleSGFloatSource_VelocityZ"
         (alias 'Velocity Z')
         (help
            "Sends the particle's z-axis velocity to the shadergraph."))
      ("kParticleSGFloatSource_Speed"
         (alias Speed)
         (help
            "Sends the particle's speed to the shadergraph."))
      ("kParticleSGFloatSource_TileIndex"
         (alias 'Tile Index')
         (help
            "Sends the particle's UV tile index to the shadergraph."))
      ("kParticleSGFloatSource_PositionX"
         (alias 'Position X')
         (help
            "Sends the particle's x-axis position to the shadergraph."))
      ("kParticleSGFloatSource_PositionY"
         (alias 'Position Y')
         (help
            "Sends the particle's y-axis position to the shadergraph."))
      ("kParticleSGFloatSource_PositionZ"
         (alias 'Position Z')
         (help
            "Sends the particle's z-axis position to the shadergraph."))))
#ifdef INIT_GESTURE
#include ../gesture/gesture_macros.dta
#endif
#endif