#define CHEAT_DISPLAY_S
(5)
{new
   Object
   cheat_display
   (show
      ($msg)
      {if_else
         $cheat.no_cheat_display
         {print
            $msg
            "\n"}
         {do
            {rnd show_overlay cheats TRUE CHEAT_DISPLAY_S}
            {rnd
               reflect
               cheats
               {print
                  $msg
                  "\n"}}}})
   (show_bool
      ($label $val)
      {$this
         show
         {sprint
            $label
            ": "
            {if_else
               $val
               "ON"
               "OFF"}}})}
#define CHAR_OBJECTS
({find_obj
      {$p9director chars_dir}
      ringo
      left_hand.dmidi}
   {find_obj
      {$p9director chars_dir}
      ringo
      right_hand.dmidi}
   {find_obj
      {$p9director chars_dir}
      george
      main.drv}
   {find_obj
      {$p9director chars_dir}
      george
      strum.dmidi}
   {find_obj
      {$p9director chars_dir}
      george
      fret.dmidi}
   {find_obj
      {$p9director chars_dir}
      paul
      main.drv}
   {find_obj
      {$p9director chars_dir}
      paul
      strum.dmidi}
   {find_obj
      {$p9director chars_dir}
      paul
      fret.dmidi}
   {find_obj
      {$p9director chars_dir}
      ringo
      main.drv}
   {find_obj
      {$p9director chars_dir}
      john
      main.drv}
   {find_obj
      {$p9director chars_dir}
      ringo
      left_hand.dmidi}
   {find_obj
      {$p9director chars_dir}
      ringo
      right_hand.dmidi}
   {find_obj
      {$p9director chars_dir}
      george
      main.drv}
   {find_obj
      {$p9director chars_dir}
      george
      strum.dmidi}
   {find_obj
      {$p9director chars_dir}
      george
      fret.dmidi}
   {find_obj
      {$p9director chars_dir}
      paul
      main.drv}
   {find_obj
      {$p9director chars_dir}
      paul
      strum.dmidi}
   {find_obj
      {$p9director chars_dir}
      paul
      fret.dmidi}
   {find_obj
      {$p9director chars_dir}
      ringo
      main.drv}
   {find_obj
      {$p9director chars_dir}
      john
      main.drv})
{func
   next_character_driver
   {if
      $world
      {do
         ($index -1)
         {foreach
            $obj
            (CHAR_OBJECTS)
            {if
               {==
                  $char_debug_driver
                  {'++' $index}}
               {unless
                  {char_debug $obj}
                  {'++' $char_debug_driver}}}}
         {if
            {==
               $char_debug_driver
               {'++' $index}}
            {char_debug}}
         {set
            $char_debug_driver
            {mod
               {'+' 1 $char_debug_driver}
               {'++' $index}}}}}}
{func
   A_cheat
   {if_else
      {meta is_up}
      {do
         {cheat_display
            show_bool
            "Unlock All"
            {toggle_unlock_all}}
         {update_story_display}}
      {toggle_crowd_audio}}}
{func
   toggle_crowd_audio
   {if
      $world
      {$world
         iterate
         P9CrowdAudio
         $ca
         {do
            ($new
               {!
                  {$ca get enabled}})
            {$ca set enabled $new}
            {cheat_display
               show_bool
               "CrowdAudio"
               $new}}}}}
{func
   cycle_free_camera
   {if
      {&& $world $p9director}
      {unless
         {$world has_free_cam}
         {set $free_cam.state 0}}
      {if_else
         {< $free_cam.state 14}
         {do
            ($free
               {$world get_free_cam $cheat_pad})
            {switch
               $free_cam.state
               (0
                  {$free set_frozen FALSE}
                  {$free
                     set_parent
                     {object
                        ""}}
                  {cheat_display
                     show
                     "Free camera: world"})
               (1
                  {$free set_frozen TRUE}
                  {$free
                     set_parent
                     {object
                        ""}}
                  {cheat_display
                     show
                     "Free camera: frozen"})
               {$free set_frozen FALSE}
               {do
                  ($name
                     {switch
                        $free_cam.state
                        ((2 3 4)
                           george)
                        ((5 6 7)
                           john)
                        ((8 9 10)
                           paul)
                        ((11 12 13)
                           ringo)})
                  {$free
                     set_parent
                     {find_obj
                        {$p9director chars_dir}
                        $name
                        {switch
                           $free_cam.state
                           ((4 7 10)
                              bone_guitar.mesh)
                           (13 bone_L-hand.mesh)
                           bone_head.mesh}}}
                  {if_else
                     {find_elem
                        (3 4 6 7 9 10 12 13)
                        $free_cam.state}
                     {$free set_parent_dof 1 1 1}
                     {$free set_parent_dof 0 0 1}}
                  {switch
                     $free_cam.state
                     ((4 7)
                        {$free set_pos 80 0 10}
                        {$free set_rot 0 -90 90})
                     (10
                        {$free set_pos 80 0 10}
                        {$free set_rot 0 90 90})
                     {$free set_pos 0 60 0}
                     {$free set_rot 0 -90 180}}
                  {cheat_display
                     show
                     {sprint
                        "Free camera: "
                        $name
                        {switch
                           $free_cam.state
                           ((3 6 9 12)
                              " pinned")
                           ((4 7 10 13)
                              " hand")
                           " floating"}}}}}
            {'++' $free_cam.state}}
         {do
            {$world delete_free_cam}
            {cheat_display
               show
               "Free camera: off"}}}}}
{func
   toggle_crowd_meter
   {if
      {exists beatmatch}
      {do
         ($new
            {!
               {{beatmatch active_player 0}
                  crowd_rating_active}})
         {band_0 set_crowd_meter_active $new}
         {cheat_display
            show_bool
            "Crowd meter"
            $new}}}}
{func
   start_shuttle
   {if
      {exists beatmatch}
      {if_else
         {rnd overlay_showing time}
         {set $cheat.show_time FALSE}
         {do
            {rnd show_overlay time TRUE}
            {set $cheat.show_time TRUE}}}
      {beatmatch set_time_paused TRUE}
      {{beatmatch active_player 0}
         set_crowd_rating_active
         FALSE}
      {beatmatch set_shuttle TRUE $cheat_pad}}}
{func
   stop_shuttle
   {beatmatch set_shuttle FALSE}
   {beatmatch set_time_paused FALSE}
   {if
      $cheat.show_time
      {rnd show_overlay time FALSE}}}
{func
   toggle_shuttle
   {if_else
      {beatmatch shuttle_active}
      {stop_shuttle}
      {start_shuttle}}}
{set $mute_cheat FALSE}
{func
   toggle_mute_global
   {set
      $mute_cheat
      {! $mute_cheat}}
   {if_else
      $mute_cheat
      {do
         {synth set_master_vol kDbSilence}
         {cheat_display
            show
            "Mute all: TRUE"}}
      {do
         {synth set_master_vol 0}
         {cheat_display
            show
            "Mute all: FALSE"}}}}
{set $mute_shell_music FALSE}
{func
   toggle_mute_shell_music
   {set
      $mute_shell_music
      {! $mute_shell_music}}
   {if_else
      $mute_shell_music
      {meta music_stop}
      {meta music_start}}}
{func
   toggle_forced_autocal
   {if_else
      {== 1 $force_autocal}
      {set $force_autocal 0}
      {set $force_autocal 1}}
   {cheat_display
      show
      {sprint
         "forced calbert: "
         $force_autocal}}}
{func
   rotate_singer_autoplay_part
   ($singer_num)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player rotate_singer_autoplay_part $singer_num}
         {do
            ($part
               {$player get_singer_autoplay_part $singer_num})
            ($str
               {if_else
                  {== $part -1}
                  "OFF"
                  {sprintf
                     "vocal part %d"
                     {'+' $part 1}}})
            {cheat_display
               show
               {sprint
                  "Rotated singer "
                  {'+' $singer_num 1}
                  " autoplay to "
                  $str
                  "."}}}}}}
{func
   rotate_singer_autoplay_variation_magnitude
   ($singer_num)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player rotate_singer_autoplay_variation_magnitude $singer_num}
         {do
            ($magnitude
               {$player get_singer_autoplay_variation_magnitude $singer_num})
            {cheat_display
               show
               {sprint
                  "Changed singer "
                  {'+' $singer_num 1}
                  " autoplay variation to +/-"
                  $magnitude
                  "."}}}}}}
{func
   increment_autoplay_offset
   ($amount)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player
            set_autoplay_offset
            {'+'
               {$player get_autoplay_offset}
               $amount}}
         {do
            ($offset
               {$player get_autoplay_offset})
            {cheat_display
               show
               {sprint
                  "Changed autoplay offset to "
                  $offset
                  "."}}}}}}
{func
   increment_vocal_part_bias
   ($amount)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player
            set_vocal_part_bias
            {'+'
               {$player get_vocal_part_bias}
               $amount}}
         {do
            ($offset
               {$player get_vocal_part_bias})
            {cheat_display
               show
               {sprint
                  "Changed vocal part tube bias to "
                  $offset
                  "."}}}}}}
{func
   toggle_vocalplayer_overlay
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player toggle_overlay}}}}
{func
   toggle_vocalplayer_frame_spew
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {if_else
            {$player toggle_frame_spew}
            {cheat_display
               show
               "Vocal player frame spew on!"}
            {cheat_display
               show
               "Vocal player frame spew off."}}}}}
{func
   cycle_multiplayer_auto_play
   {if
      {exists beatmatch}
      {cheat_display
         show
         {sprint
            "Autoplay: "
            {beatmatch debug_cycle_autoplay}}}}}
{func
   cycle_auto_play_accuracy
   {if
      {exists beatmatch}
      {cheat_display
         show
         {sprint
            "Gem-player Autoplay Accuracy: "
            {beatmatch debug_cycle_autoplay_accuracy}}}}}
{func
   adjust_crowd_rating
   ($delta)
   {if
      {exists beatmatch}
      {{beatmatch active_player 0}
         set_crowd_rating
         {'+'
            {{beatmatch active_player 0}
               crowd_rating}
            $delta}}}}
{func
   toggle_time_paused
   {unless
      {game_time_panel is_up}
      {do
         ($new
            {!
               {game paused}})
         {game cheat_pause $new}
         {if_else
            {game paused}
            {print
               "Game paused"}
            {print
               "Game unpaused"}}}}}
{func
   change_speed
   ($factor)
   {if
      {&&
         {!
            {meta is_up}}
         {exists beatmatch}}
      {beatmatch
         set_music_speed
         {'*'
            {beatmatch music_speed}
            $factor}}}}
{func
   cheat_next_loading_tip_mode
   {set
      $cheat.loading_tip_mode
      {'+' $cheat.loading_tip_mode 1}}
   {if
      {> $cheat.loading_tip_mode 5}
      {set $cheat.loading_tip_mode 0}}
   {switch
      $cheat.loading_tip_mode
      (0
         {cheat_display
            show
            {sprint
               "Loading Tip (normal)"}})
      (1
         {cheat_display
            show
            {sprint
               "Loading Tip (random text tip)"}})
      (2
         {cheat_print_loading_tip_entry_index}
         {cheat_reset_loading_tip_entry})
      (3
         {cheat_display
            show
            {sprint
               "Loading Tip (random generic audio)"}})
      (4
         {cheat_print_loading_tip_entry_index}
         {cheat_reset_loading_tip_entry})
      (5
         {cheat_print_loading_tip_entry_index}
         {cheat_reset_loading_tip_entry})}}
{func
   cheat_get_loading_tip_count
   {switch
      $cheat.loading_tip_mode
      (2
         {random_context_count
            {find $syscfg tips}})
      (4
         {random_context_count
            {find $syscfg vo_loading_context}})
      (5 1000000)
      0}}
{func
   cheat_print_loading_tip_entry_index
   {switch
      $cheat.loading_tip_mode
      (2
         {cheat_display
            show
            {sprintf
               "Loading Tip (sequential text tip) Entry: %i of %i"
               {'+' $cheat.loading_tip_index 1}
               {cheat_get_loading_tip_count}}})
      (4
         {cheat_display
            show
            {sprintf
               "Loading Tip (sequential generic audio) Entry: %i of %i"
               {'+' $cheat.loading_tip_index 1}
               {cheat_get_loading_tip_count}}})
      (5
         {cheat_display
            show
            {sprintf
               "Loading Tip (sequential song specific audio) Entry: %i of ???"
               {'+' $cheat.loading_tip_index 1}}})
      {cheat_display
         show
         "Not in a sequential loading tip mode"}}}
{func
   cheat_reset_loading_tip_entry
   {set $cheat.loading_tip_index 0}}
{func
   cheat_next_loading_tip_entry
   {set
      $cheat.loading_tip_index
      {'+' $cheat.loading_tip_index 1}}
   {if
      {>=
         $cheat.loading_tip_index
         {cheat_get_loading_tip_count}}
      {set $cheat.loading_tip_index 0}}
   {cheat_print_loading_tip_entry_index}}
{func
   fake_event_win
   ($avg_stars)
   {if
      {story has_performer}
      {if
         {&&
            {!
               {ui in_transition}}
            {{story performer}
               is_local}}
         {do
            {if
               {==
                  {ui current_screen}
                  story_chapter_screen}
               {do
                  ($event FALSE)
                  {set
                     $event
                     {story_chapter_panel selected_chapter}}
                  {if
                     $event
                     {do
                        {{story performer}
                           set_chapter
                           $event}
                        {do
                           ($msg
                              {sprintf
                                 "Won %s w/ %d star average"
                                 {{story chapter}
                                    display_name}
                                 $avg_stars})
                           {cheat_display show $msg}}
                        {{story performer}
                           cheat_win_chapter
                           $avg_stars}
                        {update_story_display}}}}}
            {if
               {==
                  {ui current_screen}
                  story_chapter_challenges_screen}
               {do
                  ($challenge FALSE)
                  {set
                     $challenge
                     {story_chapter_challenges_panel selected_challenge_chapter}}
                  {if
                     $challenge
                     {do
                        {{story performer}
                           set_chapter
                           $challenge}
                        {{story performer}
                           cheat_win_challenge
                           $avg_stars}
                        {do
                           ($msg
                              {sprintf
                                 "Won %s chapter challenge w/ %d star average"
                                 {$challenge display_name}
                                 $avg_stars})
                           {cheat_display show $msg}}
                        {update_story_display}}}}}
            {if
               {==
                  {ui current_screen}
                  story_chapter_songselect_screen}
               {do
                  ($song_index -1)
                  {set
                     $song
                     {story_chapter_songselect_panel selected_song}}
                  {{story performer}
                     set_song
                     $song}
                  {do
                     ($msg
                        {sprintf
                           "Won %s w/ %d stars"
                           {{story performer}
                              selected_song_name}
                           $avg_stars})
                     {{story performer}
                        cheat_win_set
                        $avg_stars}
                     {cheat_display show $msg}
                     {update_story_display}}}}}}}}
{func
   fill_band_energy
   {unless
      {meta is_up}
      {beatmatch
         foreach_active_player
         $p
         {$p fill_band_energy}}}}
{func
   cheat_empty_band_energy
   {if
      {&&
         {exists beatmatch}
         {!
            {meta is_up}}}
      {{beatmatch active_player 0}
         empty_band_energy}}}
{set $remote_solo FALSE}
{func
   toggle_remote_solo
   {set
      $remote_solo
      {! $remote_solo}}
   {{beatmatch active_player 1}
      remote_solo
      $remote_solo}}
{func
   everyone_deploy
   {unless
      {meta is_up}
      {game
         foreach_local_player
         $p
         {handle
            ($p deploy_if_possible)}}}}
{func
   player_do_func
   ($pad_num $func)
   {unless
      {meta is_up}
      {if
         {exists beatmatch}
         {do
            ($user
               {user_mgr get_user_from_pad_num $pad_num})
            {if
               {&&
                  $user
                  {$user is_participating}}
               {do
                  ($player
                     {$user player})
                  {if
                     $player
                     {$player $func}}}}}}}}
{func
   player_deploy
   ($pad_num)
   {player_do_func $pad_num deploy_if_possible}}
{func
   player_fail
   ($pad_num)
   {player_do_func $pad_num fail}}
{func
   toggle_multiplier_active
   {if
      {exists beatmatch}
      {do
         ($new
            {!
               {band_0 get_multiplier_active}})
         {band_0 set_multiplier_active $new}
         {cheat_display
            show_bool
            "Multipliers "
            $new}}}}
#ifdef HX_XBOX
{func
   fake_signout
   ($pad_num)
   {cheat_display
      show
      {sprintf
         "Fake Signout on pad %d\n"
         {'+' 1 $pad_num}}}
   {print
      {sprintf
         "Fake Signout on pad %d\n"
         $pad_num}}
   {platform_mgr debug_fake_signin_change_msg $pad_num}}
#endif
{func
   cycle_instrument_override
   ($pad_num)
   {if_else
      {'||'
         {==
            {ui current_screen}
            {gamemode get matchmaking_screen}}
         {==
            {{user_mgr debug_get_user_from_pad $pad_num}
               get_controller_type}
            kControllerNone}}
      {do
         ($old
            {user_mgr debug_get_controller_type_override $pad_num})
         ($new
            {switch
               $old
               (kControllerGuitar kControllerDrum)
               (kControllerDrum kControllerVocals)
               (kControllerVocals kControllerNone)
               kControllerGuitar})
         {user_mgr debug_set_controller_type_override $pad_num $new}
         {cheat_display
            show
            {if_else
               {== $new kControllerNone}
               {sprint
                  "Controller "
                  {'+' $pad_num 1}
                  " instrument faking cleared."}
               {sprint
                  "Controller "
                  {'+' $pad_num 1}
                  " instrument faking to "
                  {switch
                     $new
                     (kControllerGuitar guitar)
                     (kControllerDrum drum)
                     (kControllerVocals vocals)
                     "error"}}}}
         {do
            ($user
               {user_mgr debug_get_user_from_pad $pad_num})
            {cond
               ({==
                     {ui current_screen}
                     {gamemode get matchmaking_screen}}
                  {{gamemode get matchmaking_screen}
                     joypad_connect
                     $user
                     TRUE})
               ({==
                     {ui current_screen}
                     story_progress_sel_screen}
                  {story_progress_sel_screen joypad_connect $user TRUE})}}}
      {cheat_display
         show
         {sprint
            "Can't change instrument: controller "
            {'+' $pad_num 1}
            " is in session."}}}}
{func
   fake_win
   ($num_stars)
   {if_else
      {game is_up}
      {if_else
         {band_0 band_performer}
         {{band_0 band_performer}
            win
            $num_stars}
         {{beatmatch active_player 0}
            win
            $num_stars}}
      {fake_event_win $num_stars}}}
{func
   fake_win_multi
   ($num_stars)
   {if
      {game is_up}
      {fake_win $num_stars}
      {set $cheat.win_event TRUE}}}
{func
   fake_achievement
   {if
      {==
         {ui current_screen}
         accomplishment_screen}
      {accomplishment_panel fake_earn_selected}
      {do
         ($msg
            {sprintf
               "Earned Achievement: %s"
               {accomplishment_panel selected_name}})
         {cheat_display show $msg}}}}
{func
   toggle_no_drum_fills
   {game
      foreach_local_player
      $p
      {if
         {&&
            $p
            {==
               {$p instrument}
               drum}}
         {cheat_display
            show_bool
            "Drum Fills "
            {$p toggle_no_fills}}}}}
{set $test_guitar_fx 4}
{func
   cycle_guitar_fx
   {'++' $test_guitar_fx}
   {if
      {== $test_guitar_fx 5}
      {set $test_guitar_fx 0}}
   {cheat_display
      show
      {sprint
         "guitar fx set to "
         {elem
            (wah flanger delay chorus none)
            $test_guitar_fx}}}
   {handle
      (beatmatch
         foreach_active_player
         $p
         {handle
            ($p update_guitar_fx)})}}
{func
   cheat_toggle_difficulty
   {do
      ($new_diff -1)
      {user_mgr
         foreach_local_user
         $user
         {if
            {== $new_diff -1}
            {set
               $new_diff
               {'+'
                  {$user get_difficulty}
                  1}}
            {set
               $new_diff
               {mod
                  $new_diff
                  {size
                     (DIFF_SYMBOLS)}}}
            {cheat_display
               show
               {sprint
                  "New Difficulty Set: "
                  {elem
                     (DIFF_SYMBOLS)
                     $new_diff}}}}
         {$user set_difficulty $new_diff}}}}
{set $drum_fill_type kFillsDeployGemAndInvisible}
{func
   cycle_drum_fills
   {set
      $drum_fill_type
      {'+' $drum_fill_type 1}}
   {if
      {== $drum_fill_type 3}
      {set $drum_fill_type 1}}
   {cheat_display
      show
      {sprint
         "drum deploy: "
         {switch
            $drum_fill_type
            (kFillsRegular
               "fills")
            (kFillsDeployGemAndDim
               "deploy gem + dim")
            (kFillsDeployGemAndInvisible
               "deploy gem + invisible")}}}}
{func
   display_postprocs
   {if
      $p9director
      {$p9director cur_postprocs $a $b $blend}
      {if_else
         {== $a $b}
         {cheat_display
            show
            {sprint
               "Current post-proc: "
               $a}}
         {do
            ($pct
               {int
                  {'*' $blend 100}})
            {cheat_display
               show
               {sprint
                  "Current post-proc: "
                  $a
                  " ("
                  $pct
                  "%) "
                  $b
                  " ("
                  {- 100 $pct}
                  "%)"}}}}}}
{set $no_pass_sounds FALSE}
{func
   toggle_pass_sounds
   {set
      $no_pass_sounds
      {! $no_pass_sounds}}
   {cheat_display
      show
      {sprint
         "pass sounds now "
         {if_else
            $no_pass_sounds
            "off"
            "on"}}}
   {if
      {exists beatmatch}
      {band_0 set_no_pass_sounds $no_pass_sounds}}}
{set $drop_all_packets FALSE}
{func
   toggle_drop_all_packets
   {set
      $drop_all_packets
      {! $drop_all_packets}}
   {cheat_display
      show
      {sprint
         "packets "
         {if_else
            $drop_all_packets
            "dropped"
            "back"}}}
   {if_else
      $drop_all_packets
      {emulator set_dropprob 100 100}
      {emulator set_dropprob 0 0}}}
{set $auto_hopos FALSE}
{func
   toggle_auto_hopos
   {set
      $auto_hopos
      {! $auto_hopos}}
   {cheat_display
      show
      {sprint
         "auto hopos "
         {if_else
            $auto_hopos
            "on"
            "off"}}}}