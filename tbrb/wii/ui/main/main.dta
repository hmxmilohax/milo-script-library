{new
   UIPanel
   main_panel
   (file
      [dyn_file])
   (focus button_01.btn)
   (dyn_file
      "main.milo")
   (load
      {content_mgr start_refresh})
   #ifdef HX_WII
   (allow_home_menu TRUE)
   #endif
   (enter
      {platform_mgr
         add_sink
         $this
         (connection_status_changed)}
      {server
         add_sink
         $this
         (server_status_changed)}
      {achievements set_allow_achievements TRUE}
      {session clear}
      {song_offer_provider clear_saved_highlight}
      {story clear_performer}
      #ifdef HX_WII
      {$this free_wii_remotes}
      #endif
      {gamemode set_mode init}
      {$this update_motd}
      {meta music_start})
   (exit
      {platform_mgr remove_sink $this connection_status_changed}
      {server remove_sink $this server_status_changed})
   (SELECT_MSG
      {do
         ($name
            {$component get text_token})
         {if
            {$this can_exit $user $name}
            {unless
               {$this try_submenu $name $user}
               {$this on_select $name $user}}}})
   (connection_status_changed
      {$this update_extras_buttons})
   (server_status_changed
      {$this update_extras_buttons})
   (last_main_screen main_screen)
   (motd_done FALSE)
   (motd_message
      "")
   (set_motd
      ($message)
      {set
         [motd_message]
         $message}
      {set
         [motd_done]
         TRUE}
      {if
         {$this is_up}
         {$this update_motd}})
   (motd
      [motd_message])
   (update_motd)
   (set_webcode
      ($message))
   (ok_with_leaderboards_offline FALSE)
   (invited_user_pad -1)
   (update_extras_buttons
      {if
         {$this at_menu extras}
         #ifdef HX_PS3
         {if_else
            {server is_connected}
            {$this
               enable
               {$this find_button check_invites}}
            {$this
               disable
               {$this find_button check_invites}}}
         #endif
         #ifdef HX_XBOX
         {if_else
            {platform_mgr is_in_party}
            {$this
               enable
               {$this find_button party_options}}
            {$this
               disable
               {$this find_button party_options}}}
         #endif})
   (slot 0)
   (user '')
   (update_training_buttons
      {if
         {$this at_menu training}
         {if_else
            {gamecfg is_instrument_connected drum}
            {$this
               enable
               {$this find_button drum_trainer}}
            {$this
               disable
               {$this find_button drum_trainer}}}})
   (add_local_user_result_msg
      ($success $user)
      {session_mgr remove_sink $this add_local_user_result_msg}
      {user_mgr
         set_slot
         [user]
         [slot]}
      {user_mgr
         foreach_user
         $user_cur
         {$user_cur
            set_track_type
            {$user_cur get_controller_sym}}}
      {input_mgr set_limit kLimitSession}
      {ui
         goto_screen
         {gamemode get first_screen}})
   (JOYPAD_CONNECT_MSG
      {$this update_training_buttons})
   (difficulty easy)
   (at_menu
      ($name)
      {==
         {header.lbl get text_token}
         $name})
   (setup_buttons
      ($menu)
      {if_else
         {==
            {type
               {elem $menu 0}}
            kDataArray}
         {header.lbl
            set
            text_token
            {elem
               {elem $menu 0}
               0}}
         {header.lbl
            set
            text_token
            {elem $menu 0}}}
      {foreach_int
         $i
         1
         {size $menu}
         {do
            ($node
               {elem $menu $i})
            ($btn
               {buttons.set
                  get
                  (objects
                     {- $i 1})})
            {$this enable $btn}
            {$btn set_showing TRUE}
            {$btn
               set
               text_token
               {if_else
                  {==
                     {type $node}
                     kDataArray}
                  {if_else
                     {==
                        {type
                           {elem $node 0}}
                        kDataArray}
                     {elem
                        {elem $node 0}
                        0}
                     {elem $node 0}}
                  $node}}}}
      {foreach_int
         $i
         {-
            {size $menu}
            1}
         {buttons.set
            size
            (objects)}
         {do
            ($btn
               {buttons.set
                  get
                  (objects $i)})
            {$this disable $btn}
            {$btn set_showing FALSE}}}
      {button_shift.tnm
         set_frame
         {size $menu}})
   (find_button
      ($name)
      {do
         ($ret_btn NULL)
         {foreach_int
            $i
            0
            {buttons.set
               size
               (objects)}
            {do
               ($btn
                  {buttons.set
                     get
                     (objects $i)})
               {if
                  {==
                     {$btn get text_token}
                     $name}
                  {set $ret_btn $btn}}}}
         $ret_btn})
   (try_submenu
      ($name $user)
      {do
         ($screen
            {ui current_screen})
         ($current
            {$screen get current})
         ($menu
            {find_exists $current $name})
         ($next
            {$screen get next})
         {if_else
            $menu
            {do
               {$next set current $menu}
               {$this goto_submenu $name $next}
               TRUE}
            {do
               ($popup FALSE)
               {foreach_int
                  $i
                  1
                  {size $current}
                  {do
                     ($node
                        {elem $current $i})
                     {if
                        {&&
                           {==
                              {type $node}
                              kDataArray}
                           {==
                              {type
                                 {elem $node 0}}
                              kDataArray}
                           {==
                              {elem
                                 {elem $node 0}
                                 0}
                              $name}
                           {==
                              {elem
                                 {elem $node 0}
                                 1}
                              popup}}
                        {main_popup_swapper set dest main_screen_2_popup}
                        {main_screen_2_popup set last_focus FALSE}
                        {main_screen_2_popup set current $node}
                        {main_popup_bg_panel set screen $name}
                        {$this goto_submenu $name main_popup_swapper}
                        {set $popup TRUE}
                        {set $i 1000}}}}
               $popup}}})
   (on_select
      ($name $user)
      {switch
         $name
         (qp_local
            {gamemode set_mode qp_coop_local}
            {goto_after_network_connect matchmaking_screen FALSE})
         (qp_online
            {gamemode set_mode qp_coop_online}
            {goto_after_network_connect matchmaking_screen TRUE})
         (local_multi_tow
            {gamemode set_mode h2h_tug_of_war_local}
            {ui goto_screen matchmaking_screen})
         (player_match_tow
            {gamemode set_mode h2h_tug_of_war_unranked}
            {goto_after_network_connect matchmaking_screen TRUE})
         (easy
            {set
               [difficulty]
               easy}
            {ui goto_screen matchmaking_screen})
         (medium
            {set
               [difficulty]
               medium}
            {ui goto_screen matchmaking_screen})
         (hard
            {set
               [difficulty]
               hard}
            {ui goto_screen matchmaking_screen})
         (expert
            {set
               [difficulty]
               expert}
            {ui goto_screen matchmaking_screen})
         (local_multi_scoreduel
            {gamemode set_mode h2h_score_duel_local}
            {goto_after_network_connect matchmaking_screen FALSE})
         (player_match_scoreduel
            {gamemode set_mode h2h_score_duel_unranked}
            {goto_after_network_connect matchmaking_screen TRUE})
         (story_local
            {if_else
               {user_mgr is_any_user_signed_in_and_connected}
               {do
                  {gamemode set_mode story_local}
                  {goto_after_network_connect story_progress_sel_screen FALSE}}
               {do
                  {{ui current_screen}
                     register_user_confirm
                     $user}
                  {ui push_screen main_local_story_signin_screen}}})
         (story_online
            {if_else
               {user_mgr is_any_user_signed_in_and_connected}
               {do
                  {gamemode set_mode story_online}
                  {goto_after_network_connect story_progress_sel_screen TRUE}}
               {do
                  {{ui current_screen}
                     register_user_confirm
                     $user}
                  {ui push_screen main_online_story_signin_screen}}})
         (tutorials
            {set
               [user]
               $user}
            {set
               [slot]
               0}
            {switch
               {$user connected_controller_type}
               (kControllerDrum
                  {gamemode set_mode tutorial_drums}
                  {{gamemode get main_panel}
                     set_tutorial_user
                     $user})
               (kControllerGuitar
                  {gamemode set_mode tutorial_guitar}
                  {{gamemode get main_panel}
                     set_tutorial_user
                     $user})
               (kControllerVocals
                  {gamemode set_mode tutorial_vocals}
                  {{gamemode get main_panel}
                     set_tutorial_user
                     $user})}
            {session clear}
            {session_mgr
               add_sink
               $this
               (add_local_user_result_msg)}
            {session_mgr add_local_user $user})
         (practice_mode
            {gamemode set_mode practice}
            {set
               [user]
               $user}
            {switch
               {$user connected_controller_type}
               (kControllerDrum
                  {set
                     [slot]
                     kGameSlotDrum})
               (kControllerGuitar
                  {set
                     [slot]
                     kGameSlotGuitar0})
               (kControllerVocals
                  {set
                     [slot]
                     kGameSlotVocals})}
            {session_mgr
               add_sink
               $this
               (add_local_user_result_msg)}
            {session_mgr add_local_user $user})
         (drum_trainer_beats
            {set
               [user]
               $user}
            {set
               [slot]
               0}
            {gamemode set_mode drum_trainer_beats}
            {{gamemode get game_panel}
               set
               user
               [user]}
            {session clear}
            {session_mgr
               add_sink
               $this
               (add_local_user_result_msg)}
            {session_mgr add_local_user $user})
         (drum_trainer_ringo
            {set
               [user]
               $user}
            {set
               [slot]
               0}
            {gamemode set_mode drum_trainer_ringo}
            {{gamemode get game_panel}
               set
               user
               [user]}
            {session clear}
            {session_mgr
               add_sink
               $this
               (add_local_user_result_msg)}
            {session_mgr add_local_user $user})
         (drum_trainer_freestyle
            {set
               [user]
               $user}
            {set
               [slot]
               0}
            {gamemode set_mode drum_trainer_freestyle}
            {{gamemode get game_panel}
               set
               user
               [user]}
            {session clear}
            {session_mgr
               add_sink
               $this
               (add_local_user_result_msg)}
            {session_mgr add_local_user $user})
         (gameplay
            {warn_no_signin_goto_screen options_gameplay_screen $user})
         (global_options
            {ui goto_screen global_options_screen})
         (av_settings
            {ui goto_screen options_console_screen})
         (options_managedata
            {if_else
               {&&
                  {platform_mgr is_user_signed_in $user}
                  {!
                     {platform_mgr is_user_a_guest $user}}}
               {do
                  {input_mgr set_user $user}
                  {ui goto_screen manage_data_screen}}
               {do
                  {manage_data_need_to_sign_in set signing_in_user $user}
                  {ui push_screen manage_data_need_to_sign_in}}})
         (calibration
            {ui goto_screen cal_welcome_screen})
         (lb_solo
            {gamemode set_mode community_leaderboards}
            {leaderboards set_type kPlayerSong}
            {ui goto_screen leaderboards_seltrack_screen})
         (lb_band
            {gamemode set_mode community_leaderboards}
            {leaderboards set_type kPlayerSong}
            {leaderboards set_score_type kScoreBand}
            {song_offer_provider set is_leaderboards TRUE}
            {ui goto_screen lb_song_select_screen})
         (lb_challenges
            {gamemode set_mode community_leaderboards}
            {leaderboards set_type kPlayerSong}
            {leaderboards set_score_type kScoreBand}
            {ui goto_screen lb_chapter_select_screen})
         (lb_tug_of_war
            {gamemode set_mode community_leaderboards}
            {leaderboards set_band_user $user}
            {leaderboards set_type kTugOfWar}
            {ui goto_screen leaderboards_seltrack_screen})
         (lb_score_duel
            {gamemode set_mode community_leaderboards}
            {leaderboards set_band_user $user}
            {leaderboards set_type kScoreDuel}
            {ui goto_screen leaderboards_seltrack_screen})
         (accomplishments
            {if_else
               {&&
                  {platform_mgr is_user_signed_in $user}
                  {!
                     {platform_mgr is_user_a_guest $user}}}
               {do
                  {accomplishment_panel set user $user}
                  {ui goto_screen accomplishment_screen}}
               {do
                  {{ui current_screen}
                     register_user_confirm
                     $user}
                  {accomplishments_need_to_sign_in
                     set
                     confirm_clear_screen
                     {ui current_screen}}
                  {ui push_screen accomplishments_need_to_sign_in}}})
         (credits
            {ui goto_screen credits_screen})
         #ifdef HX_WII
         (check_invites
            {gamemode set_mode online_options}
            {set
               [invited_user_pad]
               {$user get_pad_num}}
            {ui goto_screen mailbox_screen})
         (manage_friends
            {gamemode set_mode online_options}
            {ui goto_screen main_manage_friends_screen})
         (change_nickname
            {ui goto_screen change_username_screen})
         #else
         (check_invites
            {set
               [invited_user_pad]
               {$user get_pad_num}}
            {ui goto_screen mailbox_screen})
         #endif
         (party_options
            {if_else
               {platform_mgr is_user_signed_into_live $user}
               {if
                  {!
                     {platform_mgr show_user_party $user}}
                  {ui push_screen error_showing_party_ui_dialog_screen}}
               {do
                  {{ui current_screen}
                     register_user_confirm
                     $user}
                  {party_ui_need_to_sign_in
                     set
                     confirm_clear_screen
                     {ui current_screen}}
                  {ui push_screen party_ui_need_to_sign_in}}})
         (music_store
            #ifdef HX_XBOX
            {if_else
               {'||'
                  {!
                     {platform_mgr is_user_signed_into_live $user}}
                  {platform_mgr is_user_a_guest $user}}
               {do
                  {main_store_signin_screen set signing_in_user $user}
                  {ui push_screen main_store_signin_screen}}
               {do
                  {input_mgr set_user $user}
                  {ui push_screen main_store_find_cache_screen}}}
            #else
            #ifdef HX_PS3
            {input_mgr set_user $user}
            {gamemode set_mode store}
            {ui goto_screen store_enter_network_screen}
            #else
            #ifdef HX_WII
            {memcardmgr
               add_sink
               $this
               (save_load_all_complete_msg)}
            {gamemode set_mode store}
            {goto_else_after_network_connect store_wii_enter_screen main_screen TRUE}
            #else
            {gamemode set_mode store}
            {ui goto_screen store_loading_screen}
            #endif
            #endif
            #endif)})
   #ifdef HX_WII
   (save_load_all_complete_msg
      {if
         {==
            {main_store_create_cache_screen get cache_just_created}
            TRUE}
         {main_store_create_cache_screen set cache_just_created FALSE}
         {if_else
            {memcardmgr vf_cache_exists}
            {do
               {gamemode set_mode store}
               {script_task
                  kTaskUISeconds
                  (delay 1.0e-2)
                  (script
                     {goto_else_after_network_connect store_wii_enter_screen main_screen TRUE})}}
            {do
               {notify
                  "Unable to create Music Store cache!"}
               {script_task
                  kTaskUISeconds
                  (delay 1.0e-2)
                  (script
                     {ui push_screen main_store_create_cache_screen})}}}}
      {memcardmgr remove_sink $this save_load_all_complete_msg}
      TRUE)
   #endif
   #ifdef USE_VK
   (VIRTUAL_KEYBOARD_RESULT_MSG
      {if
         {&&
            $ok
            $this
            {!
               {==
                  $text
                  ""}}}
         {do
            {break}
            {server logout}
            {server set_new_username $text}
            {server_connect_panel set username $text}
            {goto_after_network_connect main_screen_2_popup TRUE}}}
      {synth keyboard_pause_voices FALSE})
   #endif
   (on_enter
      ($name)
      {switch
         $name
         (band_quickplay
            {gamemode set_mode init}
            {if
               {profile_mgr get_all_unlocked}
               {$this
                  disable
                  {$this find_button qp_online}}})
         (tug_of_war
            {gamemode set_mode init}
            {if
               {profile_mgr get_all_unlocked}
               {$this
                  disable
                  {$this find_button player_match_tow}}
               #ifdef HX_XBOX
               {$this
                  disable
                  {$this find_button ranked_match_tow}}
               {{$this find_button ranked_match_tow}
                  set_showing
                  FALSE}
               #endif})
         (ranked_match_tow
            {gamemode set_mode h2h_tug_of_war_ranked})
         (score_duel
            {gamemode set_mode init}
            {if
               {profile_mgr get_all_unlocked}
               {$this
                  disable
                  {$this find_button player_match_scoreduel}}
               #ifdef HX_XBOX
               {$this
                  disable
                  {$this find_button ranked_match_scoreduel}}
               {{$this find_button ranked_match_scoreduel}
                  set_showing
                  FALSE}
               #endif})
         (ranked_match_scoreduel
            {gamemode set_mode h2h_score_duel_ranked})
         (story
            {gamemode set_mode init})
         (training
            {session clear}
            {input_mgr set_limit kLimitNone}
            {$this update_training_buttons})
         (options
            {input_mgr set_user ''}
            {autosave})
         (extras
            {$this update_extras_buttons}
            {leaderboards clear_filter})
         (online_options
            {gamemode set_mode online_options})
         (leaderboards
            #ifdef HX_XBOX
            {if
               {leaderboards get_offline}
               {$this
                  disable
                  {$this find_button lb_tug_of_war}}
               {$this
                  disable
                  {$this find_button lb_score_duel}}}
            #endif
            {leaderboards set_highlight_sym ''}
            {leaderboards clear_type}
            {autosave}
            {do
               ($dir
                  {background_panel loaded_dir})
               {if
                  $dir
                  {$dir change_view main_1}}})})
   (can_exit
      ($user $exit_to)
      {switch
         {{ui current_screen}
            get_header}
         (quickplay
            {if_else
               {gamecfg is_missing_mic $user FALSE}
               {do
                  {vocalist_must_have_mic_screen set message solo_vocalist_needs_mic}
                  {ui push_screen vocalist_must_have_mic_screen}
                  FALSE}
               TRUE})
         (training
            {if_else
               {&&
                  {gamecfg is_missing_mic $user FALSE}
                  {!
                     {== $exit_to drum_trainer}}}
               {do
                  {vocalist_must_have_mic_screen set message solo_vocalist_needs_mic}
                  {ui push_screen vocalist_must_have_mic_screen}
                  FALSE}
               TRUE})
         (drum_trainer
            {if_else
               {!=
                  {$user connected_controller_type}
                  kControllerDrum}
               {do
                  {ui push_screen drum_trainer_non_drum_warning_screen}
                  FALSE}
               TRUE})
         TRUE})
   (goto_submenu
      ($name $next_screen)
      {switch
         $name
         (ranked_match_tow
            {goto_after_network_connect $next_screen TRUE})
         (ranked_match_scoreduel
            {goto_after_network_connect $next_screen TRUE})
         (extras
            {leaderboards clear_type}
            {leaderboards set_offline FALSE}
            {set
               [ok_with_leaderboards_offline]
               FALSE}
            #ifdef HX_WII
            {ui goto_screen $next_screen}
            #else
            {goto_after_network_connect $next_screen FALSE}
            #endif)
         #ifdef HX_WII
         (online_options
            {gamemode set_mode online_options}
            {goto_after_network_connect $next_screen TRUE})
         #endif
         (leaderboards
            {cond
               ([ok_with_leaderboards_offline]
                  {$this goto_leaderboards $next_screen})
               ({'||'
                     {!
                        {platform_mgr is_connected}}
                     {!=
                        {rock_central state}
                        kRCOnline}}
                  {main_leaderboard_offline_screen set following_screen $next_screen}
                  #ifdef HX_WII
                  {leaderboards set_offline TRUE}
                  {goto_leaderboards_after_network_connect $next_screen}
                  #else
                  {leaderboards set_offline TRUE}
                  {ui push_screen main_leaderboard_offline_screen}
                  #endif)
               (TRUE
                  {$this goto_leaderboards $next_screen})})
         {ui goto_screen $next_screen}})
   (goto_leaderboards
      ($next_screen)
      {if_else
         {leaderboards get_offline}
         {ui reset_screen $next_screen}
         {goto_after_network_connect $next_screen FALSE}})
   (setup_menu_for_current_mode
      {do
         ($root
            {elem
               {find $syscfg main_menu}
               1})
         {cond
            ({gamemode in_mode qp_coop}
               {do
                  ($qp
                     {find $root quickplay})
                  {main_screen set last_focus quickplay}
                  {main_screen_2 set current $qp}
                  {main_screen_2 set last_focus band_quickplay}
                  {main_screen_3
                     set
                     current
                     {find $qp band_quickplay}}
                  {main_screen_3 set last_focus qp_online}
                  {main_panel set last_main_screen main_screen_3}
                  {main_panel
                     set
                     dyn_file
                     "main.milo"}})
            ({gamemode in_mode h2h_tug_of_war}
               {do
                  ($qp
                     {find $root quickplay})
                  {main_screen set last_focus quickplay}
                  {main_screen_2 set current $qp}
                  {main_screen_2 set last_focus tug_of_war}
                  {main_screen_3
                     set
                     current
                     {find $qp tug_of_war}}
                  {main_screen_3 set last_focus player_match_tow}
                  {main_panel set last_main_screen main_screen_3}
                  {main_panel
                     set
                     dyn_file
                     "main.milo"}})
            ({gamemode in_mode h2h_score_duel}
               {do
                  ($qp
                     {find $root quickplay})
                  {main_screen set last_focus quickplay}
                  {main_screen_2 set current $qp}
                  {main_screen_2 set last_focus score_duel}
                  {main_screen_3
                     set
                     current
                     {find $qp score_duel}}
                  {main_screen_3 set last_focus player_match_scoreduel}
                  {main_panel set last_main_screen main_screen_3}
                  {main_panel
                     set
                     dyn_file
                     "main.milo"}})
            ({gamemode in_mode story}
               {main_screen set last_focus story}
               {main_screen_2
                  set
                  current
                  {find $root story}}
               {main_screen_2 set last_focus story_online}
               {main_panel set last_main_screen main_screen_2}
               {main_panel
                  set
                  dyn_file
                  "main.milo"})
            ({gamemode in_mode practice}
               {do
                  ($training '')
                  {foreach_int
                     $i
                     1
                     {size $root}
                     {do
                        ($node
                           {elem $root $i})
                        {if
                           {&&
                              {==
                                 {type $node}
                                 kDataArray}
                              {==
                                 {type
                                    {elem $node 0}}
                                 kDataArray}
                              {==
                                 {elem
                                    {elem $node 0}
                                    0}
                                 training}
                              {==
                                 {elem
                                    {elem $node 0}
                                    1}
                                 popup}}
                           {set $training $node}
                           {set $i 1000}}}}
                  {main_screen set last_focus training}
                  {main_screen_2_popup set current $training}
                  {main_screen_2_popup set last_focus practice_mode}
                  {main_panel set last_main_screen main_screen_2_popup}
                  {main_panel
                     set
                     dyn_file
                     "main_popup.milo"}
                  {main_popup_bg_panel set screen training}})
            {notify
               {sprintf
                  "Not transitioning to a known mode; please tell Fitzy."}}}})}
#define COMMON_MAIN_SCREEN
((focus main_panel)
   (current
      ())
   (helpbar
      ((confirm helpbar_select)
         (cancel helpbar_back)))
   (last_focus FALSE)
   (enter
      {if
         {&&
            {== $this main_screen}
            {==
               {size
                  [current]}
               0}}
         {set
            [current]
            {elem
               {find $syscfg main_menu}
               1}}}
      {main_panel
         setup_buttons
         [current]}
      {main_panel set last_main_screen $this}
      {if_else
         [last_focus]
         {do
            ($btn
               {main_panel
                  find_button
                  [last_focus]})
            {main_panel set_focus $btn}
            {$btn skip_to_focused}}
         {main_panel
            set_focus
            {{main_panel find buttons.set}
               get
               (objects 0)}}}
      {main_panel
         on_enter
         {$this get_header}}
      {{main_panel find enter.trg}
         trigger})
   (exit
      {{main_panel find exit.trg}
         trigger})
   (SELECT_MSG
      {set
         [last_focus]
         {$component get text_token}}
      {if
         [next]
         {[next]
            set
            last_focus
            FALSE}}
      kDataUnhandled)
   (get_header
      {do
         ($first
            {elem
               [current]
               0})
         {if_else
            {==
               {type $first}
               kDataArray}
            {elem $first 0}
            $first}}))
{new
   AutoloadScreen
   main_screen
   COMMON_MAIN_SCREEN
   (panels meta background_panel main_panel)
   (background_view main_1)
   (next main_screen_2)
   (back splash_screen)
   (TRANSITION_COMPLETE_MSG
      {profile_mgr purge_old_data}
      {if
         {&&
            {!
               {ui_event_mgr has_active_transition_event}}
            {!
               {ui in_transition}}
            {==
               {ui current_screen}
               $this}}
         {autosave}}
      {helpbar
         set_config
         ((confirm helpbar_select)
            (cancel helpbar_back))}
      kDataUnhandled)}
{new
   AutoloadScreen
   main_screen_2
   COMMON_MAIN_SCREEN
   (panels meta background_panel main_panel)
   (background_view main_2)
   (next main_screen_3)
   (back main_screen)}
{new
   AutoloadScreen
   main_screen_3
   COMMON_MAIN_SCREEN
   (panels meta background_panel main_panel)
   (background_view main_3)
   (next main_screen_4)
   (back main_screen_2)}
{new
   AutoloadScreen
   main_screen_4
   COMMON_MAIN_SCREEN
   (panels meta background_panel main_panel)
   (background_view main_3)
   (next FALSE)
   (back main_screen_3)}
{new
   BandScreen
   main_popup_swapper
   (panels meta background_panel)
   (helpbar
      ((min_height 100)))
   (dest main_screen)
   (TRANSITION_COMPLETE_MSG
      {if_else
         {'||'
            {==
               [dest]
               main_screen_2_popup}
            {==
               [dest]
               main_screen_3_popup}}
         {main_panel
            set
            dyn_file
            "main_popup.milo"}
         {main_panel
            set
            dyn_file
            "main.milo"}}
      {ui
         goto_screen
         [dest]}
      {set
         [dest]
         main_screen})}
{new
   UIPanel
   main_popup_bg_panel
   (file
      "main_popup_bg.milo")
   #ifdef HX_WII
   (allow_home_menu TRUE)
   #endif
   (screen '')
   (enter
      {options_art.grp
         set_showing
         {==
            [screen]
            options}}
      {extras_art.grp
         set_showing
         {==
            [screen]
            extras}}
      {training_art.grp
         set_showing
         {==
            [screen]
            training}}
      #ifdef HX_WII
      {online_art.grp
         set_showing
         {==
            [screen]
            online_options}}
      #endif)}
{new
   AutoloadScreen
   main_screen_2_popup
   COMMON_MAIN_SCREEN
   (panels meta background_panel main_popup_bg_panel main_panel)
   (next main_screen_3_popup)
   (back main_popup_swapper)}
{new
   AutoloadScreen
   main_screen_3_popup
   COMMON_MAIN_SCREEN
   (panels meta background_panel main_popup_bg_panel main_panel)
   (next FALSE)
   (back main_screen_2_popup)}
{new
   UIPanel
   credits_pause_panel
   (file
      "credits_pause.milo")
   (focus
      "resume.btn")
   (hint_start_time 0)
   (hint_timeout 3)
   (hint_shown FALSE)
   (enter
      {pause_hint_icon.lbl attach_to_label pause_hint.lbl TRUE 6})
   (show_hint
      {$this set hint_shown TRUE}
      {$this
         set
         hint_start_time
         {taskmgr ui_seconds}}
      {fade_pausehint.anim
         animate
         (range
            {fade_pausehint.anim frame}
            {fade_pausehint.anim end_frame})})
   (hide_hint
      {$this set hint_shown FALSE}
      {fade_pausehint.anim
         animate
         (range
            {fade_pausehint.anim frame}
            {fade_pausehint.anim start_frame})})
   (show_self
      {$this hide_hint}
      {$this
         set_focus
         "resume.btn"}
      {fade.anim animate})
   (hide_self
      {fade.anim stop_animation}
      {fade.anim set_frame 0})
   (SELECT_DONE_MSG
      {if
         {$this showing}
         {switch
            $component
            (resume.btn
               {credits_screen handle_unpause})
            (skip.btn
               {credits_panel credits_done})}})
   (poll
      {if
         [hint_shown]
         {if
            {>
               {-
                  {taskmgr ui_seconds}
                  [hint_start_time]}
               [hint_timeout]}
            {$this hide_hint}}})}
{new
   CreditsPanel
   credits_panel
   (file
      "credits.milo")
   (focus
      "credits.lst")
   (target_screen '')
   (credits_done
      {if_else
         {gamemode in_mode story}
         {do
            {story handle_credits_finished}
            {ui
               goto_screen
               {get_story_destination_screen story_chapter_screen}}}
         {ui goto_screen MAIN_MENU_RETURN_SCREEN}})}
{new
   BandScreen
   credits_screen
   (panels meta credits_panel credits_pause_panel)
   (focus credits_panel)
   (scroll_sfx FALSE)
   (is_menu_shown FALSE)
   (enter
      {$this handle_unpause}
      {meta music_stop}
      {platform_mgr disable_xmp}
      {platform_mgr
         add_sink
         $this
         (ui_changed)})
   (exit
      {platform_mgr remove_sink $this ui_changed})
   (handle_pause
      {$this set is_menu_shown TRUE}
      {if
         {session is_local}
         {credits_panel pause_panel TRUE}}
      {credits_pause_panel show_self}
      {$this set_focus_panel credits_pause_panel})
   (handle_unpause
      {$this set is_menu_shown FALSE}
      {if
         {session is_local}
         {credits_panel pause_panel FALSE}}
      {credits_pause_panel hide_self}
      {$this set_focus_panel credits_panel})
   (BUTTON_DOWN_MSG
      {if_else
         {== $action kAction_Start}
         {do
            {if_else
               [is_menu_shown]
               {$this handle_unpause}
               {$this handle_pause}}
            {play_instr_sfx $user button_back}
            kDataUnhandled}
         {if_else
            [is_menu_shown]
            {do
               {if
                  {== $action kAction_Cancel}
                  {play_instr_sfx $user button_back}
                  {$this handle_unpause}}
               kDataUnhandled}
            {if_else
               {$this is_cheat_on}
               kDataUnhandled
               {do
                  {credits_pause_panel show_hint}
                  0}}}})
   (UI_CHANGED_MSG
      {if
         {&&
            {platform_mgr guide_showing}
            {!
               [is_menu_shown]}}
         {$this handle_pause}})}
{new
   MoviePanel
   attract_movie_panel
   (preload FALSE)
   (loop FALSE)
   (audio TRUE)
   (update_presence TRUE)
   (videos attract)
   (movie_done
      {if
         {==
            {ui current_screen}
            attract_screen}
         {ui goto_screen splash_screen}})
   (BUTTON_DOWN_MSG
      {if
         {==
            {ui current_screen}
            attract_screen}
         {if
            {'||'
               {== $action kAction_Start}
               {== $action kAction_Confirm}
               {== $action kAction_Cancel}}
            {ui goto_screen splash_screen}}})}
{new
   UIPanel
   attract_overlay_panel
   (file
      "attract_overlay.milo")}
{new
   BandScreen
   attract_screen
   (panels meta attract_movie_panel attract_overlay_panel)
   (focus attract_movie_panel)
   (enter)}
{new
   SigninScreen
   main_leaderboard_signin_screen
   (panels dialog_panel)
   (focus dialog_panel)
   (helpbar
      ((confirm helpbar_confirm)))
   (must_not_be_a_guest TRUE)
   (must_be_online TRUE)
   (must_be_multiplayer_capable FALSE)
   (handle_sign_outs FALSE)
   (limit_user_signin TRUE)
   (on_signed_into_guest)
   (on_not_online
      {ui pop_screen})
   (on_signed_in
      {leaderboards set_offline FALSE}
      {ui pop_screen})
   (enter
      {dialog_panel set_custom main_leaderboard_need_to_signin main_leaderboard_signin_button main_leaderboard_cancel_button opt1.btn})
   (exit
      {input_mgr clear_user})
   (SELECT_MSG
      {switch
         $component
         (opt1.btn
            {platform_mgr signin 1})
         (opt2.btn
            {main_panel set ok_with_leaderboards_offline TRUE}
            {ui pop_screen})})}
{new
   BandScreen
   main_leaderboard_offline_screen
   (panels dialog_panel)
   (helpbar
      ((confirm helpbar_confirm)))
   (following_screen '')
   (enter
      {dialog_panel
         set_ok
         {cond
            ({platform_mgr is_connected}
               #ifdef HX_WII
               leaderboards_not_available_connection
               #else
               leaderboards_not_available_rock_central
               #endif)
            (TRUE leaderboards_not_available_connection)}})
   (SELECT_MSG
      #ifdef HX_WII
      {leaderboards set_offline TRUE}
      #endif
      {main_panel set ok_with_leaderboards_offline TRUE}
      {ui
         pop_screen
         [following_screen]})}