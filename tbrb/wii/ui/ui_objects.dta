#include ..\config\macros.dta
(UIComponent
   (select_frames 15))
(BackgroundDir
   (description
      "Subclass of PanelDir, for a persistent shell background")
   (superclasses PanelDir)
   (allowed_dirs)
   (editor
      (new_view
         object
         (class RndDir)
         (help
            "Select a view to move to")
         (post_sync
            {$this
               change_view_dir
               [new_view]
               FALSE}
            {if
               [isolate_view]
               {$this
                  hide_non_adjacent_views
                  [current_view]}
               {milo invalidate_listers_and_trees}}))
      (adjacent_view
         object
         (help
            "Select an adjacent view to move to")
         (list
            {$this
               adjacent_views
               [current_view]})
         (post_sync
            {$this
               change_view_dir
               [adjacent_view]
               FALSE}
            {if
               [isolate_view]
               {$this
                  hide_non_adjacent_views
                  [current_view]}
               {milo invalidate_listers_and_trees}}))
      (replay_shot
         script
         (help
            "Replay the last transition")
         (script
            {do
               ($current_view
                  [current_view])
               {$this
                  change_view_dir
                  [previous_view]
                  TRUE}
               {$this change_view_dir $current_view FALSE}}
            {if
               [isolate_view]
               {$this
                  hide_non_adjacent_views
                  [current_view]}
               {milo invalidate_listers_and_trees}}))
      (isolate_view
         bool
         (help
            "Hide views not directly reachable from the current view")
         (post_sync
            {if_else
               [isolate_view]
               {$this
                  hide_non_adjacent_views
                  [current_view]}
               {$this show_all_views}}
            {milo invalidate_listers_and_trees}))
      (view_to_snap_to
         object
         (class RndDir)
         (help
            "Select a view to snap Camshots to"))
      (snap_shots_to_view
         script
         (script
            {$this
               snap_shots_to_view
               [view_to_snap_to]})
         (help
            "Snap associated CamShots to the selected view"))
      (shot_to_snap
         object
         (class CamShot)
         (help
            "Select a Camshot to snap"))
      (snap_shot
         script
         (help
            "Snap the selected Camshot to associated views")
         (script
            {$this
               snap_camshot
               [shot_to_snap]})))
   (types
      (shell
         (editor SHELL_EDITOR)
         (change_proxies
            {$this clear_proxies})
         SHELL_TYPE)))
(BandList
   (allowed_dirs PanelDir UIListDir RndDir)
   (types
      (spin
         (resource_file
            "resource/list_spin.milo"))
      (practice_section
         (resource_file
            "resource/list_practice_section.milo"))
      (song_select
         (resource_file
            "resource/list_song_select_browser.milo"))
      (song_select_setlist
         (resource_file
            "resource/list_song_select_setlist.milo"))
      (store_browser
         (resource_file
            "resource/list_store_browser.milo"))
      (store_filter
         (resource_file
            "resource/list_store_filter.milo"))
      (store_shortcut
         (resource_file
            "resource/list_store_shortcut.milo"))
      (gamertag_shortcut
         (resource_file
            "resource/list_gamertag_shortcut.milo"))
      (store_info
         (resource_file
            "resource/list_store_info.milo"))
      (store_song
         (resource_file
            "resource/list_store_song.milo"))
      (store_song_long
         (resource_file
            "resource/list_store_song_long.milo"))
      (venue
         (resource_file
            "resource/list_venue.milo"))
      (chapter_song
         (resource_file
            "resource/list_chapter_song.milo"))
      (chapter_challenge
         (resource_file
            "resource/list_chapter_challenge.milo"))
      (chapterchallenge_song
         (resource_file
            "resource/list_chapterchallenge_song.milo"))
      (chapter_unlock
         (resource_file
            "resource/list_chapter_unlock.milo"))
      (memorabilia_list
         (resource_file
            "resource/list_memorabilia.milo"))
      (prize_list
         (resource_file
            "resource/list_prizes.milo"))
      (media_list
         (resource_file
            "resource/list_media.milo"))
      (accomplishment_list
         (resource_file
            "resource/list_accomplishments.milo"))
      (accomplishment_entry_list
         (resource_file
            "resource/list_accomplishment_entry.milo"))
      (credits
         (resource_file
            "resource/list_credits.milo"))
      (leaderboards
         (resource_file
            "resource/list_leaderboards.milo"))
      (mini_leaderboard
         (resource_file
            "resource/list_mini_leaderboard.milo"))
      (gamertag
         (resource_file
            "resource/list_gamertag.milo"))
      (friends
         (resource_file
            "resource/list_friends.milo"))
      (friends_large
         (resource_file
            "resource/list_friends_large.milo"))
      (messages
         (resource_file
            "resource/list_messages.milo"))
      (messages_large
         (resource_file
            "resource/list_messages_large.milo"))
      (band_chooser
         (resource_file
            "resource/list_band_chooser.milo"))
      (saveselect_players
         (resource_file
            "resource/list_saveselect_players.milo"))
      (band_list_kick_invite
         (resource_file
            "resource/list_band_kick_invite.milo"))
      (gamertag_owner_chooser
         (resource_file
            "resource/list_gamertag_owner_chooser.milo"))
      (tutorial_level
         (resource_file
            "resource/list_tutorial_level.milo"))
      (calibration_mode
         (resource_file
            "resource/list_calibration_mode.milo"))))
#define LABEL_AND_BUTTON_TYPES
(#include ui_fonts.dta)
(BandLabel
   (allowed_dirs RndDir WorldDir)
   (init
      {$this set_type default})
   (types LABEL_AND_BUTTON_TYPES))
(BandButton
   (allowed_dirs PanelDir)
   (init
      {$this set_type default})
   (types LABEL_AND_BUTTON_TYPES))
(PlayerDiffIcon
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/chapter_diff_icons.milo")
         (player_meshes
            "01.mesh"
            "02.mesh"
            "03.mesh"
            "04.mesh")
         (player_mat
            "player.mat")
         (no_player_mat
            "player_none.mat")
         (diff_labels
            "easy.lbl"
            "medium.lbl"
            "hard.lbl"
            "expert.lbl"))))
(InstrumentDifficultyDisplay
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/instrument_difficulty_display.milo")
         (difficulty_anim
            "difficulty.anim")
         (vocal_part_mesh
            "vocal_part.mesh")
         (vocal_part1_mat
            "vocal_part1.mat")
         (vocal_part2_mat
            "vocal_part2.mat")
         (vocal_part3_mat
            "vocal_part3.mat")
         (instrument_label
            "instrument.lbl")
         (no_part_label
            "no_part.lbl")
         (anim_speed 3)
         (set_song
            ($song)
            {if
               {exists song_mgr}
               {$this
                  set
                  difficulty
                  {song_mgr
                     rank_tier_for_song
                     $song
                     [instrument_type]}}
               {$this
                  set
                  has_part
                  {song_mgr
                     part_plays_in_song
                     $song
                     [instrument_type]}}
               {if_else
                  {==
                     [instrument_type]
                     vocals}
                  {$this
                     set
                     num_vocal_parts
                     {song_mgr num_vocal_parts $song}}
                  {$this set num_vocal_parts 0}}})
         (set_setlist
            {if
               {exists song_mgr}
               {do
                  ($highest_difficulty -1)
                  ($most_vocal_parts 0)
                  ($has_part FALSE)
                  {foreach_int
                     $i
                     0
                     {meta_performer num_songs}
                     {do
                        ($song
                           {meta_performer indexed_song $i})
                        ($difficulty
                           {song_mgr
                              rank_tier_for_song
                              $song
                              [instrument_type]})
                        ($num_vocal_parts 0)
                        {if
                           {song_mgr
                              part_plays_in_song
                              $song
                              [instrument_type]}
                           {set $has_part TRUE}}
                        {if
                           {> $difficulty $highest_difficulty}
                           {set $highest_difficulty $difficulty}}
                        {if
                           {==
                              [instrument_type]
                              vocals}
                           {set
                              $num_vocal_parts
                              {song_mgr num_vocal_parts $song}}
                           {if
                              {> $num_vocal_parts $most_vocal_parts}
                              {set $most_vocal_parts $num_vocal_parts}}}}}
                  {$this set difficulty $highest_difficulty}
                  {$this set has_part $has_part}
                  {if_else
                     {==
                        [instrument_type]
                        vocals}
                     {$this set num_vocal_parts $most_vocal_parts}
                     {$this set num_vocal_parts 0}}}}))))
(StarDisplay
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/star_display.milo")
         (resource_stars_label
            "stars.lbl")
         (resource_star_icon_label
            "star_icon.lbl")
         (resource_stars_fraction_label
            "stars_fraction.lbl"))))
(MeterDisplay
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/meter_display.milo")
         (meter_label
            "meter.lbl")
         (meter_anim
            "meter.anim"))))
(MiniLeaderboardDisplay
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/mini_leaderboard_display.milo")
         (title_label
            "title.lbl")
         (leaderboard
            "leaderboard.lst")
         (reset_trigger
            "reset.trig")
         (fade_in_trigger
            "fade_in.trig")
         (fade_out_trigger
            "fade_out.trig")
         (pending_group
            "pending.grp")
         (failure_group
            "failure.grp"))))
(P9TexMesh
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/p9_tex_mesh.milo")
         (mesh
            "Mesh.mesh")
         (mat
            "Mat.mat")
         (tex
            "Tex.tex"))))
(MicInputArrow
   (allowed_dirs RndDir)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "resource/mic_input_arrow.milo")
         (arrow_groups
            "arrow0.grp"
            "arrow1.grp"
            "arrow2.grp")
         (connect_triggers
            "arrow0_connect.trig"
            "arrow1_connect.trig"
            "arrow2_connect.trig")
         (disconnect_triggers
            "arrow0_disconnect.trig"
            "arrow1_disconnect.trig"
            "arrow2_disconnect.trig")
         (level_anim
            "mic_level.anim")
         (connected_anim
            "arrow.anim"))))
(UIPicture
   (types
      (picture_albumart
         (tex_file
            "image/blank_album_art_keep.png"))))
(UISlider
   (init
      {$this set_type audio})
   (types
      (audio
         (resource_file
            "resource/slider_audio.milo")
         (vertical FALSE)
         (meshes
            ("pod.mesh"
               (normal
                  "slider_pod_normal.mat")
               (focused
                  "slider_pod_focused.mat")
               (disabled
                  "slider_pod_disabled.mat")
               (selected
                  "slider_pod_selected.mat"))
            ("slider.mesh"
               (normal
                  "slider_normal.mat")
               (focused
                  "slider_focused.mat")
               (disabled
                  "slider_disabled.mat")
               (selected
                  "slider_selected.mat"))))))
(RndDir
   (types
      #include font_library.dta))
(PanelDir
   (types
      (shell
         (editor SHELL_EDITOR)
         SHELL_TYPE)
      (chapter_select
         (editor SHELL_EDITOR)
         SHELL_TYPE
         (change_proxies
            {unless
               $p9_validate_mode
               #ifndef HX_WII
               {handle
                  (story_chapter_panel initialize_proxies $this)}
               #endif}))))
(TexMovie
   (types
      (shell
         (change_file
            {if_else
               {exists game}
               {random_elem
                  ("videos/shell1.bik"
                     "videos/shell2.bik"
                     "videos/shell3.bik")}
               kDataUnhandled}))))
(UIButton
   (allowed_dirs))
(UIList
   (allowed_dirs))
(UILabel
   (allowed_dirs))
(BandHighlight
   (allowed_dirs))
(BandSwatch
   (allowed_dirs))