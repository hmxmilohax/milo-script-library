(VocalTrackDir
   (types
      (vocal_harmony_prototype
         (editor)
         (toggle_lead_lyrics
            {set
               [lead_lyrics]
               {!
                  [lead_lyrics]}}
            {$this hot_refresh}
            {if_else
               [lead_lyrics]
               {cheat_display
                  show
                  "Lead lyrics ON"}
               {cheat_display
                  show
                  "Lead lyrics OFF"}})
         (toggle_harmony_lyrics
            {set
               [harmony_lyrics]
               {!
                  [harmony_lyrics]}}
            {$this hot_refresh}
            {if_else
               [harmony_lyrics]
               {cheat_display
                  show
                  "Harmony lyrics ON"}
               {cheat_display
                  show
                  "Harmony lyrics OFF"}})
         (toggle_pitch_window
            {set
               [pitch_window]
               {!
                  [pitch_window]}}
            {$this hot_refresh}
            {if_else
               [pitch_window]
               {cheat_display
                  show
                  "Pitch window ON"}
               {cheat_display
                  show
                  "Pitch window OFF"}})
         (cycle_pitch_guides
            {set
               [pitch_guides]
               {switch
                  [pitch_guides]
                  (none evenly_spaced)
                  (evenly_spaced harmonic)
                  (harmonic staff)
                  (staff keyboard)
                  (keyboard none)}}
            {cheat_display
               show
               {sprint
                  "pitch guides: "
                  {eval
                     [pitch_guides]}}}
            {$this hot_refresh})
         (toggle_now_bar_extent
            {set
               [now_bar_covers_lyrics]
               {!
                  [now_bar_covers_lyrics]}}
            {$this hot_refresh}
            {if_else
               [now_bar_covers_lyrics]
               {cheat_display
                  show
                  "now bar extent: whole track"}
               {cheat_display
                  show
                  "now bar extent: pitch window only"}})
         (nudge_pitch_window_size
            ($in_val)
            {if
               {>
                  [pitch_window_height]
                  {- $in_val}}
               {'+='
                  [pitch_window_height]
                  $in_val}}
            {$this hot_refresh}
            {cheat_display
               show
               {sprint
                  "Pitch Window size: "
                  [pitch_window_height]}})
         (hot_refresh
            {$this reset}
            {$this rebuild_hud})
         (tube_styles
            ())
         (tube_style_idx 0)
         (cycle_tube_style
            {if_else
               {==
                  0
                  {size
                     [tube_styles]}}
               {do
                  {$this
                     iterate_self
                     (Object tube_style)
                     $style
                     {insert_elem
                        [tube_styles]
                        {size
                           [tube_styles]}
                        $style}}
                  {set
                     [tube_style_idx]
                     0}}
               {do
                  {'++'
                     [tube_style_idx]}
                  {if
                     {>=
                        [tube_style_idx]
                        {size
                           [tube_styles]}}
                     {set
                        [tube_style_idx]
                        0}}}}
            {if_else
               {>
                  {size
                     [tube_styles]}
                  0}
               {do
                  {set
                     [tube_style]
                     {elem
                        [tube_styles]
                        [tube_style_idx]}}
                  {$this hot_refresh}
                  {cheat_display
                     show
                     {sprint
                        "Tube Style: "
                        {[tube_style]
                           name}}}}
               {cheat_display
                  show
                  "no tube styles found"}})
         (arrow_styles
            ())
         (arrow_style_idx 0)
         (cycle_arrow_style
            {if_else
               {==
                  0
                  {size
                     [arrow_styles]}}
               {do
                  {$this
                     iterate_self
                     (Object arrow_style)
                     $style
                     {insert_elem
                        [arrow_styles]
                        {size
                           [arrow_styles]}
                        $style}}
                  {set
                     [arrow_style_idx]
                     0}}
               {do
                  {'++'
                     [arrow_style_idx]}
                  {if
                     {>=
                        [arrow_style_idx]
                        {size
                           [arrow_styles]}}
                     {set
                        [arrow_style_idx]
                        0}}}}
            {if_else
               {>
                  {size
                     [arrow_styles]}
                  0}
               {do
                  {set
                     [arrow_style]
                     {elem
                        [arrow_styles]
                        [arrow_style_idx]}}
                  {$this
                     apply_arrow_style
                     [arrow_style]}
                  {cheat_display
                     show
                     {sprint
                        "Arrow Style: "
                        {[arrow_style]
                           name}}}}
               {cheat_display
                  show
                  "no arrow styles found"}})
         (font_styles
            ())
         (font_style_idx 0)
         (cycle_font_style
            {if_else
               {==
                  0
                  {size
                     [font_styles]}}
               {do
                  {$this
                     iterate_self
                     (Object font_style)
                     $style
                     {insert_elem
                        [font_styles]
                        {size
                           [font_styles]}
                        $style}}
                  {set
                     [font_style_idx]
                     0}}
               {do
                  {'++'
                     [font_style_idx]}
                  {if
                     {>=
                        [font_style_idx]
                        {size
                           [font_styles]}}
                     {set
                        [font_style_idx]
                        0}}}}
            {if_else
               {>
                  {size
                     [font_styles]}
                  0}
               {do
                  {set
                     [font_style]
                     {elem
                        [font_styles]
                        [font_style_idx]}}
                  {$this
                     apply_font_style
                     [font_style]}
                  {$this hot_refresh}
                  {cheat_display
                     show
                     {sprint
                        "Font Style: "
                        {[font_style]
                           name}}}}
               {cheat_display
                  show
                  "no font styles found"}})
         (beat_task_milo
            "")
         (kick_spotlight
            {do
               ($anim
                  {$this find spotlight.anim})
               ($time_til_next
                  {-
                     {taskmgr time_til_next 1 1.0e-3}
                     0.2})
               {if
                  {< $time_til_next 0}
                  {set
                     $time_til_next
                     {'+' $time_til_next 1}}}
               {if
                  {!=
                     [beat_task_milo]
                     ""}
                  {delete
                     [beat_task_milo]}}
               {set
                  [beat_task_milo]
                  {script_task
                     kTaskBeats
                     (name spotlightbeattask)
                     (delay $time_til_next)
                     (script
                        {kick_spotlight.trig trigger})}}
               {print
                  "starting spotlight anim\n"}})
         (smoothing_log 1)
         (increase_arrow_smoothing
            {'++'
               [smoothing_log]}
            {set
               [arrow_smoothing]
               {/
                  [smoothing_log]
                  {'+'
                     [smoothing_log]
                     1}}}
            {cheat_display
               show
               {sprint
                  "arrow smoothing: "
                  [arrow_smoothing]}})
         (decrease_arrow_smoothing
            {if
               {>
                  [smoothing_log]
                  0}
               {--
                  [smoothing_log]}
               {set
                  [arrow_smoothing]
                  {/
                     [smoothing_log]
                     {'+'
                        [smoothing_log]
                        1}}}}
            {cheat_display
               show
               {sprint
                  "arrow smoothing: "
                  [arrow_smoothing]}}))))
(Mesh
   (types
      (configurable_mesh
         (editor
            (left
               float
               (help
                  "left x value")
               (read_only TRUE))
            (right
               float
               (help
                  "right x value")
               (read_only TRUE))
            (height
               float
               (help
                  "height z value")
               (read_only TRUE)))
         (left -1)
         (right 1)
         (height 1))))
(Object
   (types
      (tube_style
         (editor
            (apply
               script
               (script
                  {$this apply}))
            (lead
               (indent
                  (lead_back
                     object
                     (class Mat)
                     (help
                        "the background mat for the lead vocal tube, if any"))
                  (lead_front
                     object
                     (class Mat)
                     (help
                        "the foreground mat for the lead vocal tube, if any"))
                  (lead_glow
                     object
                     (class Mat)
                     (help
                        "the glow mat for the lead vocal tube, if any"))
                  (lead_phoneme
                     object
                     (class Mat)
                     (help
                        "the phoneme mat for lead vocals"))
                  (lead_color
                     symbol
                     (list
                        (green yellow orange brown purple blue white)))))
            (harmony_1
               (indent
                  (harmony_1_back
                     object
                     (class Mat)
                     (help
                        "the background mat for the harmony 1 vocal tube, if any"))
                  (harmony_1_front
                     object
                     (class Mat)
                     (help
                        "the foreground mat for the harmony 1 vocal tube, if any"))
                  (harmony_1_glow
                     object
                     (class Mat)
                     (help
                        "the glow mat for the harmony 1 vocal tube, if any"))
                  (harmony_1_phoneme
                     object
                     (class Mat)
                     (help
                        "the phoneme mat for harmony 1 vocals"))
                  (harmony_1_color
                     symbol
                     (list
                        (green yellow orange brown purple blue white)))))
            (harmony_2
               (indent
                  (same_as_harmony_1
                     bool
                     (help
                        "if true, these are overridden by harmony_1"))
                  (harmony_2_back
                     object
                     (class Mat)
                     (hide
                        [same_as_harmony_1])
                     (help
                        "the background mat for the harmony 2 vocal tube, if any"))
                  (harmony_2_front
                     object
                     (class Mat)
                     (hide
                        [same_as_harmony_1])
                     (help
                        "the foreground mat for the harmony 2 vocal tube, if any"))
                  (harmony_2_glow
                     object
                     (class Mat)
                     (hide
                        [same_as_harmony_1])
                     (help
                        "the glow mat for the harmony 2 vocal tube, if any"))
                  (harmony_2_phoneme
                     object
                     (class Mat)
                     (help
                        "the phoneme mat for harmony 2 vocals"))
                  (harmony_2_color
                     symbol
                     (list
                        (green yellow orange brown purple blue white))
                     (hide
                        [same_as_harmony_1]))))
            (test_size
               float
               (help
                  "controls the sample tube width in milo"))
            (glow_alpha
               float
               (range 0 1)
               (help
                  "default alpha value for tube glow material.  Note that this will not affect spotlight glow, as this driven by a separate pulse anim."))
            (glow_size
               float
               (help
                  "the fixed size of the tube glow in terms of x and z")))
         (lead_back
            "")
         (lead_front
            "")
         (lead_glow
            "")
         (lead_phoneme
            "")
         (lead_color white)
         (harmony_1_back
            "")
         (harmony_1_front
            "")
         (harmony_1_glow
            "")
         (harmony_1_phoneme
            "")
         (harmony_1_color white)
         (harmony_2_back
            "")
         (harmony_2_front
            "")
         (harmony_2_glow
            "")
         (harmony_2_phoneme
            "")
         (harmony_2_color white)
         (same_as_harmony_1 FALSE)
         (test_size 0.15)
         (glow_size 0.15)
         (glow_alpha 0.3)
         (apply
            {{$this dir}
               set
               tube_style
               $this}
            {if
               {exists milo}
               {tubes_milo.grp set_showing TRUE}
               {tube_lead_front_1.line
                  set
                  mat
                  [lead_front]}
               {tube_lead_front_2.line
                  set
                  mat
                  [lead_front]}
               {tube_lead_back_1.line
                  set
                  mat
                  [lead_back]}
               {tube_lead_back_2.line
                  set
                  mat
                  [lead_back]}
               {tube_lead_glow_1.line
                  set
                  mat
                  [lead_glow]}
               {tube_lead_glow_2.line
                  set
                  mat
                  [lead_glow]}
               {tube_harm1_front_1.line
                  set
                  mat
                  [harmony_1_front]}
               {tube_harm1_front_2.line
                  set
                  mat
                  [harmony_1_front]}
               {tube_harm1_back_1.line
                  set
                  mat
                  [harmony_1_back]}
               {tube_harm1_back_2.line
                  set
                  mat
                  [harmony_1_back]}
               {tube_harm1_glow_1.line
                  set
                  mat
                  [harmony_1_glow]}
               {tube_harm1_glow_2.line
                  set
                  mat
                  [harmony_1_glow]}
               {if_else
                  [same_as_harmony_1]
                  {do
                     {tube_harm2_front_1.line
                        set
                        mat
                        [harmony_1_front]}
                     {tube_harm2_front_2.line
                        set
                        mat
                        [harmony_1_front]}
                     {tube_harm2_back_1.line
                        set
                        mat
                        [harmony_1_back]}
                     {tube_harm2_back_2.line
                        set
                        mat
                        [harmony_1_back]}
                     {tube_harm2_glow_1.line
                        set
                        mat
                        [harmony_1_glow]}
                     {tube_harm2_glow_2.line
                        set
                        mat
                        [harmony_1_glow]}}
                  {do
                     {tube_harm2_front_1.line
                        set
                        mat
                        [harmony_2_front]}
                     {tube_harm2_front_2.line
                        set
                        mat
                        [harmony_2_front]}
                     {tube_harm2_back_1.line
                        set
                        mat
                        [harmony_2_back]}
                     {tube_harm2_back_2.line
                        set
                        mat
                        [harmony_2_back]}
                     {tube_harm2_glow_1.line
                        set
                        mat
                        [harmony_2_glow]}
                     {tube_harm2_glow_2.line
                        set
                        mat
                        [harmony_2_glow]}}}
               {set
                  $tube
                  {'*'
                     [test_size]
                     2.0}}
               {set
                  $glow
                  {'*'
                     [glow_size]
                     2.0}}
               {tube_lead_front_1.line set width $tube}
               {tube_lead_front_2.line set width $tube}
               {tube_lead_back_1.line set width $tube}
               {tube_lead_back_2.line set width $tube}
               {tube_lead_glow_1.line set width $glow}
               {tube_lead_glow_2.line set width $glow}
               {tube_harm1_front_1.line set width $tube}
               {tube_harm1_front_2.line set width $tube}
               {tube_harm1_back_1.line set width $tube}
               {tube_harm1_back_2.line set width $tube}
               {tube_harm1_glow_1.line set width $glow}
               {tube_harm1_glow_2.line set width $glow}
               {tube_harm2_front_1.line set width $tube}
               {tube_harm2_front_2.line set width $tube}
               {tube_harm2_back_1.line set width $tube}
               {tube_harm2_back_2.line set width $tube}
               {tube_harm2_glow_1.line set width $glow}
               {tube_harm2_glow_2.line set width $glow}
               {tube_lead_spotlight.line set width $glow}
               {tube_harm1_spotlight.line set width $glow}
               {tube_harm2_spotlight.line set width $glow}
               {tube_harm1_glow_1.line set_showing 0}
               {tube_harm2_glow_2.line set_showing 0}
               {tube_lead_glow_2.line set_showing 0}
               {if
                  {!=
                     [lead_glow]
                     ""}
                  {[lead_glow]
                     set
                     alpha
                     [glow_alpha]}}
               {if
                  {!=
                     [harmony_1_glow]
                     ""}
                  {[harmony_1_glow]
                     set
                     alpha
                     [glow_alpha]}}
               {if
                  {!=
                     [harmony_2_glow]
                     ""}
                  {[harmony_2_glow]
                     set
                     alpha
                     [glow_alpha]}}
               {beat_anims.grp
                  animate
                  (loop 0 480)}}))
      (arrow_style
         (editor
            (apply
               script
               (script
                  {{$this dir}
                     apply_arrow_style
                     $this}))
            (arrow_A
               file
               (help
                  "proxy file for arrow A in this style")
               (ext
                  "Milo files"
                  milo))
            (arrow_B
               file
               (help
                  "proxy file for arrow B in this style")
               (ext
                  "Milo files"
                  milo))
            (arrow_C
               file
               (help
                  "proxy file for arrow C in this style")
               (ext
                  "Milo files"
                  milo)))
         (arrow_A
            "")
         (arrow_B
            "")
         (arrow_C
            ""))
      (font_style
         (editor
            (apply
               script
               (script
                  {{$this dir}
                     apply_font_style
                     $this}))
            (lead_text
               object
               (class Text))
            (lead_phoneme_text
               object
               (class Text))
            (harmony_text
               object
               (class Text))
            (harmony_phoneme_text
               object
               (class Text)))
         (lead_text
            "")
         (harmony_text
            "")
         (lead_phoneme_text
            "")
         (harmony_phoneme_text
            ""))))