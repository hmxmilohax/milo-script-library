(left
   (kPad_Tri
      "Game: Cycle Free Camera / Splash: Goto Framerate Test / Framerate Test: Restart"
      (filters game)
      {cond
         ({==
               {ui current_screen}
               splash_screen}
            {ui goto_screen frame_rate_screen})
         ({==
               {ui current_screen}
               frame_rate_game_screen}
            {ui push_screen meta_loading_return_to_frame_rate_screen})
         (TRUE
            {cycle_free_camera})}))
(right
   (kPad_Select
      "Fake Win with 3 stars"
      (filters game)
      {fake_win 3})
   (kPad_Square
      "Print Current Screen"
      (filters meta)
      {handle
         ({ui current_screen}
            print)}))
(keyboard
   ('`'
      ctrl
      "Enable/disable post proc override"
      {pp_override})
   (1
      ctrl
      "Toggle post proc override: Bloom"
      {pp_bloom})
   (2
      ctrl
      "Toggle post proc override: Noise"
      {pp_noise})
   (3
      ctrl
      "Toggle post proc override: Color Correct"
      {pp_colorcorrect})
   (4
      ctrl
      "Toggle post proc override: Chromatic Abberation"
      {pp_chromatic})
   (5
      ctrl
      "Toggle post proc override: Gradient"
      {pp_gradient})
   (6
      ctrl
      "Toggle post proc override: Motion Blur"
      {pp_motionblur})
   (7
      ctrl
      "Toggle post proc override: Light Trails"
      {pp_lighttrails})
   (8
      ctrl
      "Toggle post proc override: Kaleidoscope"
      {pp_kaleido})
   (9
      ctrl
      "Toggle post proc override: Refraction"
      {pp_refraction})
   #ifndef _SHIP
   ('`'
      "Toggle fake file errors"
      {toggle_fake_file_errors})
   #endif
   #ifdef HX_XBOX
   #endif
   (KB_F2
      "Rotate part for singer 1 autoplay"
      (filters game harmony)
      {if
         {game is_up}
         {rotate_singer_autoplay_part 0}})
   (KB_F3
      "Rotate part for singer 2 autoplay"
      (filters game harmony)
      {if
         {game is_up}
         {rotate_singer_autoplay_part 1}})
   (KB_F4
      "Rotate part for singer 3 autoplay"
      (filters game harmony)
      {if
         {game is_up}
         {rotate_singer_autoplay_part 2}})
   (KB_F2
      ctrl
      "Change singer 1 autoplay variation"
      {rotate_singer_autoplay_variation_magnitude 0})
   (KB_F3
      ctrl
      "Change singer 2 autoplay variation"
      {rotate_singer_autoplay_variation_magnitude 1})
   (KB_F4
      ctrl
      "Change singer 3 autoplay variation"
      {rotate_singer_autoplay_variation_magnitude 2})
   (KB_F5
      "Empties all band energy"
      {cheat_empty_band_energy})
   (KB_F6
      ctrl
      "Change autoplay pitch offset by -0.1"
      (filters game harmony)
      {if
         {game is_up}
         {increment_autoplay_offset -0.1}})
   (KB_F6
      "Change autoplay pitch offset by +0.1"
      (filters game harmony)
      {if
         {game is_up}
         {increment_autoplay_offset 0.1}})
   (KB_F7
      ctrl
      "Toggle vocal frame stats"
      (filters game harmony)
      {if
         {game is_up}
         {toggle_vocalplayer_frame_spew}})
   (KB_F8
      "Toggle network overlay"
      (filters game)
      {rnd toggle_overlay network})
   (KB_F9
      "Cycle Drum Fills"
      {cycle_drum_fills})
   (0
      "Pause/unpause game"
      (filters game)
      {toggle_time_paused})
   (1
      ctrl
      "Game: Fail Player 1"
      (filters game)
      {player_fail 0})
   (2
      ctrl
      "Game: Fail Player 2"
      (filters game)
      {player_fail 1})
   (3
      ctrl
      "Game: Fail Player 3"
      (filters game)
      {player_fail 2})
   (4
      ctrl
      "Game: Fail Player 4"
      (filters game)
      {player_fail 3})
   (5
      "Cycle through graphical character debugging in game"
      (filters game)
      {next_character_driver})
   (6
      "Cycle instrument faking for controller 1"
      (filters meta)
      {cycle_instrument_override 0})
   (7
      "Cycle instrument faking for controller 2"
      (filters meta)
      {cycle_instrument_override 1})
   (8
      "Cycle instrument faking for controller 3"
      (filters meta)
      {cycle_instrument_override 2})
   (9
      "Cycle instrument faking for controller 4"
      (filters meta)
      {cycle_instrument_override 3})
   (!
      "Game: Win w/ 3 stars, Meta: Win event w/ 1 Star Avg"
      (filters game meta)
      {fake_win 1})
   ('@'
      "Game: Win w/ 3 stars, Meta: Win event w/ 2 Star Avg"
      (filters game meta)
      {fake_win 2})
   (#
      "Game: Win w/ 3 stars, Meta: Win event w/ 3 Star Avg"
      (filters game meta)
      {fake_win 3})
   ('$'
      "Game: Win w/ 4 stars, Meta: Win event w/ 4 Star Avg"
      (filters game meta)
      {fake_win 4})
   ('%'
      "Game: Win w/ 5 stars, Meta: Win event w/ 5 Star Avg"
      (filters game meta)
      {fake_win 5})
   ('^'
      "Game: Win w/ 6 stars, Meta: Win event w/ 6 Star Avg"
      (filters game meta)
      {fake_win 6})
   (&
      "Next Loading Tip entry"
      (filters game meta)
      {cheat_next_loading_tip_entry})
   ('*'
      "Game: Win a multisong event w/ 5 star avg"
      (filters meta)
      {fake_win_multi 5})
   ('['
      "Toggle in-game timer stats"
      (filters game)
      {rnd toggle_timers_verbose})
   ('{'
      "Cycle Loading tip mode"
      (filters game meta)
      {cheat_next_loading_tip_mode})
   (a
      ctrl
      "Game: Cycles gem-player autoplay accuracy"
      (filters game)
      {cycle_auto_play_accuracy})
   (a
      alt
      "Game: Toggles auto-hopos"
      (filters game)
      {toggle_auto_hopos})
   (a
      "Game: Cycles through combinations of Autoplay"
      (filters game)
      {cycle_multiplayer_auto_play})
   (A
      "Meta: unlock all; Game: toggle crowd audio"
      (filters meta game)
      {A_cheat})
   (b
      ctrl
      "Toggle emulated fps between 24 and 30"
      {set
         $cheat.emulate_fps
         {if_else
            {== $cheat.emulate_fps 24}
            30
            24}}
      {cheat_display
         show
         {sprint
            "Set emulate fps to "
            $cheat.emulate_fps}})
   (b
      "Toggle bonus outfits in historical venues"
      {set
         $cheat.use_bonus_outfit
         {! $cheat.use_bonus_outfit}}
      {cheat_display
         show_bool
         "Force bonus outfits"
         $cheat.use_bonus_outfit})
   (B
      "Toggle forcing chapter intro"
      {set
         $cheat.force_intro
         {! $cheat.force_intro}}
      {cheat_display
         show_bool
         "Force chapter intro"
         $cheat.force_intro})
   (c
      "Game: Cycle CamShots of matching Band Configuration/ Music Store: clear file cache"
      (filters store game)
      {cond
         ({game is_up}
            {if
               {&& $world $p9director}
               {$p9director cycle_shot}
               {set $composite_character_demand_load TRUE}})
         ({&&
               {store_panel is_up}
               {store_filters_panel is_up}}
            {net_cache_mgr debug_clear_cache})})
   (C
      "Toggle Current CamShot Info"
      (filters game)
      {rnd toggle_overlay camera}
      {if
         $world
         {handle
            ({$world current_shot}
               update_overlay)}})
   (c
      ctrl
      "Game: Cycle Band Configurations"
      {if
         $p9director
         {do
            ($cfg
               {switch
                  {$p9director get force_configuration}
                  (kP9JohnPaul
                     "kP9Paul")
                  (kP9Paul
                     "kP9GeorgeJohnPaul")
                  (kP9GeorgeJohnPaul
                     "kP9George")
                  (kP9George
                     "kP9John")
                  (kP9John
                     "kP9Ringo")
                  "kP9JohnPaul"})
            {cheat_display
               show
               {sprint
                  "Force configuration to "
                  $cfg}}
            {$p9director
               set
               force_configuration
               {macro_elem $cfg}}}})
   (d
      "Game: Toggle Camera Picking, Meta: Toggle Difficulty"
      (filters game meta)
      {if_else
         {game is_up}
         {if
            $p9director
            {do
               ($disable
                  {!
                     {$p9director get disable_picking}})
               {$p9director set disable_picking $disable}
               {cheat_display
                  show_bool
                  "Disable camera picking"
                  $disable}
               {unless
                  $disable
                  {set $composite_character_demand_load FALSE}}}}
         {cheat_toggle_difficulty}})
   (d
      ctrl
      "Trigger Dirty Disc Error"
      {platform_mgr trigger_disk_error})
   (D
      "Everyone Deploy Band Energy"
      (filters game)
      {everyone_deploy})
   (d
      alt
      "Toggle use of procedural eye darts"
      {set
         $cheat.disable_eye_darts
         {! $cheat.disable_eye_darts}}
      {cheat_display
         show_bool
         "Disable character eye darts"
         $cheat.disable_eye_darts})
   (e
      "Game: Adjust crowd excitement down"
      (filters game)
      {adjust_crowd_rating -0.1})
   (E
      "Adjust crowd excitement up"
      (filters game)
      {adjust_crowd_rating 0.1})
   (e
      ctrl
      "Toggle use of procedural eye darts and blinks"
      {set
         $cheat.disable_eye_darts
         {! $cheat.disable_eye_darts}}
      {set
         $cheat.disable_procedural_blinks
         {! $cheat.disable_procedural_blinks}}
      {cheat_display
         show_bool
         "Disable character eye darts + procedural blinks"
         $cheat.disable_eye_darts})
   (f
      "Paused: cycle lyric font"
      (filters game)
      {if
         {game paused}
         {{{get_track_panel}
               find
               vocals}
            cycle_font_style}})
   (F
      "Cycle Free Camera"
      (filters game)
      {cycle_free_camera})
   (g
      "Game: dump clip report / Paused: cycle vocal background style"
      (filters game harmony)
      {if_else
         {game paused}
         {{{get_track_panel}
               find
               vocals}
            cycle_pitch_guides}
         {if
            {game is_up}
            {do
               ($grand_total 0)
               {$world
                  iterate
                  CompositeCharacter
                  $char
                  {with
                     $char
                     {do
                        ($total 0)
                        {print
                           $this
                           "\n"}
                        {$this
                           iterate
                           CharClipSet
                           $clips
                           {do
                              ($sec 0)
                              ($size
                                 {$clips total_size})
                              {'+=' $total $size}
                              {$clips
                                 iterate
                                 CharClip
                                 $c
                                 {'+='
                                    $sec
                                    {$c get length_seconds}}}}
                           {print
                              "   total size: "
                              $total
                              "\n"}
                           {'+=' $grand_total $total}}}}
                  {print
                     "grand total: "
                     $grand_total
                     "\n"}}}}})
   (G
      "Print faders"
      {audio print_faders})
   (h
      "Game: Toggle HUD"
      {set
         $show_hud
         {toggle_hud}}
      {do
         ($track
            {get_track_panel})
         {if
            $track
            {$track set_showing $show_hud}}}
      {if_else
         $show_hud
         {cheat_display
            show
            "HUD: ON"}
         {cheat_display
            show
            "HUD: OFF"}})
   (h
      ctrl
      "Print hopo stats"
      {{beatmatch active_player 0}
         print_hopo_stats})
   (H
      "Toggle forced detection of calbert"
      {toggle_forced_autocal})
   (I
      "Toggle Light Preset overlay"
      (filters game)
      {rnd toggle_overlay light_preset})
   (i
      "Game: Toggle lighting events"
      (filters game)
      {if
         {game is_up}
         {do
            ($ignore
               {handle
                  ($world toggle_lighting_events)})
            {cheat_display
               show
               {sprint
                  "light preset frozen: "
                  $ignore}}}})
   (i
      ctrl
      "Toggle eye debug overlay"
      (filters game)
      {rnd toggle_overlay eye_status})
   (i
      alt
      "Game: cycles through each character providing visual debugging of their use of interest objects"
      (filters game)
      {if
         {&&
            {game is_up}
            $p9director}
         {$p9director debug_char_interests}
         {cheat_display
            show
            "visual interest object debug: cycling to next character..."}})
   (j
      "Toggle character overlay"
      (filters game)
      {rnd toggle_overlay char_status})
   (J
      "Vocal Harmony: toggle phoneme tubes (TEMPORARY)"
      {if
         {&&
            {game is_up}
            {{get_track_panel}
               exists
               vocals}}
         {if_else
            {{{get_track_panel}
                  find
                  vocals}
               toggle_phoneme_tubes}
            {cheat_display
               show
               "phoneme tubes: ON"}
            {cheat_display
               show
               "phoneme tubes: OFF"}}})
   (j
      ctrl
      "Toggle use of eye jitter in lookats"
      {set
         $cheat.disable_eye_jitter
         {! $cheat.disable_eye_jitter}}
      {cheat_display
         show_bool
         "Disable character eye jitter"
         $cheat.disable_eye_jitter})
   (k
      "Meta: Komplete Achievement"
      {fake_achievement})
   (K
      "Vocal Harmony: toggle arrow jump during talky parts (TEMPORARY)"
      {if
         {&&
            {game is_up}
            {{get_track_panel}
               exists
               vocals}}
         {if_else
            {{{get_track_panel}
                  find
                  vocals}
               toggle_phoneme_pull_arrow}
            {cheat_display
               show
               "phoneme arrow jump: ON"}
            {cheat_display
               show
               "phoneme arrow jump: OFF"}}})
   (l
      "Game: Lose"
      (filters game)
      {{beatmatch active_player 0}
         lose})
   (l
      ctrl
      "Toggle LOD overlay"
      (filters game)
      {rnd toggle_overlay lod})
   (L
      "Toggle audio levels"
      {synth toggle_hud})
   (m
      ctrl
      "Game: enable/disable multipliers"
      (filters game)
      {toggle_multiplier_active})
   (m
      "Game: Toggle crowd meter/Meta: Mute shell music"
      (filters game meta)
      {if_else
         {game is_up}
         {toggle_crowd_meter}
         {toggle_mute_shell_music}})
   (M
      "Toggle mutes all"
      (value_bool $mute_cheat)
      {toggle_mute_global})
   (n
      "Cycle notify level"
      (value
         {elem
            (disable overlay modal)
            $notify_level})
      {do
         ($names
            (disable overlay modal))
         {set
            $notify_level
            {mod
               {'++' $notify_level}
               {size $names}}}
         {cheat_display
            show
            {sprint
               "Notify level "
               {elem $names $notify_level}}}})
   (N
      "Force Finale sequence at the end of the last song"
      {cheat_display
         show_bool
         "Finale"
         {meta_performer cheat_toggle_finale}})
   (o
      "Push Network Channel selection screen"
      {unless
         {'||'
            {matchmaker is_finding}
            {==
               {ui current_screen}
               selchannel_screen}}
         {ui push_screen selchannel_screen}})
   (O
      "Print the symbol table"
      {print_symbol_table syms})
   (o
      ctrl
      "Toggle forcing chapter outro"
      {set
         $cheat.force_outro
         {! $cheat.force_outro}}
      {cheat_display
         show_bool
         "Force chapter outro"
         $cheat.force_outro})
   #ifdef HX_PS3
   (p
      "Toggle Store Service ID (PS3-only)"
      (value
         {store_panel service_id})
      (filters store)
      {cheat_display
         show
         {sprintf
            "PS3 In-Game Commerce Service ID: %s"
            {store_panel toggle_service_id}}})
   #endif
   (p
      ctrl
      "Display current blended PostProcs"
      (filters game)
      {display_postprocs})
   (P
      "Shell: Toggle Random Song Debug"
      (filters meta)
      {cheat_display
         show_bool
         "Random Song Debug"
         {song_mgr toggle_random_song_debug}})
   (p
      alt
      "Toggle all postprocess effects"
      (filters game meta)
      {cheat_display
         show
         {sprint
            "PostProcs: "
            {if_else
               {rnd toggle_all_postprocs}
               "off"
               "on"}}})
   (q
      "Print Current Screen"
      (filters meta)
      {handle
         ({ui current_screen}
            print)})
   (Q
      "Toggle Credits Autoscroll"
      {if
         {==
            {ui current_screen}
            credits_screen}
         {credits_panel debug_toggle_autoscroll}
         {cheat_display
            show
            "Credits Autoscroll toggled"}})
   (r
      "Toggle Shell Automation"
      (value
         {ui auto_script})
      {cheat_display
         show
         {sprint
            "Shell Automation: "
            {ui toggle_auto}}})
   (R
      "Toggle Shell Recording"
      (value
         {ui record_script})
      {cheat_display
         show
         {sprint
            "Shell Recording: "
            {ui toggle_record}}})
   (s
      "Toggle scoring info"
      (filters game)
      {if
         {game is_up}
         {rnd toggle_overlay score}})
   (S
      "Fill up the band energy"
      (filters game)
      {fill_band_energy})
   (t
      "Toggle time overlay"
      (filters game)
      {rnd toggle_overlay time})
   (T
      "Toggle profiling timers"
      (filters game)
      {rnd toggle_timers}
      {rnd toggle_overlay rate})
   (u
      "EMPTY"
      {print
         "EMPTY\n"})
   (u
      ctrl
      "Toggle packet loss"
      {toggle_drop_all_packets})
   (U
      "Toggle UI load times"
      (filters meta)
      (value_bool
         {ui showing_load_times})
      {ui toggle_load_times})
   #ifndef HX_WII
   (v
      "Toggle Vocalplayer overlay/Song select: Go to venue select"
      (filters meta game)
      {if_else
         {song_select_panel is_up}
         {ui goto_screen selvenue_screen}
         {if
            {game is_up}
            {toggle_vocalplayer_overlay}}})
   #else
   (v
      "dump textures/meshes"
      {rnd dump_textures}
      {rnd dump_meshes})
   #endif
   (V
      "toggle vocal score info"
      (filters game)
      {{get_track_panel}
         toggle_score_debug})
   (w
      "Game: Force a win"
      (filters game meta)
      {if
         {exists beatmatch}
         {{beatmatch active_player 0}
            win
            3}})
   (W
      "Toggle showing test offers in Music Store"
      (value_bool
         {store_panel test_offers})
      (filters store)
      {cheat_display
         show_bool
         "Show Music Store test offers"
         {store_panel toggle_test_offers}})
   (x
      "Cycle Guitar FX"
      (filters game)
      {cycle_guitar_fx})
   (X
      "Toggle shuttle"
      (filters game)
      {toggle_shuttle})
   (y
      "Toggle fake leaderboard upload failure"
      {toggle_fake_leaderboard_upload_failure})
   (Y
      "Game: Toggle mute master fader"
      (filters game)
      {if
         {game is_up}
         {audio toggle_mute_master}})
   (z
      "Toggle showing world"
      (filters game)
      (value_bool
         {world_panel showing})
      {world_panel
         set_showing
         {!
            {world_panel showing}}})
   (Z
      "Hi-reZ screen shot"
      (filters game meta)
      {rnd hi_res_screen 5})
   ('+'
      "Toggle Store Metadata Index"
      (value
         {net_cache_mgr server_type})
      (filters store)
      {cheat_display
         show
         {sprintf
            "Music Store now using %s metadata"
            {net_cache_mgr cheat_next_server}}})
   (<
      "Jump backward a bit in time"
      (filters game)
      {handle
         (beatmatch
            jump
            {-
               {beatmatch get_song_ms}
               1000.0})})
   ('|'
      "Toggles practice mode playing all stems."
      {practice_panel
         set_play_all_tracks
         {!
            {practice_panel get_play_all_tracks}}})
   (KB_UP
      ctrl
      "move forward in time cheat, approx 30 seconds"
      (filters game)
      {handle
         (beatmatch
            jump
            {'+'
               {beatmatch get_song_ms}
               30000.0})}
      {handle
         (beatmatch start)})
   (KB_UP
      "Double song speed / Paused: increase vocal pitch window size"
      (filters game)
      {if
         {game is_up}
         {change_speed 2.0}})
   (KB_DOWN
      "Halve song speed / Paused: decrease vocal pitch window size"
      (filters game)
      {if
         {game is_up}
         {change_speed 0.5}})
   (KB_LEFT
      "decrease pitch arrow smoothing"
      (filters game harmony)
      {if
         {game is_up}
         {{{get_track_panel}
               find
               vocals}
            decrease_arrow_smoothing}})
   (KB_RIGHT
      "increase pitch arrow smoothing"
      (filters game harmony)
      {if
         {game is_up}
         {{{get_track_panel}
               find
               vocals}
            increase_arrow_smoothing}})
   (':'
      "Toggle pink error shaders"
      (filters game meta)
      {cheat_display
         show
         {sprint
            "Pink error shaders (for uncached shaders): "
            {if_else
               {rnd toggle_error_shaders}
               "on"
               "off"}}})
   (','
      "Deploy Overdrive Pad 1"
      (filters game)
      {player_deploy 0})
   (.
      "Deploy Overdrive Pad 2"
      (filters game)
      {player_deploy 1})
   (/
      "Deploy Overdrive Pad 3"
      (filters game)
      {player_deploy 2})
   ('?'
      "Deploy Overdrive Pad 4"
      (filters game)
      {player_deploy 3})
   ('['
      "Go to previous tutorial lesson"
      {if
         {gamemode in_mode tutorial}
         {if
            {{gamemode get main_panel}
               can_goto_prev_lesson}
            {{gamemode get main_panel}
               goto_prev_lesson}}})
   (']'
      "Go to next tutorial lesson"
      {if
         {gamemode in_mode tutorial}
         {if
            {{gamemode get main_panel}
               can_goto_next_lesson}
            {{gamemode get main_panel}
               goto_next_lesson}}})
   (>
      "Toggle Language"
      (filters writer)
      (value
         {system_language})
      {do
         ($old_notify_level $notify_level)
         {set $notify_level 0}
         {switch_system_language}
         {cheat_display
            show
            {sprint
               "System language set to "
               {system_language}}}
         {set $notify_level $old_notify_level}})
   ('\\'
      "Sync and reload locale files"
      (filters writer)
      {sync_reload_locale}
      {cheat_display
         show
         "Locale files synced and reloaded"})
   #ifndef HX_PC
   ('}'
      #ifdef HX_XBOX
      "Check locale achievements vs. xlast"
      #else
      "Check locale trophies vs. trophy file"
      #endif
      (filters writer)
      {achievements check_strings})
   #endif)