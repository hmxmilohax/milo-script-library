#define LYRICS_PARSER_DETAILS
((init
      {if
         {&&
            $p9director
            {$p9director
               valid_lyric_part
               [track_name]}}
         {$p9director clear_lyrics}})
   (lyric
      {if
         {&&
            $p9director
            {$p9director
               valid_lyric_part
               [track_name]}}
         {$p9director
            add_lyrics
            $mp.val
            {beat_to_seconds $mp.start}}}))
{func
   rt_test_space
   ($before $after)
   {&&
      {> $mp.before_delta_sec $before}
      {> $mp.after_delta_sec $after}}}
{new
   MidiParser
   events_parser
   (track_name EVENTS)
   (text
      {unless
         {has_substr $mp.val crowd_}
         {$this add_message $mp.data}})}
{new
   MidiParser
   lyrics_parser_vocals
   (track_name 'PART VOCALS')
   LYRICS_PARSER_DETAILS}
{new
   MidiParser
   lyrics_parser_harmony1
   (track_name 'PART HARM1')
   LYRICS_PARSER_DETAILS}
{new
   MidiParser
   lyrics_parser_harmony2
   (track_name 'PART HARM2')
   LYRICS_PARSER_DETAILS}
{new
   MidiParser
   lyrics_parser_harmony3
   (track_name 'PART HARM3')
   LYRICS_PARSER_DETAILS}
{new
   MidiParser
   active_events_parser
   (track_name EVENTS)
   (compress TRUE)
   (text
      {unless
         {'||'
            {== $mp.val section}
            {has_substr $mp.val tut_}
            {&&
               {has_substr $mp.val crowd_}
               {!
                  {find_elem
                     (crowd_clap crowd_noclap)
                     $mp.val}}}}
         {$this add_message $mp.val}})}
#define STRUMMAPPINGS
((inverted TRUE)
   (append_length TRUE)
   (use_variable_blending TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [variable_blend_pct]
         0.75})
   (idle
      {$this insert_idle open_strum 1 1 0.3})
   (allowed_notes 108 109 110 111 112 113 114)
   (midi
      {$this
         add_message
         {switch
            $mp.val
            (108 pick_down)
            (109 pick_up)
            (110 strum_down)
            (111 strum_up)
            (112 pick_thumb)
            (113 pick_index)
            (114 pick_middle)
            kDataUnhandled}}))
#define STRINGVIBRATIONHIGH
((inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set
         [max_gap]
         0.5})
   (allowed_notes 108 109 110 111 113 114)
   (midi
      {$this add_message strum}))
#define STRINGVIBRATIONLOW
((inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set
         [max_gap]
         0.5})
   (allowed_notes 108 109 110 111 112)
   (midi
      {$this add_message strum}))
#define GUITARFRETFLAGS
((inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser_flags)
   (init
      {set
         [min_gap]
         0.24}
      {set
         [max_gap]
         0.5}
      {set $mp.mapping ''}
      {set
         [end_offset]
         -1.0e-2})
   (allowed_notes 75 76 77 81 82 100 101 102 103 104 105 106 107)
   (midi
      {switch
         $mp.val
         ((100 101 102 103 104 105 106 107)
            {$this
               add_message
               {switch
                  $mp.val
                  (100
                     {'|' kFingerIndex kNoVibrato})
                  (101
                     {'|' kFingerIndex kUseVibrato})
                  (102
                     {'|' kFingerMiddle kNoVibrato})
                  (103
                     {'|' kFingerMiddle kUseVibrato})
                  (104
                     {'|' kFingerRing kNoVibrato})
                  (105
                     {'|' kFingerRing kUseVibrato})
                  (106
                     {'|' kFingerPinky kNoVibrato})
                  (107
                     {'|' kFingerPinky kUseVibrato})
                  kDataUnhandled}})
         ((75 76 77 81 82)
            {$this
               add_message
               {switch
                  $mp.val
                  (76 kChordMajor)
                  (75 kChordMinor)
                  (77 kChordSus4)
                  (81 kChordSus6)
                  (82 kChordSeven)
                  kDataUnhandled}})}))
#define GUITARFRETPOSMAPPINGS
((inverted TRUE)
   (compress TRUE)
   (append_length TRUE)
   (message_type new_spot)
   (init
      {set
         [min_gap]
         0.25})
   (allowed_notes 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57)
   (midi
      {$this
         add_message
         {switch
            $mp.val
            (41 spot_neck_fret01.mesh)
            (42 spot_neck_fret02.mesh)
            (43 spot_neck_fret03.mesh)
            (44 spot_neck_fret04.mesh)
            (45 spot_neck_fret05.mesh)
            (46 spot_neck_fret06.mesh)
            (47 spot_neck_fret07.mesh)
            (48 spot_neck_fret08.mesh)
            (49 spot_neck_fret09.mesh)
            (50 spot_neck_fret10.mesh)
            (51 spot_neck_fret11.mesh)
            (52 spot_neck_fret12.mesh)
            (53 spot_neck_fret13.mesh)
            (54 spot_neck_fret14.mesh)
            (55 spot_neck_fret15.mesh)
            (56 spot_neck_fret16.mesh)
            (57 spot_neck_fret17.mesh)
            kDataUnhandled}}))
#define GUITARFRETMAPPINGS
((inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser_group)
   (init
      {set
         [min_gap]
         0.24}
      {set
         [max_gap]
         0.5}
      {set $mp.mapping ''})
   (idle
      {$this insert_idle open 0.52 0.5 0.5})
   (allowed_notes 60 62 64 67 69 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 115)
   (midi
      {switch
         $mp.val
         ((96 97 98 99)
            {do
               {$this
                  add_message
                  {switch
                     $mp.val
                     (96 single_string_low)
                     (97 single_string_2)
                     (98 single_string_3)
                     (99 single_string_high)
                     kDataUnhandled}}})
         ((60 62 64 67 69)
            {do
               {$this
                  add_message
                  {switch
                     $mp.val
                     (60 chord_c)
                     (62 chord_d)
                     (64 chord_e)
                     (67 chord_g)
                     (69 chord_a)
                     kDataUnhandled}}})
         ((84 85 86 87 88 89 90 91 92 93 94 95 115)
            {do
               {$this
                  add_message
                  {switch
                     $mp.val
                     (84 e_major_barre)
                     (85 e_minor_barre)
                     (86 e_sus6_barre)
                     (87 a_major_barre)
                     (88 a_minor_barre)
                     (89 a_sus4_barre)
                     (90 open)
                     (91 all_down)
                     (92 e_7_barre)
                     (93 a_7_barre)
                     (94 bend_up_g)
                     (95 bend_up_e)
                     (115 a_sus6_barre)
                     kDataUnhandled}}})}))
{new
   MidiParser
   george_fret_flags
   (track_name GEORGE)
   GUITARFRETFLAGS}
{new
   MidiParser
   george_fret
   (track_name GEORGE)
   GUITARFRETMAPPINGS}
{new
   MidiParser
   george_fret_pos
   (track_name GEORGE)
   GUITARFRETPOSMAPPINGS}
{new
   MidiParser
   george_string_hi
   (track_name GEORGE)
   STRINGVIBRATIONHIGH}
{new
   MidiParser
   george_string_low
   (track_name GEORGE)
   STRINGVIBRATIONLOW}
{new
   MidiParser
   george_strum
   (track_name GEORGE)
   STRUMMAPPINGS}
{new
   MidiParser
   john_fret_flags
   (track_name JOHN)
   GUITARFRETFLAGS}
{new
   MidiParser
   john_fret
   (track_name JOHN)
   GUITARFRETMAPPINGS}
{new
   MidiParser
   john_fret_pos
   (track_name JOHN)
   GUITARFRETPOSMAPPINGS}
{new
   MidiParser
   john_string_hi
   (track_name JOHN)
   STRINGVIBRATIONHIGH}
{new
   MidiParser
   john_string_low
   (track_name JOHN)
   STRINGVIBRATIONLOW}
{new
   MidiParser
   john_strum
   (track_name JOHN)
   STRUMMAPPINGS}
{new
   MidiParser
   paul_fret_flags
   (track_name PAUL)
   GUITARFRETFLAGS}
{new
   MidiParser
   paul_fret
   (track_name PAUL)
   GUITARFRETMAPPINGS}
{new
   MidiParser
   paul_fret_pos
   (track_name PAUL)
   GUITARFRETPOSMAPPINGS}
{new
   MidiParser
   paul_string_hi
   (track_name PAUL)
   STRINGVIBRATIONHIGH}
{new
   MidiParser
   paul_string_low
   (track_name PAUL)
   STRINGVIBRATIONLOW}
{new
   MidiParser
   paul_strum
   (track_name PAUL)
   STRUMMAPPINGS}
#define TAP_SPACE
(0.22)
#define NORM_SPACE
(0.37)
#define BIG_SPACE
(0.75)
{new
   MidiParser
   drums_right_hand
   (track_name RINGO)
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type drum_rhand)
   (has_ride FALSE)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         2}
      {set $mp.fig8 FALSE}
      {set $mp.fig8_left FALSE})
   (idle
      {$this insert_idle idle 1.0 0.5 0.5})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 27 31 32 36 37 38 39 40 41 42 47 49 51)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {switch
            $mp.val
            (27
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     snare_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     snare)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     snare_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     snare_tap)
                  snare_hover})
            (31
               {if_else
                  $mp.fig8
                  {if_else
                     $mp.fig8_left
                     {do
                        {if_else
                           {==
                              {$this next_val}
                              31}
                           {do
                              {set $mp.fig8_left FALSE}
                              fig8_l}
                           {do
                              {set $mp.fig8 FALSE}
                              fig8_return}}}
                     {do
                        {set $mp.fig8_left TRUE}
                        {if_else
                           {==
                              {$this next_val}
                              31}
                           fig8_r
                           {do
                              {set $mp.fig8 FALSE}
                              fig8_return}}}}
                  {if_else
                     {&&
                        {< $mp.after_delta_sec BIG_SPACE}
                        {==
                           {$this next_val}
                           31}}
                     {do
                        {set $mp.fig8 TRUE}
                        {set $mp.fig8_left FALSE}
                        fig8_l}
                     {cond
                        ({rt_test_space NORM_SPACE NORM_SPACE}
                           hihat)
                        ({rt_test_space TAP_SPACE TAP_SPACE}
                           hihat_tap)
                        ({rt_test_space 0 BIG_SPACE}
                           hihat_tap)
                        hihat_hover}}})
            (36
               {if_else
                  {==
                     {$this prev_val}
                     38}
                  {cond
                     ({&&
                           {<=
                              {$this delta}
                              1}
                           {rt_test_space TAP_SPACE TAP_SPACE}}
                        crash_l_side)
                     ({<=
                           {$this delta}
                           1}
                        crash_l_hover)
                     ({rt_test_space BIG_SPACE BIG_SPACE}
                        crash_l_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE}
                        crash_l_soft)
                     ({rt_test_space 0 BIG_SPACE}
                        crash_l_soft)
                     crash_l_hover}
                  {cond
                     ({rt_test_space BIG_SPACE BIG_SPACE}
                        crash_l_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE}
                        crash_l_soft)
                     ({rt_test_space 0 BIG_SPACE}
                        crash_l_soft)
                     crash_l_hover}})
            (37
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     crash_l)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     crash_l_soft)
                  ({rt_test_space 0 BIG_SPACE}
                     crash_l)
                  crash_l_hover})
            (38
               {if_else
                  {==
                     {$this prev_val}
                     36}
                  {cond
                     ({&&
                           {<=
                              {$this delta}
                              1}
                           {rt_test_space TAP_SPACE TAP_SPACE}}
                        crash_r_side)
                     ({<=
                           {$this delta}
                           1}
                        crash_r_hover)
                     ({rt_test_space BIG_SPACE BIG_SPACE}
                        crash_r_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE}
                        crash_r_soft)
                     ({rt_test_space 0 BIG_SPACE}
                        crash_r_soft)
                     crash_r_hover}
                  {cond
                     ({rt_test_space BIG_SPACE BIG_SPACE}
                        crash_r_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE}
                        crash_r_soft)
                     ({rt_test_space 0 BIG_SPACE}
                        crash_r_soft)
                     crash_r_hover}})
            (39
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     crash_r)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     crash_r_soft)
                  ({rt_test_space 0 BIG_SPACE}
                     crash_r_soft)
                  crash_r_hover})
            (40 crash_r_grab)
            (41 crash_l_grab)
            (42
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     ride_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     ride)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     ride_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     ride_tap)
                  ride_hover})
            (47
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     tom_l_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     tom_l)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     tom_l_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     tom_l_tap)
                  tom_l_hover})
            (49
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     tom_r_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     tom_r)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     tom_r_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     tom_r_tap)
                  tom_r_hover})
            (51
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     floortom_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     floortom)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     floortom_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     floortom_tap)
                  floortom_hover})
            kDataUnhandled}})}
{new
   MidiParser
   drums_left_hand
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type drum_lhand)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         2})
   (idle
      {$this insert_idle idle 0.5 3.0 2.5})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 26 30 34 35 40 41 46 48 50)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {switch
            $mp.val
            (26
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     snare_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     snare)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     snare_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     snare_tap)
                  snare_hover})
            (30
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     hihat)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     hihat_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     hihat_tap)
                  hihat_hover})
            (34
               {cond
                  {cond
                     ({rt_test_space BIG_SPACE BIG_SPACE}
                        crash_l_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE}
                        crash_l_soft)
                     ({rt_test_space 0 BIG_SPACE}
                        crash_l_soft)
                     crash_l_hover}})
            (35
               {cond
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     crash_l)
                  ({rt_test_space 0 BIG_SPACE}
                     crash_l)
                  crash_l_hover})
            (40 crash_r_grab)
            (41 crash_l_grab)
            (46
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     tom_l_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     tom_l)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     tom_l_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     tom_l_tap)
                  tom_l_hover})
            (48
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     tom_r_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     tom_r)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     tom_r_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     tom_r_tap)
                  tom_r_hover})
            (50
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     floortom_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     floortom)
                  ({rt_test_space TAP_SPACE TAP_SPACE}
                     floortom_tap)
                  ({rt_test_space 0 BIG_SPACE}
                     floortom_tap)
                  floortom_hover})
            kDataUnhandled}})}
{new
   MidiParser
   drums_left_foot
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init)
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 25)
   (midi
      {$this
         add_message_se
         $mp.start
         {'+' $mp.start 0.33}
         hihat_open}
      {$this
         add_message_se
         {- $mp.end 0.2}
         $mp.end
         hihat_down})}
{new
   MidiParser
   drums_right_foot
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         1})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 23 24)
   (midi
      {switch
         $mp.val
         (23
            {$this add_message kick_big})
         (24
            {$this add_message kick_01})})}
{new
   MidiParser
   drums_snare
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 26 27)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE}
               hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE}
               hit_norm)
            hit_tap}})}
{new
   MidiParser
   drums_left_tom
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 46 47)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE}
               hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE}
               hit_norm)
            hit_tap}})}
{new
   MidiParser
   drums_right_tom
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 48 49)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE}
               hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE}
               hit_norm)
            hit_tap}})}
{new
   MidiParser
   drums_floortom
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 50 51)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE}
               hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE}
               hit_norm)
            hit_tap}})}
{new
   MidiParser
   drums_left_crash
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 34 35 36 37 38 41)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {switch
            $mp.val
            (34
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     hit_big)
                  hit_norm})
            (35
               {if_else
                  {rt_test_space NORM_SPACE NORM_SPACE}
                  hit_norm
                  hit_tap})
            (36
               {if_else
                  {==
                     {$this prev_val}
                     38}
                  {cond
                     ({&&
                           {<=
                              {$this delta}
                              1}
                           {rt_test_space TAP_SPACE TAP_SPACE}}
                        hit_side)
                     ({<=
                           {$this delta}
                           1}
                        hit_side_fast)
                     ({rt_test_space NORM_SPACE NORM_SPACE}
                        hit_big)
                     hit_norm}
                  {cond
                     ({rt_test_space NORM_SPACE NORM_SPACE}
                        hit_big)
                     hit_norm}})
            (37
               {if_else
                  {rt_test_space NORM_SPACE NORM_SPACE}
                  hit_norm
                  hit_tap})
            (41 hit_grab)
            kDataUnhandled}})}
{new
   MidiParser
   drums_right_crash
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 36 38 39 40)
   (midi
      {$this rt_compute_space}
      {$this
         add_message
         {switch
            $mp.val
            (38
               {if_else
                  {==
                     {$this prev_val}
                     36}
                  {cond
                     ({&&
                           {<=
                              {$this delta}
                              1}
                           {rt_test_space TAP_SPACE TAP_SPACE}}
                        hit_side)
                     ({<=
                           {$this delta}
                           1}
                        hit_side_fast)
                     ({rt_test_space NORM_SPACE NORM_SPACE}
                        hit_big)
                     hit_norm}
                  {cond
                     ({rt_test_space NORM_SPACE NORM_SPACE}
                        hit_big)
                     hit_norm}})
            (39
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE}
                     hit_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE}
                     hit_norm)
                  hit_tap})
            (40 hit_grab)
            kDataUnhandled}})}
{new
   MidiParser
   drums_ride
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 42)
   (midi
      {switch
         $mp.val
         (42
            {$this add_message hit_tap})})}
{new
   MidiParser
   drums_kick
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 24)
   (midi
      {$this
         add_message
         {switch
            $mp.val
            (24 kick)
            kDataUnhandled}})}
{new
   MidiParser
   drums_hihat
   (inverted TRUE)
   (track_name RINGO)
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set
         [zero_length]
         TRUE}
      {set
         [max_gap]
         0.1}
      {set
         [use_realtime_gaps]
         TRUE})
   (term
      {$this sec_offset_all WORLD_OFFSET_SEC})
   (hihat_open TRUE)
   (hihat_cache -999)
   (allowed_notes 25 30 31)
   (midi
      {$this
         add_message
         {switch
            $mp.val
            (25
               {set
                  [hihat_open]
                  TRUE}
               {set
                  [hihat_cache]
                  $mp.end}
               kDataUnhandled)
            ((30 31)
               {if_else
                  {>=
                     $mp.start
                     [hihat_cache]}
                  {do
                     {set
                        [hihat_open]
                        FALSE}
                     hit_closed}
                  hit_open})
            kDataUnhandled}})}
{if
   {&&
      {exists gamemode}
      {'||'
         {gamemode in_mode practice}
         {gamemode in_mode drum_trainer}}}
   {new
      MidiParser
      practice_metronome
      (track_name EVENTS)
      (compress TRUE)
      (message_type practice_metronome)
      (init)
      (term
         {$this
            sec_offset_all
            {'*'
               1.0e-3
               {'+'
                  {if_else
                     {exists profile_mgr}
                     {profile_mgr get_song_to_taskmgr_ms}
                     0}
                  35}}})
      (allowed_notes 24 25 26)
      (midi
         {unless
            $edit_mode
            {$this
               add_message
               {switch
                  $mp.val
                  (24 metronome_kick)
                  (25 metronome_snare)
                  (26 metronome_hat)
                  kDataUnhandled}}})}}
{new
   MidiParser
   world_crowd_parser
   (track_name EVENTS)
   (compress TRUE)
   (text
      {if
         {has_substr $mp.val crowd_}
         {$this add_message $mp.val}})}
{new
   MidiParser
   world_drum_triggers
   (track_name 'PART DRUMS')
   (allowed_notes 96 97 100)
   (compress TRUE)
   (midi
      {$this
         add_message
         {switch
            $mp.val
            (96 kick_drum)
            (97 snare_drum)
            (100 crash_hit)
            kDataUnhandled}})}
#ifndef HX_WII
{if
   {stagekit_present}
   {new
      MidiParser
      stagekit_fogstrobe_parser
      (fog_on
         {stagekit_set_fog TRUE})
      (fog_off
         {stagekit_set_fog FALSE})
      (track_name VENUE)
      (compress TRUE)
      (message_self TRUE)
      (text
         {if
            {has_substr
               $mp.val
               "FogOn"}
            {$this add_message fog_on}}
         {if
            {has_substr
               $mp.val
               "FogOff"}
            {$this add_message fog_off}})}
   {new
      MidiParser
      stagekit_bass_parser
      (start_bass
         {stagekit_set_mode_state kStageBass TRUE})
      (end_bass
         {stagekit_set_mode_state kStageBass FALSE})
      (track_name 'PART BASS')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set
            [max_gap]
            0.24}
         {set
            [min_gap]
            0.2})
      (gem
         {$this add_message start_bass}
         {set $mp.start $mp.end}
         {$this add_message end_bass})}
   {new
      MidiParser
      stagekit_guitar_parser
      (start_guitar
         {stagekit_set_mode_state kStageGuitar TRUE})
      (end_guitar
         {stagekit_set_mode_state kStageGuitar FALSE})
      (track_name 'PART GUITAR')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set
            [max_gap]
            0.24}
         {set
            [min_gap]
            0.2})
      (gem
         {$this add_message start_guitar}
         {set $mp.start $mp.end}
         {$this add_message end_guitar})}
   {new
      MidiParser
      stagekit_drum_parser
      (start_drum_kick
         {stagekit_set_mode_state kStageDrumKick TRUE})
      (end_drum_kick
         {stagekit_set_mode_state kStageDrumKick FALSE})
      (start_drum_snare
         {stagekit_set_mode_state kStageDrumSnare TRUE})
      (end_drum_snare
         {stagekit_set_mode_state kStageDrumSnare FALSE})
      (start_drum_crash
         {stagekit_set_mode_state kStageDrumCrash TRUE})
      (end_drum_crash
         {stagekit_set_mode_state kStageDrumCrash FALSE})
      (track_name 'PART DRUMS')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set
            [max_gap]
            0.24}
         {set
            [min_gap]
            0.2})
      (gem
         {switch
            $mp.val
            (kMPGem1
               {$this add_message start_drum_kick}
               {set $mp.start $mp.end}
               {$this add_message end_drum_kick})
            (kMPGem2
               {$this add_message start_drum_snare}
               {set $mp.start $mp.end}
               {$this add_message end_drum_snare})
            {$this add_message start_drum_crash}
            {set $mp.start $mp.end}
            {$this add_message end_drum_crash}})}
   {new
      MidiParser
      stagekit_vocal_parser
      (start_vocal
         {stagekit_set_mode_state kStageVocal TRUE})
      (end_vocal
         {stagekit_set_mode_state kStageVocal FALSE})
      (track_name 'PART VOCALS')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set
            [max_gap]
            0.24}
         {set
            [min_gap]
            0.2})
      (midi
         {$this add_message start_vocal}
         {set $mp.start $mp.end}
         {$this add_message end_vocal})}}
#endif
{new
   MidiParser
   tutorial_events_parser
   (track_name EVENTS)
   (compress FALSE)
   (text
      {if
         {has_substr $mp.val tut_}
         {guitar_tutorial_panel add_tutorial_event $this $mp}})}