#include ..\config\macros.dta
#include ..\config\process_clips_func.dta
(CharBoneDir
   (resources
      "char/shared/viseme_resource.milo"
      "char/shared/guitar_resource.milo"
      "char/shared/keyboard_resource.milo"
      "char/shared/drum_resource.milo"
      "char/shared/crowd_resource.milo"
      "char/shared/extras_resource.milo"))
(CharClipGroup
   (editor
      (flags
         bitfield
         (list
            ("kP9GroupSit"))
         (help
            "Is this a sit group or not"))))
#define IK_BLEND_TIME
(0.5)
(CharClipSamples
   (init
      {if
         {$this dir}
         {$this
            set_type
            {{$this dir}
               get_type}}
         {switch
            {{$this dir}
               get_type}
            (viseme
               {set
                  [relative]
                  {{$this dir}
                     find
                     Base}}
               {set
                  [beat_align]
                  kPlayRealTime}
               {set
                  [default_loop]
                  kPlayLoop})
            ((guitar_body_left guitar_body_right keyboard drum_body drum_add)
               {set
                  [blend_width]
                  2}
               {set
                  [beat_align]
                  kPlayBeatAlign1})
            (crowd
               {set
                  [blend_width]
                  1}
               {set
                  [beat_align]
                  kPlayBeatAlign1})
            (extras
               {set
                  [beat_align]
                  kPlayRealTime})}})
   (types
      (viseme
         (resource
            viseme_resource
            "kP9ContextViseme")
         (remove_zeros 1))
      #define VALIDATE_BLEND_2
      ((validate
            {unless
               {==
                  [blend_width]
                  2}
               {notify
                  {path_name $this}
                  " should have blend_width 2"}}))
      #define GUITAR_BODY_SHARED
      ((clip_flags
            ("kP9LeftArm"
               "kP9RightArm"
               "kP9AnimateEyes"
               "kP9HideInstrument"
               "kP9LookAtCam"
               "kP9PlayIdleRealtime"
               "kP9PlayIdle"
               "kP9PlayIdleMellow"
               "kP9PlayMellow"
               "kP9PlayNormal"
               "kP9PlayEnergetic"
               "kP9Singing"
               "kP9NotSinging"
               "kP9PlayHold"
               "kP9PlayDirectedCut"))
         (version 2)
         (bone_weights
            (bone_pos_guitar.mesh 0))
         (criteria
            ((match
                  {&&
                     {$a_clip shares_groups $b_clip}
                     {'||'
                        {$a_clip has_group stand}
                        {$a_clip has_group sit}}})
               (restrict
                  {&&
                     {< $b_start 2}
                     {> $a_start 2}})
               (max_dist 2))
            ((cancel)))
         (enter
            {$clip.dude
               set
               hide_instrument
               {&
                  [flags]
                  kP9HideInstrument}})
         (exit
            {with
               $clip.dude
               {if
                  {exists left_hand.weight}
                  {left_hand.weight set beats_per_weight 0}}
               {if
                  {exists right_hand.weight}
                  {right_hand.weight set beats_per_weight 0}}
               {if
                  {exists look_at_camera.weight}
                  {look_at_camera.weight set beats_per_weight 0}}
               {if
                  {exists mic.ikhand}
                  {if
                     {<
                        {mic.ikhand
                           size
                           (targets)}
                        2}
                     {while
                        {mic.ikhand
                           size
                           (targets)}
                        {mic.ikhand
                           remove
                           (targets 0)}}
                     {set
                        $rhand
                        {find_obj $this bone_mic_R-hand.mesh}}
                     {if
                        $rhand
                        {mic.ikhand
                           insert
                           (targets 0)
                           $rhand}}
                     {set
                        $lhand
                        {find_obj $this bone_mic_L-hand.mesh}}
                     {if
                        $lhand
                        {mic.ikhand
                           insert
                           (targets 1)
                           $lhand}}}}})
         (event_handlers
            ('' freeze set_leftarm_true set_rightarm_true set_leftarm_false set_rightarm_false sfx_gtr_smash sfx_mic_drop anim_mic_drop lookat_cam_start lookat_cam_stop))
         (freeze)
         (lookat_cam_start
            {'|='
               [flags]
               kP9LookAtCam}
            {$this set_beats_per_weight look_at_camera.weight})
         (lookat_cam_stop
            {&=
               [flags]
               {'~' kP9LookAtCam}}
            {$this set_beats_per_weight look_at_camera.weight})
         (set_leftarm_true
            {'|='
               [flags]
               kP9LeftArm}
            {$this set_beats_per_weight left_hand.weight})
         (set_rightarm_true
            {'|='
               [flags]
               kP9RightArm}
            {$this set_beats_per_weight right_hand.weight})
         (set_leftarm_false
            {&=
               [flags]
               {'~' kP9LeftArm}}
            {$this set_beats_per_weight left_hand.weight})
         (set_rightarm_false
            {&=
               [flags]
               {'~' kP9RightArm}}
            {$this set_beats_per_weight right_hand.weight})
         (set_beats_per_weight
            ($setter)
            {do
               ($weight
                  {find_obj $clip.dude $setter})
               {if
                  $weight
                  {$weight set beats_per_weight IK_BLEND_TIME}}})
         (sfx_gtr_smash
            {synth play gtr_smash.cue})
         (sfx_mic_drop
            {synth play mic_drop.cue})
         (anim_mic_drop
            {if
               {exists mic.ikhand}
               {while
                  {>
                     {mic.ikhand
                        size
                        (targets)}
                     1}
                  {mic.ikhand
                     remove
                     (targets 1)}}}))
      (guitar_body_left
         (resource
            guitar_resource
            "kP9ContextGuitarBodyLeft")
         GUITAR_BODY_SHARED
         VALIDATE_BLEND_2)
      (guitar_body_right
         (resource
            guitar_resource
            "kP9ContextGuitarBodyRight")
         GUITAR_BODY_SHARED
         VALIDATE_BLEND_2)
      (keyboard
         (resource
            keyboard_resource
            "kP9ContextGuitarBodyRight")
         GUITAR_BODY_SHARED
         VALIDATE_BLEND_2)
      (fret_left
         (resource
            guitar_resource
            "kP9ContextFretLeft")
         (clip_flags
            ("kChordMajor"
               "kChordMinor"
               "kChordSus4"
               "kChordSus6"
               "kChordSeven"
               "kFingerIndex"
               "kFingerMiddle"
               "kFingerRing"
               "kFingerPinky"
               "kUseVibrato"
               "kNoVibrato")))
      (fret_right
         (resource
            guitar_resource
            "kP9ContextFretRight")
         (clip_flags
            ("kChordMajor"
               "kChordMinor"
               "kChordSus4"
               "kChordSus6"
               "kChordSeven"
               "kFingerIndex"
               "kFingerMiddle"
               "kFingerRing"
               "kFingerPinky"
               "kUseVibrato"
               "kNoVibrato")))
      (strum_left
         (resource
            guitar_resource
            "kP9ContextStrumLeft"))
      (strum_right
         (resource
            guitar_resource
            "kP9ContextStrumRight"))
      (bass_offset
         (resource
            guitar_resource
            "kP9ContextBassOffset"))
      (strum_strings_hi
         (resource
            guitar_resource
            "kP9ContextStrumStringsHi"))
      (strum_strings_lo
         (resource
            guitar_resource
            "kP9ContextStrumStringsLo"))
      (cowbell
         (resource
            drum_resource
            "kP9ContextCowbell"))
      (cymbal_left
         (resource
            drum_resource
            "kP9ContextCymbalLeft"))
      (cymbal_right
         (resource
            drum_resource
            "kP9ContextCymbalRight"))
      (drum_add
         (resource
            drum_resource
            "kP9ContextDrumAdd")
         (clip_flags
            ("kP9LeftArm"
               "kP9RightArm"
               "kP9LookAtCam"
               "kP9PlayIdleRealtime"
               "kP9PlayIdle"
               "kP9PlayIdleMellow"
               "kP9PlayMellow"
               "kP9PlayNormal"
               "kP9PlayEnergetic"
               "kP9Singing"
               "kP9NotSinging"
               "kP9PlayHold"
               "kP9PlayDirectedCut"))
         (exit
            {with
               $clip.dude
               {if
                  {exists left_hand.weight}
                  {left_hand.weight set beats_per_weight 0}}
               {if
                  {exists right_hand.weight}
                  {right_hand.weight set beats_per_weight 0}}})
         (event_handlers
            ('' set_leftarm_true set_rightarm_true set_leftarm_false set_rightarm_false))
         (set_leftarm_true
            {'|='
               [flags]
               kP9LeftArm}
            {$this set_beats_per_weight left_hand.weight})
         (set_rightarm_true
            {'|='
               [flags]
               kP9RightArm}
            {$this set_beats_per_weight right_hand.weight})
         (set_leftarm_false
            {&=
               [flags]
               {'~' kP9LeftArm}}
            {$this set_beats_per_weight left_hand.weight})
         (set_rightarm_false
            {&=
               [flags]
               {'~' kP9RightArm}}
            {$this set_beats_per_weight right_hand.weight})
         (set_beats_per_weight
            ($setter)
            {do
               ($weight
                  {find_obj $clip.dude $setter})
               {if
                  $weight
                  {$weight set beats_per_weight IK_BLEND_TIME}}})
         VALIDATE_BLEND_2)
      (drum_body
         (resource
            drum_resource
            "kP9ContextDrumBody")
         (clip_flags
            ("kP9LeftArm"
               "kP9RightArm"
               "kP9LeftLeg"
               "kP9RightLeg"
               "kP9HideInstrument"
               "kP9AnimateEyes"
               "kP9LookAtCam"
               "kP9PlayIdleRealtime"
               "kP9PlayIdle"
               "kP9PlayIdleMellow"
               "kP9PlayMellow"
               "kP9PlayNormal"
               "kP9PlayEnergetic"
               "kP9Singing"
               "kP9NotSinging"
               "kP9PlayDirectedCut"))
         (enter
            {$clip.dude
               set
               hide_instrument
               {&
                  [flags]
                  kP9HideInstrument}})
         VALIDATE_BLEND_2)
      (floortom
         (resource
            drum_resource
            "kP9ContextFloortom"))
      (hihat
         (resource
            drum_resource
            "kP9ContextHihat"))
      (kick
         (resource
            drum_resource
            "kP9ContextKick"))
      (pedal_left
         (resource
            drum_resource
            "kP9ContextPedalLeft"))
      (pedal_right
         (resource
            drum_resource
            "kP9ContextPedalRight"))
      (ride
         (resource
            drum_resource
            "kP9ContextRide"))
      (snare
         (resource
            drum_resource
            "kP9ContextSnare"))
      (stick_left
         (resource
            drum_resource
            "kP9ContextStickLeft"))
      (stick_right
         (resource
            drum_resource
            "kP9ContextStickRight"))
      (tom_left
         (resource
            drum_resource
            "kP9ContextTomLeft"))
      (tom_right
         (resource
            drum_resource
            "kP9ContextTomRight"))
      (shell_guitar_body_right
         (resource
            guitar_resource
            "kP9ContextShellGuitarBodyRight"))
      (shell_guitar_body_left
         (resource
            guitar_resource
            "kP9ContextShellGuitarBodyLeft"))
      (extras
         (resource
            extras_resource
            "kP9ContextExtras"))
      (crowd
         (resource
            crowd_resource
            "kP9ContextCrowd")
         (clip_flags
            ())
         (hand clap)
         (editor
            (hand
               symbol
               (list
                  (clap fist horns lighters))
               (help
                  "what the hands should look like")))
         (criteria
            ((match
                  {do
                     ($shared_flags
                        {&
                           {$a_clip get flags}
                           {$b_clip get flags}})
                     {$a_clip shares_groups $b_clip}})
               (beat_align 1)
               (restrict
                  {&&
                     {< $b_start 1}
                     {< $a_end 2}}))
            ((cancel)))
         (enter
            {do
               ($hand
                  [hand])
               {with
                  $clip.dude
                  {hands.grp
                     set
                     draw_only
                     {switch
                        $hand
                        (clap clap.grp)
                        (fist fist.grp)
                        (horns horns.grp)
                        (lighters lighter.grp)}}}}))))
(CharClip
   (views
      (Flags
         (beat_align
            [beat_align])
         (LeftArm
            {&
               [flags]
               kP9LeftArm}
            bool)
         (RightArm
            {&
               [flags]
               kP9RightArm}
            bool)
         (LeftLeg
            {&
               [flags]
               kP9LeftLeg}
            bool)
         (RightLeg
            {&
               [flags]
               kP9RightLeg}
            bool)
         (IdleRealtime
            {&
               [flags]
               kP9PlayIdleRealtime}
            bool)
         (Idle
            {&
               [flags]
               kP9PlayIdle}
            bool)
         (IdleMellow
            {&
               [flags]
               kP9PlayIdleMellow}
            bool)
         (PlayMellow
            {&
               [flags]
               kP9PlayMellow}
            bool)
         (PlayNormal
            {&
               [flags]
               kP9PlayNormal}
            bool)
         (PlayEnergetic
            {&
               [flags]
               kP9PlayEnergetic}
            bool)
         (PlayHold
            {&
               [flags]
               kP9PlayHold}
            bool)
         (Singing
            {&
               [flags]
               kP9Singing}
            bool)
         (NotSinging
            {&
               [flags]
               kP9NotSinging}
            bool))))
(CharClipSet
   (editor
      (compress_and_copy
         script
         (script
            {do
               ($path
                  {{$this dir}
                     get_path_name})
               {if_else
                  {has_substr
                     $path
                     "/anim_src/"}
                  {do
                     {process_clips
                        {$this dir}}
                     {notify
                        "Done copying clips!"}}
                  {notify
                     "This only works on files in anim_src."}}})
         (help
            "Copy all the clips in here over to the character directories.")))
   (types
      (viseme)
      (crowd
         (load_tempo
            ($tempo $async $coordinator)
            {handle_type
               (clips.outfit load_tempo $tempo $async $coordinator)}))
      (bass_offset)
      (fret_left)
      (fret_right)
      (guitar_body_left)
      (guitar_body_right)
      (strum_left)
      (strum_right)
      (strum_strings_hi)
      (strum_strings_lo)
      (keyboard)
      (cowbell)
      (cymbal_left)
      (cymbal_right)
      (drum_add)
      (drum_body)
      (floortom)
      (hihat)
      (kick)
      (pedal_left)
      (pedal_right)
      (ride)
      (snare)
      (stick_left)
      (stick_right)
      (tom_left)
      (tom_right)
      (shell_guitar_body_right)
      (shell_guitar_body_left)
      (extras)))
(CharCollide
   (editor
      (flags
         bitfield
         (list
            (CHAR_HAIR_FLAGS))
         (help
            "Which collision volumes to hook up to this strand for collision"))))
(CharMeshHide
   (editor
      (flags
         bitfield
         (list
            (CHAR_HIDE_FLAGS))
         (help
            "Which flags this CharMeshHide has"))
      (hides
         (array
            (struct
               (draw
                  object
                  (class Draw)
                  (help
                     "object to hide"))
               (flags
                  bitfield
                  (list
                     (CHAR_HIDE_FLAGS))
                  (help
                     "If any flags match, hides draw")))))))
(CharCuff
   (editor
      (category
         symbol
         (list
            (feet legs torso wrist glasses))
         (help
            "The outfit category to cuff against"))))
(CharGuitarString
   (types
      (open_strums
         (parser guitar_string_open)
         (enter
            {if
               [parser]
               {handle
                  ([parser]
                     add_sink
                     $this)}})
         (exit
            {if
               [parser]
               {handle
                  ([parser]
                     remove_sink
                     $this)}})
         (open
            {$this set_open TRUE})
         (closed
            {$this set_open FALSE}))))
(CharLookAt
   (types
      (drum_head
         (enter
            {set
               [weight]
               {switch
                  {{$this dir}
                     get
                     clip_mode}
                  ((kClipModeMeta kClipModeLoadingScreen)
                     0)
                  0.8}}))))
(CharWeightSetter
   (editor
      (flags
         bitfield
         (list
            ("kP9LeftArm"
               "kP9RightArm"
               "kP9LeftLeg"
               "kP9RightLeg"
               "kP9AnimateEyes"
               "kP9LookAtCam"))
         (help
            "Which Band clip flags to look for")))
   (types
      (drummer_play
         (lhand_weight 1)
         (rhand_weight 1)
         (enter
            {set
               [base_weight]
               1}
            {handle
               (drums_left_hand add_sink $this)}
            {handle
               (drums_right_hand add_sink $this)})
         (exit
            {set
               [base_weight]
               1}
            {handle
               (drums_left_hand remove_sink $this)}
            {handle
               (drums_right_hand remove_sink $this)})
         (get_hand_weight
            ($group)
            {switch
               $group
               (hihat_fast 0.8)
               (snare_fast 0.5)
               (cymbal_r_grab 0.0)
               (cymbal_l_grab 0.0)
               (cymbal_l_crash 0.5)
               (cymbal_l_crash_big 0.2)
               (cymbal_r_crash 0.5)
               (cymbal_l_crash_fast 0.5)
               (floortom 0.5)
               (floortom_fast 0.5)
               (cymbal_l_side 0.2)
               (cymbal_l_side_fast 0.1)
               (cymbal_r_side 0.2)
               (cymbal_r_side_fast 0.1)
               (ride 0.65)
               (ride_fast 0.45)
               (ride_side_l 0.25)
               (ride_side_r 0.25)
               (cymbal_l 0.5)
               (cymbal_r 0.5)
               (tom_l 0.75)
               (tom_r 0.75)
               (tom_r_fast 0.5)
               (tom_l_fast 0.5)
               1})
         (drum_lhand
            ($group $length)
            {set
               [lhand_weight]
               {$this get_hand_weight $group}}
            {set
               [base_weight]
               {'*'
                  [lhand_weight]
                  [rhand_weight]}})
         (drum_rhand
            ($group $length)
            {set
               [rhand_weight]
               {$this get_hand_weight $group}}
            {set
               [base_weight]
               {'*'
                  [lhand_weight]
                  [rhand_weight]}}))))
(CharLipSync
   (init
      {$this set_type proj9})
   (types
      (proj9
         (import_dta
            {do
               ($p
                  {{$this dir}
                     get_path_name})
               {set
                  $p
                  {sprint
                     {file_get_path $p}
                     "/"
                     {file_get_base
                        {$this name}}
                     ".dta"}}
               {search_replace
                  $p
                  "/run/"
                  "/art/"
                  $p}
               {$this parse $p}})
         (editor
            (import_dta
               script
               (script
                  {$this import_dta})
               (help
                  "Imports the corresponding .dta from proj/art/songs/...."))))))
(CharLipSyncDriver
   (types
      (proj9
         (play_blink
            {set
               [lipsync]
               {{$this dir}
                  find
                  "blinktrack.lipsync"}}
            {set
               [loop]
               TRUE}
            {set
               [song_offset]
               {random_float 0 1000}})
         (play_smile
            {set
               [lipsync]
               {{$this dir}
                  find
                  "smile.lipsync"}}
            {set
               [loop]
               TRUE})
         (play_song
            {do
               ($lip
                  {find_obj
                     $world
                     {sprint
                        {{$this dir}
                           name}
                        ".lipsync"}})
               {if_else
                  $lip
                  {do
                     {set
                        [lipsync]
                        $lip}
                     {set
                        [song_offset]
                        {- WORLD_OFFSET_SEC}}}
                  {$this play_blink}}}))))
#include instruments.dta
(OutfitLoader
   #include outfitloader.dta)
#define CHAR_COMMON
((idle_realtime
      {$this set_play kP9PlayIdleRealtime})
   (idle
      {$this set_play kP9PlayIdle})
   (idle_mellow
      {$this set_play kP9PlayIdleMellow})
   (play_mellow
      {$this set_play kP9PlayMellow})
   (play
      {$this set_play kP9PlayNormal})
   (play_energetic
      {$this set_play kP9PlayEnergetic})
   (hold
      {$this set_play kP9PlayHold})
   (lean_in
      {$this set_leanin 1})
   (lean_out
      {$this set_leanin 0})
   (game_over
      {$this
         iterate
         CharIKMidi
         $midi
         {handle
            ($midi game_over)}}
      {$this
         iterate
         CharDriverMidi
         $midi
         {handle
            ($midi game_over)}}
      {if
         $p9director
         {do
            {if
               {!
                  {$p9director is_historical}}
               {$this idle_realtime}
               {$this set_leanin 0}}
            {set
               [song_group]
               ""}}})
   (game_outro
      {if
         {exists game}
         {$world remove_sink $this}})
   (sync_objects
      {if
         {exists bone_piano_base.mesh}
         {set
            $char
            {bone_pelvis.mesh trans_parent}}
         {bone_piano_base.mesh set_trans_parent $char}})
   (play_song
      {song.lipdrv play_song})
   (play_smile
      {song.lipdrv play_smile}))
#define CHAR_ENTER_COMMON
({if
      {&&
         {exists game}
         {game is_up}}
      {$world
         add_sink
         $this
         (game_over game_outro)}}
   {if
      $p9director
      {$this set_play kPlayIdleRealtime}
      {$this set_leanin 0}
      {$this play_song}}
   {if
      {&&
         $edit_mode
         {! $p9director}}
      {$this
         find_interest_objects
         {$this dir}}}
   {do
      ($mic
         {find_obj
            {$this dir}
            {sprint
               "mic_"
               {$this name}
               ".trans"}})
      {if
         {&&
            $mic
            {$this exists mic.ikhead}}
         {mic.ikhead set target $mic}}})
#define GUITARIST_MIDI_PARSERS
(none john_fret john_fret_flags john_fret_pos john_strum john_string_hi john_string_low george_fret george_fret_flags george_fret_pos george_strum george_string_hi george_string_low paul_fret paul_fret_flags paul_fret_pos paul_strum paul_string_hi paul_string_low)
(CharDriver
   (types
      (main)
      (expression)
      (drum_add)))
(CharDriverMidi
   (types
      (musician
         (editor
            (parser
               symbol
               (help
                  "Names of the midi parser to hook into"))
            (flag_parser
               symbol
               (help
                  "Secondary parser for flags")))
         (enter
            {if
               {!
                  {exists
                     [parser]}}
               {if
                  {&&
                     {$this dir}
                     {{$this dir}
                        dir}}
                  {do
                     ($scene
                        {{$this dir}
                           dir})
                     {unless
                        {==
                           {$scene get_type}
                           shell}
                        {if
                           {'||'
                              $venue_test
                              $char_test
                              {&&
                                 $edit_mode
                                 {!=
                                    $scene
                                    {$this dir}}}}
                           {do
                              ($c '')
                              {[clips_ptr]
                                 iterate_self
                                 CharClip
                                 $d
                                 {set $c $d}}
                              {$this play $c kPlayGraphLoop}}}}}}})
         (game_over
            {handle
               ([parser]
                  remove_sink
                  $this)})
         (drum_lhand
            ($group $length)
            {$this drum_hit $group $length})
         (drum_rhand
            ($group $length)
            {$this drum_hit $group $length})
         (strum
            ($group $length)
            {do
               ($char
                  {bone_pelvis.mesh trans_parent})
               ($flags
                  {&
                     {$char get_play_flags}
                     kP9PlayAndAttitudeFlags})
               ($group
                  {[clips_ptr]
                     find
                     $group})
               ($clip
                  {$group find_clip $flags})
               {unless
                  $clip
                  {print
                     "NOTIFY: "
                     {path_name $group}
                     " could not find clip with flags "
                     $flags
                     ", trying 0\n"}
                  {set
                     $clip
                     {$group get_clip}}}
               {if_else
                  $clip
                  {$this midi_parser $clip $length}
                  {print
                     "NOTIFY: "
                     {path_name $group}
                     " could find no clip\n"}}})
         (strum_no_flags
            ($group $length)
            {do
               ($char
                  {bone_pelvis.mesh trans_parent})
               ($group
                  {[clips_ptr]
                     find
                     $group})
               {set
                  $clip
                  {$group get_clip}}
               {if_else
                  $clip
                  {$this midi_parser $clip $length}
                  {print
                     "NOTIFY: "
                     {path_name $group}
                     " could find no clip\n"}}})
         (drum_hit
            ($group_name $length)
            {do
               ($char
                  {bone_pelvis.mesh trans_parent})
               ($group_obj
                  {[clips_ptr]
                     find
                     $group_name})
               {if_else
                  $group_obj
                  {do
                     {set
                        $clip
                        {$group_obj get_clip}}
                     {if_else
                        $clip
                        {$this midi_parser $clip $length}
                        {print
                           "NOTIFY: "
                           {path_name $group_obj}
                           " could find no clip\n"}}}
                  {print
                     "NOTIFY: "
                     {path_name
                        [clips_ptr]}
                     " no group "
                     '+'
                     $group_name
                     '+'
                     "\n"}}}))))
(CharHair
   (init
      {do
         ($ww
            {find_obj
               {$this dir}
               world.wind})
         {if
            $ww
            {set
               [wind]
               $ww}}})
   (editor
      (strands
         (array
            (struct
               (hookup_flags
                  bitfield
                  (list
                     (CHAR_HAIR_FLAGS))
                  (help
                     "Which collision volumes to hook up to this strand for collision")))))))
(CharIKMidi
   (types
      (musician
         (parser guitar_fret_pos)
         (editor
            (parser
               symbol
               (help
                  "Name of the midi parser to hook into")))
         (enter
            {if
               {exists
                  [parser]}
               {[parser]
                  add_sink
                  $this}})
         (exit
            {handle
               ([parser]
                  remove_sink
                  $this)})
         (game_over
            {handle
               ([parser]
                  remove_sink
                  $this)}))))
#define INTEREST_CATEGORY_BITFIELD
((BIT_kP9InterestCategoryCamera
      bool
      (alias Camera))
   (BIT_kP9InterestCategoryMic
      bool
      (alias Microphone))
   (BIT_kP9InterestCategoryCrowd
      bool
      (alias Crowd))
   (BIT_kP9InterestCategoryFretHand
      bool
      (alias FretHand))
   (BIT_kP9InterestCategoryDrumTarget
      bool
      (alias DrumTarget))
   (BIT_kP9InterestCategoryGeorge
      bool
      (alias George))
   (BIT_kP9InterestCategoryJohn
      bool
      (alias John))
   (BIT_kP9InterestCategoryPaul
      bool
      (alias Paul))
   (BIT_kP9InterestCategoryRingo
      bool
      (alias Ringo))
   (BIT_kP9InterestCategoryEyes
      bool
      (alias Anyones_Eyes)))
(CharInterest
   (editor
      (category_flags
         (struct INTEREST_CATEGORY_BITFIELD)
         (help
            "Category or Categories this interest belongs to, app specific.  Attention system sometimes filters out interests based on category"))))
(CharEyes
   (editor
      (interest_filter_testing
         (struct INTEREST_CATEGORY_BITFIELD)
         (help
            "Test filtering of interest objects by category - lookats will only happen on the categories checked."))
      (default_interest_categories
         (struct INTEREST_CATEGORY_BITFIELD)
         (help
            "check off the categories that this character can see by default"))
      (p9hack_camera_zoffset
         float
         (help
            "when looking at a camera interest, this offsets up or down in the z direction")
         (range -100 100))
      (p9hack_scale_zoffset_with_dist
         bool
         (help
            "scale's p9hack_camera_zoffset smoothly as the distance to the camera increases"))
      (p9hack_camera_hweight
         float
         (help
            "when looking at a camera interest, this positions the interest to line up with the head horizontally. 0=no change, 1=forces is completely head on")
         (range 0 1))))
(P9Character
   (editor)
   (types
      (guitar
         (strum_parser none)
         (fret_parser none)
         (fret_flag_parser none)
         (fret_pos_parser none)
         (string_hi_parser none)
         (string_low_parser none)
         (editor
            (strum_parser
               symbol
               (list
                  (GUITARIST_MIDI_PARSERS))
               (help
                  "Midi parser to use for strumming"))
            (fret_parser
               symbol
               (list
                  (GUITARIST_MIDI_PARSERS))
               (help
                  "Midi parser to use for fretting"))
            (fret_flag_parser
               symbol
               (list
                  (GUITARIST_MIDI_PARSERS))
               (help
                  "Midi parser to use for fret flags"))
            (fret_pos_parser
               symbol
               (list
                  (GUITARIST_MIDI_PARSERS))
               (help
                  "Midi parser to use for fret position"))
            (string_hi_parser
               symbol
               (list
                  (GUITARIST_MIDI_PARSERS))
               (help
                  "Midi parser to use for high string"))
            (string_low_parser
               symbol
               (list
                  (GUITARIST_MIDI_PARSERS))
               (help
                  "Midi parser to use for low string"))
            (strum_and_fret
               script
               (help
                  "Makes the character strum and fret so the arms aren't all wacky")
               (script
                  {if
                     {exists strum.dmidi}
                     {strum.dmidi play strum_up_slow kPlayGraphLoop}}
                  {if
                     {exists fret.dmidi}
                     {fret.dmidi play chord_c kPlayGraphLoop}})
               (hide
                  {!=
                     {$this get_type}
                     guitar}))
            (fret_hi
               script
               (script
                  {handle
                     (fret.ikmidi set cur_spot spot_neck_fret11.mesh)})
               (hide
                  {!=
                     {$this get_type}
                     guitar})
               (help
                  "set the fret hand high on the neck"))
            (fret_med_hi
               script
               (script
                  {handle
                     (fret.ikmidi set cur_spot spot_neck_fret08.mesh)})
               (hide
                  {!=
                     {$this get_type}
                     guitar})
               (help
                  "set the fret hand med-high on the neck"))
            (fret_med
               script
               (script
                  {handle
                     (fret.ikmidi set cur_spot spot_neck_fret05.mesh)})
               (hide
                  {!=
                     {$this get_type}
                     guitar})
               (help
                  "set the fret hand med on the neck"))
            (fret_med_low
               script
               (script
                  {handle
                     (fret.ikmidi set cur_spot spot_neck_fret03.mesh)})
               (hide
                  {!=
                     {$this get_type}
                     guitar})
               (help
                  "set the fret hand med-low on the neck"))
            (fret_low
               script
               (script
                  {handle
                     (fret.ikmidi set cur_spot spot_neck_fret01.mesh)})
               (hide
                  {!=
                     {$this get_type}
                     guitar})
               (help
                  "set the fret hand low on the neck")))
         (sync_objects
            {foreach
               $name
               (fret.dmidi strum.dmidi string_hi.dmidi string_low.dmidi zBassOffset.drv fret_add.dmidi)
               {if
                  {&&
                     {exists $name}
                     {exists bone.servo}}
                  {$name set bones bone.servo}}}
            {if
               {exists main.drv}
               {if
                  {exists right_hand.weight}
                  {right_hand.weight set driver main.drv}}
               {if
                  {exists left_hand.weight}
                  {left_hand.weight set driver main.drv}}}
            {if
               {exists fret.dmidi}
               {fret.dmidi set_inactive_clip_name all_up}
               {fret.dmidi play all_up}}
            {if
               {exists strum.dmidi}
               {strum.dmidi set_inactive_clip_name open_strum_clip}
               {strum.dmidi play open_strum_clip}})
         (enter
            CHAR_ENTER_COMMON
            {if
               {exists fret.dmidi}
               {fret.dmidi
                  set
                  parser
                  {$this get fret_parser}}
               {fret.dmidi
                  set
                  flag_parser
                  {$this get fret_flag_parser}}
               {fret.dmidi enter}}
            {if
               {exists strum.dmidi}
               {strum.dmidi
                  set
                  parser
                  {$this get strum_parser}}
               {strum.dmidi enter}}
            {if
               {exists fret.ikmidi}
               {fret.ikmidi
                  set
                  parser
                  {$this get fret_pos_parser}}
               {fret.ikmidi enter}}
            {if
               {exists string_hi.dmidi}
               {string_hi.dmidi
                  set
                  parser
                  {$this get string_hi_parser}}
               {string_hi.dmidi enter}}
            {if
               {exists string_low.dmidi}
               {string_low.dmidi
                  set
                  parser
                  {$this get string_low_parser}}
               {string_low.dmidi enter}}
            {if
               {exists zBassOffset.drv}
               {handle
                  (zBassOffset.drv enter)}}
            {if
               {exists fret_add.drv}
               {fret_add.drv play all_up}})
         CHAR_COMMON)
      (drum
         (sync_objects
            {if
               {exists bone_drumbase.mesh}
               {set
                  $char
                  {bone_pelvis.mesh trans_parent}}
               {bone_drumbase.mesh set_trans_parent $char}}
            {foreach
               $name
               (floortom.dmidi hihat.dmidi kick.dmidi left_crash.dmidi left_tom.dmidi ride.dmidi right_crash.dmidi right_tom.dmidi snare.dmidi main_add.drv)
               {if
                  {&&
                     {exists $name}
                     {exists bone.servo}}
                  {$name set bones bone.servo}}}
            {foreach
               $name
               (left_foot.dmidi left_hand.dmidi right_foot.dmidi right_hand.dmidi)
               {if
                  {exists $name}
                  {$name set bones limbs.blender}}}
            {if
               {exists main.drv}
               {foreach
                  $weight
                  (left_foot.weight left_hand.weight right_foot.weight right_hand.weight)
                  {if
                     {exists $weight}
                     {$weight set driver main.drv}}}}
            {if
               {$this exists instrument.grp}
               {if
                  {$this exists drum_L-stick.mesh}
                  {instrument.grp add_object drum_L-stick.mesh}}
               {if
                  {$this exists drum_R-stick.mesh}
                  {instrument.grp add_object drum_R-stick.mesh}}})
         (enter
            CHAR_ENTER_COMMON
            {if
               {$this exists drumset.grp}
               {if
                  $p9director
                  {right_hand.dmidi play ready}
                  {left_hand.dmidi play ready}}})
         (editor
            (sit_and_play
               script
               (help
                  "Makes the drummer sit down by playing still pose")
               (script
                  {$this set_play kPlayIdleRealtime}
                  {if
                     {exists main.drv}
                     {main.drv play still}})
               (hide
                  {!=
                     {$this get_type}
                     drum})))
         CHAR_COMMON)))
#define CharPart_None
(1)
#define CharPart_FullBody
(2)
#define CharPart_Hair
(4)
#define CharPart_Head
(8)
#define CharPart_Torso
(16)
#define CharPart_Hands
(32)
#define CharPart_Pants
(64)
#define CharPart_Shoes
(128)
#define CharPart_LeftLowerArm
(256)
#define CharPart_RightLowerArm
(512)
#define CharPart_Neck
(1024)
(Character
   (types
      (extras
         (enter
            {unless
               $edit_mode
               {$this set_showing FALSE}
               {$this update_sphere}})
         (validate
            {if
               {&&
                  {!=
                     {$this dir}
                     $this}
                  [inline_proxy]}
               {notify
                  {path_name $this}
                  " must not have inline_proxy true"}}))
      (dancer
         (enter
            {do
               ($way
                  {find_obj
                     {$this dir}
                     Waypoint.way})
               {if
                  $way
                  {$this teleport $way}}})
         (validate
            {if
               {&&
                  {!=
                     {$this dir}
                     $this}
                  {!
                     [inline_proxy]}}
               {notify
                  {path_name $this}
                  " should have inline_proxy true"}})
         (dance1
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_01
                  {'|' kPlayGraphLoop kPlayLast})})
         (dance2
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_02
                  {'|' kPlayGraphLoop kPlayLast})})
         (dance3
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_03
                  {'|' kPlayGraphLoop kPlayLast})})
         (dance4
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_04
                  {'|' kPlayGraphLoop kPlayLast})})
         (dance5
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_05
                  {'|' kPlayGraphLoop kPlayLast})})
         (dance_hula
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_hula
                  {'|' kPlayGraphLoop kPlayLast})})
         (dance_snake
            {handle
               ([driver]
                  play_group
                  dreamscape_dance_snake
                  {'|' kPlayGraphLoop kPlayLast})}))
      (light_target
         (editor
            (base_anim
               symbol
               (list
                  {$this get_clip_names}))
            (base_amplitude
               float
               (range 0 1)
               (help
                  "physical scale of animation loop"))
            (base_speed
               float
               (help
                  "speed multiplier"))
            (base_phase
               float
               (range 0 1)
               (help
                  "0 to 1, 0.5 would start the loop half way through"))
            (add_anim
               symbol
               (list
                  {$this get_clip_names}))
            (add_amplitude
               float
               (range 0 1)
               (help
                  "physical scale of animation loop"))
            (add_speed
               float
               (help
                  "speed multiplier"))
            (add_phase
               float
               (range 0 1)
               (help
                  "0 to 1, 0.5 would start the loop half way through"))
            (test
               script
               (script
                  {$this test_anim})))
         (base_anim '')
         (base_amplitude 1)
         (base_speed 1)
         (base_phase 0)
         (add_anim '')
         (add_amplitude 0.5)
         (add_speed 1)
         (add_phase 0)
         (get_clip_names
            {object_list
               {main.drv get clips_ptr}
               CharClip
               FALSE})
         (test_anim
            {$this
               play_anim
               [base_anim]
               [base_amplitude]
               [base_speed]
               [base_phase]
               [add_anim]
               [add_amplitude]
               [add_speed]
               [add_phase]})
         (play_anim
            ($base_anim $base_amp $base_speed $base_phase $add_anim $add_amp $add_speed $add_phase)
            {base_pos.drv set weight $base_amp}
            {target_pos.drv set weight $add_amp}
            {main.drv set beat_scale $base_speed}
            {base_pos.drv set beat_scale $base_speed}
            {base_rot.drv set beat_scale $add_speed}
            {target_pos.drv set beat_scale $add_speed}
            {base_pos_still.drv
               play
               still
               {'|' kPlayNoBlend kPlayGraphLoop}}
            {target_pos_still.drv
               play
               still
               {'|' kPlayNoBlend kPlayGraphLoop}}
            {main.drv
               play
               $base_anim
               {'|' kPlayNoBlend kPlayGraphLoop}}
            {base_pos.drv
               play
               $base_anim
               {'|' kPlayNoBlend kPlayGraphLoop}}
            {base_rot.drv
               play
               $add_anim
               {'|' kPlayNoBlend kPlayGraphLoop}}
            {target_pos.drv
               play
               $add_anim
               {'|' kPlayNoBlend kPlayGraphLoop}}
            {set
               $clip
               {main.drv first_clip}}
            {set
               $offset
               {'*'
                  {$clip get length}
                  $base_phase}}
            {main.drv offset $offset $offset}
            {set
               $clip
               {base_pos.drv first_clip}}
            {set
               $offset
               {'*'
                  {$clip get length}
                  $base_phase}}
            {base_pos.drv offset $offset $offset}
            {set
               $clip
               {base_rot.drv first_clip}}
            {set
               $offset
               {'*'
                  {$clip get length}
                  $add_phase}}
            {base_rot.drv offset $offset $offset}
            {set
               $clip
               {target_pos.drv first_clip}}
            {set
               $offset
               {'*'
                  {$clip get length}
                  $add_phase}}
            {target_pos.drv offset $offset $offset}))
      (crowd
         (editor
            (load_slow
               script
               (script
                  {$this load_tempo slow})
               (help
                  "load slow clips"))
            (load_medium
               script
               (script
                  {$this load_tempo medium})
               (help
                  "load medium clips"))
            (load_fast
               script
               (script
                  {$this load_tempo fast})
               (help
                  "load fast clips")))
         (load_tempo
            ($tempo)
            {if_else
               {exists male_base}
               {male_base load_tempo $tempo FALSE 0}
               {notify
                  {path_name $this}
                  " has no male_base, can't load clips!"}}
            {if_else
               {exists female_base}
               {female_base load_tempo $tempo FALSE 0}
               {notify
                  {path_name $this}
                  " has no female_base, can't load clips!"}}))))