#define WORLD_MODE_COMMON
((first_shot_ok
      {set
         $shot_ok.bie
         {&&
            {exists beatmatch}
            {game is_playing}
            {! $edit_mode}
            {! $cameras.validating}}}))
#define PICK_PIANO
({switch
      $venue
      (none none)
      (dreamscape
         {if_else
            {has_substr $wp greenscreen}
            piano_organ
            piano_steinwaygrand})
      piano_voxcontinental})
#define WORLD_SET_OUTFITS
((set_outfits
      {if
         {&&
            $edit_mode
            {! $p9director}}
         {do
            ($george
               {find_obj $this george})
            ($john
               {find_obj $this john})
            ($paul
               {find_obj $this paul})
            ($ringo
               {find_obj $this ringo})
            ($wp
               {$this get_path_name})
            ($ars
               {has_substr $wp abbeyroad})
            ($venue
               {cond
                  ({has_substr $wp budokan}
                     budokan)
                  ({has_substr $wp cavern}
                     cavern)
                  ({has_substr $wp rooftop}
                     rooftop)
                  ({has_substr $wp shea}
                     shea)
                  ({has_substr $wp sullivan}
                     sullivan)
                  ({has_substr $wp blank}
                     none)
                  dreamscape})
            ($era
               {if_else
                  {find_elem
                     (rooftop dreamscape)
                     $venue}
                  dream
                  early})
            ($outfit
               {cond
                  ({$this
                        has
                        (outfit)}
                     {$this get outfit})
                  ({&&
                        $world
                        {$world
                           has
                           (outfit)}}
                     {$world get outfit})
                  {switch
                     $venue
                     (budokan budokan01)
                     (dreamscape sgtpepper)
                     $venue}})
            ($configuration
               {cond
                  ({$this exists P9WaypointConfiguration}
                     {P9WaypointConfiguration get configuration})
                  kP9Paul})
            {if
               $george
               {foreach
                  $e
                  (male_extras female_extras)
                  {do
                     ($out
                        {find_obj
                           {$george dir}
                           $e
                           OutfitLoader.outfit})
                     {if
                        $out
                        {$out select venues $venue}
                        {$out start_load FALSE}}}}}
            {if
               $george
               {{$george get_outfitloader}
                  select
                  instrument0
                  {switch
                     $configuration
                     (kP9Sitar sitar)
                     (kP9KeyboardGeorge PICK_PIANO)
                     guitar_rh_gibson62j160}}
               {$george set era $era}
               {$george set tempo medium}
               {$george set venue $venue}
               {{$george get_outfitloader}
                  select
                  historical
                  $outfit}
               {$george start_load FALSE}}
            {if
               $john
               {{$john get_outfitloader}
                  select
                  instrument0
                  {if_else
                     {== $configuration kP9KeyboardJohn}
                     PICK_PIANO
                     guitar_rh_gibson62j160}}
               {$john set era $era}
               {$john set tempo medium}
               {$john set venue $venue}
               {{$john get_outfitloader}
                  select
                  historical
                  $outfit}
               {$john start_load FALSE}}
            {if
               $paul
               {{$paul get_outfitloader}
                  select
                  instrument0
                  {if_else
                     {== $configuration kP9KeyboardPaul}
                     PICK_PIANO
                     guitar_rh_gibson62j160}}
               {$paul set era $era}
               {$paul set tempo medium}
               {$paul set venue $venue}
               {{$paul get_outfitloader}
                  select
                  historical
                  $outfit}
               {$paul start_load FALSE}}
            {if
               $ringo
               {{$ringo get_outfitloader}
                  select
                  instrument0
                  {if_else
                     {== $configuration kP9RingoSolo}
                     none
                     {switch
                        $venue
                        (none none)
                        (dreamscape drum_dream01)
                        {symbol
                           {sprint
                              "drum_"
                              $venue}}}}}
               {$ringo set era $era}
               {$ringo set tempo medium}
               {$ringo set venue $venue}
               {{$ringo get_outfitloader}
                  select
                  historical
                  $outfit}
               {$ringo start_load FALSE}}}}))
#define WORLD_OBJECT_EDITOR_COMMON
((cam_validate
      script
      (script
         {$this validate_cameras})
      (help
         "Test the camshots to see if all are there"))
   (light_validate
      script
      (script
         {$this validate_light_presets})
      (help
         "validate lighting presets"))
   (start_crowd
      script
      (help
         "Animates the crowd")
      (script
         {$this
            iterate
            WorldCrowd
            $crowd
            {$crowd
               iterate_frac
               (1
                  {main.drv
                     play_group
                     great
                     {'|' kPlayNoBlend kPlayGraphLoop kPlayRealTime}})}}))
   (stop_crowd
      script
      (help
         "Stops the crowd")
      (script
         {$this
            iterate
            WorldCrowd
            $crowd
            {$crowd
               iterate_frac
               (1
                  {main.drv enter})}}))
   (test_light_preset
      object
      (class LightPreset)
      (help
         "The light preset to start"))
   (start_preset
      script
      (help
         "Starts the selected preset")
      (script
         {$this start_test_preset}))
   (stop_preset
      script
      (help
         "Stops any currently animating light preset")
      (script
         {if
            {exists test_light_preset_anim}
            {delete test_light_preset_anim}}
         {if
            {exists test_light_preset_task}
            {delete test_light_preset_task}}
         {if
            {exists cycle_presets_task}
            {delete cycle_presets_task}}))
   (cycle_presets
      script
      (help
         "Cycle through the different presets.")
      (script
         {if
            {exists cycle_presets_task}
            {delete cycle_presets_task}}
         {thread_task
            kTaskSeconds
            (preserve)
            (name cycle_presets_task)
            (script
               {set
                  [test_light_preset]
                  {$this
                     next_preset
                     [test_light_preset]}}
               {if
                  {exists milo}
                  {milo update_open_editor $this}}
               {$this start_test_preset}
               {$task sleep 8}
               {if
                  {!=
                     [test_light_preset]
                     ""}
                  {$task loop}})}))
   (custom_start_trigger
      object
      (class EventTrigger)
      (help
         "Override for ns_start.trig.  Triggered when a new world is set.")))
#include world_validate.dta
#define WORLD_MIDI_PARSERS
(((world_drum_triggers kSinkModeExport)
      (world_crowd_parser kSinkModeExport)))
#define SET_CHAR_ENVS
({unless
      $p9director
      {if
         {&&
            {exists george.env}
            {exists george}}
         {george set environ george.env}}
      {if
         {&&
            {exists paul.env}
            {exists paul}}
         {paul set environ paul.env}}
      {if
         {&&
            {exists john.env}
            {exists john}}
         {john set environ john.env}}
      {if
         {&&
            {exists ringo.env}
            {exists ringo}}
         {ringo set environ ringo.env}}
      {do
         ($ww
            {find_obj $this george world.wind})
         {if
            {&&
               $ww
               {exists Wind.wind}}
            {$ww copy Wind.wind kCopyDeep}}}})
#define WORLD_SETUP_CHARACTERS
(SET_CHAR_ENVS
   {unless
      $p9director
      {if
         {&&
            {has_substr
               {path_name $this}
               "greenscreen/scene"}
            {exists world.cam}}
         {$this set_trans_parent world.cam}}
      {if
         {exists P9WaypointConfiguration}
         {P9WaypointConfiguration view_configuration}}})
#define WORLD_OBJECT_BASE
(WORLD_MODE_COMMON
   (start kDataUnhandled)
   (coda_success
      {handle
         ($this bre_success)})
   (enter
      WORLD_SETUP_CHARACTERS
      #ifndef HX_WII
      {stagekit_reset}
      #endif
      {foreach
         $parser
         WORLD_MIDI_PARSERS
         {handle
            ({elem $parser 0}
               add_sink
               $world
               ()
               {elem $parser 1})}}
      {set $camera.num_players_failed 0}
      {if
         {exists game}
         {game
            add_sink
            $world
            ()
            kSinkModeExportType}
         {if
            $p9crowdaudio
            {$p9crowdaudio
               set
               should_play_venue_intro
               {==
                  {$this get_intro_category}
                  INTRO_VENUE}}
            {$p9crowdaudio
               set
               should_play_venue_outro
               {find_elem
                  (OUTRO_VENUE OUTRO_FINALE)
                  {$this get_win_category}}}}
         {if
            {==
               {$this get_intro_category}
               INTRO_VENUE}
            {handle
               ({story performer}
                  handle_venue_intro_seen)}}})
   (get_intro_category
      {if_else
         {'||'
            $cheat.force_intro
            {&&
               {!
                  {game get replay}}
               $p9director
               {$p9director is_historical}
               {story performer}
               {{story performer}
                  should_play_venue_intro}}}
         INTRO_VENUE
         ''})
   (exit
      #ifndef HX_WII
      {stagekit_reset}
      #endif
      {if
         {exists game}
         {game remove_sink $this}})
   (change_proxies)
   (intro_start kDataUnhandled)
   (intro_end kDataUnhandled)
   (intro_skip
      {handle
         (game intro_end)}
      kDataUnhandled)
   (next_outro_camera
      {do
         ($mode)
         ($shot
            {$this pick_shot OUTRO_MULTI})
         {if
            $shot
            {if
               {>
                  {$shot duration_seconds}
                  0}
               {script_task
                  kTaskSeconds
                  (delay
                     {$shot duration_seconds})
                  (script
                     {handle
                        ($this next_outro_camera)})}}}})
   (game_lost
      {if
         $p9director
         {with
            $p9director
            {set
               [disabled]
               TRUE}
            {if_else
               {$this is_historical}
               {do
                  {$world set_force_postproc transition_black.pp 1}
                  {script_task
                     kTaskSeconds
                     (delay 1)
                     (script
                        {handle
                           (game game_outro)})}}
               {do
                  {set
                     [scenetrigger]
                     {$this find_first_abbeyroad}}
                  {set
                     [shot]
                     LOSE}
                  {set
                     [dream_outfit]
                     ''}
                  {$this
                     postproc_interp
                     {$world find film_16mm.pp}
                     {$world find film_16mm.pp}
                     0}}}}}
      kDataUnhandled)
   (get_win_category
      {cond
         ({&&
               $p9director
               {$p9director is_historical}
               {story performer}
               {{story performer}
                  is_winning}}
            OUTRO_FINALE)
         ({'||'
               $cheat.force_outro
               {&&
                  $p9director
                  {$p9director is_historical}
                  {story performer}
                  {{story performer}
                     should_play_venue_outro}}}
            OUTRO_VENUE)
         WIN})
   (game_win_camera
      {if
         $p9director
         {do
            ($category
               {$this get_win_category})
            {with
               $p9director
               {set
                  [disabled]
                  TRUE}
               {if
                  {$this is_dreamscape}
                  {set
                     [scenetrigger]
                     {$p9director find_first_abbeyroad}}
                  {set
                     [dream_outfit]
                     ''}
                  {$world set_force_postproc film_16mm.pp 1}}
               {set
                  [shot]
                  $category}}}})
   (set_force_postproc
      ($postproc $rate)
      {if
         $p9director
         {with
            $p9director
            {set
               [force_postproc]
               {find_obj $world $postproc}}
            {set
               [force_postproc_blend]
               0}
            {set
               [force_postproc_blend_rate]
               $rate}}})
   (game_won
      {$this game_win_camera}
      kDataUnhandled)
   (game_won_band0
      {$this game_win_camera}
      kDataUnhandled)
   (game_won_band1
      {$this game_win_camera}
      kDataUnhandled)
   (game_won_tie
      {$this game_win_camera}
      kDataUnhandled)
   (game_won_finale
      {$this game_win_camera}
      {$p9director postproc_interp film_rooftop.pp film_rooftop.pp 0}
      {script_task
         kTaskSeconds
         (delay 1.0)
         (script
            {$this set_force_postproc transition_white.pp 0.5})}
      {script_task
         kTaskSeconds
         (delay 3.0)
         (script
            {$p9director postproc_interp transition_white.pp transition_white.pp 0}
            {$this set_force_postproc transition_black.pp 1})}
      {script_task
         kTaskSeconds
         (delay 4.0)
         (script
            {handle
               (game game_outro)})}
      kDataUnhandled)
   ':'
   The
   game
   is
   'over,'
   ignore
   parsers.
   (game_over
      {handle
         ($p9director
            force_shot
            "")}
      {$this delete_free_cam}
      {foreach
         $parser
         WORLD_MIDI_PARSERS
         {handle
            ({elem $parser 0}
               remove_sink
               $world)}}
      kDataUnhandled)
   (excitement
      ($excitement_level)
      {switch
         $excitement_level
         ((kExcitementBoot)
            {handle
               ($this excitement_boot)})
         ((kExcitementBad)
            {handle
               ($this excitement_bad)})
         ((kExcitementOkay)
            {handle
               ($this excitement_okay)})
         ((kExcitementGreat)
            {handle
               ($this excitement_great)})
         ((kExcitementPeak)
            {handle
               ($this excitement_peak)})}
      kDataUnhandled)
   (player_failed
      ($inst)
      {'++' $camera.num_players_failed})
   (player_saved
      ($savior)
      {script_task
         kTaskSeconds
         (delay 0.35)
         (script
            {$this player_saved_activate $savior})})
   (player_saved_activate
      ($inst)
      {-- $camera.num_players_failed})
   #ifndef HX_WII
   (halfbeat
      {stagekit_left_right kStageSweepLeft_medium kStageSweepRight_medium})
   (quarterbeat
      {stagekit_left_right kStageSweepLeft_fast kStageSweepRight_fast})
   (beat
      {stagekit_left_right kStageSweepLeft_slow kStageSweepRight_slow})
   #endif)