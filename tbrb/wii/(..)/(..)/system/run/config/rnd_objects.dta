(Anim
   (description
      "Base class for animatable objects. Anim objects change\n        their state or other objects.")
   (allowed_dirs)
   (editor
      (rate
         int
         (list RATE_ENUM)
         (help
            "Rate to animate"))
      (frame
         float
         (help
            "Frame of animation")
         (range
            0
            {$this end_frame})
         (no_test)))
   (views
      (animating
         {$this is_animating}
         ("current frame"
            {$this frame}))))
(Poll
   (description
      "Abstract base class for pollable RND objects")
   (allowed_dirs)
   (editor
      (enter
         script
         (script
            {$this enter}))
      (exit
         script
         (script
            {$this exit})))
   (types))
(PropAnim
   (description
      "Animate any properties on target object")
   (ext anim)
   (superclasses Anim)
   (types
      (song_anim
         (song TRUE))))
(AnimFilter
   (description
      "An AnimFilter object modifies the playing of another animatable object")
   (superclasses Anim)
   (ext filt)
   (types)
   (editor
      (anim
         object
         (post_sync
            {milo update_open_editor $this})
         (list
            {$this
               safe_anims
               {if_else
                  {exists milo}
                  {milo cur_dir}
                  {$this dir}}})
         (help
            "Animatable object that receives filtered frame"))
      (start
         float
         (help
            "Overriden start frame of animation"))
      (end
         float
         (help
            "Overriden end frame of animation"))
      (offset
         float
         (help
            "Amount to offset frame for animation"))
      (scale
         float
         (read_only
            {!=
               [period]
               0.0})
         (help
            "Multiplier to speed of animation"))
      (period
         float
         (refresh scale)
         (help
            "Alternative to scale, overriden period of animation"))
      (snap
         float
         (help
            "Snap frame to nearest multiple"))
      (jitter
         float
         (help
            "Jitter frame randomly up to this amount"))
      (type
         int
         (list ANIM_ENUM)
         (help
            "How to treat the frame outside of start and end"))))
(Blur
   (description
      "A Blur object renders an object with more transparency at\n                 older positions. It is drawable and should replace the\n                 blurred object as a draw child.")
   (superclasses Draw)
   (ext blur)
   (types)
   (editor
      (target
         object
         (list
            {do
               ($list
                  ())
               {resize $list 0}
               {push_back
                  $list
                  ""}
               {{$this dir}
                  iterate
                  Mesh
                  $m
                  {push_back $list $m}}
               {{$this dir}
                  iterate
                  Text
                  $t
                  {push_back $list $t}}
               $list})
         (help
            "Target for the blur to occur on."))
      (length
         int
         (range 0 100)
         (help
            "Number of blur keys."))
      (rate
         int
         (range 1 100000)
         (help
            "Number of draw updates between keys"))
      (falloff
         float
         (range 0 1)
         (help
            "Alpha falloff along length"))))
(Cam
   (description
      "A Camera object is drawable and transformable. When drawn\n                 it sets up projection and clipping parameters for\n                 subsequent draw siblings.")
   (superclasses Trans)
   (ext cam)
   (types)
   (editor
      (near_plane
         float
         (help
            "The distance in world coordinates to the near clipping\n            plane. The near/far ratio is limited to 1:1000 to preserve\n            Z-buffer resolution."))
      (far_plane
         float
         (help
            "The distance in world coordinates to the far clipping\n            plane. The near/far ratio is limited to 1:1000 to preserve\n            Z-buffer resolution. Note that on the PS2, object polys are\n            culled rather than clipped to the far plane."))
      (y_fov float)
      (z_range
         VECTOR2
         (help
            "The part of the Z-buffer to use, in normalized\n            coordinates. It can be useful to draw a scene where the near\n            and far planes must exceed the 1:1000 ratio (so multiple\n            cameras are used to draw farthest to nearest objects, each\n            using a closer range of the z-buffer) or to leave some\n            z-buffer for HUD overlay objects."))
      (screen_rect
         RECT
         (help
            "The area of the screen in normalized coordinates\n            (0 to 1) to draw into."))
      (set_tool_cam
         script
         (script
            {milo set tool_cam $this}
            {milo update_objects TRUE})
         (hide
            {==
               {milo get tool_cam}
               $this})
         (help
            "Applies this cam as the tool view."))
      (reset_tool_cam
         script
         (script
            {milo
               set
               tool_cam
               ""}
            {milo update_objects TRUE})
         (hide
            {==
               {milo get tool_cam}
               ""})
         (help
            "Resets the tool view to be same as Milo's view."))))
(CamAnim
   (description
      "A CamAnim object animates Camera properties.")
   (superclasses Anim)
   (ext cnm)
   (types))
(TexRenderer
   (description
      "TexRender renders a draw and cam into a texture.")
   (superclasses Anim Draw)
   (ext rndtex)
   (types)
   (editor
      (draw
         object
         (class Draw)
         (help
            "Draw Object to render to texture")
         (hide
            {$this is_a PatchRenderer}))
      (cam
         object
         (class Cam)
         (help
            "Camera to use, if you want specific one, defaults to proxy cam, if none and draw is proxy"))
      (output_texture
         object
         (class Tex)
         (help
            "Texture to write to")
         (list
            {$this get_render_textures})
         (pre_sync
            {if
               [output_texture]
               {milo
                  record
                  [output_texture]
                  reset_tex_render}})
         (post_sync
            {if
               [output_texture]
               {milo
                  record
                  [output_texture]
                  set_tex_render}
               {[output_texture]
                  set_rendered}}))
      (draw_world_only
         bool
         (help
            "Renders the texture only on 'world' frames, while skipping rendering on post processing frames"))
      (draw_pre_clear
         bool
         (help
            "Renders the texture before the rest of the scene is rendered. Useful for rendering large textures"))
      (force
         bool
         (help
            "Force rendering every frame"))
      (imposter_height
         float
         (help
            "Height for imposter rendering with current camera"))
      (draw_responsible
         bool
         (help
            "If true, exclusively draws the draw, if false the scene will draw it too, use with caution!"))
      (prime_draw
         bool
         (help
            "Check this if rendering multiple characters to a texture.  Will draw 2x if checked."))
      (force_mips
         bool
         (help
            "Generate mip maps for the texture."))))
(TexBlendController
   (description
      "Defines the two objects that will be used to determine the distance for the texture blend.")
   (types)
   (ext texblendctl)
   (editor
      (reference_object_1
         object
         (class Trans)
         (help
            "The first object to use as a distance reference")
         (refresh base_distance min_distance max_distance))
      (reference_object_2
         object
         (class Trans)
         (help
            "The second object to use as a distance reference")
         (refresh base_distance min_distance max_distance))
      (mesh
         object
         (class Mesh)
         (help
            "The mesh object to render to the texture. This should be an unskinned mesh with UV coordinates that match the source mesh"))
      (base_distance
         float
         (read_only TRUE)
         (help
            "The base distance used to compute which blending to use"))
      (min_distance
         float
         (help
            "The distance where the 'near' texture map will be fully visible"))
      (max_distance
         float
         (help
            "The distance where the 'far' texture map will be fully visible"))
      (set_base_distance
         script
         (help
            "Sets the reference distance value from the current positions.")
         (script
            {$this set_base_distance})
         (refresh base_distance min_distance max_distance))
      (set_min_distance
         script
         (help
            "Sets the min distance value from the current positions.")
         (script
            {$this set_min_distance})
         (refresh min_distance))
      (set_max_distance
         script
         (help
            "Sets the max distance value from the current positions.")
         (script
            {$this set_max_distance})
         (refresh max_distance))
      (set_all_distances
         script
         (help
            "Sets ALL distance values from the current positions.")
         (script
            {$this set_all_distances})
         (refresh base_distance min_distance max_distance))))
(TexBlender
   (description
      "Renderable texture used to composite pieces of texture maps based on the distance between bones or other animatiable objects")
   (superclasses Draw)
   (types)
   (ext texblend)
   (editor
      (owner
         object
         (class Draw)
         (help
            "The owner of this texture blend. This is used to determine if the texture blend is visible. For example, if this texture blend is used in the head object of a character, set the owner to be the head object."))
      (base_map
         object
         (class Tex)
         (help
            "The base texture map"))
      (near_map
         object
         (class Tex)
         (help
            "The texture map to use when the constraints are closer than the default distance"))
      (far_map
         object
         (class Tex)
         (help
            "The texture map to use when the constraints are further than the default distance"))
      (output_texture
         object
         (class Tex)
         (help
            "The final result output texture")
         (list
            {$this get_render_textures})
         (pre_sync
            {if
               [output_texture]
               {milo
                  record
                  [output_texture]
                  reset_tex_render}})
         (post_sync
            {if
               [output_texture]
               {milo
                  record
                  [output_texture]
                  set_tex_render}
               {[output_texture]
                  set_rendered}}))
      (controller_list
         (array
            object
            (class TexBlendController))
         (help
            "The list of controller objects used to render pieces of a mesh to the output texture"))
      (controller_influence
         float
         (help
            "Global strength of the blending effect for each controller")
         (range 0.0 1.0))))
(Draw
   (description
      "Base class for drawable objects. Draw objects either\n        render polys or determine rendering state.")
   (allowed_dirs)
   (editor
      (showing
         bool
         (help
            "Whether the object and its Draw children are drawn or collided with.")
         (post_sync
            {milo invalidate_listers_and_trees}))
      (draw_order float)
      (sphere
         SPHERE
         (help
            "bounding sphere"))
      (update_sphere
         script
         (help
            "Calculates the bounding sphere for the object.")
         (script
            {milo record $this update_sphere}
            {$this update_sphere})
         (refresh sphere)))
   (views
      (showing
         ("Showing"
            [showing])
         ("Draw Order"
            [draw_order]))))
(Environ
   (description
      "An environment object is drawable. When drawn it sets up\n        dynamic lighting and fogging for subsequently drawn siblings.")
   (ext env)
   (types)
   (editor
      (lights
         (array
            object
            (list
               {$this allowable_lights}))
         (help
            "Dynamic lights for this environment"))
      (ambient_color
         color
         (help
            "Ambient color for this environment"))
      (ambient_alpha
         float
         (help
            "Ambient color alpha for this environment")
         (range 0.0 1.0))
      (fog_enable
         bool
         (help
            "Whether fog is enabled for this environment")
         (refresh fog_color fog_start fog_end))
      (fog_color
         color
         (read_only
            {!
               {$this get fog_enable}})
         (help
            "Fog color"))
      (fog_start
         float
         (read_only
            {!
               {$this get fog_enable}})
         (help
            "Fog start distance"))
      (fog_end
         float
         (read_only
            {!
               {$this get fog_enable}})
         (help
            "Fog end distance"))
      (ambient_fog_owner
         object
         (class Environ)
         (help
            "Share ambient and fog parameters with this environ")
         (obj_flags no_null)
         (no_test))
      (animate_from_preset
         bool
         (help
            "Whether this environment should be animated by light presets"))
      (ng
         (indent
            (fade_out
               bool
               (help
                  "Fade out the scene over distance"))
            (fade_start
               float
               (help
                  "World space distance from camera to start fading"))
            (fade_end
               float
               (help
                  "World space distance fade out completely"))
            (fade_max
               float
               (help
                  "Maximum opacity of faded objects")
               (range 0 1))
            (fade_ref
               object
               (class Trans)
               (help
                  "reference object to left/right fade along x-axis"))
            (left_out
               float
               (help
                  "distance along negative x to start fading in"))
            (left_opaque
               float
               (help
                  "distance along negative x to become fully opaque"))
            (right_opaque
               float
               (help
                  "distance along positive x to become fully opaque"))
            (right_out
               float
               (help
                  "distance along positive x to start fading in"))
            (use_color_adjust
               bool
               (help
                  "Enable color adjust")
               (refresh color_adjust))
            (color_adjust
               (indent
                  (hue
                     float
                     (help
                        "Hue: -180 to 180, 0.0 is neutral")
                     (range -180 180))
                  (saturation
                     float
                     (help
                        "Saturation: -100 to 100, 0.0 is neutral")
                     (range -100 100))
                  (lightness
                     float
                     (help
                        "Lightness: -100 to 100, 0.0 is neutral")
                     (range -100 100))
                  (contrast
                     float
                     (help
                        "Contrast: -100 to 100, 0.0 is neutral")
                     (range -100 100))
                  (brightness
                     float
                     (help
                        "Brightness: -100 to 100, 0.0 is neutral")
                     (range -100 100))
                  (levels
                     (indent
                        (in_lo
                           color
                           (help
                              "Input low end"))
                        (in_hi
                           color
                           (help
                              "Input high end"))
                        (out_lo
                           color
                           (help
                              "Output low end"))
                        (out_hi
                           color
                           (help
                              "Output high end")))))
               (read_only
                  {!
                     [use_color_adjust]})))
         (help
            "Next-generation graphics settings"))))
(EnvAnim
   (description
      "An EnvAnim object animates Environ properties.")
   (superclasses Anim)
   (ext enm)
   (types))
(Flare
   (description
      "Flare objects are particles that are rendered based on\n        the visibility of their center.<br />\n        Use them to implement sun flare peeking through tree leaves and\n        around buildings, flares on lamps and stage lights that get\n        occluded by characters, etc.  Flares should be drawn last in a\n        frame, and since they depend on the z-buffer for visibility\n        testing, previously drawn translucent or cutout objects must\n        properly use translucent or SrcAlphaCutout materials.")
   (superclasses Draw Trans)
   (ext flare)
   (types)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material for flare"))
      (sizes
         VECTOR2
         (help
            "Size range of the flare"))
      (steps
         int
         (help
            "Number of steps for the flare"))
      (range
         VECTOR2
         (help
            "Fade range of the flare"))
      (point_test
         bool
         (help
            "Controls whether or not a point test is performed for the flare"))))
(Font
   (description
      "Font objects determine the appearance for Text objects.")
   (ext font)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material for font")
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (texture_owner
         object
         (class Font)
         (help
            "Font owner of the texture to use")
         (obj_flags no_null)
         (no_test)
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (monospace
         bool
         (help
            "Font is monospaced.")
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (base_kerning
         float
         (help
            "Base kerning of the font.")
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (packed
         bool
         (help
            "Font texture is packed")
         (read_only TRUE))
      (cell_width
         int
         (help
            "Texel width of character (if un-packed)")
         (read_only
            [packed])
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (cell_height
         int
         (help
            "Texel height of character (if un-packed)")
         (read_only
            [packed])
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (chars_in_map
         string
         (help
            "List of characters this font uses")
         (read_only
            [packed])
         (pre_sync
            {milo update_text $this})
         (post_sync
            {milo update_text $this}))
      (bleed_test
         script
         (script
            {$this bleed_test})
         (help
            "Tests the font for bleeding over edges.")))
   (types
      (imported_font
         (editor
            (font_name
               string
               (help
                  "Font name used to import this font.")
               (read_only TRUE))
            (font_size
               int
               (help
                  "Size of the font used to import this font.")
               (read_only TRUE))
            (bold
               bool
               (help
                  "Bold state of the font used to import this font.")
               (read_only TRUE))
            (italics
               bool
               (help
                  "Italics stat of the font used to import this font.")
               (read_only TRUE))
            (padding
               (indent
                  (left int)
                  (right int)
                  (top int)
                  (bottom int))
               (read_only TRUE)))
         (font_name
            "")
         (font_size 12)
         (bold FALSE)
         (italics FALSE)
         (left 0)
         (right 0)
         (top 0)
         (bottom 0))))
(Generator
   (description
      "A Generator object flies out object instances along a path.")
   (superclasses Anim Draw Trans)
   (ext gen)
   (types))
(Group
   (description
      "Represents a group of objects to which to propogate\n        animation and messages.")
   (superclasses Anim Draw Trans)
   (ext grp)
   (types)
   (editor
      (environ
         object
         (class Environ))
      (draw_only
         object
         (class Draw)
         (list
            {$this get_draws})
         (help
            "if set, only draws this member of the group"))
      (sort_draws
         script
         (script
            {$this sort_draws})
         (help
            "Sort objects by draw_order and material")
         (post_sync
            {milo update_objects}))
      (lod
         object
         (class Draw)
         (obj_flags no_this)
         (help
            "Object to draw instead below lod_screen_size"))
      (lod_screen_size
         float
         (help
            "Ratio of screen height for lod"))
      (sort_in_world
         bool
         (help
            "Sort by distance to current camera per frame.\nThis has a CPU cost if there are many objects."))))
(Light
   (description
      "Light objects are added to environments for drawing.")
   (superclasses Trans)
   (ext lit)
   (types)
   (editor
      (type
         int
         (list
            ("kLightPoint"
               "kLightDirectional"
               "kLightFakeSpot"
               "kLightFloorSpot"
               "kLightShadowRef"))
         (help
            "Type of dynamic lighting")
         (refresh spotlight))
      (range
         float
         (help
            "Falloff distance for point lights"))
      (falloff_start
         float
         (help
            "Distance at which falloff starts for point lights"))
      (color
         color
         (help
            "Color of light")
         (refresh intensity)
         (no_test))
      (intensity
         float
         (help
            "Intensity of light color")
         (refresh color)
         (no_test))
      (color_owner
         object
         (class Light)
         (help
            "Master for light color and intensity")
         (obj_flags no_null)
         (no_test))
      (spotlight
         (indent
            (topradius
               float
               (help
                  "Fake cone small radius at the source"))
            (botradius
               float
               (help
                  "Fake cone big radius at the far end"))
            (softness
               float
               (help
                  "Fake cone softness with 0 hard edge and 1 total mushy")
               (range 0 1)
               (hide
                  {!=
                     [type]
                     2}))
            (displacement
               float
               (help
                  "Amount along dir to adjust the fake spot position")
               (range 0 1)
               (hide
                  {!=
                     [type]
                     2}))
            (texture
               object
               (class Tex)
               (help
                  "Projected floor spot texture")
               (hide
                  {!=
                     [type]
                     3}))
            (texture_xfm
               TRANSFORM
               (hide
                  {!=
                     [type]
                     3}))
            (only_projection
               bool
               (help
                  "Check this if you DO NOT want the light to be included in vertex lighting calculations.")
               (hide
                  {!=
                     [type]
                     3})))
         (hide
            {&&
               {!=
                  [type]
                  2}
               {!=
                  [type]
                  3}})
         (help
            "Spot light parameters"))
      (animate_color_from_preset
         bool
         (help
            "Animation authority for LightPreset"))
      (animate_position_from_preset
         bool
         (help
            "Animation authority for LightPreset"))))
(LightAnim
   (description
      "LightAnim objects animate light object properties using keyframe interpolation.")
   (superclasses Anim)
   (ext lnm)
   (types))
(Line
   (description
      "Line objects represent 3D lines with thickness, perspective, and optional end caps.")
   (superclasses Draw Trans)
   (ext line)
   (types))
(Mat
   (description
      "Material objects determine texturing, blending, and the\n        effect of lighting on drawn polys.")
   (ext mat)
   (types)
   (editor
      (color
         color
         (help
            "Base material color"))
      (alpha
         float
         (help
            "Base material alpha"))
      (use_environ
         bool
         (help
            "Modulate with environment ambient and lights"))
      (prelit
         bool
         (help
            "Use vertex color and alpha for base or ambient"))
      (diffuse_tex
         object
         (class Tex)
         (help
            "Base texture map, modulated with color and alpha")
         (refresh intensify))
      (intensify
         bool
         (help
            "Double the intensity of base map")
         (read_only
            {!
               [diffuse_tex]}))
      (tex_wrap
         int
         (list TEXWRAP_ENUM)
         (help
            "Texture mapping mode"))
      (tex_gen
         int
         (list TEXGEN_ENUM)
         (help
            "How to generate texture coordinates"))
      (tex_xfm
         TRANSFORM
         (help
            "Transform for coordinate generation"))
      (blend
         int
         (list BLEND_ENUM)
         (help
            "How to blend poly into screen"))
      (z_mode
         int
         (list ZMODE_ENUM)
         (help
            "How to read and write z-buffer"))
      (alpha_cut
         bool
         (help
            "Cut zero alpha pixels from z-buffer")
         (refresh alpha_threshold))
      (alpha_threshold
         int
         (help
            "Alpha level below which gets cut")
         (range 0 255)
         (read_only
            {!
               [alpha_cut]}))
      (alpha_write
         bool
         (help
            "Write pixel alpha to screen"))
      (next_pass
         object
         (class Mat)
         (list
            {$this allowed_next_pass})
         (help
            "Next material for object"))
      (ng
         (indent
            (shader_capabilities
               (indent
                  (point_lights
                     bool
                     (help
                        "Is the Mat lit with point lights?"))
                  (proj_lights
                     bool
                     (help
                        "Is the Mat lit with projected lights?"))
                  (fog
                     bool
                     (help
                        "Is the Mat affected by fog?"))
                  (fade_out
                     bool
                     (help
                        "Is the Mat affected its Environment's fade_out?"))
                  (color_adjust
                     bool
                     (help
                        "Is the Mat affected its Environment's color adjust?")))
               (alias
                  "shader capabilities")
               (help
                  "Defines the capabilities of the shader generated using this material"))
            (per_pixel_lit
               bool
               (help
                  "Use per-pixel lighting")
               (refresh))
            (emissive_settings
               (indent
                  (emissive_multiplier
                     float
                     (help
                        "Multiplier to apply to emission"))
                  (emissive_map
                     object
                     (class Tex)
                     (help
                        "Map for self illumination")))
               (alias
                  "emissive settings")
               (help
                  "Settings for manipulating the emissive properties of the material"))
            (normal_map_settings
               (indent
                  (normal_map
                     object
                     (class Tex)
                     (list
                        {$this allowed_normal_map})
                     (help
                        "Texture map to define lighting normals.\nRequires per-pixel lighting."))
                  (de_normal
                     float
                     (help
                        "Amount to diminish normal map bumpiness, 0 is neutral, 1 is no bumps, -1 exaggerates")
                     (range -3 1))
                  (norm_detail_map
                     object
                     (class Tex)
                     (list
                        {$this allowed_normal_map})
                     (help
                        "Detail map texture"))
                  (norm_detail_strength
                     float
                     (help
                        "Strength of the detail map bumpiness"))
                  (norm_detail_tiling
                     float
                     (help
                        "Texture tiling scale for the detail map")))
               (alias
                  "normal map settings")
               (read_only
                  {!
                     [per_pixel_lit]})
               (help
                  "Settings for manipulating the normals of the material.\nRequires per-pixel lighting."))
            (specular_settings
               (indent
                  (specular_rgb
                     color
                     (help
                        "Color to use; multiplied by specular texture RGB if present"))
                  (specular_power
                     float
                     (help
                        "Power to use; multiplied by specular texture Alpha if present"))
                  (specular_map
                     object
                     (class Tex)
                     (refresh specular_rgb)
                     (help
                        "Texture map for specular color and power.\nRequires per-pixel lighting.")
                     (read_only
                        {!
                           [per_pixel_lit]}))
                  (anisotropy
                     float
                     (help
                        "Specular power in downward (strand) direction, 0 to disable")
                     (range 0.0 100.0)))
               (alias
                  "specular settings")
               (help
                  "Settings for manipulating the specular properties of the material"))
            (rim_light_settings
               (indent
                  (rim_rgb
                     color
                     (help
                        "Rim lighting color; multiplied by the rim texture RGB if present"))
                  (rim_power
                     float
                     (help
                        "Rim lighting power; multiplied by the rim texture Alpha if present")
                     (range 0 64))
                  (rim_map
                     object
                     (class Tex)
                     (refresh rim_rgb)
                     (help
                        "Texture map that defines the rim lighting color (in the RGB channels) and power (in the Alpha channel).  Requires per-pixel lighting."))
                  (rim_always_show
                     bool
                     (help
                        "When enabled, this causes the rim effect to be visible regardless of the lighting direction. This is useful when simulating materials such as cloth")))
               (alias
                  "rim light settings")
               (read_only
                  {!
                     [per_pixel_lit]})
               (help
                  "Settings for manipulating the rim lighting properties of the material"))
            (custom_shader_settings
               (indent
                  (shader_variation
                     int
                     (list SHADERVARIATION_ENUM)
                     (alias
                        "shader variation")
                     (help
                        "Select a variation on the shader to enable a new range of rendering features.")
                     (refresh specular2_rgb specular2_power))
                  (specular2_rgb
                     color
                     (read_only
                        {!=
                           [shader_variation]
                           kShaderVariationHair})
                     (alias
                        "secondary specular color")
                     (help
                        "Secondary specular color.  Only valid for certain shader variations."))
                  (specular2_power
                     float
                     (read_only
                        {!=
                           [shader_variation]
                           kShaderVariationHair})
                     (alias
                        "secondary specular power")
                     (help
                        "Secondary specular power.  Only valid for certain shader variations."))
                  (fur
                     object
                     (class Fur)
                     (help
                        "Use fur shader")))
               (alias
                  "custom shader settings")
               (help
                  "Settings for using a custom shader effect."))
            (screen_aligned
               bool
               (help
                  "Projected material from camera's POV"))
            (environ_map
               object
               (class CubeTex)
               (help
                  "Cube texture for reflections"))
            (cull
               bool
               (help
                  "Cull backface polygons"))
            (stencil_mode
               int
               (list STENCILMODE_ENUM)
               (help
                  "How to read and write the stencil buffer"))
            (alpha_mask
               object
               (class ScreenMask)
               (help
                  "Alpha mask coordinates (in widescreen) and texture"))
            (ps3_force_trilinear
               bool
               (help
                  "Force trilinear filtering of diffuse map (PS3 only)")))
         (help
            "Next-generation graphics settings\nDoes not apply to particles")))
   (views
      (alpha_write
         (alpha_write
            {$this get alpha_write}))
      (Diffuse_tex
         (diffuse_tex
            [diffuse_tex])
         (tex_size_kb
            {if_else
               [diffuse_tex]
               {[diffuse_tex]
                  size_kb}
               0}))
      (shader_flags
         (point_lights
            {$this get point_lights}
            {$this set point_lights $milo_value})
         (proj_lights
            {$this get proj_lights}
            {$this set proj_lights $milo_value})
         (fog
            {$this get fog}
            {$this set fog $milo_value})
         (fade_out
            {$this get fade_out}
            {$this set fade_out $milo_value})
         (color_adjust
            {$this get color_adjust}
            {$this set color_adjust $milo_value}))
      (per_pixel_lit
         (per_pixel_lit
            {$this get per_pixel_lit}))))
(Fur
   (description
      "Parameters for fur shading, to be set on a material")
   (ext fur)
   (types)
   (editor
      (layers
         int
         (help
            "Number of passes"))
      (thickness
         float
         (help
            "Length of fur"))
      (curvature
         float
         (help
            "Curvature exponent")
         (range 0 3))
      (shell_out
         float
         (help
            "Bunch shells towards surface")
         (range 0 1))
      (alpha_falloff
         float
         (help
            "Bunch opacity towards surface")
         (range 0 1))
      (stretch
         float
         (help
            "Maximum stretch"))
      (slide
         float
         (help
            "Maximum lateral motion"))
      (gravity
         float
         (help
            "Strength of gravity")
         (range 0 1))
      (fluidity
         float
         (help
            "Langor of motion")
         (range 0 1))
      (roots_tint
         color
         (help
            "Tint at hair roots"))
      (ends_tint
         color
         (help
            "Tint at hair ends"))
      (fur_detail
         object
         (class Tex)
         (help
            "Detail map for finer fur.  Only the alpha channel is used."))
      (fur_tiling
         float
         (help
            "Tiling for fur detail map.\nUVs of fur_detail are multiplied by this value.")
         (range 2.0e-2 100.0))
      (wind
         object
         (class Wind)
         (help
            "Wind Object, if set, blows on the fur."))))
(MatAnim
   (description
      "MatAnim objects animate material properties.")
   (superclasses Anim)
   (ext mnm)
   (types))
(Mesh
   (description
      "A Mesh object is composed of triangle faces.")
   (superclasses Draw Trans)
   (ext mesh)
   (types)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material used for rendering the Mesh"))
      (geom_owner
         object
         (class Mesh)
         (help
            "Geometry owner for the mesh")
         (obj_flags no_null)
         (no_test))
      (mutable
         (struct
            (BIT_kMutableVerts
               bool
               (help
                  "Verts are mutable for this mesh")
               (alias verts))
            (BIT_kMutableFaces
               bool
               (help
                  "Faces are mutable for thie mesh")
               (alias faces)))
         (read_only
            {!=
               [geom_owner]
               $this})
         (refresh keep_mesh_data))
      (keep_mesh_data
         bool
         (read_only
            {'||'
               {>
                  [mutable]
                  0}
               {!=
                  [geom_owner]
                  $this}})
         (help
            "Whether or not to keep mesh vertices and faces.  Mutable meshes will always keep this data."))
      (num_verts
         int
         (range 0 10000)
         (help
            "Number of verts in the mesh")
         (read_only
            {!=
               [geom_owner]
               $this})
         (no_test))
      (num_faces
         int
         (range 0 10000)
         (help
            "Number of faces in the mesh")
         (read_only
            {!=
               [geom_owner]
               $this})
         (no_test))
      (volume
         int
         (list VOLUME_ENUM)
         (read_only
            {!=
               [geom_owner]
               $this})
         (help
            "Volume of the Mesh"))
      (bones
         (array
            (struct
               (bone
                  object
                  (class Trans)
                  (help
                     "Trans of the bone"))))
         (read_only TRUE))
      (burn_xfm
         script
         (script
            {$this burn_xfm})
         (help
            "Burns the verts and resets the transform"))
      (build_from_bsp
         script
         (script
            {$this build_from_bsp})
         (help
            "Build from BSP")))
   (views
      (size
         ("faces"
            {$this get num_faces})
         ("verts"
            {$this get num_verts}))))
(MeshAnim
   (description
      "A MeshAnim object animates Mesh vertices. This should be\n        done only when an effect can't be achieved with material\n        animation, because animating vertices directly is less efficient.")
   (superclasses Anim)
   (ext msnm)
   (types))
(Morph
   (description
      "A Morph object animates between multiple Mesh poses using\n        weight keyframes. This is an expensive technique, equivalent to a\n        MeshAnim for each active pose, so use only when skinning or a\n        single MeshAnim isn't enough. For example, we use it for\n        viseme-driven facial animation.")
   (superclasses Anim)
   (ext morph)
   (types)
   (editor
      (target
         object
         (class Mesh)
         (help
            "Mesh for the morph to occur"))
      (num_poses
         int
         (range 0 100)
         (help
            "Number of mesh keyframes to blend"))
      (intensity
         float
         (help
            "Modifier for weight interpolation"))
      (normals
         bool
         (help
            "Interpolates the normals if set to true, otherwise normals are not affected."))
      (spline
         bool
         (help
            "Smooths the interpolation of the morphing."))))
(Movie
   (description
      "A Movie object animates a compressed video through a\n        texture. It works on Xbox and PS2 now, soon GC.")
   (superclasses Anim)
   (ext mov)
   (types)
   (editor
      (movie_file
         file
         (help
            "File - extension is automatically converted to platform"))
      (stream
         bool
         (help
            "Stream the file for this movie?"))
      (loop
         bool
         (help
            "Loop this movie?"))
      (tex
         object
         (class Tex)
         (help
            "Texture to animate."))))
(MultiMesh
   (description
      "A MultiMesh object draws a simple Mesh in many places\n        quickly. Create a multimesh by instancing the base mesh lots of\n        times in Max, then using the multiobject wizard.")
   (superclasses Draw)
   (ext mm)
   (types))
(ParticleSys
   (description
      "A ParticleSys object generates, animates, and draws large\n        numbers of similar sprites. Currently particles are rendered only\n        as points on the PC.")
   (superclasses Poll Anim Draw Trans)
   (ext part)
   (types)
   (views
      (size
         ("max_particles"
            {$this max_particles})))
   (editor
      (mat
         object
         (class Mat)
         (help
            "material for particle system"))
      (max_parts
         int
         (range 0 10000)
         (help
            "maximum number of particles"))
      (screen_aspect
         float
         (help
            "Ratio of screen height to width"))
      (emit_rate
         VECTOR2
         (help
            "Frame range to generate particles."))
      (life
         VECTOR2
         (help
            "Frame range of particle life."))
      (speed
         VECTOR2
         (help
            "Speed range, in world units per frame, of particles."))
      (start_size
         VECTOR2
         (help
            "Size range, in world units, of particles."))
      (delta_size
         VECTOR2
         (help
            "Change in size of particles, in world units."))
      (force_dir
         VECTOR3
         (help
            "Force direction in world coordinates, in units per frame added to each particle's velocity. Can be used for gravity."))
      (bounce
         object
         (class Trans)
         (help
            "Specify a collide plane to reflect particles. Used to bounce particles off surfaces."))
      (start_color_low
         color
         (help
            "Random color ranges for start and end color of particles."))
      (start_alpha_low
         float
         (range 0 1)
         (help
            "Random color ranges for start and end color of particles."))
      (start_color_high
         color
         (help
            "Random color ranges for start and end color of particles."))
      (start_alpha_high
         float
         (range 0 1)
         (help
            "Random color ranges for start and end color of particles."))
      (end_color_low
         color
         (help
            "Random color ranges for start and end color of particles."))
      (end_alpha_low
         float
         (range 0 1)
         (help
            "Random color ranges for start and end color of particles."))
      (end_color_high
         color
         (help
            "Random color ranges for start and end color of particles."))
      (end_alpha_high
         float
         (range 0 1)
         (help
            "Random color ranges for start and end color of particles."))
      (preserve bool)
      (emitter
         (indent
            (mesh_emitter
               object
               (class Mesh)
               (refresh box_extent_1 box_extent_2 pitch yaw))
            (box_extent_1
               VECTOR3
               (read_only
                  {!=
                     [mesh_emitter]
                     ""})
               (help
                  "Min point and max point, in object coordinates, of box region that particles are emitted from."))
            (box_extent_2
               VECTOR3
               (read_only
                  {!=
                     [mesh_emitter]
                     ""})
               (help
                  "Min point and max point, in object coordinates, of box region that particles are emitted from."))
            (pitch
               VECTOR2
               (read_only
                  {!=
                     [mesh_emitter]
                     ""}))
            (yaw
               VECTOR2
               (read_only
                  {!=
                     [mesh_emitter]
                     ""}))
            (relative_parent
               object
               (class Trans))
            (relative_motion float)
            (subsamples int)
            (frame_drive bool)
            (pre_spawn bool)
            (pause_offscreen bool)))
      (max_burst
         int
         (range 0 10000)
         (refresh burst_parameters))
      (burst_parameters
         (indent
            (time_between VECTOR2)
            (peak_rate VECTOR2)
            (duration VECTOR2))
         (read_only
            {<=
               [max_burst]
               0}))
      (fancy
         bool
         (refresh fancy_parameters bubble bubble_parameters spin spin_parameters velocity_align velocity_align_parameters))
      (fancy_parameters
         (indent
            (grow_ratio
               float
               (range 0 1))
            (shrink_ratio
               float
               (range 0 1))
            (drag
               float
               (range 0 1))
            (mid_color_ratio
               float
               (range 0 1))
            (mid_color_low color)
            (mid_alpha_low
               float
               (range 0 1))
            (mid_color_high color)
            (mid_alpha_high
               float
               (range 0 1)))
         (read_only
            {!
               [fancy]}))
      (bubble
         bool
         (refresh bubble_parameters)
         (read_only
            {!
               [fancy]}))
      (bubble_parameters
         (indent
            (bubble_period VECTOR2)
            (bubble_size VECTOR2))
         (read_only
            {'||'
               {!
                  [bubble]}
               {!
                  [fancy]}}))
      (spin
         bool
         (refresh spin_parameters velocity_align)
         (read_only
            {'||'
               [velocity_align]
               {!
                  [fancy]}}))
      (spin_parameters
         (indent
            (rpm VECTOR2)
            (rpm_drag
               float
               (range 0 1))
            (random_direction bool)
            (start_offset VECTOR2)
            (end_offset VECTOR2))
         (read_only
            {'||'
               {!
                  [spin]}
               {!
                  [fancy]}}))
      (velocity_align
         bool
         (refresh velocity_align_parameters spin)
         (read_only
            {'||'
               {!
                  [fancy]}
               [spin]}))
      (velocity_align_parameters
         (indent
            (stretch_with_velocity
               bool
               (refresh stretch_scale constant_area perspective))
            (stretch_scale
               float
               (read_only
                  {'||'
                     {!
                        [velocity_align]}
                     {'||'
                        {!
                           [stretch_with_velocity]}
                        {!
                           [fancy]}}}))
            (constant_area
               bool
               (read_only
                  {'||'
                     {!
                        [velocity_align]}
                     {'||'
                        {!
                           [stretch_with_velocity]}
                        {!
                           [fancy]}}}))
            (perspective
               bool
               (read_only
                  {'||'
                     {!
                        [velocity_align]}
                     {'||'
                        {!
                           [stretch_with_velocity]}
                        {!
                           [fancy]}}})))
         (read_only
            {'||'
               {!
                  [velocity_align]}
               {!
                  [fancy]}}))))
(ParticleSysAnim
   (description
      "Object that animates Particle System properties.")
   (superclasses Anim)
   (ext panim)
   (types))
(ScreenMask
   (description
      "Draws full screen quad with material and color.")
   (superclasses Draw)
   (ext mask)
   (types)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material to draw on full screen quad"))
      (color
         color
         (help
            "Color of full screen quad"))
      (alpha
         float
         (help
            "Translucency of full screen quad"))
      (screen_rect
         RECT
         (help
            "The area of the screen in normalized coordinates (0 to 1) to draw into."))
      (use_cam_rect
         bool
         (help
            "Use current camera screen_rect instead of the full screen"))))
(TexMovie
   (description
      "Draws full screen quad with movie.")
   (superclasses Draw Poll)
   (ext tmov)
   (types)
   (editor
      (output_texture
         object
         (class Tex)
         (help
            "Texture to write to")
         (list
            {$this get_render_textures})
         (pre_sync
            {if
               [output_texture]
               {milo
                  record
                  [output_texture]
                  reset_tex_movie}})
         (post_sync
            {if
               [output_texture]
               {milo
                  record
                  [output_texture]
                  set_tex_movie}
               {[output_texture]
                  set_rendered}}))
      (movie_file
         file
         (ext
            "Bink Files"
            bik)
         (help
            "Bink File"))
      (loop
         bool
         (help
            "Loop this movie?"))
      (preload
         bool
         (help
            "Load movie when object is loaded?"))
      (draw_pre_clear
         bool
         (help
            "Renders the texture before the rest of the scene is rendered. Useful for rendering large textures."))))
(RndDir
   (description
      "A RndDir specially tracks drawable and animatable objects.")
   (editor
      (environ
         object
         (class Environ))
      (polls
         (array
            object
            (class Poll))
         (help
            "List of all the polls")
         (read_only TRUE))
      (test_event
         symbol
         (list
            {$this supported_events})
         (help
            "Test event")
         (no_test)
         (no_cdb))
      (fire_test
         script
         (script
            {handle
               ($this
                  [test_event])})
         (help
            "Fire test event")))
   (superclasses ObjectDir Anim Draw Trans Poll)
   (types
      (world_fx
         (editor
            (start
               script
               (script
                  {$this start})
               (help
                  "Start animation"))
            (stop
               script
               (script
                  {$this stop})
               (help
                  "Stop animation")))
         (enter
            {$this stop})
         (exit
            {$this stop})
         (start
            {$this
               iterate
               ParticleSys
               $parts
               {$parts exit}}
            {$this
               animate
               (range 0 kHugeFloat)}
            {$this set_showing TRUE})
         (stop
            {$this
               iterate
               ParticleSys
               $parts
               {$parts exit}}
            {$this stop_animation}
            {$this set_showing FALSE}))))
(Distort
   (description
      "Distortion effect")
   (superclasses Draw)
   (ext lie)
   (editor
      (drawables
         (array
            object
            (class Draw)
            (obj_flags no_null))
         (help
            "Dynamic lights for this environment"))
      (shine
         float
         (help
            "Intensity of specular shine off pulse peaks")
         (range 0.0 20.0))
      (pulse
         (indent
            (center
               VECTOR2
               (help
                  "pulse center"))
            (strength
               float
               (range 0 1)
               (help
                  "strength of pulse"))
            (duration
               float
               (help
                  "length of time to go from center to max range"))
            (ysize
               float
               (help
                  "vertical size of pulse"))
            (xscale
               float
               (help
                  "horizontal scale of pulse, 1 is round, greater than 1 is wider than tall."))
            (wavelength
               float
               (help
                  "length of one wave"))
            (glint
               float
               (help
                  "strength of specular glint"))
            (single
               bool
               (help
                  "true to have a single pulse radiate out, false for multiple ripples"))))
      (fire_pulse
         script
         (help
            "Fire a pulse according to current settings.")
         (script
            {$this fire_pulse}))
      (random_pulse
         script
         (help
            "Fire a random pulse.")
         (script
            {$this fire_random})))
   (types))
(PostProc
   (description
      "A PostProc drives post-processing effects.")
   (ext pp)
   (editor
      (bloom
         (indent
            (bloom_color
               color
               (help
                  "Color tint for bloom effect"))
            (bloom_threshold
               float
               (help
                  "Luminance intensity at which to bloom"))
            (bloom_intensity
               float
               (help
                  "Bloom intensity"))))
      (motion_blur
         (indent
            (motion_blur_blend
               float
               (alias
                  "previous frame blend")
               (help
                  "The amount of the previous frame to blend into the current frame. This can be used to efficiently simulate motion blur or other effects. Set to zero to disable.")
               (range 0.0 1.0))
            (motion_blur_weight
               color
               (alias
                  "color channel weight")
               (help
                  "The weighting for individual color channels in the previous frame blend.")))
         (help
            "Motion blur settings"))
      (gradient_map
         (indent
            (gradient_map
               object
               (class Tex)
               (alias
                  "texture")
               (help
                  "Gradient map; this texture should be layed out horizontally such that the color to use when the pixel is black is on the left and white is on the right."))
            (gradient_map_opacity
               float
               (alias
                  "opacity")
               (help
                  "The opacity of the gradient map effect.")
               (range 0.0 1.0))
            (gradient_map_index
               float
               (alias
                  "index")
               (help
                  "This indexes veritically into the gradient map texture. This is useful for storing multiple gradient map textures in a single texture, and to blend between them.")
               (range 0.0 1.0))
            (gradient_map_start
               float
               (alias
                  "depth start")
               (help
                  "The depth where the gradient map will begin to take effect.")
               (range 0.0 1.0))
            (gradient_map_end
               float
               (alias
                  "depth end")
               (help
                  "The depth where the gradient map will no longer take effect.")
               (range 0.0 1.0)))
         (help
            "Gradient map settings"))
      (chromatic_aberration
         (indent
            (chromatic_aberration_offset
               float
               (alias
                  "chromatic aberration offset")
               (help
                  "The size, in pixels, of the chromatic aberration effect.")))
         (alias
            "chromatic aberration")
         (help
            "Chromatic aberration is an artifact where color channels are slightly shifted. This is useful to simulate old cameras, poor quality video, or underwater scenes."))
      (refraction
         (indent
            (refract_map
               object
               (class Tex)
               (list
                  {$this allowed_normal_map})
               (alias
                  "texture")
               (help
                  "This is a normal map used to distort the screen."))
            (refract_dist
               float
               (alias
                  "distance")
               (help
                  "The distance to refract each pixel of the screen. This can also be negative to reverse the direction. Set to zero to disable."))
            (refract_scale
               VECTOR2
               (alias
                  "scale")
               (help
                  "This scales the refraction texture before distorting the screen, in the X and Y directions."))
            (refract_panning
               VECTOR2
               (alias
                  "scroll amount")
               (help
                  "The amount to offset the refraction texture, in the X and Y directions. This is a fixed amount to offset the refraction effect."))
            (refract_velocity
               VECTOR2
               (alias
                  "scroll velocity")
               (help
                  "The velocity to scroll the refraction texture, in the X and Y directions. The value is specified in units per second, and will offset the refraction effect over time."))
            (refract_angle
               float
               (alias
                  "angle")
               (help
                  "The angle to rotate the refraction texture, in degrees.")
               (range 0.0 360.0)))
         (help
            "Full-screen refraction settings"))
      (luminance_map
         object
         (class Tex)
         (help
            "Luminance map"))
      (exposure_flicker
         (indent
            (flicker_intensity
               VECTOR2
               (alias
                  "intensity")
               (help
                  "Min and max intensity range [0..1], 0.0 to disable"))
            (flicker_secs_range
               VECTOR2
               (alias
                  "secs_range")
               (help
                  "Min and max number of seconds for a light to dark cycle"))))
      (noise
         (indent
            (noise_base_scale
               VECTOR2
               (help
                  "X and Y tiling of the noise map"))
            (noise_intensity
               float
               (help
                  "intensity of the noise [-1..1], 0.0 to disable")
               (range -1.0 1.0))
            (noise_stationary
               bool
               (help
                  "keep the noise map static over the screen"))
            (noise_map
               object
               (class Tex)
               (help
                  "Optional noise bitmap"))))
      (color_correct
         (indent
            (hue
               float
               (help
                  "Hue: -180 to 180, 0.0 is neutral")
               (range -180 180))
            (saturation
               float
               (help
                  "Saturation: -100 to 100, 0.0 is neutral")
               (range -100 100))
            (lightness
               float
               (help
                  "Lightness: -100 to 100, 0.0 is neutral")
               (range -100 100))
            (contrast
               float
               (help
                  "Contrast: -100 to 100, 0.0 is neutral")
               (range -100 100))
            (brightness
               float
               (help
                  "Brightness: -100 to 100, 0.0 is neutral")
               (range -100 100))
            (levels
               (indent
                  (in_lo
                     color
                     (help
                        "Input low end"))
                  (in_hi
                     color
                     (help
                        "Input high end"))
                  (out_lo
                     color
                     (help
                        "Output low end"))
                  (out_hi
                     color
                     (help
                        "Output high end"))))))
      (posterize
         (indent
            (num_levels
               float
               (help
                  "Number of levels for posterization, 0 turns off")
               (range 0.0 255.0))
            (min_intensity
               float
               (help
                  "Minimum intensity to posterize, 1.0 is posterize all")
               (range 0.0 1.0))))
      (kaleidoscope
         (indent
            (kaleidoscope_complexity
               float
               (alias complexity)
               (help
                  "Number of slices in kaleidoscope, 0 turns off, 2 for vertical mirror")
               (range 0.0 64.0))
            (kaleidoscope_size
               float
               (alias size)
               (help
                  "Smaller size means more repeated areas, but each area is smaller")
               (range 1.0e-2 64.0))
            (kaleidoscope_angle
               float
               (alias angle)
               (help
                  "Additional clockwise degrees of rotation around center.")
               (range 0.0 360.0))
            (kaleidoscope_radius
               float
               (alias radius)
               (help
                  "Additional distance from center")
               (range -0.5 0.5))
            (kaleidoscope_flipUVs
               bool
               (alias flipUVs)
               (help
                  "Flip texture UV coords when reflect")))
         (help
            "Kaleidoscope settings"))
      (distortion
         (indent
            (distortion_scale
               float
               (help
                  "Lateral amount of pixels to move")
               (range 0.0 100.0))))
      (emulate_fps
         float
         (help
            "Frame rate to emulate, e.g. 24 for film. 0 disables emulation.")
         (range 0.0 60.0))
      (light_trail
         (indent
            (threshold
               float
               (help
                  "Min pixel value to leave trails [0..1]")
               (range 0.0 1.0))
            (duration
               float
               (help
                  "Seconds for the trails to last"))))
      (hall_of_time
         (indent
            (hall_of_time_solid
               bool
               (alias
                  "solid rings")
               (help
                  "Should the effect be blended, or should it produce solid colors?")
               (refresh hall_of_time))
            (hall_of_time_rate
               float
               (alias
                  "rate")
               (help
                  "Speed of effect.  0 is off.  1 is regular speed.")
               (range -10.0 10.0))
            (hall_of_time_color
               color
               (alias
                  "image color")
               (help
                  "Seconds for the trails to last."))
            (hall_of_time_mix
               float
               (alias
                  "image color mix")
               (help
                  "Amount of color to blend. 0 is no color, 1 is solid color.\nNot applicable if solid rings checked.")
               (range 0.0 1.0)
               (read_only
                  [hall_of_time_solid])))
         (help
            "Video feedback effect"))
      (vignette
         (indent
            (vignette_color
               color
               (help
                  "Color tint for vignette effect"))
            (vignette_intensity
               float
               (range 0 2)
               (help
                  "0 for no effect, 1 for normal, less than one for smaller effect, 2 is full color"))))
      (select
         script
         (help
            "Set this as the current post processing effect for preview.")
         (script
            {$this select}))
      (unselect
         script
         (help
            "Turn off all post-processing effects.")
         (script
            {rnd reset_postproc})))
   (types))
(Tex
   (description
      "Tex objects represent bitmaps used by materials. These\n        can be created automatically with 'import tex' on the file menu.")
   (ext tex)
   (types)
   (views
      (size
         ("Width"
            [width])
         ("Height"
            [height])
         ("Bpp"
            [bpp])
         ("Size in kb"
            {$this size_kb})
         ("RMS Difference"
            {$this rms_difference}))))
(CubeTex
   (description
      "This class implements a cube map intended for environment mapping.")
   (ext cube)
   (types)
   (editor
      (right file)
      (left file)
      (top file)
      (bottom file)
      (back file)
      (front file)))
(Set
   (description
      "A group of objects to propagate animation and messages")
   (ext set)
   (editor
      (objects
         (array
            object
            (list
               {$this allowed_objects})))
      (highlight_objects
         script
         (script
            {if
               {exists milo}
               {milo
                  set_highlights
                  {$this get_array objects}}})))
   (types
      (Spotlights
         (editor
            (color
               color
               (help
                  "Color of the spotlight"))
            (intensity
               float
               (help
                  "Intensity of the spotlight")))
         (color 0)
         (intensity 0))
      ('Show set'
         (editor
            (showing bool))
         (showing TRUE))))
(Text
   (description
      "A Text object draws a 3D character string.")
   (superclasses Draw Trans)
   (ext txt)
   (types)
   (editor
      (text
         string
         (help
            "Text value")
         (no_test))
      (font
         object
         (class Font)
         (help
            "Font to use for this Text")
         (no_test))
      (color
         color
         (help
            "Color of the text object"))
      (alpha
         float
         (range 0 1)
         (help
            "Alpha value of the text object"))
      (align
         int
         (list
            ("kTopLeft"
               "kTopCenter"
               "kTopRight"
               "kMiddleLeft"
               "kMiddleCenter"
               "kMiddleRight"
               "kBottomLeft"
               "kBottomCenter"
               "kBottomRight"))
         (help
            "Alignment option for the text"))
      (caps_mode
         int
         (list
            ("kCapsModeNone"
               "kForceLower"
               "kForceUpper"))
         (help
            "Defines the CAPS mode for the text"))
      (wrap_width
         float
         (range 0 10000)
         (help
            "Width of text until it wraps"))
      (leading
         float
         (range -5 5)
         (help
            "Vertical distance between lines"))
      (italics
         float
         (range -5 5)
         (help
            "Defines the slant of the text"))
      (fixed_length
         int
         (range 0 500)
         (help
            "Number of character maximum for the text"))
      (size
         float
         (help
            "Size of the text"))
      (markup
         bool
         (help
            "This text uses markup"))))
(Trans
   (description
      "Base class for transformable objects. Trans objects have\n        a 3D position, rotation, and scale.")
   (ext trans)
   (types)
   (editor
      (trans_parent
         object
         (class Trans)
         (obj_flags no_this)
         (help
            "Object this is linked to.")
         (post_sync
            {milo update_objects 0}))
      (trans_constraint
         int
         (list CONSTRAINT_ENUM)
         (help
            "Trans constraint for the object.")
         (no_test))
      (trans_target
         object
         (class Trans)
         (obj_flags no_this)
         (help
            "Target according to the constraint."))
      (preserve_scale
         bool
         (help
            "Preserve scale if applying dynamic constraint.")))
   (anim_props
      (scale VECTOR3)
      (rotation VECTOR3)
      (position VECTOR3))
   (views
      ('Local transform'
         (x
            {$this get_local_pos_index 0}
            {$this set_local_pos_index 0 $milo_value})
         (y
            {$this get_local_pos_index 1}
            {$this set_local_pos_index 1 $milo_value})
         (z
            {$this get_local_pos_index 2}
            {$this set_local_pos_index 2 $milo_value})
         (pitch
            {$this get_local_rot_index 0}
            {$this set_local_rot_index 0 $milo_value})
         (roll
            {$this get_local_rot_index 1}
            {$this set_local_rot_index 1 $milo_value})
         (yaw
            {$this get_local_rot_index 2}
            {$this set_local_rot_index 2 $milo_value})
         ("scale x"
            {$this get_local_scale_index 0}
            {$this set_local_scale_index 0 $milo_value})
         ("scale y"
            {$this get_local_scale_index 1}
            {$this set_local_scale_index 1 $milo_value})
         ("scale z"
            {$this get_local_scale_index 2}
            {$this set_local_scale_index 2 $milo_value}))))
(TransAnim
   (description
      "TransAnim objects animate the position, rotation, and\n        scale of transformable objects.")
   (superclasses Anim)
   (ext tnm)
   (types)
   (views
      (num_keys
         (trans
            {$this num_trans_keys})
         (rot
            {$this num_rot_keys})
         (scale
            {$this num_scale_keys})
         ("is key owner"
            {if_else
               {==
                  $this
                  [keys_owner]}
               True
               False}))))
(TransArray
   (description
      "This object points to a bunch of Transformables and sets\n   their transforms based on various type-dependent layouts.")
   (superclasses Poll Trans)
   (ext tar)
   (editor
      (targets
         (array
            object
            (class Trans))
         (help
            "Transformables we will layout, based on our type properties")))
   (types
      (grid
         (editor
            (rows
               int
               (range 1 256)
               (help
                  "Elements along y-axis"))
            (cols
               int
               (range 1 256)
               (help
                  "Elements along x-axis"))
            (row_spacing
               float
               (range 0 10000)
               (help
                  "Spacing between rows"))
            (col_spacing
               float
               (range 0 10000)
               (help
                  "Spacing between columns"))
            (row_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh row_keys))
                     (value
                        float
                        (range 0 1000)))))
            (col_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh col_keys))
                     (value
                        float
                        (range 0 1000)))))
            (row_spacing_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh row_spacing_keys))
                     (value
                        float
                        (range 0 10000)))))
            (col_spacing_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh col_spacing_keys))
                     (value
                        float
                        (range 0 10000)))))))
      (ring
         (editor
            (radius
               float
               (range 0 10000)
               (help
                  "Radius of ring"))
            (rotate
               bool
               (help
                  "Rotate each element around ring center"))
            (invert_order
               bool
               (help
                  "Invert element placing order"))
            (radius_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh radius_keys))
                     (value
                        float
                        (range 0 10000)))))))
      (trans_anim
         (editor
            (trans_anim
               object
               (class TransAnim)
               (help
                  "TransAnim to distribute place evenly along"))
            (start
               float
               (help
                  "Start frame of trans_anim"))
            (end
               float
               (help
                  "End frame of trans_anim"))
            (offset
               float
               (help
                  "Frame offset for laying out elements"))
            (offset_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh offset_keys))
                     (value
                        float
                        (range 0 100000)))))))))
(MeshDeform
   (description
      "Reskins target mesh according to exobones.")
   (superclasses)
   (ext deform)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "The mesh we will change, set you can make a zero vert meshdeform just to clean up mutable character meshes"))
      (num_verts
         int
         (help
            "How many verts it holds")
         (read_only TRUE))))
(EventTrigger
   (description
      "Triggers animations, sfx, and responses to game events")
   (allowed_dirs RndDir)
   (ext trig)
   (superclasses)
   (types
      (particle_setter
         (editor
            (system
               object
               (class ParticleSys)
               (help
                  "particle system to animate"))
            (set_emit
               bool
               (refresh))
            (emit_low
               float
               (hide
                  {!
                     [set_emit]}))
            (emit_hi
               float
               (hide
                  {!
                     [set_emit]}))
            (set_color
               bool
               (refresh))
            (color_start_low
               color
               (hide
                  {!
                     [set_color]}))
            (alpha_start_low
               float
               (hide
                  {!
                     [set_color]}))
            (color_start_hi
               color
               (hide
                  {!
                     [set_color]}))
            (alpha_start_hi
               float
               (hide
                  {!
                     [set_color]}))
            (color_end_low
               color
               (hide
                  {!
                     [set_color]}))
            (alpha_end_low
               float
               (hide
                  {!
                     [set_color]}))
            (color_end_hi
               color
               (hide
                  {!
                     [set_color]}))
            (alpha_end_hi
               float
               (hide
                  {!
                     [set_color]})))
         (system '')
         (emit_low 0)
         (emit_hi 1)
         (color_start_low 0)
         (color_start_hi 0)
         (alpha_start_low 0)
         (alpha_start_hi 0)
         (color_end_low 0)
         (color_end_hi 0)
         (alpha_end_low 0)
         (alpha_end_hi 0)
         (set_emit 0)
         (set_color 0)
         (trigger
            {do
               {if
                  [set_emit]
                  {[system]
                     set_emit_rate
                     [emit_low]
                     [emit_hi]}}
               {if
                  [set_color]
                  {do
                     {[system]
                        set_start_color_int
                        [color_start_low]
                        [color_start_hi]
                        [alpha_start_low]
                        [alpha_start_hi]}
                     {[system]
                        set_end_color_int
                        [color_end_low]
                        [color_end_hi]
                        [alpha_end_low]
                        [alpha_end_hi]}}}}))
      (part_launcher
         (editor
            (systems
               (array
                  object
                  (class ParticleSys))))
         (systems
            ())
         (trigger
            {foreach
               $elem
               [systems]
               {if
                  $elem
                  {$elem launch_part}}})))
   (editor
      (trigger_events
         (array
            symbol
            (list
               {$this supported_events})
            (help
               "Events which enable this trigger"))
         (no_test))
      (anims
         (array
            (struct
               (anim
                  object
                  (class Anim)
                  (refresh))
               (blend float)
               (delay float)
               (wait bool)
               (filter
                  (indent
                     (enable
                        bool
                        (refresh)
                        (help
                           "Enable animation filtering"))
                     (rate
                        int
                        (list RATE_ENUM)
                        (help
                           "Rate to animate")
                        (read_only
                           {!
                              [anims
                                 {elem $milo_prop_path 1}
                                 enable]}))
                     (start
                        float
                        (help
                           "Start frame of animation")
                        (read_only
                           {!
                              [anims
                                 {elem $milo_prop_path 1}
                                 enable]}))
                     (end
                        float
                        (help
                           "End frame of animation")
                        (read_only
                           {!
                              [anims
                                 {elem $milo_prop_path 1}
                                 enable]}))
                     (scale
                        float
                        (help
                           "Scale of animation")
                        (read_only
                           {!
                              [anims
                                 {elem $milo_prop_path 1}
                                 enable]}))
                     (period
                        float
                        (help
                           "Period of animation if non-zero")
                        (read_only
                           {!
                              [anims
                                 {elem $milo_prop_path 1}
                                 enable]}))
                     (type
                        symbol
                        (list
                           (range loop dest))
                        (help
                           "Type of animation")
                        (read_only
                           {!
                              [anims
                                 {elem $milo_prop_path 1}
                                 enable]})))))))
      (proxy_calls
         (array
            (struct
               (proxy
                  object
                  (class ObjectDir))
               (call
                  symbol
                  (list
                     {$this proxy_calls}))
               (event
                  object
                  (class EventTrigger)
                  (dir
                     [proxy_calls
                        {elem $milo_prop_path 1}
                        proxy])
                  (help
                     "event trigger to fire")))))
      (sounds
         (array
            object
            (class Sequence)))
      (shows
         (array
            object
            (class Draw)
            (obj_flags no_null))
         (help
            "objects to show"))
      (hide_delays
         (array
            (struct
               (hide
                  object
                  (class Draw)
                  (help
                     "object to hide"))
               (delay
                  float
                  (help
                     "seconds to delay hiding")))))
      (enable_events
         (array
            symbol
            (list
               {$this supported_events})
            (help
               "event which enable this event trigger"))
         (no_test))
      (disable_events
         (array
            symbol
            (list
               {$this supported_events})
            (help
               "event which disable this event trigger"))
         (no_test))
      (wait_for_events
         (array
            symbol
            (list
               {$this supported_events})
            (help
               "When events are triggered, arm them, and delay fire until this handler is called"))
         (no_test))
      (next_link
         object
         (class EventTrigger)
         (obj_flags no_this)
         (refresh trigger_order))
      (trigger_order
         int
         (list TRIGGER_ORDER_ENUM)
         (read_only
            {==
               [next_link]
               ""})
         (help
            "Order of triggering next_link"))
      (trigger
         script
         (script
            {$this trigger}))
      (basic_cleanup
         script
         (script
            {$this basic_cleanup})))
   (views
      (events
         ("trigger"
            [trigger_events 0])
         ("disable"
            [disable_events 0])
         ("enable"
            [enable_events 0])
         ("wait_for"
            [wait_for_events 0])))
   (supported_events
      (start)))
(Wind
   (description
      "Object representing blowing wind, CharHair and Fur can point at them.")
   (superclasses)
   (ext wind)
   (types)
   (editor
      (prevailing
         VECTOR3
         (help
            "Prevailing wind in inches/sec, along each world space axis, adds to random component, 1 mph == 17 inches/sec"))
      (random
         VECTOR3
         (help
            "Random wind speed in inches/sec, along each world axis, adds to prevailing wind, 1 mph == 17 inches/sec"))
      (time_loop
         float
         (help
            "how long in seconds before the wind loops, 50 is a nice default"))
      (space_loop
         float
         (help
            "how far in inches before the wind loops, 100 is a nice default"))))