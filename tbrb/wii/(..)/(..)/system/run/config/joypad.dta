(disable FALSE)
(deadzone 36)
(threshold 0.75)
(ignore 1 2 3 4 5 6 7)
(hold_ms 500)
(repeat_ms 50)
(midi_joypad
   (disable TRUE)
   (mapping
      (36 kPad_L2)
      (38 kPad_L1)
      (46 kPad_R1)
      (48 kPad_R2)
      (45 kPad_X))
   (thresholds
      (36 50))
   (come_first FALSE))
#define IS_GUITAR
((is_guitar TRUE)
   (is_drum FALSE))
#define GUITAR_WITH_CALBERT
((is_calbert_guitar TRUE)
   IS_GUITAR)
#define GUITAR_WITHOUT_CALBERT
((is_calbert_guitar FALSE)
   IS_GUITAR)
#define IS_DRUM
((is_guitar FALSE)
   (is_drum TRUE)
   (is_calbert_guitar FALSE))
#define NEITHER_DRUM_NOR_GUITAR
((is_guitar FALSE)
   (is_drum FALSE)
   (is_calbert_guitar FALSE))
#define HX_XBOX_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_Xbox_RS)
   (cymbal_shift_button kPad_Xbox_RB))
#define HX_PS3_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_L3)
   (cymbal_shift_button kPad_R3))
#define HX_WII_DRUM_SHIFT_BUTTONS
(HX_PS3_DRUM_SHIFT_BUTTONS)
#define DEFAULT_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_NumButtons)
   (cymbal_shift_button kPad_NumButtons))
#define NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
((xbox_mercury_switch TRUE))
#define NON_HX_PS3_MERCURY_SWITCH_ADJUSTMENT
((ps3_mercury_switch TRUE))
#define LY_WHAMMY_VAL
((ly_whammy TRUE))
#define NEGATIVE_RX_WHAMMY_VAL
((negative_rx_whammy_val TRUE))
#define TRADITIONAL_WHAMMY_VAL
((traditional_whammy_val TRUE))
#define XBOX_DRUM_MASKS
((xbox_drums TRUE)
   (cymbal_mask 8)
   (green_cymbal_mask 72)
   (yellow_cymbal_mask 24)
   (blue_cymbal_mask 136)
   IS_DRUM)
#define PS3_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 1024)
   (green_cymbal_mask 1088)
   (yellow_cymbal_mask 1040)
   (blue_cymbal_mask 1152)
   IS_DRUM)
#define WII_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 1024)
   (green_cymbal_mask 1088)
   (yellow_cymbal_mask 1040)
   (blue_cymbal_mask 1152)
   IS_DRUM)
#define DEFAULT_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 65535)
   (green_cymbal_mask 65535)
   (yellow_cymbal_mask 65535)
   (blue_cymbal_mask 65535))
#define NULL_CONTROLLER
((none
      (detect)
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS))
#ifdef HX_EE
(controllers
   (ro_guitar
      (detect
         (type kJoypadAnalog)
         (button kPad_DLeft))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      LY_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (digital
      (detect
         (type kJoypadDigital))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (analog
      (detect
         (type kJoypadAnalog))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (dualshock
      (detect
         (type kJoypadDualShock))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
#ifdef HX_PS3
(controllers
   (hx_guitar_ps3
      (detect
         (type kJoypadPs3HxGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (ps3_rb2_guitar
      (detect
         (type kJoypadPs3HxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITH_CALBERT
      TRADITIONAL_WHAMMY_VAL
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (hx_drums_ps3
      (detect
         (type kJoypadPs3HxDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (hx_drums_ps3_rb2
      (detect
         (type kJoypadPs3HxDrumsRb2))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (ro_guitar_ps3
      (detect
         (type kJoypadPs3RoGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NON_HX_PS3_MERCURY_SWITCH_ADJUSTMENT
      NEGATIVE_RX_WHAMMY_VAL
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (ro_drums_ps3_ghwt
      (detect
         (type kJoypadPs3RoDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (konami_drums_ps3_rr
      (detect
         (type kJoypadPs3KonamiDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      PS3_DRUM_MASKS
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (analog
      (detect
         (type kJoypadAnalog))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (dualshock
      (detect
         (type kJoypadDualShock))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_PS3_DRUM_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
#ifdef HX_PC
(controllers
   (strat_xbox
      (detect
         (type kJoypadXboxHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (strat_xbox_rb2
      (detect
         (type kJoypadXboxHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITH_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (hx_guitar_ps3
      (detect
         (type kJoypadPs3HxGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (ps3_rb2_guitar
      (detect
         (type kJoypadPs3HxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITH_CALBERT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (wii_guitar
      (detect
         (type kJoypadWiiHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (wii_guitar_rb2
      (detect
         (type kJoypadWiiHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITH_CALBERT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (ro_guitar_xbox
      (detect
         (type kJoypadXboxRoGuitar))
      (ignore_buttons kPad_L2 kPad_R2)
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (hx_drums_xbox
      (detect
         (type kJoypadXboxDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (ps3_rb2_drums
      (detect
         (type kJoypadPs3HxDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (wii_drums
      (detect
         (type kJoypadWiiHxDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (wii_drums_rb2
      (detect
         (type kJoypadWiiHxDrumsRb2))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (midi
      (detect
         (type kJoypadMidi))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (ro_guitar
      (detect
         (stick kLeftAnalog X -1)
         (stick kLeftAnalog Y 0))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      NEGATIVE_RX_WHAMMY_VAL
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (ps3_gh4_drums
      (detect
         (type kJoypadPs3RoDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (digital
      (detect
         (button kPad_RStickRight)
         (button kPad_RStickDown))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (analog
      (detect)
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   (dualshock
      (detect)
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      DEFAULT_DRUM_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
#ifdef HX_XBOX
(controllers
   (strat_xbox
      (detect
         (type kJoypadXboxHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (strat_xbox_rb2
      (detect
         (type kJoypadXboxHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITH_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (ro_guitar_xbox
      (detect
         (type kJoypadXboxRoGuitar))
      (ignore_buttons kPad_L2 kPad_R2)
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      HX_XBOX_DRUM_SHIFT_BUTTONS
      TRADITIONAL_WHAMMY_VAL)
   (hx_drums_xbox
      (detect
         (type kJoypadXboxDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (hx_drums_xbox_rb2
      (detect
         (type kJoypadXboxDrumsRb2))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (stagekit_xbox
      (detect
         (type kJoypadXboxStageKit))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (digital
      (detect
         (type kJoypadDigital))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (analog
      (detect
         (type kJoypadAnalog))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
#ifdef HX_WII
(controllers
   (wii_remote
      (detect
         (or
            (detect
               (type kJoypadWiiCore))
            (detect
               (type kJoypadWiiFS))
            #ifdef _SHIP
            (detect
               (type kJoypadWiiClassic))
            #endif))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_WII_DRUM_SHIFT_BUTTONS)
   #ifndef _SHIP
   (wii_classic
      (detect
         (type kJoypadWiiClassic))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_WII_DRUM_SHIFT_BUTTONS)
   #endif
   (gamecube
      (detect
         (type kJoypadWiiGamecube))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_WII_DRUM_SHIFT_BUTTONS)
   (wii_guitar
      (detect
         (type kJoypadWiiHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      HX_WII_DRUM_SHIFT_BUTTONS
      TRADITIONAL_WHAMMY_VAL)
   (wii_guitar_rb2
      (detect
         (type kJoypadWiiHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITH_CALBERT
      HX_WII_DRUM_SHIFT_BUTTONS
      TRADITIONAL_WHAMMY_VAL)
   (wii_drums
      (detect
         (type kJoypadWiiHxDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      HX_WII_DRUM_SHIFT_BUTTONS)
   (wii_drums_rb2
      (detect
         (type kJoypadWiiHxDrumsRb2))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      HX_WII_DRUM_SHIFT_BUTTONS)
   (wii_roguitar
      (detect
         (type kJoypadWiiGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      HX_WII_DRUM_SHIFT_BUTTONS
      TRADITIONAL_WHAMMY_VAL)
   (wii_rodrums
      (detect
         (type kJoypadWiiDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      HX_WII_DRUM_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
(five_way_controllers strat_xbox strat_xbox_rb2 hx_guitar_ps3 ps3_rb2_guitar wii_guitar wii_guitar_rb2)
(adapters
   (map
      ('4 axis 16 button joystick' default)
      ('SmartJoy PLUS Adapter' smart_plus)
      ('SmartJoy PLUS USB Adapter' smart_plus)
      ('SmartJoy Dual PLUS Adapter' smart_plus)
      ('MP-8866 Dual USB Joypad' ro_dual)
      ('6-button joystick' 6-button)
      ('PSX/USB Pad Adaptor (4-axis, 12-button, POV,effects)' kiky_system_x)
      ('TigerGame PS/PS2 Game Controller Adapter' tiger)
      ('XBOX 360 For Windows (Controller)' xbox)
      ('Controller (XBOX 360 For Windows)' xbox)
      ('Controller (Guitar Hero X-plorer  )' xbox)
      ('USB Joystick     ' smart_plus)
      ('Harmonix Guitar for PlayStation' ps3_rb2_guitar)
      ('Harmonix Drum Kit for PlayStation' ps3_rb2_drums)
      ('Harmonix Drum kit for PlayStation' ps3_rb2_drums)
      ('Harmonix Guitar Controller for Nintendo Wii' wii_guitar_rb2)
      ('Harmonix Drum Controller for Nintendo Wii' wii_drums_rb2)
      ('GuitarHero for Playstation (R) 3' ps3_gh4_drums)
      ('Mad Catz Precision Bass Replica for Wii' wii_guitar))
   (default
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_R3)
         (11 kPad_L3)
         (12 kPad_DUp)
         (13 kPad_DRight)
         (14 kPad_DDown)
         (15 kPad_DLeft)))
   (ps3_gh4_drums
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (ps3_rb2_guitar
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (ps3_rb2_drums
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (wii_guitar_rb2
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (wii_drums_rb2
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (wii_guitar
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (smart_plus
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Start)
         (9 kPad_Select)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft)))
   (kiky_system_x
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft)))
   (ro_dual
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Start)
         (9 kPad_Select)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft)))
   (6-button
      (buttons
         (0 kPad_X)
         (1 kPad_Circle)
         (2 kPad_Square)
         (3 kPad_Tri)
         (4 kPad_L2)
         (5 kPad_R2)))
   (tiger
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Start)
         (9 kPad_Select)
         (10 kPad_L3)
         (11 kPad_R3)
         (12 kPad_DUp)
         (13 kPad_DRight)
         (14 kPad_DDown)
         (15 kPad_DLeft)))
   (xbox
      (buttons
         (0 kPad_X)
         (1 kPad_Tri)
         (2 kPad_Square)
         (3 kPad_Circle)
         (4 kPad_L1)
         (5 kPad_L2)
         (6 kPad_Select)
         (7 kPad_Start)
         (23 kPad_R2))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks xbox)))
#define GLOBAL_BUTTON_MEANINGS
((kPad_Start kAction_Start)
   (kPad_Select kAction_ViewModify)
   (kPad_DUp kAction_Up)
   (kPad_DRight kAction_Right)
   (kPad_DDown kAction_Down)
   (kPad_DLeft kAction_Left)
   (kPad_LStickUp kAction_Up)
   (kPad_LStickRight kAction_Right)
   (kPad_LStickDown kAction_Down)
   (kPad_LStickLeft kAction_Left))
#define DEFAULT_BUTTON_MEANINGS
((kPad_X kAction_Confirm)
   (kPad_Circle kAction_Cancel)
   (kPad_R1 kAction_Option)
   (kPad_R2 kAction_PageDown)
   (kPad_L2 kAction_PageUp)
   (kPad_Square kAction_ShellOption)
   GLOBAL_BUTTON_MEANINGS)
#define UP_CANCELS
((kPad_Circle kAction_None)
   (kPad_Tri kAction_Cancel))
(button_meanings
   (analog
      #ifdef HX_EE
      UP_CANCELS
      #endif
      DEFAULT_BUTTON_MEANINGS)
   (digital
      #ifdef HX_EE
      UP_CANCELS
      #endif
      DEFAULT_BUTTON_MEANINGS)
   (dualshock
      #ifdef HX_EE
      UP_CANCELS
      #endif
      DEFAULT_BUTTON_MEANINGS)
   (ro_guitar
      (kPad_R2 kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (ro_guitar_xbox
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (ro_guitar_ps3
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (7 kAction_Option)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (ps3_rb2_guitar
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (strat_xbox
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (strat_xbox_rb2
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (hx_guitar_ps3
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (hx_drums_ps3
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (hx_drums_ps3_rb2
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (ro_drums_ps3_ghwt
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (konami_drums_ps3_rr
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (hx_drums_xbox
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (2 kAction_Option)
      (4 kAction_Up)
      (7 kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (hx_drums_xbox_rb2
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (2 kAction_Option)
      (4 kAction_Up)
      (7 kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (stagekit_xbox DEFAULT_BUTTON_MEANINGS)
   (gamecube DEFAULT_BUTTON_MEANINGS)
   (wii_remote
      (kPad_R3 kAction_WiiHomeMenu)
      #ifdef HX_WII
      (kPad_Tri kAction_Option1)
      #endif
      DEFAULT_BUTTON_MEANINGS)
   (wii_classic
      (kPad_R3 kAction_WiiHomeMenu)
      DEFAULT_BUTTON_MEANINGS)
   (wii_guitar
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (7 kAction_ShellOption)
      (kPad_R1 kAction_None)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (wii_guitar_rb2
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (7 kAction_ShellOption)
      (kPad_R1 kAction_None)
      GLOBAL_BUTTON_MEANINGS)
   (wii_roguitar
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (7 kAction_ShellOption)
      (kPad_R1 kAction_None)
      (kPad_R3 kAction_WiiHomeMenu)
      (kPad_Square kAction_ShellOption)
      GLOBAL_BUTTON_MEANINGS)
   (wii_drums
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (wii_drums_rb2
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      GLOBAL_BUTTON_MEANINGS)
   (wii_rodrums
      (kPad_X kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      (kPad_L1 kAction_Option)
      (kPad_Tri kAction_Up)
      (kPad_Square kAction_Down)
      (kPad_R1 kAction_Down)
      (kPad_L3 kAction_WiiHomeMenu)
      GLOBAL_BUTTON_MEANINGS))