(PanelDir
   (description
      "Top-level UI Object,\n    contains UI components and an optional camera")
   (superclasses RndDir)
   (allowed_dirs)
   (editor
      (cam
         object
         (class Cam)
         (help
            "Camera to use in game, else standard UI cam")
         (post_sync
            {milo update_camera_buttons}))
      (can_end_world
         bool
         (help
            "Whether or not this panel triggers a WorldEnd"))
      (front_view_only_panels
         (array file)
         (help
            "Additional panels to display in front of this panel.")
         (post_sync
            {handle
               ($this enter)}
            {milo update_objects})
         (hide
            {$this is_proxy}))
      (back_view_only_panels
         (array file)
         (help
            "Additional panels to display behind this panel.")
         (post_sync
            {handle
               ($this enter)}
            {milo update_objects})
         (hide
            {$this is_proxy}))
      (show_view_only_panels
         bool
         (help
            "Whether or no this panel displays its view only panels")))
   (types))
(UIComponent
   (description
      "Base class of all UI components, \n   defines navigation and component state")
   (superclasses Draw Trans Poll)
   (allowed_dirs)
   (editor
      (nav_right
         object
         (class UIComponent))
      (nav_down
         object
         (class UIComponent))
      (set_focus
         script
         (script
            {{$this dir}
               set_focus
               $this}))
      (enable
         script
         (script
            {{$this dir}
               enable
               $this}))
      (disable
         script
         (script
            {{$this dir}
               disable
               $this})))
   (types)
   (select_frames 30))
(UIButton
   (description
      "Simple button, basically just a \n   label that can be selected")
   (superclasses UILabel)
   (allowed_dirs PanelDir)
   (ext but)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "button.milo")
         (allow_edit_text TRUE))))
#define TEXT_ALIGNMENTS
("kTopLeft"
   "kTopCenter"
   "kTopRight"
   "kMiddleLeft"
   "kMiddleCenter"
   "kMiddleRight"
   "kBottomLeft"
   "kBottomCenter"
   "kBottomRight")
#define TEXT_CAPS_MODES
("kCapsModeNone"
   "kForceLower"
   "kForceUpper")
#define LABEL_FIT_TYPES
("kFitWrap"
   "kFitJust"
   "kFitEllipsis")
(UILabel
   (description
      "Simple label, provides localization of tokens")
   (superclasses UIComponent)
   (allowed_dirs PanelDir UIListDir)
   (ext lbl)
   (editor
      (text_token
         symbol
         (help
            "Localization token if localize is true")
         (no_test)
         (list
            {$this token_list}))
      (sync_reload_tokens
         script
         (script
            {sync_reload_locale})
         (help
            "Perforce sync and reload locale files"))
      (add_token
         script
         (script
            {add_token})
         (help
            "Add new token in Magnu"))
      (icon
         string
         (help
            "Single-character icon")
         (no_test))
      (edit_text
         string
         (help
            "Milo-only preview text")
         (no_test))
      (text_size
         float
         (range 1 1000)
         (help
            "Text size of text object"))
      (alignment
         int
         (list
            (TEXT_ALIGNMENTS))
         (help
            "Text alignment"))
      (caps_mode
         int
         (list
            (TEXT_CAPS_MODES))
         (help
            "Text case setting"))
      (markup
         bool
         (help
            "Support markup?"))
      (leading
         float
         (help
            "Space between lines"))
      (kerning
         float
         (help
            "Additional kerning applied to text object"))
      (italics
         float
         (range 0 100)
         (help
            "Italics for text object"))
      (fit_type
         int
         (list
            (LABEL_FIT_TYPES))
         (help
            "How to fit text in the width/height specified"))
      (preserve_trunc_text
         string
         (help
            "Optional text to append after truncation with kFitEllipsis"))
      (width
         float
         (range 0 1000)
         (help
            "Width of label"))
      (height
         float
         (range 0 1000)
         (help
            "Height of label"))
      (alpha
         float
         (range 0 1)
         (help
            "Controls transparency of label"))
      (color_override
         object
         (class UIColor)
         (help
            "Color override for this instance"))
      (adjust_height
         script
         (script
            {$this adjust_height}
            {if
               {exists milo}
               {milo update_open_editor $this}}))
      (fixed_length
         int
         (range 0 1000)
         (help
            "Preallocated size of internal text object"))
      (reserve_lines
         int
         (range 0 100)
         (help
            "Preallocated number of lines in internal text object"))
      (validate
         script
         (script
            {$this validate})
         (helps
            "Notifies what is wrong if anything.")))
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "label.milo")
         (allow_edit_text TRUE))
      (cheat
         (resource_file
            "label.milo")
         (allow_edit_text TRUE))))
(UILabelDir
   (description
      "Top-level resource object for UILabels")
   (superclasses RndDir)
   (types)
   (editor
      (text_obj
         object
         (class Text))
      (alt_focus_font
         object
         (class Font))
      (focus_anim
         object
         (class Anim))
      (pulse_anim
         object
         (class Anim))
      (default_color
         object
         (class UIColor)
         (help
            "color to use when no other color is defined for a state"))
      (normal_color
         object
         (class UIColor)
         (help
            "color when label is normal"))
      (focused_color
         object
         (class UIColor)
         (help
            "color when label is focused"))
      (disabled_color
         object
         (class UIColor)
         (help
            "color when label is disabled"))
      (selecting_color
         object
         (class UIColor)
         (help
            "color when label is selecting"))
      (selected_color
         object
         (class UIColor)
         (help
            "color when label is selected"))))
#define LIST_SHOWING
("kListAlways"
   "kListOnlyFocused"
   "kListNever")
(UIList
   (description
      "Component for displaying 1- or 2-dimensional lists of data.\n        Can be oriented horizontally or vertically, can scroll normally or\n        circularly, and can have any number of visible elements (even just\n        one, a.k.a. a spin button).")
   (superclasses UIComponent)
   (allowed_dirs PanelDir UIListDir)
   (ext lst)
   (editor
      (display_num
         int
         (range 1 50)
         (help
            "Number of rows/columns"))
      (circular
         bool
         (help
            "Does the list scrolling wrap?"))
      (scroll_time
         float
         (range 0 5)
         (help
            "Time (seconds) to scroll one step - 0 for instant scrolling"))
      (paginate
         bool
         (help
            "Allow scrolling by pages?"))
      (select_to_scroll
         bool
         (help
            "Does list need to be selected before user can scroll?"))
      (min_display
         int
         (range 0 50)
         (help
            "How far from top of list to start scrolling"))
      (scroll_past_min_display bool)
      (max_display
         int
         (range -1 50)
         (help
            "How far down can the highlight travel before scoll? Use -1 for no limit"))
      (scroll_past_max_display
         bool
         (help
            "Allow selected data to move beyond max highlight?"))
      (num_data
         int
         (range 1 1000)
         (help
            "Num data to show (only for milo)"))
      (auto_scroll_pause
         float
         (range 0 100)
         (help
            "Time to pause when auto scroll changes directions (seconds)"))
      (auto_scroll
         script
         (script
            {$this auto_scroll}))
      (stop_auto_scroll
         script
         (script
            {$this stop_auto_scroll}))
      (in_anim
         object
         (class Anim)
         (help
            "animation kicked off before extended entries are updated"))
      (out_anim
         object
         (class Anim)
         (help
            "animation kicked off after extended entries are updated"))
      (extended_label_entries
         (array
            object
            (class UILabel))
         (help
            "labels to be filled in by list provider at runtime"))
      (extended_mesh_entries
         (array
            object
            (class Mesh))
         (help
            "meshes to be filled in by list provider at runtime"))
      (extended_custom_entries
         (array
            object
            (class Object))
         (help
            "custom objects to be filled in by list provider at runtime")))
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "list.milo"))
      (spin
         (resource_file
            "list_spin.milo"))
      #ifndef _SHIP
      (cheat
         (resource_file
            "list_cheat.milo"))
      (panel_select
         (resource_file
            "list_panel_select.milo"))
      (locale
         (resource_file
            "list_locale.milo"))
      #endif))
#define LIST_ORIENTATION
("kUIListVertical"
   "kUIListHorizontal")
#define COMPONENT_STATES
("kComponentNormal"
   "kComponentFocused"
   "kComponentDisabled"
   "kComponentSelecting"
   "kComponentSelected")
(UIListDir
   (description
      "Top-level resource object for UILists")
   (superclasses RndDir)
   (types)
   (editor
      (orientation
         int
         (list
            (LIST_ORIENTATION))
         (help
            "scroll direction of list"))
      (fade_offset
         int
         (range 0 10)
         (help
            "Number of elements to fade from beginning/end of list"))
      (element_spacing
         float
         (range 0 1000)
         (help
            "spacing between elements"))
      (test_mode
         bool
         (help
            "draw widgets in preview mode?"))
      (test_num_display
         int
         (range 1 100)
         (help
            "number of elements to draw"))
      (test_num_data
         int
         (range 1 100)
         (help
            "total number of data elements"))
      (test_scroll_time
         float
         (range 0 5)
         (help
            "test scroll time"))
      (test_list_state
         int
         (list
            (COMPONENT_STATES)))
      (test_gap_size
         float
         (range 0 1000)
         (help
            "test gaps between elements"))
      (test_disable_elements
         bool
         (help
            "test disable every other element"))
      (scroll_back
         script
         (script
            {$this test_scroll -1}))
      (scroll_next
         script
         (script
            {$this test_scroll 1}))))
#define LIST_WIDGET_DRAW_TYPE
("kUIListWidgetDrawAlways"
   "kUIListWidgetDrawOnlyFocused")
#define UI_LIST_WIDGET_EDITOR
((draw_order
      float
      (help
         "order this widget will be drawn"))
   (widget_draw_type
      int
      (list
         (LIST_WIDGET_DRAW_TYPE))
      (help
         "under what conditions to draw this widget"))
   (default_color
      object
      (class UIColor)
      (help
         "color applied if no state specific color is set ")))
#define UI_LIST_WIDGET_SLOT_COLORS
((active_normal_color
      object
      (class UIColor)
      (help
         "color when element is active and list is normal"))
   (active_focused_color
      object
      (class UIColor)
      (help
         "color when element is active and list is focused"))
   (active_disabled_color
      object
      (class UIColor)
      (help
         "color when element is active and list is disabled"))
   (active_selecting_color
      object
      (class UIColor)
      (help
         "color when element is active and list is selecting"))
   (active_selected_color
      object
      (class UIColor)
      (help
         "color when element is active and list is selected")))
#define UI_LIST_WIDGET_CORE_COLORS
((highlight_normal_color
      object
      (class UIColor)
      (help
         "color when element is highlighted and list is normal"))
   (highlight_focused_color
      object
      (class UIColor)
      (help
         "color when element is highlighted and list is focused"))
   (highlight_disabled_color
      object
      (class UIColor)
      (help
         "color when element is highlighted and list is disabled"))
   (highlight_selecting_color
      object
      (class UIColor)
      (help
         "color when element is highlighted and list is selecting"))
   (highlight_selected_color
      object
      (class UIColor)
      (help
         "color when element is highlighted and list is selected"))
   (inactive_normal_color
      object
      (class UIColor)
      (help
         "color when element is inactive and list is normal"))
   (inactive_focused_color
      object
      (class UIColor)
      (help
         "color when element is inactive and list is focused"))
   (inactive_disabled_color
      object
      (class UIColor)
      (help
         "color when element is inactive and list is disabled"))
   (inactive_selecting_color
      object
      (class UIColor)
      (help
         "color when element is inactive and list is selecting"))
   (inactive_selected_color
      object
      (class UIColor)
      (help
         "color when element is inactive and list is selected")))
(UIListWidget
   (description
      "Base functionality for UIList widgets")
   (allowed_dirs)
   (types)
   (editor UI_LIST_WIDGET_EDITOR UI_LIST_WIDGET_SLOT_COLORS UI_LIST_WIDGET_CORE_COLORS))
#define LIST_SLOT_DRAW_TYPE
("kUIListSlotDrawAlways"
   "kUIListSlotDrawHighlight"
   "kUIListSlotDrawNoHighlight")
#define UI_LIST_SLOT_EDITOR
((slot_draw_type
      int
      (list
         (LIST_SLOT_DRAW_TYPE))
      (help
         "when to draw the slot"))
   UI_LIST_WIDGET_EDITOR
   UI_LIST_WIDGET_SLOT_COLORS
   UI_LIST_WIDGET_CORE_COLORS)
(UIListSlot
   (description
      "Base functionality for UIList slots")
   (allowed_dirs)
   (types)
   (editor UI_LIST_SLOT_EDITOR))
#define LIST_ARROW_POSITION
("kUIListArrowBack"
   "kUIListArrowNext")
(UIListArrow
   (description
      "Arrow widget for use with UIList")
   (ext arw)
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "arrow mesh to draw/transform"))
      (scroll_anim
         object
         (class Anim)
         (help
            "animation to play on scroll"))
      (position
         int
         (list
            (LIST_ARROW_POSITION))
         (help
            "whether to position relative to first or last element"))
      (show_only_scroll
         bool
         (help
            "show only when list is scrollable"))
      (on_highlight
         bool
         (help
            "position arrow relative to higlight"))
      UI_LIST_WIDGET_EDITOR
      UI_LIST_WIDGET_CORE_COLORS))
(UIListHighlight
   (description
      "Highlight widget for use with UIList")
   (ext arw)
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "arrow mesh to draw/transform"))
      UI_LIST_WIDGET_EDITOR
      UI_LIST_WIDGET_CORE_COLORS))
(UIListCustom
   (description
      "Custom slot for use with UIList")
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (object
         object
         (class Object)
         (help
            "custom object to draw/transform")
         (no_test))
      UI_LIST_SLOT_EDITOR))
(UIListLabel
   (description
      "Custom slot for use with UIList")
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (label
         object
         (class UILabel)
         (help
            "label to draw/transform"))
      (default_text
         string
         (help
            "default text"))
      UI_LIST_SLOT_EDITOR))
(UIListMesh
   (description
      "Custom slot for use with UIList")
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "mesh to draw/transform"))
      (default_mat
         object
         (class Mat)
         (help
            "default material"))
      UI_LIST_SLOT_EDITOR))
(UIListSubList
   (description
      "Custom slot for use with UIList")
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (list
         object
         (class UIList)
         (help
            "sub list template"))
      UI_LIST_SLOT_EDITOR))
(UIColor
   (description
      "Just a color, used by UI components")
   (ext color)
   (types)
   (editor
      (color
         color
         (help
            "color")
         (post_sync
            {milo update_objects}))))
(UIPicture
   (description
      "A picture object with asynchronously loading texture")
   (superclasses UIComponent)
   (allowed_dirs PanelDir)
   (ext pic)
   (types
      (default
         (tex_file
            "image/ui_picture_keep.png")))
   (editor
      (tex_file
         file
         (help
            "Path of texture to load"))
      (mesh
         object
         (class Mesh)
         (help
            "Mesh to show loaded tex on (should have Mat)"))
      (in_anim
         object
         (class Anim)
         (help
            "animation kicked off before texture change"))
      (out_anim
         object
         (class Anim)
         (help
            "animation kicked off after texture change"))))
(UIProxy
   (description
      "A UIProxy object allows artists to position dynamically\n        loaded resources (e.g. a character) in Milo. The app will then load\n        the appropriate resources into it.")
   (superclasses UIComponent)
   (allowed_dirs PanelDir)
   (init
      {$this set_type default})
   (editor
      (environ
         object
         (class Environ)
         (help
            "environment to use on it")))
   (types
      (default
         (file
            "proxy.milo"))))
(UISlider
   (description
      "A component with animatable whose frames correspond to a\n        range of values. The resources don't have to look like a slider;\n        they could easily be a knob, dial, etc.")
   (superclasses UIComponent)
   (ext sld)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "slider.milo")
         (vertical FALSE)
         (meshes
            ("slider.mesh"
               (normal
                  "normal.mat")
               (focused
                  "focused.mat")
               (disabled
                  "disabled.mat")
               (selected
                  "selected.mat")))))
   (editor
      (select_to_scroll
         bool
         (help
            "Does slider need to be selected before user can scroll?"))))
(UITrigger
   (description
      "Triggers anims based on UI events (enter, exit, etc.)")
   (superclasses EventTrigger)
   (allowed_dirs PanelDir)
   (ext trg)
   (types)
   (editor
      (block_transition
         bool
         (help
            "Block enter/exit transition during animation?"))
      (test_trigger
         script
         (script
            {$this trigger})
         (label
            "trigger")
         (help
            "Trigger the anim")))
   (supported_events
      (ui_enter ui_enter_forward ui_enter_back ui_exit ui_exit_forward ui_exit_back transition_complete)))
(Screenshot
   (description
      "Object to draw a screensot in Milo, to help with positioning.\n      The screenshot will not be drawn or even loaded in-game.")
   (superclasses Draw)
   (ext ss)
   (types)
   (editor
      (tex_path
         file
         (help
            "File containing the screenshot to display.  This file will only be loaded in Milo, not in game."))))