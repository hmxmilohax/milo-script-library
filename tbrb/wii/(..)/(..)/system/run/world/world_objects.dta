#define UPDATE_MILO_PRESET
({do
      ($start)
      ($end)
      ($frame)
      {milo get_anim_frame $start $end $frame}
      {milo set_anim_frame $start $end $frame}})
#define CROWDS_READONLY
((read_only
      {!
         {$this
            get
            (crowds
               {elem $milo_prop_path 1}
               crowd)}}))
(WorldInstance
   (description
      "Shared instance of a RndDir")
   (types)
   (ext inst)
   (superclasses RndDir))
(LightHue
   (description
      "Represents a hue translation for LightPresets")
   (types)
   (ext hue)
   (editor
      (path
         file
         (ext
            "BMP file"
            bmp)
         (help
            "BMP file comparable to /system/run/world/hue.bmp")
         (post_sync UPDATE_MILO_PRESET))
      #ifdef _DEBUG
      (save_default
         script
         (script
            {$this
               save_default
               "/system/run/world/hue.bmp"}))
      #endif))
#define LEDPRESETS
(("kStageOff"
      "kStageOn"
      "kStageBass"
      "kStageDrumKick"
      "kStageDrumSnare"
      "kStageDrumCrash"
      "kStageGuitar"
      "kStageVocal"
      "kStageSweepLeft_slow"
      "kStageSweepLeft_medium"
      "kStageSweepLeft_fast"
      "kStageSweepRight_slow"
      "kStageSweepRight_medium"
      "kStageSweepRight_fast"))
#define LEDPATTERNS
(("kStageOne"
      "kStageTwo"
      "kStageFour"
      "kStageOneOffset"
      "kStageTwoOffset"
      "kStageFourOffset"
      "kStageAll"))
#define STROBESETTINGS
(("kStageStrobeOff"
      "kStageStrobe6"
      "kStageStrobe8"
      "kStageStrobe10"
      "kStageStrobe12"))
(LightPreset
   (description
      "Represents an animated sequence of states of certain\n        objects in the world. For now, we store states for Spotlight and\n        Environment objects.")
   (types)
   (ext pst)
   (editor
      (locked
         bool
         (refresh 'Set Preset')
         (help
            "Whether the preset is locked (no editing allowed)"))
      (category
         symbol
         (list
            (''))
         (help
            "Category for preset-picking"))
      (description
         string
         (help
            "Description of the preset"))
      (spotlight_entries
         (array
            (struct
               (spotlight
                  string
                  (help
                     "Spotlight name"))
               (intensity
                  float
                  (help
                     "Intensity of spotlight"))
               (color
                  color
                  (help
                     "Color of spotlight"))
               (target
                  object
                  (class Trans)
                  (help
                     "Object the spotlight follows"))
               (subpart
                  symbol
                  (help
                     "Sub-part of the object the spotlight follows"))
               (flare_enabled
                  bool
                  (help
                     "Is the spotlight's flare enabled?"))
               (rotation
                  MATRIX3
                  (help
                     "Light transform"))))
         (read_only TRUE))
      (spotlight_drawer_entries
         (array
            (struct
               (spotlight_drawer
                  string
                  (help
                     "Spotlight drawer name"))
               (total
                  float
                  (help
                     "Global intensity scale"))
               (base_intensity
                  float
                  (help
                     "Intensity of smokeless beam"))
               (smoke_intensity
                  float
                  (help
                     "Intensity from smoke"))))
         (read_only TRUE))
      (environment_entries
         (array
            (struct
               (environment
                  string
                  (help
                     "Environment name"))
               (ambient_color
                  color
                  (help
                     "Ambient color"))
               (fog_enable
                  bool
                  (help
                     "Fog showing?"))
               (fog_start
                  float
                  (help
                     "Intensity from smoke"))
               (fog_end
                  float
                  (help
                     "Intensity from smoke"))
               (fog_color
                  color
                  (help
                     "Intensity from smoke"))))
         (read_only TRUE))
      (light_entries
         (array
            (struct
               (light
                  string
                  (help
                     "Light name"))
               (position
                  VECTOR3
                  (help
                     "Light's position"))
               (color
                  color
                  (help
                     "Light's color"))
               (range
                  float
                  (help
                     "Falloff distance for point lights"))
               (type
                  string
                  (help
                     "Light type"))
               (rotation
                  MATRIX3
                  (help
                     "Light transform"))))
         (read_only TRUE))
      (LED_blue
         int
         (list LEDPRESETS)
         (help
            "preset for this LED ring"))
      (LED_blue_pattern
         int
         (list LEDPATTERNS)
         (help
            "pattern for this LED ring"))
      (LED_green
         int
         (list LEDPRESETS)
         (help
            "preset for this LED ring"))
      (LED_green_pattern
         int
         (list LEDPATTERNS)
         (help
            "pattern for this LED ring"))
      (LED_red
         int
         (list LEDPRESETS)
         (help
            "preset for this LED ring"))
      (LED_red_pattern
         int
         (list LEDPATTERNS)
         (help
            "pattern for this LED ring"))
      (LED_yellow
         int
         (list LEDPRESETS)
         (help
            "preset for this LED ring"))
      (LED_yellow_pattern
         int
         (list LEDPATTERNS)
         (help
            "pattern for this LED ring"))
      (strobe_setting
         int
         (list STROBESETTINGS)
         (help
            "strobe setting to use"))
      ('Set Preset'
         script
         (read_only
            {$this get locked})
         (label
            "SET")
         (script
            {if
               {exists milo}
               {milo record $this 'Set Preset'}}
            {$this set_preset})
         (help
            "Sets the Preset to the current state of the scene")
         (refresh spotlight_entries spotlight_drawer_entries environment_entries light_entries))
      ('View Preset'
         script
         (label
            "VIEW")
         (script
            {$this view_preset})
         (help
            "Sets the scene to this Preset"))
      (trigger
         object
         (class EventTrigger)
         (help
            "Trigger to fire upon selection"))
      (platform_only
         int
         (list
            ("kPlatformNone"
               "kPlatformPS3"
               "kPlatformXBox"))
         (help
            "Limit this shot to given platform"))
      #ifdef _DEBUG
      (hue
         object
         (class LightHue)
         (no_test))
      #endif))
#define FILTER_READONLY
((read_only
      {!
         [anims
            {elem $milo_prop_path 1}
            enable]}))
(EventAnim
   (description
      "Triggers events on proxy's along a timeline")
   (allowed_dirs RndDir)
   (ext eventanm)
   (superclasses Anim)
   (types)
   (editor
      (keys
         (array
            (struct
               (time
                  float
                  (help
                     "time for event")
                  (refresh keys))
               (events
                  (array
                     (struct
                        (dir
                           object
                           (class RndDir))
                        (event
                           object
                           (class EventTrigger)
                           (dir
                              [keys
                                 {elem $milo_prop_path 1}
                                 events
                                 {elem $milo_prop_path 3}
                                 dir]))))))))))
(WorldDir
   (description
      "A WorldDir contains world objects.")
   (superclasses PanelDir)
   (allowed_dirs)
   (types)
   (editor
      (hide_overrides
         (array
            object
            (list
               {$this
                  list_objs
                  Draw
                  (subdir_only)
                  (no_null)})
            (help
               "Subdir objects to hide")))
      (bitmap_overrides
         (array
            (struct
               (original
                  object
                  (list
                     {$this
                        list_objs
                        Tex
                        (subdir_only)})
                  (help
                     "Subdir texture to replace"))
               (replacement
                  object
                  (list
                     {$this
                        list_objs
                        Tex
                        (curdir_only)})
                  (help
                     "Curdir texture to replace with")))))
      (mat_overrides
         (array
            (struct
               (mesh
                  object
                  (list
                     {$this
                        list_objs
                        Mesh
                        (subdir_only)})
                  (help
                     "Subdir mesh to modify"))
               (mat
                  object
                  (list
                     {$this
                        list_objs
                        Mat
                        (curdir_only)})
                  (help
                     "Curdir material to set")))))
      (preset_overrides
         (array
            (struct
               (preset
                  object
                  (list
                     {$this
                        list_objs
                        LightPreset
                        (subdir_only)})
                  (help
                     "Subdir preset to modify")
                  (pre_sync UPDATE_MILO_PRESET)
                  (post_sync UPDATE_MILO_PRESET))
               (hue
                  object
                  (class LightHue)
                  (help
                     "Hue texture to use")
                  (post_sync UPDATE_MILO_PRESET)))))
      (camshot_overrides
         (array
            object
            (list
               {$this
                  list_objs
                  CamShot
                  (subdir_only)
                  (no_null)})
            (help
               "Subdir camshots to inhibit")))
      (ps3_per_pixel_hides
         (array
            object
            (list
               {$this
                  list_objs
                  Draw
                  (no_null)})
            (help
               "Things to hide when ps3_per_pixel on CamShot")))
      (ps3_per_pixel_shows
         (array
            object
            (list
               {$this
                  list_objs
                  Draw
                  (no_null)})
            (help
               "Things to show when ps3_per_pixel on CamShot")))
      (spotlight_drawer
         object
         (class SpotlightDrawer)
         (help
            "The registered spot light drawer that will be used for this world dir"))
      (hud_filename
         file
         (help
            "HUD Preview Dir")
         (ext
            "Milo files"
            milo))
      (show_hud
         bool
         (help
            "Whether to draw the HUD preview")
         (no_test))
      (blur_grow
         float
         (help
            "When doing blurs, how much the blur should 'stream out'"))
      (blur_alpha
         float
         (help
            "When doing blurs, the strength of the blur"))
      (test_blur
         script
         (script
            {$this start_blur 5 5 kTaskSeconds}))
      (find_char_interest_objects
         script
         (script
            {foreach
               $char
               {object_list $this P9Character}
               {if
                  {exists $char}
                  {$char find_interest_objects $this}}})
         (help
            "collects all the interest objects in the scene and assigns them to each character"))))
(VideoScreen
   (description
      "High level object that crops and renders the backbuffer\n   into a texture.")
   (allowed_dirs RndDir)
   (ext vscr)
   (editor
      (screen_material
         object
         (class Mat)
         (help
            "The material that the video screen uses"))
      (movie
         object
         (class Movie)
         (help
            "The default movie to play on the screen"))
      (snow_movie
         object
         (class Movie)
         (help
            "The movie to blend over the default movie or target"))
      (snow_blend
         float
         float
         (help
            "How much to blend in the blend movie"))
      (target
         object
         (class RndDir)
         (help
            "The target for the video screen")
         (refresh target_part))
      (target_part
         object
         (class Trans)
         (dir_prop target)
         (help
            "Subpart of the target for the video screen"))
      (target_min_size
         float
         (help
            "Minimum screen size that the target will be displayed at"))
      (target_scale
         float
         (help
            "Default scale that the target will be displayed at"))
      (target_max_expand
         float
         (help
            "Maximum scale expansion that the target will be displayed at"))
      (override_tex
         object
         (class Tex)
         (help
            "If set, show this texture, rather than video/feed")
         (no_test)))
   (types)
   (superclasses Poll))
(Spotlight
   (description
      "Represents a beam and floorspot for venue modeling")
   (allowed_dirs RndDir)
   (ext spot)
   (editor
      (beam
         (indent
            (length
               float
               (help
                  "Length of the beam/cone"))
            (top_radius
               float
               (help
                  "Radius at the top of the beam/cone"))
            (bottom_radius
               float
               (help
                  "Radius at the bottom of the beam/cone"))
            (top_side_border
               float
               (help
                  "For beams, length of the side transparency border at the top of the beam"))
            (bottom_side_border
               float
               (help
                  "For beams, length of the side transparency border at the bottom of the beam"))
            (bottom_border
               float
               (help
                  "Length of the bottom transparency border"))
            (material
               object
               (class Mat)
               (help
                  "The material to use for the beam/cone"))
            (offset
               float
               (help
                  "Offset of beam along trajectory"))
            (angle_offset
               VECTOR2
               (help
                  "Amount to offset beam rotation (in degrees)"))
            (is_cone
               bool
               (help
                  "Whether this is a beam or a cone"))
            (ng
               (indent
                  (xsection
                     object
                     (class Tex)
                     (help
                        "cross section intensity override texture"))
                  (brighten
                     float
                     (help
                        "raise or lower intensity compared to og beams"))
                  (expand
                     float
                     (help
                        "expand or shrink the radii compared to og beams"))
                  (shape
                     int
                     (list
                        ("kBeamConic"
                           "kBeamRect"
                           "kBeamSheet"
                           "kBeamQuadXYZ"
                           "kBeamQuadZ"))
                     (help
                        "Shape of the beam"))
                  (sections
                     int
                     (help
                        "Number of divisions along length"))
                  (segments
                     int
                     (help
                        "Number of divisions along width or around cone"))
                  (cutouts
                     (array
                        object
                        (class Draw)
                        (obj_flags no_null))
                     (help
                        "Objects that create cutout shadow in the beam."))
                  (slaves
                     (array
                        object
                        (class Light)
                        (obj_flags no_null))
                     (help
                        "Slave lights for fake spot, floor spot, and shadows"))))))
      (color
         color
         (help
            "Color of the spotlight"))
      (intensity
         float
         (help
            "Intensity of the spotlight"))
      (color_owner
         object
         (class Spotlight)
         (help
            "Master for light color and intensity")
         (obj_flags no_null)
         (no_test))
      (light_can
         object
         (class Mesh)
         (help
            "Optional light can mesh to use"))
      (light_can_offset
         float
         (help
            "Offset of light can along beam trajectory"))
      (light_can_sort
         bool
         (help
            "Can't optimize render end of render batching of light can with others"))
      (target
         object
         (class Trans)
         (help
            "Object to target spotlight")
         (refresh target_subpart))
      (target_subpart
         object
         (class Trans)
         (dir_prop target)
         (hide
            {!
               {&&
                  [target]
                  {[target]
                     is_a
                     ObjectDir}}})
         (help
            "Subpart of the spotlight target"))
      (target_shadow
         bool
         (help
            "Whether the target should cast a shadow"))
      (spot_target
         object
         (class Trans)
         (help
            "Reference object for floor height, uses spot target if not set"))
      (spot_scale
         float
         (help
            "Scale of the floor disc"))
      (spot_height
         float
         (help
            "Height offset of the floor disc"))
      (spot_material
         object
         (class Mat)
         (help
            "Material to use for the floor spot"))
      (damping_constant
         float
         (help
            "0-1, controls how fast spotlight moves to reach target"))
      (flare_enabled
         bool
         (help
            "Whether the flare is enabled (keyframed by light presets)"))
      (flare_material
         object
         (class Mat)
         (help
            "Material to use for the flare"))
      (flare_size
         VECTOR2
         (help
            "Size of the flare"))
      (flare_range
         VECTOR2
         (help
            "Range of the flare"))
      (flare_steps
         int
         (help
            "Steps for the flare"))
      (flare_offset
         float
         (help
            "Offset of flare along spotlight trajectory"))
      (flare_visibility_test
         bool
         (help
            "Whether the flare performs a visiblity test (or is always visible)"))
      (lens_size
         float
         (help
            "Size of the lens billboard"))
      (lens_offset
         float
         (help
            "Offset of the lens billboard"))
      (lens_material
         object
         (class Mat)
         (help
            "Material to use for the lens"))
      (additional_objects
         (array
            object
            (class Draw))
         (help
            "Additional objects that should be drawn by the spotlight."))
      (animate_position_from_preset
         bool
         (help
            "Whether this spotlight position/rotation should be animated by light presets."))
      (animate_color_from_preset
         bool
         (help
            "Whether this spotlight coloring should be animated by light presets."))
      (propogate_coloring_to_presets
         script
         (script
            {$this propogate_coloring_to_presets})
         (help
            "Propogate the spotlight's current color state to all light presets in the file."))
      (propogate_targeting_to_presets
         script
         (script
            {$this propogate_targeting_to_presets})
         (help
            "Propogate the spotlight's current target/rotation state to all light presets in the file.")))
   (types)
   (superclasses Draw Trans Poll))
(SpotlightDrawer
   (superclasses)
   (description
      "A SpotlightDrawer draws spotlights.")
   (ext sd)
   (editor
      (ng
         (indent
            (total
               float
               (help
                  "global intensity scale")
               (range 0.0 1.0))
            (base_intensity
               float
               (help
                  "intensity of smokeless beam"))
            (smoke_intensity
               float
               (help
                  "intensity from smoke"))
            (color
               color
               (help
                  "color of ambient (unlit) fog")
               (range 0.0 1.0))
            (proxy
               object
               (class Draw)
               (help
                  "proxy fog object"))
            (select
               script
               (help
                  "Start using these parameters for light cone drawing.")
               (script
                  {$this select})))
         (help
            "ng spotlight rendering parameters")))
   (types))
(WorldCrowd
   (description
      "A quickly-rendered bunch of instanced characters within an area")
   (allowed_dirs RndDir)
   (ext crd)
   (editor
      (num
         int
         (help
            "Number of characters to place"))
      (characters
         (array
            (struct
               (character
                  object
                  (class Character)
                  (struct characters)
                  (help
                     "The character to use as the archetype"))
               (height
                  float
                  (struct characters)
                  (help
                     "The height at which to render the character"))
               (density
                  float
                  (struct characters)
                  (help
                     "Density to place this character"))
               (radius
                  float
                  (struct characters)
                  (help
                     "Collision radius of the character - characters won't be placed within this range"))))
         (help
            "Character archetypes for the crowd"))
      (placement_mesh
         object
         (class Mesh)
         (help
            "The placement mesh"))
      (environ
         object
         (class Environ)
         (help
            "The environ to render the imposter billboards with"))
      (environ_3d
         object
         (class Environ)
         (help
            "The environ used when rendering the 3D crowd set by a cam shot"))
      (generate
         script
         (script
            {$this rebuild})
         (help
            "Completely rebuilds the crowd placements"))
      (show_3d_only
         bool
         (help
            "Whether to only show the 3D crowd")))
   (types)
   (superclasses Draw))
(CamShot
   (description
      "A camera shot. This is an animated camera path with keyframed settings.")
   (allowed_dirs PanelDir)
   (ext shot)
   (editor
      (looping
         bool
         (help
            "Whether the animation should loop."))
      (loop_keyframe
         int
         (help
            "If looping true, which keyframe to loop to.")
         (range
            0
            {-
               {$this
                  size
                  (keyframes)}
               1}))
      (keyframes
         (array
            (struct
               (duration
                  float
                  (help
                     "Duration this keyframe holds steady")
                  (post_sync
                     {if
                        {==
                           $this
                           {milo cur_anim}}
                        {do
                           ($start)
                           ($end)
                           ($curr)
                           {milo get_anim_frame $start $end $curr}}}))
               (blend
                  float
                  (help
                     "Duration this keyframe blends into the next one")
                  (post_sync
                     {if
                        {==
                           $this
                           {milo cur_anim}}
                        {do
                           ($start)
                           ($end)
                           ($curr)
                           {milo get_anim_frame $start $end $curr}}})
                  (refresh keyframes))
               (blend_ease
                  float
                  (help
                     "Amount to ease into the next keyframe")
                  (read_only
                     {==
                        [keyframes
                           {elem $milo_prop_path 1}
                           blend]
                        0})
                  (range 0.0 1000.0))
               (set_frame
                  script
                  (refresh keyframes)
                  (script
                     {$this
                        set_pos
                        {elem
                           $milo_prop_path
                           {-
                              {size $milo_prop_path}
                              2}}}))
               (field_of_view
                  float
                  (help
                     "Field of view for this keyframe"))
               (zoom_fov
                  float
                  (help
                     "Field of view adjustment (not affected by target reframing"))
               (world_offset
                  TRANSFORM
                  (help
                     "Camera position for this keyframe"))
               (screen_offset
                  VECTOR2
                  (help
                     "Screen space offset of target for this keyframe"))
               (targets
                  (array
                     (struct
                        (entity
                           object
                           (class Trans)
                           (help
                              "The entity to target")
                           (refresh keyframes))
                        (subpart
                           object
                           (class Trans)
                           (dir_prop entity)
                           (help
                              "Subpart of the target to look at")
                           (read_only
                              {'||'
                                 {!
                                    [keyframes
                                       {elem
                                          $milo_prop_path
                                          {-
                                             {size $milo_prop_path}
                                             4}}
                                       targets
                                       {elem
                                          $milo_prop_path
                                          {-
                                             {size $milo_prop_path}
                                             2}}
                                       entity]}
                                 {!
                                    {[keyframes
                                          {elem
                                             $milo_prop_path
                                             {-
                                                {size $milo_prop_path}
                                                4}}
                                          targets
                                          {elem
                                             $milo_prop_path
                                             {-
                                                {size $milo_prop_path}
                                                2}}
                                          entity]
                                       is_a
                                       ObjectDir}}}))))
                  (help
                     "Target(s) that the camera should look at")
                  (refresh keyframes))
               (parent
                  (struct
                     (entity
                        object
                        (class Trans)
                        (help
                           "The entity to attach to")
                        (refresh keyframes))
                     (subpart
                        object
                        (class Trans)
                        (dir_prop entity)
                        (help
                           "Subpart of the parent to attach to")
                        (read_only
                           {'||'
                              {!
                                 [keyframes
                                    {elem
                                       $milo_prop_path
                                       {-
                                          {size $milo_prop_path}
                                          3}}
                                    parent
                                    entity]}
                              {!
                                 {[keyframes
                                       {elem
                                          $milo_prop_path
                                          {-
                                             {size $milo_prop_path}
                                             3}}
                                       parent
                                       entity]
                                    is_a
                                    ObjectDir}}})))
                  (help
                     "Parent that the camera should attach itself to")
                  (refresh keyframes))
               (use_parent_rotation
                  bool
                  (help
                     "Whether to take the parent object's rotation into account"))
               (parent_first_frame
                  bool
                  (help
                     "Only parent on the first frame"))
               (focal_target
                  (struct
                     (entity
                        object
                        (class Trans)
                        (help
                           "The entity to focus on"))
                     (subpart
                        object
                        (class Trans)
                        (dir_prop entity)
                        (help
                           "The subpart of the entity to focus on")))
                  (help
                     "The focal point when calculated depth of field"))
               (blur_depth
                  float
                  (help
                     "Depth of the blur valley")
                  (read_only
                     {!
                        [use_depth_of_field]})
                  (range 0.0 1.0))
               (max_blur
                  float
                  (help
                     "Maximum blurriness")
                  (read_only
                     {!
                        [use_depth_of_field]})
                  (range 0.0 1.0))
               (min_blur
                  float
                  (help
                     "Minimum blurriness")
                  (read_only
                     {!
                        [use_depth_of_field]})
                  (range 0.0 1.0))
               (focus_blur_multiplier
                  float
                  (help
                     "Multiplier to control focal point distance from target")
                  (read_only
                     {!
                        [use_depth_of_field]}))
               (shake_noisefreq
                  float
                  (help
                     "Noise frequency for camera shake"))
               (shake_noiseamp
                  float
                  (help
                     "Noise amplitude for camera shake"))
               (shake_maxangle
                  VECTOR2
                  (help
                     "Maximum angle for camera shake")))))
      (category
         symbol
         (list
            (''))
         (help
            "Category for shot-picking"))
      (filter
         float
         (help
            "Filter amount"))
      (clamp_height
         float
         (help
            "Height above target's base at which to clamp camera"))
      (fade_time
         float
         (help
            "Time to fade in camera"))
      (near_plane
         float
         (help
            "Near clipping plane for the camera"))
      (far_plane
         float
         (help
            "Far clipping plane for the camera"))
      (use_depth_of_field
         bool
         (help
            "Whether to use depth-of-field effect on platforms that support it")
         (refresh))
      (sync_anim
         object
         (class Anim)
         (help
            "Animation to syncronize with the CamShot for added CamShot functionality."))
      (path
         object
         (class TransAnim)
         (help
            "Optional camera path to use"))
      (platform_only
         int
         (list
            ("kPlatformNone"
               "kPlatformPS3"
               "kPlatformXBox"))
         (help
            "Limit this shot to given platform"))
      (hide_list
         (array
            object
            (class Draw)
            (obj_flags no_null))
         (help
            "List of objects to hide while this camera shot is active, shows them when done"))
      (show_list
         (array
            object
            (class Draw)
            (obj_flags no_null))
         (help
            "List of objects to show while this camera shot is active, hides them when done"))
      (draw_overrides
         (array
            object
            (class Draw))
         (help
            "List of objects to draw in order instead of whole world"))
      (postproc_overrides
         (array
            object
            (class Draw))
         (help
            "List of objects to draw after post-processing"))
      (glow_spot
         object
         (class Spotlight)
         (help
            "The spotlight to get glow settings from"))
      (crowds
         (array
            (struct
               (crowd
                  object
                  (class WorldCrowd)
                  (help
                     "The crowd to show for this shot")
                  (refresh crowds))
               (crowd_rotate
                  int
                  (list CROWD_ROTATE)
                  (help
                     "How to rotate crowd"))
               (set_3d_crowd
                  script
                  (script
                     {$this
                        set_3d_crowd
                        {elem $milo_prop_path 1}})
                  (help
                     "Sets the selected crowd characters to be 3D for this shot")
                  CROWDS_READONLY)
               (add_3d_crowd
                  script
                  (script
                     {$this
                        add_3d_crowd
                        {elem $milo_prop_path 1}})
                  (help
                     "Adds the selected crowd characters to be 3D for this shot")
                  CROWDS_READONLY)
               (clear_3d_crowd
                  script
                  (script
                     {$this
                        clear_3d_crowd
                        {elem $milo_prop_path 1}})
                  (help
                     "Clears the list of 3D crowd characters for this shot")
                  CROWDS_READONLY))))
      (gen_hide_list
         script
         (script
            {if
               {exists milo}
               {milo record $this gen_hide_list}}
            {$this gen_hide_list})
         (refresh hide_list)
         (help
            "Append occluded objects to this cam shot's hide list"))
      (clear_hide_list
         script
         (script
            {if
               {exists milo}
               {milo record $this clear_hide_list}}
            {$this clear_hide_list})
         (refresh hide_list)
         (help
            "Clear this cam shot's hide list"))
      (duration
         float
         (help
            "duration of the camshot")
         (read_only TRUE))
      (ps3_per_pixel
         bool
         (help
            "global per-pixel setting for PS3")))
   (anim_props
      (path_frame
         float
         (range 0 1)))
   (types)
   (superclasses Anim))
(WorldReflection
   (description
      "Reflects all drawables in draws. If a Character, it will\n   call start_reflect and end_reflect on the the character to let it\n   pick an appropriate outfit for the occasion and then restore it.")
   (allowed_dirs RndDir)
   (superclasses Draw Trans)
   (ext refl)
   (editor
      (draws
         (array
            object
            (class Draw))
         (help
            "things to draw in the reflection, in this order"))
      (vertical_stretch
         float
         (help
            "How far to stretch vertically")))
   (types))