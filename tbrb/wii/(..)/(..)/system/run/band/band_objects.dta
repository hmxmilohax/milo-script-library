#include band_macros.dta
(BandCharacter
   (description
      "Band Guitarist characters that get specialized by the app")
   (superclasses Character)
   (types))
(BandLabel
   (description
      "Label with color presets")
   (allowed_dirs PanelDir)
   (superclasses UILabel)
   (ext lbl)
   (editor
      (in_anim
         object
         (class Anim)
         (help
            "anim used before label change"))
      (out_anim
         object
         (class Anim)
         (help
            "anim used after label change")))
   (types
      (dev
         (resource_file
            "../ui/label.milo")
         (allow_edit_text TRUE))))
(BandButton
   (description
      "Button with app-specific features")
   (allowed_dirs)
   (superclasses UIButton)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "../ui/button.milo")))
   (focus_anim_duration 0.1)
   (ext btn)
   (editor))
(BandHighlight
   (description
      "Special highlight bar that chases the focus component")
   (allowed_dirs PanelDir)
   (superclasses UIComponent)
   (ext hlit)
   (init
      {$this set_type default})
   (types
      (default
         (resource_file
            "highlight.milo")
         (anim_duration 0.1)
         (meshes
            ("highlight.mesh"
               (normal
                  "normal.mat")
               (focused
                  "normal.mat")
               (disabled
                  "disabled.mat"))))))
(PlayerDiffIcon
   (description
      "Overloaded player/difficulty display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext pdiff)
   (editor
      (num_players
         int
         (range 0 4)
         (help
            "Number of players"))
      (diff
         int
         (range 0 3)
         (help
            "Difficulty")))
   (types))
(InstrumentDifficultyDisplay
   (description
      "Song Instrument Difficulty Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext idd)
   (editor
      (has_part
         bool
         (help
            "whether or not instrument has a part to play"))
      (show_instrument
         bool
         (help
            "whether or not instrument name should be shown"))
      (difficulty
         int
         (range 0 6)
         (help
            "Difficulty"))
      (num_vocal_parts
         int
         (range 1 3)
         (help
            "Number of vocal parts"))
      (instrument_type
         symbol
         (list
            (band bass drum guitar vocals))
         (help
            "Type of instrument"))
      (instrument_color_override
         object
         (class UIColor)
         (help
            "Instrument color override for this instance")))
   (types))
(StarDisplay
   (description
      "Star Display (used for showing stars in different formats)")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext sd)
   (editor
      (force_fraction_mode
         bool
         (help
            "whether or not to force fraction mode (X/Y *)"))
      (stars
         int
         (help
            "Current Stars"))
      (total_stars
         int
         (help
            "Total Stars")))
   (anim_props
      (float_stars
         float
         (help
            "Float Total Stars")))
   (types))
(MeterDisplay
   (description
      "Meter Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext md)
   (editor
      (show_text
         bool
         (help
            "whether or not to show text"))
      (current_value
         int
         (help
            "current value of meter"))
      (max_value
         int
         (help
            "max value of meter")))
   (types))
(MiniLeaderboardDisplay
   (description
      "Mini Leaderboard Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mld)
   (editor
      (allow_solo_scores
         bool
         (help
            "whether or not solo scores should be displayed when appropriate")))
   (types))
(P9TexMesh
   (description
      "Dynamic Texture Mesh")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext ptm)
   (editor
      (tex_file
         file
         (help
            "The default tex, and the one for previewing in Milo.")))
   (types))
(MicInputArrow
   (description
      "Mic Input Arrow")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mia)
   (editor
      (arrow_num
         int
         (range 0 2)
         (help
            "Arrow Number"))
      (test_connect
         script
         (script
            {$this set_mic_connected TRUE}))
      (test_discconnect
         script
         (script
            {$this set_mic_connected FALSE})))
   (types))
(BandList
   (description
      "Band specific UIList")
   (allowed_dirs)
   (superclasses UIList)
   (init
      {$this set_type default})
   (ext lst)
   (editor
      (focus_anim
         object
         (class TransAnim))
      (pulse_anim
         object
         (class TransAnim)))
   (types
      (default
         (resource_file
            "../ui/list.milo")
         (vertical TRUE)
         (element
            (text
               (object
                  text
                  "list.lbl")
               (colors
                  (normal
                     (normal 0.5 0.5 0.5)
                     (focused 1 1 1)
                     (disabled 0.3 0.3 0.3)
                     (selecting 1 1 1))
                  (highlight
                     (normal 0.5 0.5 0)
                     (focused 1 1 0)
                     (disabled 0.5 0.5 0)
                     (selecting 1 0 0))
                  (disabled
                     (normal 0.1 0.1 0)
                     (focused 0.1 0.1 0)
                     (disabled 0.1 0.1 0)
                     (selecting 0.1 0.1 0)))
               (dummy
                  "text")))
         (back_arrow
            "back.mesh")
         (next_arrow
            "next.mesh")
         (highlight
            "highlight.mesh"))))
(BandSwatch
   (description
      "Special list for selecting colors")
   (allowed_dirs PanelDir)
   (superclasses UIList)
   (init
      {$this set_type default})
   (ext lst)
   (editor
      (color_palette
         object
         (class ColorPalette)
         (help
            "Palette containing our color options")))
   (types
      (default
         (resource_file
            "swatch.milo"))))
(Label3d
   (description
      "3d label")
   (superclasses Trans Draw)
   (ext lbl3d)
   (editor
      (text
         string
         (help
            "string to turn into 3d text"))
      (localize
         bool
         (help
            "Try to localize text"))
      (resource
         file
         (help
            "milo file with letter objects"))
      (max_width
         float
         (help
            "when length is greater than this value, start scaling the phrase"))
      (all_caps
         bool
         (help
            "You know you make me want to SHOUT!"))
      (jitter
         (indent
            (jitter_depth
               float
               (help
                  "jitter each letter in depth"))
            (jitter_height
               float
               (help
                  "jitter each letter in height")))))
   (types))
(BandCamShot
   (description
      "Band specific camera shot")
   (superclasses CamShot)
   (allowed_dirs WorldDir LoadingPanelDir)
   (ext shot)
   (editor
      (targets
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (refresh targets))
               (anim
                  string
                  (list
                     {do
                        ($drv
                           {find_obj
                              [targets
                                 {elem $milo_prop_path 1}
                                 target]
                              main.drv})
                        {object_list
                           {if_else
                              $drv
                              {$drv get clips_ptr}
                              ''}
                           CharClipGroup}})
                  (help
                     "Name of CharClipGroup to play on character"))
               (teleport
                  bool
                  (help
                     "do we teleport this character?"))
               (to
                  TRANSFORM
                  (help
                     "the transform to teleport the character to"))
               (teleport_hold
                  bool
                  (help
                     "keep the target teleported every frame"))
               (return
                  bool
                  (help
                     "return to original position after shot?"))
               (force_lod
                  int
                  (list
                     ("kLODPerFrame"
                        "kLOD0"
                        "kLOD1"
                        "kLOD2"))
                  (help
                     "Forces LOD, kLODPerFrame is normal behavior of picking per frame, the others force the lod (0 is highest res lod, 2 is lowest res lod)"))
               (self_shadow
                  bool
                  (help
                     "should character cast a self shadow"))
               (spot_cutout
                  bool
                  (help
                     "should character create spotlight cutouts"))
               (floor_shadow
                  bool
                  (help
                     "should character cast a shadow on floor"))
               (freeze
                  bool
                  (help
                     "use freeze frame?"))
               (freeze_delay
                  float
                  (help
                     "delay time until freeze, in camera units"))
               (fast_forward
                  float
                  (help
                     "Fast forward chosen animation by this time, in camera units"))
               (forward_event
                  symbol
                  (help
                     "Event to fastforward relative to")
                  (list
                     ('' freeze)))
               #ifndef HX_WII
               (target_ik
                  string
                  (list
                     {object_list
                        [targets
                           {elem $milo_prop_path 1}
                           target]
                        Trans
                        TRUE})
                  (help
                     "Trans inside of target that you want to hit a Trans in the world"))
               (world_ik
                  object
                  (class Trans)
                  (help
                     "Where you want target_ik to hit."))
               (set_ik
                  script
                  (help
                     "put world_ik where target_ik is, useful when composing the scene")
                  (script
                     {do
                        ($i
                           {elem $milo_prop_path 1})
                        {$this
                           adjust_ik
                           [targets $i world_ik]
                           [targets $i world_ik]
                           {find_obj
                              [targets $i target]
                              [targets $i target_ik]}}}))
               (world_prop
                  object
                  (class Trans)
                  (help
                     "Object in the world to position at target_prop"))
               (target_prop
                  string
                  (list
                     {object_list
                        [targets
                           {elem $milo_prop_path 1}
                           target]
                        Trans
                        TRUE})
                  (help
                     "Trans inside target that world_prop should hit"))
               #endif
               (env_override
                  object
                  (class Environ)
                  (help
                     "environment override for this target during this shot"))
               (attention_focus
                  (indent
                     (focus_dir
                        object
                        (class ObjectDir)
                        (help
                           "The dir containing the interest object - i.e. a specific character or None for the current dir"))
                     (focus_interest
                        object
                        (class CharInterest)
                        (dir_prop focus_dir)
                        (help
                           "The interest object (CharInterest) to focus on from the target_dir selected above."))
                     (focus_start
                        float
                        (help
                           "in frames, the time to start forcing the selected focus_interest.  When not forced, the system will automatically select targets.")
                        (range 0 10000))
                     (focus_duration
                        float
                        (help
                           "in frames, how long to force the target after focus_start.")
                        (range 0 10000))
                     (focus_headweight
                        float
                        (help
                           "how much to procedurally point the head towards the selected target. 0 = none, 1 = full on")
                        (range 0 1))
                     (focus_headblend_in
                        float
                        (help
                           "in frames, how long to blend in the head IK - will start at frame 'focus_start'")
                        (range 0 100))
                     (focus_headblend_out
                        float
                        (help
                           "in frames, how long to blend out the head IK - will finish at frame 'focus_start' + 'focus_duration'")
                        (range 0 100)))
                  (help
                     "An interest object for the characters eyes to focus on during this shot. By default, the target will be forced for the whole shot, but this can by animated via a song's TransAnim"))
               (lod_exception
                  bool
                  (help
                     "Should this target be the exception to LOD levels? (ie. The only high res char, or the only low res char, when we have to meet budget).")))))
      (triggers
         (array
            (struct
               (frame
                  float
                  (help
                     "Frame number for this trigger to go off"))
               (trigger
                  object
                  (class EventTrigger)
                  (help
                     "Event trigger")))
            (alias
               "trigger"))
         (post_sync
            {milo update_open_editor $this}))
      (event_at_start
         object
         (class EventTrigger)
         (help
            "Event Trigger to fire when this camshot starts"))
      (event_at_end
         object
         (class EventTrigger)
         (help
            "Event Trigger to fire when this camshot ends"))
      (reset_event_at_start
         bool
         (help
            "if true, resets the event_at_start when the camera shot is over"))
      (zero_time
         float
         (help
            "synchronization time for this camshot"))
      (min_time
         int
         (help
            "30fps reg: minimum time this shot can last, DCuts: time past zero time in which the shot can be interupted"))
      (max_time
         int
         (help
            "30fps maximum duration for this shot, 0 is infinite"))
      (crowd_audio_volume
         float
         (help
            "volume in db for crowd audio associated with this shot"))
      (next_shots
         (array
            object
            (list
               {$this allowable_next_shots}))
         (help
            "Next camshots, in order"))
      (store
         script
         (script
            {$this store}))
      (view
         script
         (script
            {$this view}))
      (view_freeze
         script
         (script
            {$this view_freeze})
         (help
            "Start a view but freeze them all in place"))
      (stop
         script
         (script
            {if
               {exists milo}
               {milo set_anim_paused TRUE}}
            {$this stop}))
      (dof_tint
         bool
         (help
            "enable color tinting of the depth of field blur"))
      (dof_tint_color
         color
         (help
            "color added to the depth of field blur")))
   (types)
   (views
      (flags
         ("Category"
            [category])
         ("Platform Only"
            [platform_only])
         ("DoF"
            [use_depth_of_field])
         ("Target 0"
            [keyframes 0 targets 0 entity])
         ("Target 1"
            [keyframes 1 targets 0 entity])
         ("Total Duration"
            {$this duration_seconds})
         ("Blur Depth"
            [keyframes 0 blur_depth])
         ("Max Blur"
            [keyframes 0 max_blur])
         ("Focus Blur Mult"
            [keyframes 0 focus_blur_multiplier])
         ("Shake Freq"
            [keyframes 0 shake_noisefreq])
         ("Shake Amp"
            [keyframes 0 shake_noiseamp])
         ("Shake Max x"
            [keyframes 0 shake_maxangle x])
         ("Shake Max y"
            [keyframes 0 shake_maxangle y])
         ("PS3 Per Pixel"
            [ps3_per_pixel]))
      (Shadows
         ("Category"
            [category])
         ("Bass Shadow"
            [targets 0 self_shadow])
         ("Bass Cutout"
            [targets 0 spot_cutout])
         ("Bass Floorspot"
            [targets 0 floor_shadow])
         ("Drum Shadow"
            [targets 1 self_shadow])
         ("Drum Cutout"
            [targets 1 spot_cutout])
         ("Drum Floorspot"
            [targets 1 floor_shadow])
         ("Guitar Shadow"
            [targets 2 self_shadow])
         ("Guitar Cutout"
            [targets 2 spot_cutout])
         ("Guitar Floorspot"
            [targets 2 floor_shadow])
         ("Vocal Shadow"
            [targets 3 self_shadow])
         ("Vocal Cutout"
            [targets 3 spot_cutout])
         ("Vocal Floorspot"
            [targets 3 floor_shadow]))
      (CrowdOptimization
         ("Crowd density"
            [crowd_density])
         ("Crowd lod"
            [crowd_lod]))))
#define PLAYER_SETTINGS
(("kPlayer1"
      "kPlayer2"
      "kPlayerNone"
      "kPlayerShared"))
(BandCrowdMeterDir
   (description
      "Crowd meter hud element, has a needle")
   (superclasses RndDir)
   (types)
   (editor
      (guitar_slot_anim
         object
         (class Group)
         (help
            "Guitar group")
         HIDE_IN_PROXY)
      (bass_slot_anim
         object
         (class Group)
         (help
            "Bass group")
         HIDE_IN_PROXY)
      (drum_slot_anim
         object
         (class Group)
         (help
            "Drum group")
         HIDE_IN_PROXY)
      (vocals_slot_anim
         object
         (class Group)
         (help
            "Vocals group")
         HIDE_IN_PROXY)
      (peak_value
         float
         (help
            "Peak state value"))
      (value
         float
         (range 0 1)
         (help
            "Band health. Animates crowd_meter.grp")
         (no_test))
      (guitar
         float
         (range -1 1)
         (help
            "Guitar health. Animates guitar.tnm"))
      (drum
         float
         (range -1 1)
         (help
            "Drummer health. Animates drum.tnm"))
      (bass
         float
         (range -1 1)
         (help
            "Bass health. Animates bass.tnm"))
      (vocals
         float
         (range -1 1)
         (help
            "Vocal health. Animates vocals.tnm"))
      (reset
         script
         (script
            {$this reset}))
      (level_colors
         (array color))
      (maxed
         bool
         (help
            "Turned on when in the 'meter maxed' state. Animates maxed.tnm")
         (no_test))
      (worst_case
         script
         (script
            {$this worst_case}))))
(CrowdMeterIcon
   (description
      "Individual player icon for crowd meter")
   (superclasses RndDir)
   (types)
   (editor
      (reset
         script
         (script
            {$this reset}))
      (arrow_hide
         script
         (script
            {$this arrow_hide}))
      (arrow_show
         script
         (script
            {$this arrow_show}))
      (deploy
         script
         (script
            {$this deploy}))
      (stop_deploy
         script
         (script
            {$this stop_deploy}))
      (glow
         script
         (script
            {$this set_glowing 1}))
      (glow_stop
         script
         (script
            {$this set_glowing 0}))
      (state_normal
         script
         (script
            {$this set_state 0}))
      (state_warning
         script
         (script
            {$this set_state 1}))
      (state_failed
         script
         (script
            {$this set_state 2}))))
(BandStarMeterDir
   (description
      "Star meter hud element")
   (superclasses RndDir)
   (types)
   (editor
      (main_group
         object
         (class Group)
         (help
            "animated from 0 to 100 as the meter fills")
         HIDE_IN_PROXY)
      (ready_group
         object
         (class Group)
         (help
            "drawn and animated only when star power is ready")
         HIDE_IN_PROXY)
      (fill_group
         object
         (class Group)
         (help
            "drawn and animated only when star power is filling up")
         HIDE_IN_PROXY)
      (anim_group
         object
         (class Group)
         (help
            "always animated")
         HIDE_IN_PROXY)
      (engage_anim_1
         object
         (class Anim)
         (help
            "anim to drive when player 1 is trying to engage")
         HIDE_IN_PROXY)
      (engage_anim_2
         object
         (class Anim)
         (help
            "anim to drive when player 2 is trying to engage")
         HIDE_IN_PROXY)
      (value
         float
         (range 0 1)
         (help
            "test value between 0 and 1"))
      (using_star_power
         bool
         (help
            "for testing; whether we're using star power or not.")
         (no_test))
      (engaging_1
         bool
         (help
            "whether player 1 is trying to engage, for testing."))
      (engaging_2
         bool
         (help
            "whether player 2 is trying to engage, for testing."))
      (player
         int
         (list PLAYER_SETTINGS)
         (help
            "which player to track"))))
(BandScoreDisplay
   (description
      "Score displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (display_meshs
         (array
            object
            (class Mesh))
         (help
            "mesh for each displayed digit")
         HIDE_IN_PROXY)
      (digit_mats
         (array
            object
            (class Mat))
         (help
            "material for each digit (0-9)")
         HIDE_IN_PROXY)
      (blank_mat
         object
         (class Mat)
         (help
            "material for a blank space")
         HIDE_IN_PROXY)
      (score
         int
         (help
            "enter the score for testing"))
      (player
         int
         (list PLAYER_SETTINGS)
         (help
            "which player to track"))))
(BandStreakDisplay
   (description
      "Streak displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (color_anim
         object
         (class MatAnim)
         (help
            "mat anim specifying the color for each state")
         HIDE_IN_PROXY)
      (shake_anim
         object
         (class Anim)
         (help
            "anim that is fired when achieving a new streak")
         HIDE_IN_PROXY)
      (frame_mat
         object
         (class Mat)
         (help
            "material for the frame (has color applied to it)")
         HIDE_IN_PROXY)
      (mult_glow_mesh
         object
         (class Mesh)
         (help
            "glow mesh; hidden when no streak, color of its material is changed to match the streak color")
         HIDE_IN_PROXY)
      (mult_frame_mat
         object
         (class Mat)
         (help
            "material for multiplier frame")
         HIDE_IN_PROXY)
      (led_mats
         (array
            object
            (class Mat))
         (help
            "material for LED's; one material per color.")
         HIDE_IN_PROXY)
      (led_meshs
         (array
            object
            (class Mesh))
         (help
            "meshes for the LED streak indicators")
         HIDE_IN_PROXY)
      (digit_mats
         (array
            object
            (class Mat))
         (help
            "one material per digit")
         HIDE_IN_PROXY)
      (mult_digit_mesh
         object
         (class Mesh)
         (help
            "mesh for the multiplier digit")
         HIDE_IN_PROXY)
      (x_digit_mesh
         object
         (class Mesh)
         (help
            "mesh for the X")
         HIDE_IN_PROXY)
      (blank_digit_mat
         object
         (class Mat)
         (help
            "material for a blank digit")
         HIDE_IN_PROXY)
      (x_digit_mat
         object
         (class Mat)
         (help
            "material for the X")
         HIDE_IN_PROXY)
      (blown_mesh_1
         object
         (class Mesh)
         (help
            "mesh to indicate when player 1 blows a streak")
         HIDE_IN_PROXY)
      (blown_mesh_2
         object
         (class Mesh)
         (help
            "mesh to indicate when player 2 blows a streak")
         HIDE_IN_PROXY)
      (blown_mat
         object
         (class Mat)
         (help
            "material used for the indicators when the streak is blown")
         HIDE_IN_PROXY)
      (blown_display_time
         float
         (range 0 5)
         (no_test serialize)
         (help
            "length of time the blown streak indicator should light up for")
         HIDE_IN_PROXY)
      (player_1_blows
         script
         (script
            {$this blow_streak 0}))
      (player_2_blows
         script
         (script
            {$this blow_streak 1}))
      (multiplier
         int
         (range 1 9)
         (help
            "multiplier value for testing"))
      (star_mode
         bool
         (help
            "toggle star power for testing"))
      (partial_streak
         int
         (range 0 20)
         (help
            "partial streak for testing"))
      (player
         int
         (list PLAYER_SETTINGS)
         (help
            "which player to track"))
      (refresh
         script
         (script
            {$this refresh}))))
(BandLeadMeter
   (description
      "Multiplayer lead meter hud element, shows which player is in the lead")
   (superclasses RndDir)
   (types)
   (editor
      (needle_anim
         object
         (class Anim)
         (help
            "anim to drive the needle")
         HIDE_IN_PROXY)
      (logo_glow_anim
         object
         (class Anim)
         (help
            "anim to make the logo glow different colors")
         HIDE_IN_PROXY)
      (glow_mesh_1
         object
         (class Mesh)
         (help
            "mesh that is shown when player 1 is ahead")
         HIDE_IN_PROXY)
      (glow_mesh_2
         object
         (class Mesh)
         (help
            "mesh that is shown when player 2 is ahead")
         HIDE_IN_PROXY)
      (pegged_anim_1
         object
         (class Anim)
         (help
            "animation to play when player 1 has a huge lead")
         HIDE_IN_PROXY)
      (pegged_anim_2
         object
         (class Anim)
         (help
            "animation to play when player 2 has a huge lead")
         HIDE_IN_PROXY)
      (lens_mesh
         object
         (class Mesh)
         (help
            "lens mesh")
         HIDE_IN_PROXY)
      (lens_mat_neutral
         object
         (class Mat)
         (help
            "lens mat to use when the score is tied")
         HIDE_IN_PROXY)
      (lens_mat_1
         object
         (class Mat)
         (help
            "lens mat to use when player 1 is winning")
         HIDE_IN_PROXY)
      (lens_mat_2
         object
         (class Mat)
         (help
            "lens mat to use when player 2 is winning")
         HIDE_IN_PROXY)
      (score_diff
         int
         (help
            "difference in scores for testing. a positive number means the first player is ahead."))
      (refresh
         script
         (script
            {$this refresh}))))
(BandMeshLauncher
   (description
      "A MeshLauncher object emits meshes along a path.")
   (superclasses Poll)
   (ext ml)
   (types
      (basic_launcher
         (editor
            (launch_mesh
               script
               (script
                  {$this launch_mesh}))
            (trans_anim
               object
               (class TransAnim))
            (parent_trans
               object
               (class Trans)))
         (trans_anim
            "")
         (parent_trans
            "")
         (launch_mesh
            {if
               {!=
                  [trans_anim]
                  ""}
               {$this
                  launch
                  [trans_anim]
                  [parent_trans]}}))
      (particle_launcher
         (editor
            (launch
               script
               (script
                  {$this launch_particles}))
            (part
               object
               (class ParticleSys))
            (trans
               object
               (class Trans))
            (num_parts
               int
               (range 0 1000))
            (use_life
               bool
               (refresh life)
               (post_sync
                  {if
                     {!
                        [use_life]}
                     {set
                        [life]
                        0}}))
            (life
               float
               (read_only
                  {!
                     [use_life]}))
            (use_speed
               bool
               (refresh speed)
               (post_sync
                  {if
                     {!
                        [use_speed]}
                     {set
                        [speed]
                        0}}))
            (speed
               float
               (read_only
                  {!
                     [use_speed]}))
            (use_size
               bool
               (refresh size)
               (post_sync
                  {if
                     {!
                        [use_size]}
                     {set
                        [size]
                        0}}))
            (size
               float
               (read_only
                  {!
                     [use_size]}))
            (use_delta_size
               bool
               (refresh delta_size)
               (post_sync
                  {if
                     {!
                        [use_delta_size]}
                     {set
                        [delta_size]
                        0}}))
            (delta_size
               float
               (read_only
                  {!
                     [use_delta_size]}))
            (use_start_color
               bool
               (refresh start_color start_alpha)
               (post_sync
                  {if
                     {!
                        [use_start_color]}
                     {set
                        [start_color]
                        0}
                     {set
                        [start_alpha]
                        0}}))
            (start_color
               color
               (read_only
                  {!
                     [use_start_color]}))
            (start_alpha
               float
               (read_only
                  {!
                     [use_start_color]})
               (range 0 1))
            (use_mid_color
               bool
               (refresh mid_color mid_alpha)
               (post_sync
                  {if
                     {!
                        [use_mid_color]}
                     {set
                        [mid_color]
                        0}
                     {set
                        [mid_alpha]
                        0}}))
            (mid_color
               color
               (read_only
                  {!
                     [use_mid_color]}))
            (mid_alpha
               float
               (read_only
                  {!
                     [use_mid_color]})
               (range 0 1))
            (use_end_color
               bool
               (refresh end_color end_alpha)
               (post_sync
                  {if
                     {!
                        [use_end_color]}
                     {set
                        [end_color]
                        0}
                     {set
                        [end_alpha]
                        0}}))
            (end_color
               color
               (read_only
                  {!
                     [use_end_color]}))
            (end_alpha
               float
               (read_only
                  {!
                     [use_end_color]})
               (range 0 1))
            (use_emit_direction
               bool
               (refresh pitch_low pitch_high yaw_low yaw_high)
               (post_sync
                  {if
                     {!
                        [use_end_color]}
                     {set
                        [pitch_low]
                        0}
                     {set
                        [pitch_high]
                        0}
                     {set
                        [yaw_low]
                        0}
                     {set
                        [yaw_high]
                        0}}))
            (pitch_low
               float
               (read_only
                  {!
                     [use_emit_direction]}))
            (pitch_high
               float
               (read_only
                  {!
                     [use_emit_direction]}))
            (yaw_low
               float
               (read_only
                  {!
                     [use_emit_direction]}))
            (yaw_high
               float
               (read_only
                  {!
                     [use_emit_direction]})))))
   (editor
      (multi_mesh
         object
         (class MultiMesh)
         (help
            "Controlled MultiMesh to emit from."))))
#define kNoAttitude
(0)
(CompositeCharacter
   (description
      "Character with outfits and compositing decal texture tech")
   (superclasses Character)
   (editor
      (height
         float
         (help
            "Deformation height 0-1")
         (range 0 1))
      (weight
         float
         (help
            "Deformation weight 0-1")
         (range 0 1))
      (skin_color_index
         int
         (help
            "Skin color index")
         (no_test))
      (skin_color_palette
         object
         (class ColorPalette)
         (help
            "Skin color palette"))
      (skin_tattoo_palette
         object
         (class ColorPalette)
         (help
            "Color palette to apply to tattoo's"))
      (eye_color_index
         int
         (help
            "Eye color index"))
      (eye_color_palette
         object
         (class ColorPalette)
         (help
            "Eye color palette"))
      (eyebrow_color_index
         int
         (help
            "Eyebrow color index, uses hair.pal"))
      (skin_shader
         object
         (class Tex)
         (help
            "Always use this skin shader for this character"))
      (attitude
         int
         (help
            "Character attitude")
         (list
            ("kGenreBanger"
               "kGenreDramatic"
               "kGenreRocker"
               "kGenreSpazz")))
      (tempo
         int
         (help
            "Character tempo")
         (list
            ("kTempoSlow"
               "kTempoMedium"
               "kTempoFast")))
      (clip_mode
         int
         (help
            "Which clips it will load")
         (list
            ("kClipModeNone"
               "kClipModeMeta"
               "kClipModeLoadingScreen"
               "kClipModeRealtime"
               "kClipModeWorld"
               "kClipModeFinale")))
      (gender
         symbol
         (help
            "gender")
         (list
            (male female)))
      (force_poll
         bool
         (help
            "if true, forces the character to poll even if hidden, used for video venue")
         (no_test))
      (load_clips
         script
         (help
            "loads clips according to clips_mode, attitude, and tempo")
         (script
            {$this load_clips FALSE}))
      (randomize_colors
         script
         (script
            {$this
               iterate
               OutfitConfig
               $o
               {$o randomize_colors}}))
      (write_character
         script
         (script
            {$this write_character})
         (help
            "Writes out character definition to band\\run\\character_config.dta"))
      (clear_ram
         script
         (script
            {$this clear_ram})
         (help
            "Clears out all unneeded stuff, made for Pi as example.")))
   (types))
(LayerDir
   (description
      "Draws configurable layer planes from an orthographic camera")
   (types)
   (superclasses RndDir)
   (editor
      (layers
         (array
            (struct
               (name
                  string
                  (hide
                     {$this is_proxy})
                  (refresh layers))
               (active
                  bool
                  (help
                     "is this layer active?")
                  (hide
                     {!
                        [layers
                           {elem $milo_prop_path 1}
                           layer_optional]}))
               (color
                  color
                  (help
                     {if_else
                        {$this is_proxy}
                        "layers preview color value to apply (not saved)"
                        "layers default color value to apply (saved)"})
                  (hide
                     {!
                        [layers
                           {elem $milo_prop_path 1}
                           allow_color]}))
               (color_idx
                  int
                  (help
                     {if_else
                        {$this is_proxy}
                        "layers preview color value to apply from palette (not saved)"
                        "layers default color value to apply from palette (saved)"})
                  (hide
                     {'||'
                        {!
                           [layers
                              {elem $milo_prop_path 1}
                              allow_color]}
                        {!
                           [layers
                              {elem $milo_prop_path 1}
                              color_palette]}}))
               (alpha
                  float
                  (help
                     {if_else
                        {$this is_proxy}
                        "layers preview alpha value to apply (not saved)"
                        "layers default alpha value to apply (saved)"})
                  (range 0 1)
                  (hide
                     {!
                        [layers
                           {elem $milo_prop_path 1}
                           allow_alpha]}))
               (bitmap
                  string
                  (list
                     {$this get_bitmap_list})
                  (help
                     {if_else
                        {$this is_proxy}
                        "preview bitmap to apply (not saved)"
                        "default bitmap to apply (saved)"})
                  (hide
                     {<
                        {size
                           [layers
                              {elem $milo_prop_path 1}
                              bitmap_list]}
                        2}))
               (setup
                  (indent
                     (mat
                        object
                        (class Mat)
                        (help
                           "Material this layer controls"))
                     (proxy
                        object
                        (class RndDir)
                        (help
                           "set the proxy file to use if this is a user-created patch layer"))
                     (layer_optional
                        bool
                        (help
                           "can this layer can be turned off?")
                        (refresh layers))
                     (bitmap_list
                        (array file)
                        (help
                           "list of available bitmaps")
                        (refresh layers))
                     (allow_color
                        bool
                        (help
                           "allow users to change color")
                        (refresh layers))
                     (color_palette
                        object
                        (class Object color_palette)
                        (help
                           "select a palette object to get colors from")
                        (hide
                           {'||'
                              {!
                                 [layers
                                    {elem $milo_prop_path 1}
                                    allow_color]}
                              {$this is_proxy}}))
                     (allow_alpha
                        bool
                        (help
                           "allow users to change alpha as slider")
                        (refresh layers))
                     (alpha_min
                        float
                        (read_only
                           {!
                              [layers
                                 {elem $milo_prop_path 1}
                                 allow_alpha]})
                        (refresh layers)
                        (help
                           "minimum alpha value allowed"))
                     (alpha_max
                        float
                        (read_only
                           {!
                              [layers
                                 {elem $milo_prop_path 1}
                                 allow_alpha]})
                        (refresh layers)
                        (help
                           "maximum alpha value allowed")))
                  (hide
                     {$this is_proxy})))
            (header
               [layers
                  {elem $milo_prop_path 1}
                  name])))
      (randomize_colors
         script
         (script
            {$this randomize_colors}))
      (use_free_cam
         bool
         (help
            "allows dir to have it's own camera instead of using the preset fixed camera")
         (hide
            {$this is_proxy}))))
(ColorPalette
   (description
      "List of primary/secondary colors for OutfitConfig")
   (allowed_dirs RndDir)
   (types)
   (ext pal)
   (editor
      (colors
         (array
            color
            (help
               "Color for materials")))))
(OutfitConfig
   (description
      "Configurable options for outfits")
   (superclasses Poll)
   (allowed_dirs Character)
   (types)
   (ext cfg)
   (editor
      (colors
         (array
            (struct
               (color_index
                  int
                  (help
                     "Index of color choice"))
               (mats
                  (array
                     (struct
                        (mat
                           object
                           (class Mat)
                           (help
                              "Material with configurable colors/texture"))
                        (primary_palette
                           object
                           (class ColorPalette)
                           (help
                              "Colors for material color, shown to the user if set"))
                        (secondary_palette
                           object
                           (class ColorPalette)
                           (help
                              "Colors for material two_color, not shown to user unless primary_palette isn't set"))
                        (textures
                           (array
                              object
                              (class Tex))
                           (help
                              "Textures to use instead of colors, must be same size as primary color palette!"))))
                  (help
                     "Color palette of first item in this list defines user's options in game"))))
         (help
            "All color/texture choices for this outfit in game"))
      (randomize_colors
         script
         (script
            {$this randomize_colors})
         (help
            "Set random color indices")
         (refresh colors))
      (apply
         script
         (script
            {$this apply})
         (help
            "Apply color choices to the outfit"))))
(PatchRenderer
   (description
      "Special texture renderer for character patches")
   (allowed_dirs)
   (superclasses TexRenderer)
   (types)
   (ext patch)
   (editor
      (test_mode
         symbol
         (list
            (blank test))
         (help
            "Blank/test modes for milo"))
      (position
         symbol
         (list
            (front back left right))
         (help
            "Position of patch, controls which cam shot we use"))
      (back_mat
         object
         (class Mat)
         (help
            "background material for patch"))
      (overlay_mat
         object
         (class Mat)
         (help
            "Overlay material for patch"))))
(WorldMapDir
   (description
      "A panel dir for the world tour map.")
   (allowed_dirs)
   (superclasses PanelDir)
   (editor
      SHELL_EDITOR
      (focal_distance
         float
         (help
            "Focal distance."))
      (blur_depth
         float
         (help
            "Blur depth."))
      (min_blur
         float
         (help
            "The min blur."))
      (max_blur
         float
         (help
            "The max blur."))
      (do_culling
         bool
         (help
            "Should hidden towns be culled?"))
      (town
         symbol
         (list
            {$this get_town_list})
         (help
            "Select a town to rotate the world to it.")
         (no_test))
      (zoom_in
         script
         (script
            {$this zoom_in_impl})
         (help
            "Zoom in to a town."))
      (zoom_out
         script
         (script
            {$this zoom_out_impl})
         (help
            "Zoom out from a town.")))
   SHELL_TYPE
   (types))
#define COMMON_BANDTRACK_EDITOR
((instrument
      symbol
      (list
         ('' bass drum guitar vocals)))
   (player_intro
      object
      (class RndDir))
   (star_power_meter
      object
      (class RndDir))
   (streak_meter
      object
      (class StreakMeterDir))
   (popup_object
      object
      (class RndDir))
   (player_feedback
      object
      (class RndDir))
   (failed_feedback
      object
      (class RndDir))
   (retract_trig
      object
      (class EventTrigger))
   (reset_trig
      object
      (class EventTrigger))
   (deploy_trig
      object
      (class EventTrigger))
   (stop_deploy_trig
      object
      (class EventTrigger))
   (intro_trig
      object
      (class EventTrigger))
   (disable_player
      script
      (script
         {$this disable_player 1}))
   (save_player
      script
      (script
         {$this save_player}
         {script_task
            kTaskSeconds
            (delay 1.5)
            (script
               {$this enable_player})})))
#define COMMON_BANDTRACK_DATA
((min_finale_help_time 5.0))
(GemTrackDir
   (description
      "band 2 TrackDir for gem tracks")
   (superclasses TrackDir)
   (editor
      (reset
         script
         (script
            {$this reset}))
      (deploy
         script
         (script
            {$this deploy}))
      (stop_deploy
         script
         (script
            {$this stop_deploy}))
      (mash
         script
         (script
            {$this mash 0}))
      (effect_selector
         object
         (class RndDir))
      (practice_reset
         script
         (script
            {$this practice_reset}))
      (config_cam
         (indent
            (1_player_regular
               script
               (script
                  {$this set_pitch -44.5}
                  {$this set_fov 21.0516}
                  {$this set_cam_pos 0 -83.5 18.5})
               (help
                  "1 gem track, regular aspect"))
            (1_player_wide
               script
               (script
                  {$this set_pitch -44.5}
                  {$this set_fov 21.0516}
                  {$this set_cam_pos 0 -80.98 18.7})
               (help
                  "1 gem track, widescreen aspect"))
            (2_players_regular
               script
               (script
                  {$this set_pitch -41.4}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -114 26})
               (help
                  "2 gem tracks, regular aspect"))
            (2_players_wide
               script
               (script
                  {$this set_pitch -41.4}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -107.56 24.54})
               (help
                  "2 gem tracks, widescreen aspect"))
            (3_players_regular
               script
               (script
                  {$this set_pitch -39.25}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -163 38.5})
               (help
                  "3 gem tracks, regular aspect"))
            (3_players_wide
               script
               (script
                  {$this set_pitch -40}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -129.7 29.7})
               (help
                  "3 gem tracks, widescreen aspect")))
         (help
            "Configure the camera as we would in game"))
      (streak_meter_offset
         float
         (help
            "The projected distance between the now bar and the streak meter")
         (post_sync
            {$this
               set_pitch
               [track_pitch]}))
      (streak_meter_tilt
         float
         (help
            "The tilt of the streak meter relative to game.cam, in degrees")
         (post_sync
            {$this
               set_pitch
               [track_pitch]}))
      COMMON_BANDTRACK_EDITOR
      (rotater
         object
         (class Group))
      (surface_objects
         (indent
            (surface_mesh
               object
               (class Mesh))
            (surface_texture
               object
               (class Tex))
            (surface_mat
               object
               (class Mat))))
      (track_env
         object
         (class Environ))
      (game_cam
         object
         (class Cam))
      (super_streak_triggers
         (indent
            (super_streak_on_trig
               object
               (class EventTrigger))
            (super_streak_off_trig
               object
               (class EventTrigger))))
      (spotlight_phrase_success_trig
         object
         (class EventTrigger))
      (solo_hit_trig
         object
         (class EventTrigger))
      (gem_mash_anims
         (indent
            (gem_mash_0_anim
               object
               (class PropAnim))
            (gem_mash_1_anim
               object
               (class PropAnim))
            (gem_mash_2_anim
               object
               (class PropAnim))
            (gem_mash_3_anim
               object
               (class PropAnim))
            (gem_mash_4_anim
               object
               (class PropAnim))))
      (drum_mash_anims
         (indent
            (drum_mash_1_anim
               object
               (class PropAnim))
            (drum_mash_2_anim
               object
               (class PropAnim))
            (drum_mash_3_anim
               object
               (class PropAnim))
            (drum_mash_4_anim
               object
               (class PropAnim))))
      (fill_hit_trigs
         (indent
            (fill_hit_1_trig
               object
               (class EventTrigger))
            (fill_hit_2_trig
               object
               (class EventTrigger))
            (fill_hit_3_trig
               object
               (class EventTrigger))))
      (drummer_objects
         (indent
            (kick_drummer_trig
               object
               (class EventTrigger))
            (drum_fill_reset_trig
               object
               (class EventTrigger))
            (drum_mash_2nd_pass_activate_anim
               object
               (class PropAnim))
            (drum_mash_hit_anim_grp
               object
               (class Group))))
      (fill_colors_grp
         object
         (class Group))
      (lod_anim
         object
         (class PropAnim))
      (glow_widgets
         (array
            object
            (class TrackWidget))))
   (types
      (test
         (editor
            (spew_gems
               script
               (script
                  {$this spew_gems}))
            (clear_gems
               script
               (script
                  {$this clear_gems}))
            (fit_meshes
               (array
                  object
                  (class Mesh))
               (help
                  "Meshes which need to be fit to the cross section of the track surface."))
            (dump
               script
               (script
                  {$this dump})))
         (fit_meshes
            ())
         (object_type_list
            ($obj_type)
            {do
               ($array
                  {array 0})
               {push_back $array none}
               {$this
                  iterate
                  $obj_type
                  $obj
                  {push_back
                     $array
                     {symbol
                        {$obj name}}}}
               {sort $array}
               $array})
         (spew_gems
            {if
               {!
                  {exists spew_gems_test}}
               {$this toggle_running}
               {thread_task
                  kTaskBeats
                  (name spew_gems_test)
                  (script
                     {set $lane 0}
                     {switch
                        $beat
                        (0
                           {$this
                              add_test_widget
                              "bar_measure.wid"
                              2}
                           {set $beat 1})
                        (1
                           {$this
                              add_test_widget
                              "bar_half_beat.wid"
                              2}
                           {set $beat 2})
                        (2
                           {$this
                              add_test_widget
                              "bar_beat.wid"
                              2}
                           {set $beat 3})
                        (3
                           {$this
                              add_test_widget
                              "bar_half_beat.wid"
                              2}
                           {set $beat 4})
                        (4
                           {$this
                              add_test_widget
                              "bar_beat.wid"
                              2}
                           {set $beat 5})
                        (5
                           {$this
                              add_test_widget
                              "bar_half_beat.wid"
                              2}
                           {set $beat 6})
                        (6
                           {$this
                              add_test_widget
                              "bar_beat.wid"
                              2}
                           {set $beat 7})
                        (7
                           {$this
                              add_test_widget
                              "bar_half_beat.wid"
                              2}
                           {set $beat 0})}
                     {set
                        $num_gems
                        {random_int 3 4}}
                     {if
                        {== $num_gems 1}
                        {set
                           $hopo
                           {random_int 0 2}}}
                     {foreach_int
                        $gem
                        0
                        $num_gems
                        {set
                           $lane
                           {random_int 0 5}}
                        {if_else
                           {==
                              [instrument]
                              drum}
                           {switch
                              $lane
                              (0
                                 {$this
                                    add_test_widget
                                    "drum_red.wid"
                                    $lane})
                              (1
                                 {$this
                                    add_test_widget
                                    "drum_yellow.wid"
                                    $lane})
                              (2
                                 {$this
                                    add_test_widget
                                    "gem_kick.wid"
                                    $lane})
                              (3
                                 {$this
                                    add_test_widget
                                    "drum_blue.wid"
                                    $lane})
                              (4
                                 {$this
                                    add_test_widget
                                    "drum_green.wid"
                                    $lane})}
                           {switch
                              $lane
                              (0
                                 {if_else
                                    $hopo
                                    {$this
                                       add_test_widget
                                       "gem_green_hopo.wid"
                                       $lane}
                                    {$this
                                       add_test_widget
                                       "gem_green.wid"
                                       $lane}})
                              (1
                                 {if_else
                                    $hopo
                                    {$this
                                       add_test_widget
                                       "gem_red_hopo.wid"
                                       $lane}
                                    {$this
                                       add_test_widget
                                       "gem_red.wid"
                                       $lane}})
                              (2
                                 {if_else
                                    $hopo
                                    {$this
                                       add_test_widget
                                       "gem_yellow_hopo.wid"
                                       $lane}
                                    {$this
                                       add_test_widget
                                       "gem_yellow.wid"
                                       $lane}})
                              (3
                                 {if_else
                                    $hopo
                                    {$this
                                       add_test_widget
                                       "gem_blue_hopo.wid"
                                       $lane}
                                    {$this
                                       add_test_widget
                                       "gem_blue.wid"
                                       $lane}})
                              (4
                                 {if_else
                                    $hopo
                                    {$this
                                       add_test_widget
                                       "gem_orange_hopo.wid"
                                       $lane}
                                    {$this
                                       add_test_widget
                                       "gem_orange.wid"
                                       $lane}})}}}
                     {$task sleep 1}
                     {$task loop})}})
         (clear_gems
            {if
               {exists spew_gems_test}
               {delete spew_gems_test}
               {$this toggle_running}})
         (dump
            {print
               "surface_texture: "
               [surface_texture]
               "\n"}
            {print
               "surface_mesh: "
               [surface_mesh]
               "\n"}
            {print
               "effect_selector: "
               [effect_selector]
               "\n"}
            {print
               "gem_track_index: "
               [gem_track_index]
               "\n"}
            {print
               "num_tracks: "
               [num_tracks]
               "\n"}
            {print
               "multiplier: "
               [multiplier]
               "\n"}
            {print
               "kick_pass_counter: "
               [kick_pass_counter]
               "\n"})))
   COMMON_BANDTRACK_DATA)
(VocalTrackDir
   (description
      "band 2 dir for vocal track")
   (superclasses RndDir)
   (editor
      (reset
         script
         (script
            {$this reset}))
      (deploy
         script
         (script
            {$this deploy}))
      (stop_deploy
         script
         (script
            {$this stop_deploy}))
      (pitch_panel
         (indent
            (pitch_window
               bool
               (help
                  "are we displaying the note tube panel?")
               (post_sync
                  {$this reset}))
            (pitch_window_height
               float
               (help
                  "height of the note tube panel")
               (post_sync
                  {$this reset}))
            (pitch_window_mesh
               object
               (class Mesh)
               (help
                  "the pitch window mesh")
               (post_sync
                  {$this reset}))
            (pitch_window_overlay
               object
               (class Mesh)
               (help
                  "the pitch window overlay mesh")
               (post_sync
                  {$this reset}))))
      (lead_panel
         (indent
            (lead_lyrics
               bool
               (help
                  "are we showing the lead lyric panel?")
               (post_sync
                  {$this reset}))
            (lead_lyric_height
               float
               (hide
                  {!
                     [lead_lyrics]})
               (help
                  "controls the height of the lead lyric bar")
               (post_sync
                  {$this reset}))
            (lead_lyric_mesh
               object
               (class Mesh)
               (hide
                  {!
                     [lead_lyrics]})
               (help
                  "the lead lyric bar mesh")
               (post_sync
                  {$this reset}))))
      (harmony_panel
         (indent
            (harmony_lyrics
               bool
               (help
                  "are we showing the harmony lyric panel?")
               (post_sync
                  {$this reset}))
            (harmony_lyric_height
               float
               (hide
                  {!
                     [harmony_lyrics]})
               (help
                  "controls the height of the harmony lyric bar")
               (post_sync
                  {$this reset}))
            (harmony_lyric_mesh
               object
               (class Mesh)
               (hide
                  {!
                     [harmony_lyrics]})
               (help
                  "the harmony lyric bar mesh")
               (post_sync
                  {$this reset}))))
      (lyric_colors
         (indent
            (scrolling
               (indent
                  (lead
                     (indent
                        (lead_coming
                           color
                           (help
                              "Color of the approaching lead lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_coming]
                                 lead
                                 [scrolling_coming_alpha]}))
                        (lead_now
                           color
                           (help
                              "Color of the current lead lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_now]
                                 lead
                                 [scrolling_now_alpha]}))
                        (lead_past
                           color
                           (help
                              "Color of the lead lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_past]
                                 lead
                                 [scrolling_past_alpha]}))
                        (lead_od_coming
                           color
                           (help
                              "Color of the approaching lead overdrive lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_od_coming]
                                 lead
                                 [scrolling_coming_alpha]}))
                        (lead_od_now
                           color
                           (help
                              "Color of the current lead overdrive lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_od_now]
                                 lead
                                 [scrolling_now_alpha]}))
                        (lead_od_past
                           color
                           (help
                              "Color of the lead overdrive lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_od_past]
                                 lead
                                 [scrolling_past_alpha]}))))
                  (harmony
                     (indent
                        (harmony_coming
                           color
                           (help
                              "Color of the approaching harmony lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_coming]
                                 harmony
                                 [scrolling_coming_alpha]}))
                        (harmony_now
                           color
                           (help
                              "Color of the current harmony lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_now]
                                 harmony
                                 [scrolling_now_alpha]}))
                        (harmony_past
                           color
                           (help
                              "Color of the harmony lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_past]
                                 harmony
                                 [scrolling_past_alpha]}))
                        (harmony_od_coming
                           color
                           (help
                              "Color of the approaching harmony overdrive lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_od_coming]
                                 harmony
                                 [scrolling_coming_alpha]}))
                        (harmony_od_now
                           color
                           (help
                              "Color of the current harmony overdrive lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_od_now]
                                 harmony
                                 [scrolling_now_alpha]}))
                        (harmony_od_past
                           color
                           (help
                              "Color of the harmony overdrive lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_od_past]
                                 harmony
                                 [scrolling_past_alpha]}))))
                  (alpha
                     (indent
                        (scrolling_coming_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for coming lyrics."))
                        (scrolling_now_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for active lyric."))
                        (scrolling_past_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for past lyrics."))))))
            (static
               (indent
                  (lead
                     (indent
                        (lead_static_preview
                           color
                           (help
                              "Color of the preview lead lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_preview]
                                 lead
                                 [static_preview_alpha]}))
                        (lead_static_coming
                           color
                           (help
                              "Color of the approaching lead lyrics in the current phrase.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_coming]
                                 lead
                                 [static_coming_alpha]}))
                        (lead_static_now
                           color
                           (help
                              "Color of the current lead lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_now]
                                 lead
                                 [static_now_alpha]}))
                        (lead_static_past
                           color
                           (help
                              "Color of the lead lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_past]
                                 lead
                                 [static_past_alpha]}))
                        (lead_static_od_preview
                           color
                           (help
                              "Color of the preview lead lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_od_preview]
                                 lead
                                 [static_preview_alpha]}))
                        (lead_static_od_coming
                           color
                           (help
                              "Color of the approaching lead overdrive lyrics in the current phrase.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_od_coming]
                                 lead
                                 [static_coming_alpha]}))
                        (lead_static_od_now
                           color
                           (help
                              "Color of the current lead overdrive lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_od_now]
                                 lead
                                 [static_now_alpha]}))
                        (lead_static_od_past
                           color
                           (help
                              "Color of the lead overdrive lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [lead_static_od_past]
                                 lead
                                 [static_past_alpha]}))))
                  (harmony
                     (indent
                        (harmony_static_preview
                           color
                           (help
                              "Color of the preview harmony lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_preview]
                                 harmony
                                 [static_preview_alpha]}))
                        (harmony_static_coming
                           color
                           (help
                              "Color of the approaching harmony lyrics in the current phrase.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_coming]
                                 harmony
                                 [static_coming_alpha]}))
                        (harmony_static_now
                           color
                           (help
                              "Color of the current harmony lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_now]
                                 harmony
                                 [static_now_alpha]}))
                        (harmony_static_past
                           color
                           (help
                              "Color of the harmony lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_past]
                                 harmony
                                 [static_past_alpha]}))
                        (harmony_static_od_preview
                           color
                           (help
                              "Color of the preview harmony overdrive lyrics.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_od_preview]
                                 harmony
                                 [static_preview_alpha]}))
                        (harmony_static_od_coming
                           color
                           (help
                              "Color of the approaching harmony overdrive lyrics in the current phrase.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_od_coming]
                                 harmony
                                 [static_coming_alpha]}))
                        (harmony_static_od_now
                           color
                           (help
                              "Color of the current harmony overdrive lyric.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_od_now]
                                 harmony
                                 [static_now_alpha]}))
                        (harmony_static_od_past
                           color
                           (help
                              "Color of the harmony overdrive lyrics after they have been read.")
                           (post_sync
                              {$this
                                 set_lyric_color
                                 [harmony_static_od_past]
                                 harmony
                                 [static_past_alpha]}))))
                  (alpha
                     (indent
                        (static_preview_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for static preview lyrics."))
                        (static_coming_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for static current phrase lyrics."))
                        (static_now_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for static active lyric."))
                        (static_past_alpha
                           float
                           (range 0 1)
                           (help
                              "Alpha for static past lyrics."))))))))
      (track_decoration
         (indent
            (left_deco_mesh
               object
               (class Mesh)
               (post_sync
                  {$this reset}))
            (right_deco_mesh
               object
               (class Mesh)
               (post_sync
                  {$this reset}))))
      (now_bar
         (indent
            (now_bar_width
               float
               (help
                  "the width of the now bar mesh")
               (post_sync
                  {$this reset}))
            (now_bar_mesh
               object
               (class Mesh)
               (post_sync
                  {$this reset}))))
      (pitch_guides
         symbol
         (list
            (none evenly_spaced harmonic staff keyboard))
         (post_sync
            {$this reset}))
      (tube_style
         object
         (class Object tube_style))
      (arrow_style
         object
         (class Object arrow_style)
         (post_sync
            {$this
               apply_arrow_style
               [arrow_style]}))
      (font_style
         object
         (class Object font_style)
         (post_sync
            {$this
               apply_font_style
               [font_style]}))
      (deploy_sections
         (indent
            (lead_deploy_mat
               object
               (class Mat)
               (post_sync
                  {{$this find lead_deploy.mesh}
                     set
                     mat
                     [lead_deploy_mat]}))
            (harmony_deploy_mat
               object
               (class Mat)
               (post_sync
                  {{$this find harmony_deploy.mesh}
                     set
                     mat
                     [harmony_deploy_mat]}))))
      (phrase_feedback
         (indent
            (feedback_state_lead
               int
               (range -1 4)
               (post_sync
                  {$this
                     set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]})
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase.")
               (no_test))
            (feedback_state_harm_1
               int
               (range -1 4)
               (post_sync
                  {$this
                     set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]})
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase.")
               (no_test))
            (feedback_state_harm_2
               int
               (range -1 4)
               (post_sync
                  {$this
                     set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]})
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase.")
               (no_test))
            (phrase_feedback_trig
               object
               (class EventTrigger))))
      #ifndef HX_WII
      (vocalist_volume
         object
         (class RndDir))
      #endif
      (configurable_objects
         (array
            object
            (class Trans))
         (help
            "Objects which can change transform or showing per configuration."))
      (vox_configuration
         object
         (class Object vocals_configuration)
         (post_sync
            {$this reset}))
      (side_fade_length
         float
         (post_sync
            {$this update_fade}))
      (spotlight_success_objects
         (indent
            (spotlight_sparkles_only_trig
               object
               (class EventTrigger))
            (spotlight_phrase_success_trig
               object
               (class EventTrigger))))
      COMMON_BANDTRACK_EDITOR)
   (types
      (test
         (editor
            (text_lyrics
               script
               (script
                  {$this test_lyrics})))
         (test_lyrics
            {word.txt
               set_text
               "Current Line"})))
   COMMON_BANDTRACK_DATA)
#define COMMON_TRACKPANELDIR_EDITOR
((view_time_easy
      float
      (post_sync
         {$this configure_tracks}))
   (view_time_expert
      float
      (post_sync
         {$this configure_tracks}))
   (net_track_alpha
      float
      (post_sync
         {$this configure_tracks}))
   (configuration
      object
      (class Object)
      (post_sync
         {$this
            set_configuration
            [configuration]})
      (help
         "current configuration")
      (no_test))
   (configurable_objects
      (array
         object
         (class Trans))
      (help
         "Objects which can change transform or showing per configuration.")))
(H2HTrackPanelDir
   (description
      "panel dir that handles tracks & hud in head-to-head mode")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this configure_tracks}
            {$this reset}))
      (track_0_net
         bool
         (post_sync
            {$this configure_tracks})
         (no_test))
      (track_1_net
         bool
         (post_sync
            {$this configure_tracks})
         (no_test))
      (test_score
         int
         (post_sync
            {$this
               set_score_diff
               [test_score]})
         (no_test))
      (score_duel
         bool
         (post_sync
            {$this configure_tracks})
         (no_test))
      COMMON_TRACKPANELDIR_EDITOR
      (vocal_game
         bool
         (post_sync
            {$this configure_tracks}
            {$this play_intro})
         (no_test)))
   (types))
(TrackPanelDir
   (description
      "panel dir that handles tracks & hud")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this configure_tracks}
            {$this reset}))
      (bass
         int
         (list
            ("kTrackOff"
               "kTrackLocal"
               "kTrackNet"))
         (post_sync
            {bass
               set
               simulated_net
               {==
                  [bass]
                  kTrackNet}}
            {$this configure_tracks}))
      (drum
         int
         (list
            ("kTrackOff"
               "kTrackLocal"
               "kTrackNet"))
         (post_sync
            {drum
               set
               simulated_net
               {==
                  [drum]
                  kTrackNet}}
            {$this configure_tracks}))
      (guitar
         int
         (list
            ("kTrackOff"
               "kTrackLocal"
               "kTrackNet"))
         (post_sync
            {guitar
               set
               simulated_net
               {==
                  [guitar]
                  kTrackNet}}
            {$this configure_tracks}))
      (vocals
         int
         (list
            ("kTrackOff"
               "kTrackLocal"
               "kTrackNet"))
         (post_sync
            {vocals
               set
               simulated_net
               {==
                  [vocals]
                  kTrackNet}}
            {$this configure_tracks}))
      (test_multiplier
         int
         (post_sync
            {$this
               set_multiplier
               [test_multiplier]})
         (no_test))
      COMMON_TRACKPANELDIR_EDITOR
      (turn_everything_on
         script
         (script
            {player_intro_01 icon_show}
            {player_intro_02 icon_show}
            {player_intro_03 icon_show}
            {player_intro_01 set_talking TRUE}
            {player_intro_02 set_talking TRUE}
            {player_intro_03 set_talking TRUE}
            {player_feedback_01 start_solo}
            {player_feedback_01 set_percent 25}
            {player_feedback_02 start_solo}
            {player_feedback_02 set_percent 100}
            {player_feedback_03 start_solo}
            {player_feedback_03 set_percent 50}
            {failed_feedback_01 failed 3}
            {failed_feedback_02 failed 3}
            {failed_feedback_03 failed 3}
            {popup_help_01 drum_fill}
            {popup_help_02 drum_fill}
            {popup_help_03 drum_fill}
            {scoreboard set_score_milo 1234567}
            {crowd_meter worst_case}
            {$this set_multiplier 4}
            {mtv_overlay set_showing TRUE}
            {count_in show}
            {do
               ($obj)
               {set
                  $obj
                  {vocals get popup_object}}
               {if
                  {!=
                     $obj
                     ""}
                  {$obj scream}}
               {set
                  $obj
                  {vocals get player_feedback}}
               {if
                  {!=
                     $obj
                     ""}
                  {$obj start_solo}
                  {$obj set_percent 35}}
               {set
                  $obj
                  {vocals get player_intro}}
               {if
                  {!=
                     $obj
                     ""}
                  {$obj icon_show}
                  {$obj set_talking TRUE}}}))
      (turn_everything_off
         script
         (script
            {player_intro_01 reset}
            {player_intro_02 reset}
            {player_intro_03 reset}
            {player_intro_01 set_talking FALSE}
            {player_intro_02 set_talking FALSE}
            {player_intro_03 set_talking FALSE}
            {player_feedback_01 reset}
            {player_feedback_02 reset}
            {player_feedback_03 reset}
            {failed_feedback_01 reset}
            {failed_feedback_02 reset}
            {failed_feedback_03 reset}
            {popup_help_01 reset}
            {popup_help_02 reset}
            {popup_help_03 reset}
            {scoreboard set_score_milo 0}
            {crowd_meter reset}
            {$this set_multiplier 1}
            {mtv_overlay set_showing FALSE}
            {count_in reset}
            {do
               ($obj)
               {set
                  $obj
                  {vocals get popup_object}}
               {if
                  {!=
                     $obj
                     ""}
                  {$obj reset}}
               {set
                  $obj
                  {vocals get player_feedback}}
               {if
                  {!=
                     $obj
                     ""}
                  {$obj reset}}
               {set
                  $obj
                  {vocals get player_intro}}
               {if
                  {!=
                     $obj
                     ""}
                  {$obj reset}}}))
      (game_won
         script
         (script
            {$this game_won}))
      (game_lost
         script
         (script
            {$this game_lost}))
      (everyone_deploy
         script
         (script
            {bass deploy}
            {guitar deploy}
            {drum deploy}
            {vocals deploy}
            {crowd_meter deploy bass}
            {crowd_meter deploy guitar}
            {crowd_meter deploy drum}
            {crowd_meter deploy vocals}))
      (everyone_stop_deploy
         script
         (script
            {bass stop_deploy}
            {guitar stop_deploy}
            {drum stop_deploy}
            {vocals stop_deploy}
            {crowd_meter stop_deploy bass}
            {crowd_meter stop_deploy guitar}
            {crowd_meter stop_deploy drum}
            {crowd_meter stop_deploy vocals}))
      (spew_gems
         script
         (script
            {guitar spew_gems}
            {drum spew_gems}
            {bass spew_gems}
            {{guitar find smasher_plate_guitar}
               fast_test}
            {{bass find smasher_plate_guitar}
               fast_test}
            {{drum find smasher_plate_drum}
               fast_test}))
      (clear_gems
         script
         (script
            {guitar clear_gems}
            {drum clear_gems}
            {bass clear_gems}
            {{guitar find smasher_plate_guitar}
               stop_test}
            {{bass find smasher_plate_guitar}
               stop_test}
            {{drum find smasher_plate_drum}
               stop_test})))
   (types))
(StreakMeterDir
   (description
      "streak meter for band tracks")
   (superclasses RndDir))
(EndingBonusDir
   (description
      "BRE/unison phrase popup")
   (superclasses RndDir)
   (editor
      (start
         script
         (script
            {$this start})
         (help
            "Start the ending bonus."))
      (reset
         script
         (script
            {$this reset})
         (help
            "Reset the ending bonus."))
      (success
         script
         (script
            {$this success})
         (help
            "Plays success.trig at the end of the bonus."))
      (failure
         script
         (script
            {$this coda_end})
         (help
            "Plays failure.trig at the end of the bonus."))
      (score
         int
         (post_sync
            {$this
               set_score
               [score]})
         (help
            "Ending bonus score.")
         (no_test))
      (unison_start
         script
         (script
            {$this unison_start}))
      (unison_end
         script
         (script
            {$this unison_end}))
      (unison_succeed
         script
         (script
            {$this unison_succeed})))
   (types))
(PitchArrowDir
   (description
      "singer's vocal HUD pitch guide arrow")
   (superclasses RndDir)
   (editor
      (reset
         script
         (script
            {$this reset})
         (help
            "reset to the current param values"))
      (toggle_pitched
         script
         (script
            {$this toggle_pitched})
         (refresh pitched))
      (pitched
         bool
         (read_only TRUE))
      (toggle_spotlight
         script
         (script
            {$this toggle_spotlight})
         (refresh spotlight))
      (spotlight
         bool
         (read_only TRUE))
      (toggle_deploying
         script
         (script
            {$this toggle_deploying})
         (refresh deploying))
      (deploying
         bool
         (read_only TRUE))
      (volume
         float
         (range 0 1)
         (help
            "arrow alpha driven by the mic volume in the current frame, normalized between 0 and 1")
         (post_sync
            {$this sync_volume}))
      (tilt
         float
         (range -90 90)
         (post_sync
            {$this sync_tilt})
         (help
            "the tilt of the arrow direction in degrees"))
      (score
         float
         (range 0 1)
         (help
            "the score for the current frame, normalized between 0 and 1")
         (post_sync
            {$this sync_score}))
      (harmony_fx
         float
         (range 0 2)
         (help
            "extra bonus fx that play when nailing harmony with another part")
         (post_sync
            {$this sync_harm_score}))
      (test_color
         symbol
         (list
            (green yellow orange brown purple blue white))
         (post_sync
            {$this sync_color}))
      (color_fade
         float
         (range 0 1)
         (help
            "controls the saturation of the arrow color: 0 = max saturation, 1 = no saturation")
         (post_sync
            {$this sync_color_fade}))
      (helix_fx_spin_control
         (indent
            (spin_speed
               float
               (help
                  "controls the spin speed for helix particle effects.  Can be animated"))
            (spin_anim
               object
               (class Anim)
               (help
                  "this anim will loop its loop range according to the value of spin_speed"))
            (spin_begin_frame
               float
               (help
                  "loop start frame for spin_anim"))
            (spin_end_frame
               float
               (help
                  "loop end frame for spin_anim"))
            (spin_rest_frame
               float
               (help
                  "frame where spin_anim should be when spin_speed is zero")))))
   (types))
(LoadingPanelDir
   (description
      "Panel for loading screens w/characters")
   (superclasses WorldDir)
   (editor
      (clip_file_path
         file
         (help
            "Milo CharClipSet from which to set poses"))
      (import
         script
         (script
            {do
               {$this import_clip}
               {if
                  {$this exists bass}
                  {set
                     [edit_char]
                     {$this find bass}}
                  {$this save_pose}}
               {if
                  {$this exists drum}
                  {set
                     [edit_char]
                     {$this find drum}}
                  {$this save_pose}}
               {if
                  {$this exists guitar}
                  {set
                     [edit_char]
                     {$this find guitar}}
                  {$this save_pose}}
               {if
                  {$this exists vocals}
                  {set
                     [edit_char]
                     {$this find vocals}}
                  {$this save_pose}}})
         (help
            "Reset char poses from CharClipSet"))
      (edit_char
         object
         (class CompositeCharacter)
         (help
            "Pick a character to edit"))
      (h2h_char_type
         symbol
         (list
            (guitar bass drum vocals))
         (help
            "Type for H2H character, use whichever for non-H2H screens"))
      (finalize_pose
         script
         (script
            {$this save_pose})
         (help
            "Pose character from skeleton")))
   (types))
#define kMomentNone
(0)
#define kMomentSuccess
(1)
#define kMomentFail
(2)
(EventCompleteDir
   (description
      "PanelDir for tour event complete screens")
   (superclasses PanelDir)
   (editor
      (enabled
         bool
         (no_test))
      (play
         script
         (script
            {$this play})
         (help
            "Play animations"))
      (skip
         script
         (script
            {$this skip})
         (help
            "Skip to end of animations"))
      (items
         (array
            (struct
               (anim
                  object
                  (class Anim))
               (icon_label
                  object
                  (class BandLabel))
               (icon_label_str string)
               (text_label
                  object
                  (class BandLabel))
               (text_label_str string)
               (text_label_start int)
               (text_label_end int)
               (sfx
                  object
                  (class Sequence))
               (active bool)
               (moment_success_group
                  object
                  (class Group))
               (moment_fail_group
                  object
                  (class Group))
               (moment_name symbol)
               (moment_success_label
                  object
                  (class BandLabel))
               (moment_fail_label
                  object
                  (class BandLabel))
               (moment_str string)
               (moment_end int)
               (moment_sfx
                  object
                  (class Sequence))
               (moment_state
                  int
                  (list
                     ("kMomentNone"
                        "kMomentSuccess"
                        "kMomentFail"))))))
      (initial_delay
         float
         range
         (0 5.0))
      (anim_time
         float
         range
         (0 5.0))
      (count_time
         float
         range
         (0 5.0))
      (moment_time
         float
         range
         (0 5.0))
      (challenge_list
         object
         (class BandList)))
   (types))
(P9Character
   (description
      "Character with animation group and song tempo support ")
   (superclasses Character)
   (editor
      (tempo
         symbol
         (help
            "song tempo")
         (list
            (slow medium fast)))
      (era
         symbol
         (help
            "era of animation")
         (list
            (early dream)))
      (song
         symbol
         (help
            "song for sync moves")
         (list P9_SONG_CLIPS))
      (venue
         symbol
         (help
            "venue for directed cuts")
         (list
            (none budokan cavern dreamscape rooftop shea sullivan)))
      (load_clips
         script
         (help
            "loads clips according to clips_mode, era, and tempo")
         (script
            {do
               {$this start_load FALSE}
               {$this enter}}))
      (hide_instrument
         bool
         (help
            "hide the instrument or not")
         (no_test))
      (instrument_index
         int
         (help
            "which instrument is shown")
         (no_test))
      (head_lookat_weight
         float
         (help
            "What fraction to drive the head lookat")
         (no_test))
      (waypoint
         object
         (class Waypoint)
         (help
            "waypoint for the head to use"))
      (mic_ik
         object
         (class CharIKHead)
         (help
            " the mic ik "))
      (group_name
         string
         (list
            {object_list
               {if_else
                  [driver]
                  {[driver]
                     get
                     clips_ptr}
                  {object ''}}
               CharClipGroup
               TRUE})
         (help
            "the group name to use for animating")
         (no_test))
      (show_dreamscape_outfit
         script
         (script
            {$this set_dreamscape_outfit TRUE}))
      (show_historical_outfit
         script
         (script
            {$this set_dreamscape_outfit FALSE}))
      (idle_realtime
         script
         (script
            {$this idle_realtime}))
      (idle
         script
         (script
            {$this idle}))
      (idle_mellow
         script
         (script
            {$this idle_mellow}))
      (play_mellow
         script
         (script
            {$this play_mellow}))
      (play
         script
         (script
            {$this play}))
      (play_energetic
         script
         (script
            {$this play_energetic}))
      (hold
         script
         (script
            {$this hold}))
      (lean_in
         script
         (script
            {$this lean_in}))
      (lean_out
         script
         (script
            {$this lean_out}))
      (step_in
         script
         (script
            {$this step_in}))
      (step_out
         script
         (script
            {$this step_out}))
      (sing_on
         script
         (script
            {$this set_singing 1})
         (help
            "IK into the mic, as though singing"))
      (sing_off
         script
         (script
            {$this set_singing 0})
         (help
            "Don't IK into the mic, as though not singing"))
      (toggle_interests_overlay
         script
         (script
            {$this toggle_interests_overlay})
         (help
            "Toggles display of debug overlay for interest objects"))))
(P9CrowdAudio
   (description
      "P9 Crowd Audio, makes the crowd cheer and such")
   (superclasses Poll)
   (editor)
   (types))
(P9Director
   (description
      "P9 Director, sits in each song file and manages camera + scene changes")
   (superclasses Poll)
   (init
      {set
         [scenetrigger]
         ''}
      {set
         [no_cut]
         FALSE})
   (editor
      (venue
         symbol
         (help
            "The currently loaded venue")
         (read_only TRUE))
      (load_song
         script
         (script
            {$this load_song})
         (help
            "Load up the the venue(s)+scene(s)+song authoring as dictated by the currently selected milo song"))
      (save_song
         script
         (script
            {$this save_song})
         (help
            "Save the song authoring back into its song file!"))
      (record_lyric_config
         script
         (script
            {$this record_lyric_config})
         (help
            "Records the lyric configuration for the current scenetrigger.")
         (hide
            {!
               {$this is_dreamscape}}))
      (debug_char_interests
         script
         (script
            {$this debug_char_interests})
         (help
            "Cycles through each character, enabling debug rendering of its interest objects"))
      (toggle_interests_overlay
         script
         (script
            {$this toggle_interests_overlay})
         (help
            "Toggles display of debug overlay for interest objects"))
      (set_sing_george
         script
         (script
            {$this detect_singing 0})
         (help
            "Auto-detects and sets the sing_george property, still needs hand editing afterwards"))
      (set_sing_john
         script
         (script
            {$this detect_singing 1})
         (help
            "Auto-detects and sets the sing_john property, still needs hand editing afterwards"))
      (set_sing_paul
         script
         (script
            {$this detect_singing 2})
         (help
            "Auto-detects and sets the sing_paul property, still needs hand editing afterwards"))
      (set_sing_ringo
         script
         (script
            {$this detect_singing 3})
         (help
            "Auto-detects and sets the sing_ringo property, still needs hand editing afterwards"))
      (song_properties
         (indent
            (shot
               symbol
               (list
                  (AUTHORED_CAM_CATS))
               (help
                  "BandCamShot category")
               (no_test))
            (postproc
               object
               (class PostProc)
               (interp_handlers postproc_interp)
               (dir
                  {milo cur_dir})
               (help
                  "the current dreamscape venue postproc.")
               (no_test))
            (configuration
               int
               (list WAYPOINT_CONFIGURATIONS)
               (help
                  "Current Band Configuration")
               (no_test))
            (scenetrigger
               symbol
               (list
                  {$this get_scene_triggers})
               (help
                  "What scene to show and trigger to deploy, ignored in historical venues.")
               (read_only
                  {!
                     {$this is_dreamscape}})
               (no_test))
            (dream_outfit
               symbol
               (help
                  "override for dreamscape outfit picking")
               (list
                  ('' dream hist))
               (read_only
                  {!
                     {$this is_dreamscape}})
               (no_test))
            (lyric_transition
               symbol
               (list
                  {$this list_lyric_transitions})
               (help
                  "Current lyric transition animation for lyrics in venue.")
               (read_only
                  {!
                     {$this is_dreamscape}})
               (no_test))
            (hist_lightpreset
               symbol
               (list LIGHTING_CATEGORIES)
               (interp_handlers hist_lightpreset_interp)
               (help
                  "the current historical venue light preset")
               (read_only
                  {!
                     {$this is_historical}})
               (no_test))
            (hist_spotpaul
               bool
               (help
                  "spot toggle for Paul")
               (read_only
                  {!
                     {$this is_historical}})
               (no_test))
            (hist_spotjohn
               bool
               (help
                  "spot toggle for John")
               (read_only
                  {!
                     {$this is_historical}})
               (no_test))
            (hist_spotgeorge
               bool
               (help
                  "spot toggle for George")
               (read_only
                  {!
                     {$this is_historical}})
               (no_test))
            (hist_spotringo
               bool
               (help
                  "spot toggle for Ringo")
               (read_only
                  {!
                     {$this is_historical}})
               (no_test))
            (hist_clip_george
               symbol
               (help
                  "Song specific directed cut group for george to play")
               (list
                  {$this get_song_clips 0})
               (no_test))
            (hist_clip_john
               symbol
               (help
                  "Song specific directed cut group for john to play")
               (list
                  {$this get_song_clips 1})
               (no_test))
            (hist_clip_paul
               symbol
               (help
                  "Song specific directed cut group for paul to play")
               (list
                  {$this get_song_clips 2})
               (no_test))
            (hist_clip_ringo
               symbol
               (help
                  "Song specific directed cut group for ringo to play")
               (list
                  {$this get_song_clips 3})
               (no_test))
            (body_george
               symbol
               (help
                  "Excitement level, step_in/out, lean_in/out, instrument, and hide/show")
               (list P9_CHARACTER_COMMANDS)
               (no_test))
            (body_john
               symbol
               (help
                  "Excitement level, step_in/out, lean_in/out, instrument, and hide/show")
               (list P9_CHARACTER_COMMANDS)
               (no_test))
            (body_paul
               symbol
               (help
                  "Excitement level, step_in/out, lean_in/out, instrument, and hide/show")
               (list P9_CHARACTER_COMMANDS)
               (no_test))
            (body_ringo
               symbol
               (help
                  "Excitement level, step_in/out, lean_in/out, instrument, and hide/show")
               (list P9_CHARACTER_COMMANDS)
               (no_test))
            (sing_george
               float
               (help
                  "Force george to sing into the mic,1 = full into the mic, 0 = not at all")
               (range 0 1)
               (no_test))
            (sing_john
               float
               (help
                  "Force john to sing into the mic,1 = full into the mic, 0 = not at all")
               (range 0 1)
               (no_test))
            (sing_paul
               float
               (help
                  "Force paul to sing into the mic,1 = full into the mic, 0 = not at all")
               (range 0 1)
               (no_test))
            (sing_ringo
               float
               (help
                  "Force ringo to sing into the mic, 1 = full into the mic, 0 = not at all")
               (range 0 1)
               (no_test))
            (attention_george
               symbol
               (help
                  "Force George's eyes onto a point of interest")
               (list
                  {$this get_interest_targets 0})
               (no_test))
            (attention_john
               symbol
               (help
                  "Force John's eyes onto a point of interest")
               (list
                  {$this get_interest_targets 1})
               (no_test))
            (attention_paul
               symbol
               (help
                  "Force Paul's eyes onto a point of interest")
               (list
                  {$this get_interest_targets 2})
               (no_test))
            (attention_ringo
               symbol
               (help
                  "Force Ringo's eyes onto a point of interest")
               (list
                  {$this get_interest_targets 3})
               (no_test))
            (lookat_george
               float
               (help
                  "Force george to move his head to look at his interest, 1 = full at it, 0 = not at all")
               (range 0 1)
               (no_test))
            (lookat_john
               float
               (help
                  "Force john to move his head to look at his interest, 1 = full at it, 0 = not at all")
               (range 0 1)
               (no_test))
            (lookat_paul
               float
               (help
                  "Force paul to move his head to look at his interest, 1 = full at it, 0 = not at all")
               (range 0 1)
               (no_test))
            (lookat_ringo
               float
               (help
                  "Force ringo to move his head to look at his interest, 1 = full at it, 0 = not at all")
               (range 0 1)
               (no_test))
            (face_clip_george
               symbol
               (help
                  "Define the facial clip to override george's face.")
               (list
                  {$this get_face_overrides 0})
               (no_test))
            (face_weight_george
               float
               (help
                  "Set the blend weight of the override facial clip for george. 1 = fully overriden, 0 = not at all")
               (range 0 1)
               (no_test))
            (face_clip_john
               symbol
               (help
                  "Define the facial clip to override john's face.")
               (list
                  {$this get_face_overrides 1})
               (no_test))
            (face_weight_john
               float
               (help
                  "Set the blend weight of the override facial clip for john. 1 = fully overriden, 0 = not at all")
               (range 0 1)
               (no_test))
            (face_clip_paul
               symbol
               (help
                  "Define the facial clip to override paul's face.")
               (list
                  {$this get_face_overrides 2})
               (no_test))
            (face_weight_paul
               float
               (help
                  "Set the blend weight of the override facial clip for paul. 1 = fully overriden, 0 = not at all")
               (range 0 1)
               (no_test))
            (face_clip_ringo
               symbol
               (help
                  "Define the facial clip to override ringo's face.")
               (list
                  {$this get_face_overrides 3})
               (no_test))
            (face_weight_ringo
               float
               (help Set the blend weight of the override facial clip for ringo. 1 = fully 'overriden,' 0 = not at all)
               (range 0 1)
               (no_test))
            (cam_postproc
               object
               (class PostProc)
               (help
                  "camera postproc override.  If set, does no postproc blends")
               (read_only TRUE)
               (no_test))
            (cur_shot
               object
               (class CamShot)
               (help
                  "currently shown camshot, nice for debugging.")
               (read_only TRUE)
               (no_test)))
         (help
            "These are the properties animated by the song, displayed here for debugging")))
   (types))
(P9SongPref
   (description
      "P9 Song Specific dreamscape and venue preferences")
   (editor
      (venue
         symbol
         (list
            (budokan cavern dreamscape rooftop shea sullivan))
         (help
            "Venue is played in")
         (refresh))
      (minivenues
         (array symbol)
         (help
            "list of minivenues to load")
         P9_HIDE_DREAM)
      (scenes
         (array symbol)
         (help
            "list of scenes to load")
         P9_HIDE_DREAM)
      (scene_groups
         (array
            (struct
               (name
                  symbol
                  (help
                     "name of the scene group"))
               (scenetriggers
                  (array symbol)
                  (help
                     "array of random scene triggers to choose from"))))
         (help
            "array of scene groups, you can use them during authoring and it picks a random scene trigger from inside it")
         P9_HIDE_DREAM)
      (studio_outfit
         symbol
         (list
            (P9_OUTFITS))
         (help
            "dreamscape outfit in abby road studios")
         P9_HIDE_DREAM)
      (dreamscape_outfit
         symbol
         (list
            (P9_OUTFITS))
         (help
            "dreamscape outfit in the dreamscape mini venues")
         P9_HIDE_DREAM)
      (tempo
         symbol
         (list
            (slow medium fast))
         (help
            "Animation tempo for characters and crowd. Bpms: under 94=slow, 94-135=medium, above 135=fast"))
      (song_clips
         symbol
         (list P9_SONG_CLIPS)
         (help
            "name of song clips to load, usually just same name as song."))
      (dreamscape_font
         symbol
         (list P9_VENUE_FONTS)
         (help
            "Font used to display lyrics in the dreamscape venue")
         P9_HIDE_DREAM)
      (lyric_part
         symbol
         (list P9_LYRIC_HARMONY_PARTS)
         (help
            "Harmony part to use for the venue lyrics.")
         P9_HIDE_DREAM)
      (dreamscape_camera
         int
         (list P9_DREAM_CONFIGS)
         (help
            "What kind of camera shots to use in dreamscapes")
         P9_HIDE_DREAM)
      (george_amp
         symbol
         (list
            (P9_GEORGE_AMPS))
         (help
            "Amp that george uses for this song in Abbey Road Studios")
         P9_HIDE_DREAM)
      (john_amp
         symbol
         (list
            (P9_JOHN_AMPS))
         (help
            "Amp that john uses for this song in Abbey Road Studios")
         P9_HIDE_DREAM)
      (paul_amp
         symbol
         (list
            (P9_PAUL_AMPS))
         (help
            "Amp that paul uses for this song in Abbey Road Studios")
         P9_HIDE_DREAM)
      (mixer
         symbol
         (list
            (P9_MIXERS))
         (help
            "Mixer used for this song in Abbey Road Studios")
         P9_HIDE_DREAM))
   (types))
(P9TransDraw
   (description
      "Defers drawing translucent parts of characters until this object is drawn")
   (superclasses Draw)
   (ext td)
   (editor
      (chars
         (array
            object
            (class Character)
            (obj_flags no_null))
         (help
            "The Characters whose translucent bits we will draw")))
   (types))
(P9WaypointConfiguration
   (description
      "P9 Waypoint Configuration, sits in each venue and points out appropriate waypoints for each band configuration")
   (init
      {$this set_type proj9})
   (editor
      (configuration
         int
         (list WAYPOINT_CONFIGURATIONS)
         (help
            "Current Band Configuration.  Click view or store to er, view or store"))
      (objects
         (array
            (struct
               (trans
                  object
                  (class Trans)
                  (help
                     "object to teleport around, don't mess with the top four.")))
            (read_only
               {<
                  {elem $milo_prop_path 1}
                  4})))
      (george_stand
         bool
         (help
            "does george stand or sit for this cfg, set and then hit store_configuration button to store")
         (no_test)
         (no_cdb))
      (john_stand
         bool
         (help
            "does john stand or sit for this cfg, set and then hit store_configuration button to store")
         (no_test)
         (no_cdb))
      (paul_stand
         bool
         (help
            "does paul stand or sit for this cfg, set and then hit store_configuration button to store")
         (no_test)
         (no_cdb))
      (ringo_stand
         bool
         (help
            "does ringo stand or sit for this cfg, set and then hit store_configuration button to store")
         (no_test)
         (no_cdb))
      (trigger
         object
         (class EventTrigger)
         (help
            "if set, the trigger to fire for this cfg.  set the hit store_configuration button to set.")
         (no_test))
      (view
         script
         (script
            {$this view_configuration})
         (help
            "teleports the characters into this configuration")
         (refresh george_stand john_stand paul_stand ringo_stand))
      (store
         script
         (script
            {$this store_configuration})
         (help
            "store the character locations into this configuration"))
      (release
         script
         (script
            {$this release_configuration})
         (help
            "releasese the characters from their waypoints, so they can be moved around")))
   (types))