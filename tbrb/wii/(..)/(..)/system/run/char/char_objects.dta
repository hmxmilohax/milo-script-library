(Character
   (description
      "Base class for Character objects. Contains Geometry,\n        Outfit Loaders, and LOD + Sphere concepts.")
   (allowed_dirs ObjectDir)
   (superclasses RndDir)
   (types)
   (editor
      (lods
         (array
            (struct
               (screen_size
                  float
                  (help
                     "when the unit sphere centered on the bounding sphere is smaller than this screen height fraction, it will draw the next lod")
                  (hide
                     {==
                        {elem $milo_prop_path 1}
                        {-
                           {$this
                              size
                              (lods)}
                           1}})
                  (range 0 10000))
               (group
                  object
                  (class Group)
                  (help
                     "group to show at this LOD.  Drawables not in any lod group will be drawn at every LOD"))
               (trans_group
                  object
                  (class Group)
                  (help
                     "translucency group to show at this LOD.  Drawables in it are guaranteed to be drawn last.")))
            (alias
               "lod")))
      (force_lod
         int
         (help
            "Forces the lod if greater or equal to zero"))
      (shadow
         object
         (class Group)
         (obj_flags allow_null)
         (help
            "Group containing shadow geometry"))
      (self_shadow
         bool
         (help
            "Whether this character should be self-shadowed."))
      (sphere_base
         object
         (class Trans)
         (obj_flags no_null)
         (help
            "Base for bounding sphere, such as bone_pelvis.mesh"))
      (bounding
         SPHERE
         (help
            "bounding sphere for the character, fixed"))
      (calc_bounding_sphere
         script
         (script
            {$this calc_bounding_sphere})
         (help
            "Calculates a new bounding sphere")
         (refresh bounding))
      (frozen
         bool
         (help
            "if true, is frozen in place, no polling happens"))
      (CharacterTesting
         (struct
            (driver
               object
               (class CharDriver)
               (dir $this)
               (refresh CharacterTesting)
               (help
                  "The driver to animate"))
            (clip1
               object
               (class CharClip)
               (dir_prop clips)
               (list
                  {$this get_filtered_clips})
               (refresh CharacterTesting)
               (help
                  "Clip to play"))
            (clip2
               object
               (class CharClip)
               (dir_prop clips)
               (list
                  {$this get_filtered_clips})
               (refresh CharacterTesting)
               (help
                  "Clip to transition to, if any"))
            (filter_group
               object
               (class CharClipGroup)
               (dir_prop clips)
               (refresh CharacterTesting)
               (help
                  "If set, group to use as filter for clips"))
            (clip2_realtime
               bool
               (help
                  "Force clip2 to be played in real time"))
            (bpm
               int
               (help
                  "bpm to play clips at"))
            (transition
               int
               (help
                  "Which transition to use between clip1 and clip2"))
            (cycle_transition
               bool
               (help
                  "Cycle through all the transitions"))
            (move_self
               bool
               (help
                  "Move ourselves around when playing animations, if true, the anim bar won't work backwards")
               (no_test))
            (teleport_to
               object
               (class Waypoint)
               (dir
                  {$this dir})
               (help
                  "Teleport to this Waypoint"))
            (dist_map
               symbol
               (list
                  (none nodes raw))
               (help
                  "Displays the transition distance map between clip1 and clip2, raw means the raw graph, no nodes"))
            (zero_travel
               bool
               (help
                  "Character does not travel, constantly zeros out position and facing"))
            (recenter
               script
               (script
                  {$this recenter})
               (help
                  "Recenters character at his last set waypoint"))
            (zero
               script
               (script
                  {$this set_local_pos 0 0 0})
               (help
                  "Teleports character to the origin"))
            (metronome
               bool
               (help
                  "Click on every beat transition"))
            (show_screen_size
               bool
               (help
                  "graphically displays the screensize and lod next to the character"))
            ('add default rigging'
               script
               (script
                  {$this add_defaults}
                  {milo update_objects})
               (help
                  "Adds default objects like main drivers and twist servos"))
            (change_load_pose_obj
               object
               (class Trans)
               (help
                  "Trans to change load pose of"))
            (change_load_pose
               script
               (script
                  {$this
                     change_load_pose
                     [CharacterTesting change_load_pose_obj]})
               (help
                  "click to change the load pose of the above object to its current value"))
            (apply_load_pose
               script
               (script
                  {$this set_load_pose})
               (help
                  "applies the load pose right now"))
            ('Outfit Cycling'
               (indent
                  (cycle_category
                     symbol
                     (list
                        {do
                           ($loader
                              "")
                           {$this
                              iterate
                              OutfitLoader
                              $l
                              {set $loader $l}}
                           {if_else
                              $loader
                              {$loader list_categories}
                              ("")}})
                     (help
                        "Which category to cycle through"))
                  (cycle_wait
                     float
                     (help
                        "Seconds to show each outfit item"))
                  (start_cycle
                     script
                     (script
                        {$this start_cycle FALSE})
                     (help
                        "start cycling from where it is"))
                  (reset_cycle
                     script
                     (script
                        {$this start_cycle TRUE})
                     (help
                        "start cycling, resets from start"))
                  (stop_cycle
                     script
                     (script
                        {$this stop_cycle})
                     (help
                        "stop cycling")))
               (hide
                  {do
                     ($loader
                        "")
                     {$this
                        iterate
                        OutfitLoader
                        $l
                        {set $loader $l}}
                     {! $loader}})))
         (help
            "Test Character by animating it"))
      (toggle_draw_interest_objects
         script
         (script
            {$this
               set
               debug_draw_interest_objects
               {!
                  {$this get debug_draw_interest_objects}}})
         (help
            "toggle on/off the drawing of debug info for interest objects"))))
(CharGuitarString
   (description
      "moves a bone based on the position of the hand, nut, and bridge")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext string)
   (types)
   (editor
      (nut
         object
         (class Trans)
         (help
            "nut object"))
      (bridge
         object
         (class Trans)
         (help
            "bridge object"))
      (bend
         object
         (class Trans)
         (help
            "object to move between nut and bridge"))
      (target
         object
         (class Trans)
         (help
            "object to follow"))))
(CharBlendBone
   (description
      "Sets a dest bone by a weighted average of a bunch of bones.\n        Ideally this would be created from within Max at Export time and\n        automatically exported, since changing the geometry will wreck this.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext blendbone)
   (editor
      (dest
         object
         (class Trans)
         (help
            "The bone to set"))
      (bones
         (array
            (struct
               (bone
                  object
                  (class Trans)
                  (help
                     "Bone to blend from")
                  (no_null))
               (weight
                  float
                  (help
                     "Weight to blend with")))))
      (pos
         bool
         (help
            "Blend position as well as orientation")))
   (types))
(CharBoneOffset
   (description
      "Offsets a dest bone.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext offset)
   (editor
      (dest
         object
         (class Trans)
         (help
            "The bone to offset"))
      (offset
         VECTOR3
         (help
            "the offset")))
   (types))
(CharClip
   (description
      "A clip of animation that you can play. We expect subclasses\n        for stuff like compression.")
   (allowed_dirs)
   (editor
      (start_beat
         float
         (help
            "Start beat, beat this clip starts at")
         (read_only TRUE)
         (refresh dirty))
      (end_beat
         float
         (help
            "End beat, beat this clip ends at")
         (read_only TRUE)
         (refresh dirty))
      (length
         float
         (help
            "Length in frames")
         (read_only TRUE))
      (beats_per_sec
         float
         (help
            "Frames per second")
         (read_only TRUE)
         (refresh dirty))
      (samples_per_beat
         float
         (help
            "Samples per beat")
         (read_only TRUE))
      (length_seconds
         float
         (help
            "Length in seconds")
         (read_only TRUE))
      (blend_width
         float
         (help
            "Blend-in time in beats")
         (refresh dirty))
      (flags
         bitfield
         (list
            {if_else
               {$this
                  has
                  (clip_flags)}
               {$this clip_flags}
               ()})
         (help
            "Search flags, app specific")
         (refresh dirty))
      (default_blend
         int
         (list PLAY_BLEND_FLAGS)
         (help
            "Blend mode, if any, to use by default for this clip"))
      (default_loop
         int
         (list PLAY_LOOP_FLAGS)
         (help
            "Looping mode, if any, to use by default for this clip"))
      (beat_align
         int
         (list PLAY_TIME_FLAGS)
         (help
            "Time units/alignment, if any, for this clip"))
      (range
         float
         (help
            "Range in frames to randomly offset by when playing"))
      (relative
         object
         (class CharClip)
         (help
            "Make the clip all relative to this other clip's first frame"))
      (size
         int
         (read_only TRUE)
         (help
            "Size of the clip in bytes"))
      (do_not_compress
         bool
         (help
            "Check this to prevent any compression from happening on this clip"))
      (events
         (array
            (struct
               (frame
                  float
                  (help
                     "Frame the event should trigger")
                  (refresh events))
               (event
                  symbol
                  (help
                     "The handler to call on the CharClip")
                  (list
                     {if_else
                        {==
                           {$this get_type}
                           ''}
                        ()
                        [event_handlers]})))
            (header
               {sprint
                  [events
                     {elem $milo_prop_path 1}
                     frame]
                  ": "
                  [events
                     {elem $milo_prop_path 1}
                     event]}))
         (help
            "Events that get triggered during play"))
      (dirty
         bool
         (read_only TRUE)
         (help
            "Indicates transition graph needs updating")))
   (views
      (Stats
         (blend_width
            [blend_width])
         (flags
            [flags])
         (default_blend
            [default_blend])
         (default_loop
            [default_loop])
         (length_seconds
            [length_seconds])
         (beat_align
            [beat_align])
         (range
            [range])
         (relative
            [relative])
         (size
            [size])))
   (types)
   (superclasses))
(CharClipGroup
   (description
      "A related group of animations.  Gives you the lru one.  Usually no extension.")
   (allowed_dirs CharClipSet)
   (editor
      (clips
         (array
            object
            (class CharClip)
            (obj_flags no_null)
            (help
               "LRU list of clips belonging to this group"))))
   (types))
#define CHARBONES
((array
      (struct
         (name
            symbol
            (help
               "Bone to blend into")
            (read_only TRUE))
         (weight
            float
            (help
               "Weight to blend with"))
         (preview_val
            string
            (help
               "Preview Value")
            (read_only TRUE)))))
#define SAMPLESET
((struct
      (bones
         CHARBONES
         (help
            "Bones that are animated"))
      (num_samples
         int
         (help
            "how many keyframes")
         (read_only TRUE))
      (preview_sample
         int
         (help
            "which sample to preview")
         (refresh))
      (frames
         (array float)
         (help
            "which sample to play")
         (read_only TRUE))))
(CharClipSamples
   (description
      "This is the simple but inefficient format that just stores\n        samples and interpolates. Data is grouped by time, not channel, for\n        better storage, interpolation, etc.")
   (allowed_dirs CharClipSet)
   (superclasses CharClip)
   (editor
      (full SAMPLESET)
      (one SAMPLESET)
      (num_frames
         int
         (help
            "Number of original samples taken, pre-keyframe compression")
         (no_test)))
   (views
      (Bones
         (size
            [size]
            (read_only TRUE))
         (full_samples
            [full num_samples]
            (read_only TRUE))
         (full_num_bones
            {$this
               size
               (full bones)}
            (read_only TRUE))
         (one_num_bones
            {$this
               size
               (one bones)}
            (read_only TRUE)))
      (Notes
         (Notes
            {$this note})))
   (types))
(CharBone
   (description
      "A Character system bone, conveys degrees of freedom to animate in a CharClip, lives in CharBoneDir")
   (allowed_dirs CharBoneDir)
   (superclasses Trans)
   (editor
      (position_context
         bitfield
         (list
            {$this get_context_flags})
         (help
            "when to animate position"))
      (rotation
         int
         (list
            ("kRotNone"
               "kRotFull"
               "kRotX"
               "kRotY"
               "kRotZ"))
         (help
            "what axis or axes to animate"))
      (rotation_context
         bitfield
         (list
            {$this get_context_flags})
         (help
            "when to use this rotation context"))
      (scale_context
         bitfield
         (list
            {$this get_context_flags})
         (help
            "when to animate scale"))
      (target
         object
         (class CharBone)
         (help
            "If set will exactly track this target during keyframe acquisition, used for IK bones"))
      (weights
         (array
            (struct
               (context
                  bitfield
                  (list
                     {$this get_context_flags})
                  (help
                     "context for this bone weight"))
               (weight
                  float
                  (help
                     "bone weight for this context"))))
         (help
            "array of contexts and corresponding bone weights")))
   (views
      ('Degrees of Freedom'
         (position
            [position_context])
         (rotation
            [rotation])
         (rotation_context
            [rotation_context])
         (scale
            [scale_context])))
   (types))
(CharBoneDir
   (description
      "A CharBone container, acts as a resource file, storing skeleton and DOF for particular contexts")
   (allowed_dirs ObjectDir)
   (superclasses ObjectDir)
   (editor
      (move_context
         bitfield
         (list
            {$this get_context_flags})
         (help
            "context in which character should move itself around via bone_facing.pos and bone_facing.rotz bones"))
      (recenter
         (struct
            (targets
               (array
                  object
                  (class CharBone)
                  (obj_flags no_null))
               (help
                  "bones to recenter, ie, bone_pelvis"))
            (average
               (array
                  object
                  (class CharBone)
                  (obj_flags no_null))
               (help
                  "bones to average to find the new center"))
            (slide
               bool
               (help
                  "Slide the character over the course of the clip")))
         (help
            "Recenter target bones on the character by averaging other bones"))
      (merge_character
         file
         (help
            "Merge in bones from a character")
         (refresh recenter)
         (post_sync
            {milo update_objects}))
      (filter_context
         bitfield
         (list
            {$this get_context_flags})
         (help
            "Context to use for listing filter_bones")
         (refresh filter_bones filter_names)
         (no_test))
      (filter_bones
         (array
            object
            (class CharBone)
            (read_only TRUE))
         (help
            "bones with context specified in filter_context")
         (no_test))
      (filter_names
         (array
            string
            (read_only TRUE))
         (help
            "name of bone with context specified in filter_context")
         (no_test))
      (prune_bones
         script
         (script
            {$this prune_bones})
         (post_sync
            {milo update_objects})
         (help
            "eliminates bones with no DOF")))
   (types))
(CharBonesObject
   (description
      "Holds state for a set of bones")
   (editor
      (bones
         CHARBONES
         (help
            "Bones that are animated")))
   (types))
(CharBonesAlloc
   (description
      "Holds state for a set of bones, and allocates own space")
   (superclasses CharBonesObject)
   (types))
(CharBonesBlender
   (description
      "Blends itself into another CharBones, clearing self each frame")
   (superclasses CharPollable CharBonesAlloc)
   (allowed_dirs Character)
   (ext blender)
   (editor
      (dest
         object
         (class CharBonesObject)
         (help
            "CharBones to blend into")))
   (types))
(CharBonesMeshes
   (description
      "Holds state for a set of bones, allocates own space, and sets meshes accordingly")
   (superclasses CharBonesAlloc)
   (editor
      (meshes
         (array
            object
            (class Trans))
         (help
            "Transes we will change")
         (read_only TRUE)))
   (types))
(CharClipSet
   (description
      "A <a href='#CharClip'>CharClip</a> container.")
   (allowed_dirs Character)
   (superclasses ObjectDir)
   (editor
      ('regenerate transitions'
         script
         (script
            {$this regenerate_transitions TRUE})
         (help
            "Regenerates the clip to clip transition graph.  This may take several minutes."))
      (alphabetical_sort
         script
         (script
            {$this sort_groups}
            {if
               {exists milo}
               {milo update_objects}})
         (help
            "Alphabetically sorts all the clips in all the groups"))
      (char_file_path
         file
         (help
            "Preview base character to use- for example, char/male/male_guitar.milo for male guitarist"))
      (load_preview_character
         script
         (script
            {$this load_character})
         (help
            "Load up character from char_file_path"))
      (preview_clip
         object
         (class CharClip)
         (list
            {$this list_clips})
         (help
            "Pick a clip to play")
         (no_test))
      (filter_flags
         bitfield
         (list
            {do
               ($clip
                  {object
                     ""})
               {$this
                  iterate
                  CharClip
                  $c
                  {set $clip $c}}
               {if_else
                  {&&
                     $clip
                     {$clip
                        has
                        (clip_flags)}}
                  {$clip clip_flags}
                  ()}})
         (help
            "Flags for filtering preview clip"))
      (still_clip
         object
         (class CharClip)
         (list
            {$this list_clips})
         (help
            "Set this to view drummer play anims")
         (no_test))
      (bpm
         int
         (help
            "bpm for clip playing"))
      (preview_walk
         bool
         (help
            "Allow preview character to move around and walk?")))
   (types))
(CharCollide
   (description
      "Feeds the bones when executed.")
   (allowed_dirs ObjectDir)
   (superclasses Trans)
   (ext coll)
   (editor
      (shape
         int
         (list
            ("kCollidePlane"
               "kCollideSphere"
               "kCollideInsideSphere"
               "kCollideCigar"
               "kCollideInsideCigar"))
         (help
            "Type of collision"))
      (radius
         float
         (help
            "Radius of the source"))
      (min_length
         float
         (help
            "negative length of cigar, if cigar"))
      (max_length
         float
         (help
            "positive length of cigar, if cigar")))
   (types))
(CharMeshHide
   (description
      "Hides meshes based on flags in other CharMeshHide.")
   (allowed_dirs Character)
   (ext hide)
   (types))
(CharCuff
   (description
      "A cuff used to constrain colliding outfits against each other.\n      for example boots against pants.  The widest cuff wins")
   (allowed_dirs Character)
   (superclasses Trans)
   (ext cuff)
   (editor
      (offset0
         float
         (help
            "Inner offset, usually negative, the inside of the cuff"))
      (radius0
         float
         (help
            "Inner radius, usually the smallest, the inside of the cuff"))
      (offset1
         float
         (help
            "middle offset, usually zero, the center of the cuff"))
      (radius1
         float
         (help
            "middle radius for the center of the cuff, should be at the cuff line"))
      (offset2
         float
         (help
            "Outer offset, usually positive, the outside of the cuff"))
      (radius2
         float
         (help
            "Outer radius, usually the largest, the outside of the cuff"))
      (outer_radius
         float
         (help
            "Outside radius, should encompass the biggest thing on the outside, biggest one wins.  For incompressible things like big boots should be the biggest part.  For soft things like cloth should just be radius1"))
      (open_end
         bool
         (help
            "Is the inside open or closed, open is good for things like gauntlets"))
      (bone
         object
         (class Trans)
         (help
            "The bone of interest, like bone_R-knee for boot and pant cuffs"))
      (eccentricity
         float
         (range 0 1)
         (help
            "How much smaller to make the radius along Y, must be < 1"))
      (category
         symbol
         (help
            "The outfit category to cuff against, must be set to work"))
      (ignore
         (array
            object
            (class Mesh))
         (help
            "meshes to never deform")))
   (types))
(CharDriver
   (description
      "Class to Drive, Schedule and Blend CharClips.  Basically a stack, new ones are pushed onto the bottom, start playing at some point, and then pop off the ones above it once they are fully blended in.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext drv)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help
            "The CharBones object to add or blend into."))
      (clips
         file
         (help
            "CharClipSet milo file to load up")
         (refresh clips_ptr))
      (clips_ptr
         object
         (class CharClipSet)
         (help
            "pointer to CharClipSet object")
         (refresh clips)
         (no_test))
      (realign
         bool
         (help
            "Realigns the clips to always be aligned with the beat in the measure"))
      (apply
         int
         (list
            ("kApplyBlend"
               "kApplyAdd"
               "kApplyRotateTo"
               "kApplyBlendWeights"))
         (help
            "How to apply the driver to its bones"))
      (beat_scale
         float
         (help
            "Scale factor applied to incoming beat")
         (no_test))
      (test_clip
         object
         (class CharClip)
         (dir
            [clips_ptr])
         (help
            "Pick a clip to play")
         (no_test))
      (play_clip
         script
         (script
            {if_else
               {!=
                  [test_clip]
                  ''}
               {do
                  {if
                     {&&
                        {exists milo}
                        {==
                           {milo cur_anim}
                           "Time (secs)"}}
                     {do
                        ($bps
                           {[test_clip]
                              get
                              beats_per_sec})
                        ($start
                           {[test_clip]
                              get
                              start_beat})
                        ($end
                           {[test_clip]
                              get
                              end_beat})
                        {milo
                           set
                           bpm
                           {int
                              {'*' 60 $bps}}}
                        {milo
                           set_anim_frame
                           {/ $start $bps}
                           {/ $end $bps}
                           {/ $start $bps}}}}
                  {$this
                     play
                     [test_clip]
                     {'|' kPlayGraphLoop kPlayLast}}}
               {$this enter}})
         (help
            "Play the test_clip, or stop if set to none")))
   (types))
(CharDriverMidi
   (description
      "Uses an event list made from a parser to player animation on self.")
   (allowed_dirs Character)
   (superclasses CharDriver)
   (ext dmidi)
   (editor
      (inactive_clip
         object
         (class CharClip)
         (dir_prop clips_ptr)
         (help
            "Name of animation clip to use when not active, can be empty"))
      (blend_override_pct
         float
         (help
            "Blend override- set between 0-1 to change clip blending strategy")))
   (types))
(CharEyes
   (description
      "Moves a bunch of lookats around")
   (allowed_dirs Character)
   (superclasses CharPollable CharWeightable)
   (ext eyes)
   (editor
      (eyes
         (array
            (struct
               (eye
                  object
                  (class CharLookAt)
                  (help
                     "Eye to retarget"))
               (upper_lid
                  object
                  (class Trans)
                  (help
                     "corresponding upper lid bone, must rotate about Z"))
               (lower_lid
                  object
                  (class Trans)
                  (help
                     "corresponding lower lid bone, must rotate about Z")))))
      (view_direction
         object
         (class Trans)
         (help
            "optional bone that serves as the reference for which direction the character is looking.  If not set, one of the eyes will be used"))
      (interests
         (array
            object
            (class CharInterest)))
      (face_servo
         object
         (class CharFaceServo)
         (help
            "the CharFaceServo if any, used to allow blinks through the eyelid following"))
      (head_lookat
         object
         (class CharLookAt)
         (help
            "optionally supply a head lookat to inform eyes what the head is doing.  used primarily to coordinate eye lookats with head ones..."))
      (max_extrapolation
         float
         (help
            "in degrees, the maximum angle we can offset the current view direction when extrapolating for generated interests")
         (range 0 90))
      (camera_weight
         object
         (class CharWeightSetter)
         (help
            "The weight setter for eyes tracking the camera"))
      (disable_eye_dart
         bool
         (help
            "globally disables eye darts for all characters")
         (no_test))
      (disable_eye_jitter
         bool
         (help
            "globally disables eye jitter for all characters")
         (no_test))
      (disable_interest_objects
         bool
         (help
            "globally distales use of interest objects for all characters")
         (no_test))
      (disable_procedural_blink
         bool
         (help
            "globally distales use of procedural blinks for all characters")
         (no_test))
      (toggle_focus_testing
         script
         (script
            {$this toggle_force_focus})
         (help
            "for testing, this forces the current interest to a focus target"))
      (toggle_interest_overlay
         script
         (script
            {$this toggle_interest_overlay})
         (help
            "for testing, this shows the debug overlay for interest objects"))
      (min_target_dist
         float
         (help
            "the minimum distance, in inches, that this interest can be from the eyes.  If the interest is less than this distance, the eyes look in the same direction, but projected out to this distance.  May be overridden per interest object."))
      (ulid_track_up
         float
         (help
            "affects rotation applied to upper lid when eyes rotate up")
         (range 0 10))
      (ulid_track_down
         float
         (help
            "affects rotation applied to upper lid when eyes rotate down")
         (range 0 10))
      (llid_track_up
         float
         (help
            "translates lower lids up/down when eyes rotate up")
         (range 0 10))
      (llid_track_up_out
         float
         (help
            "translates lower lids in/out when eyes rotate up")
         (range -10 10))
      (llid_track_down
         float
         (help
            "translates lower lids up/down when eyes rotate down")
         (range 0 10))
      (llid_track_down_out
         float
         (help
            "translates lower lids in/out when eyes rotate down")
         (range -10 10)))
   (types))
(CharInterest
   (description
      "An interest object for a character to look at")
   (allowed_dirs ObjectDir)
   (superclasses Trans)
   (ext intr)
   (editor
      (priority
         float
         (help
            "An extra weight applied during scoring of this interest - use this to make it more or less important overall")
         (range 0 5))
      (max_view_angle
         float
         (help
            "In degrees, the maximum view cone angle for this object to be 'seen'")
         (range 0 90))
      (min_look_time
         float
         (help
            "The minimum time you have to look at this object when its selected")
         (range 0 100))
      (max_look_time
         float
         (help
            "The maximum allowable time to look at this object")
         (range 0 100))
      (refractory_period
         float
         (help
            "In secs, how long until this object can be looked at again")
         (range 0 100))
      (dart_ruleset_override
         object
         (class CharEyeDartRuleset)
         (help
            "if set, this dart ruleset will override the default one when looking at this interest object"))
      (overrides_min_target_dist
         bool
         (help
            "if true, we will override the minimum distance this target can be from the eyes using the value below"))
      (min_target_dist_override
         float
         (help
            "the minimum distance, in inches, that this interest can be from the eyes.  only applied if overrides_min_target_dist is true...")))
   (types))
(CharEyeDartRuleset
   (description
      "Defines a procedural ruleset that can be used to generate a variety of realistic eye darting behavior")
   (allowed_dirs ObjectDir)
   (ext dart)
   (editor
      (min_radius
         float
         (help
            "Dart locations will be at least this distance from target")
         (range 0.0 1000.0))
      (max_radius
         float
         (help
            "Dart locations will be at most this distance from target")
         (range 0.0 1000.0))
      (min_darts_per_sequence
         int
         (help
            "Each sequence of darts will have at least this many locations before returning to target")
         (range 0 50))
      (max_darts_per_sequence
         int
         (help
            "Each sequence of darts will have at most this many locations before returning to target")
         (range 0 50))
      (min_secs_between_darts
         float
         (help
            "In seconds, the minimum time between each dart in a sequence.  should be very small")
         (range 0 2.0))
      (max_secs_between_darts
         float
         (help
            "In seconds, the maximum time between each dart in a sequence.  should be very small")
         (range 0 2.0))
      (min_secs_between_sequences
         float
         (help
            "In seconds, the minimum time to wait to start another dart sequence after the previous one finishes")
         (range 0 100.0))
      (max_secs_between_sequences
         float
         (help
            "In seconds, the maximum time to wait to start another dart sequence after the previous one finishes")
         (range 0 100.0))
      (scale_with_distance
         bool
         (help
            "Sets whether the dart radius scales with the distance to the character - meaning this dart sequence looks the same regardless of distance"))
      (reference_distance
         float
         (help
            "When scale_with_distance is true, this distance is used as a reference to scale up the radius.")))
   (types))
(CharForeTwist
   (description
      "Does all interpolation for the forearm. Assumes: <ul>\n        <li>foretwist1 and forearm are under upperarm.</li>\n        <li>foretwist2 is under foretwist1 and that hand is under forearm.</li>\n        <li>on the left hand offset rotation is usually 90 on the left, and -90 on the right.</li>\n        </ul>\n        Feeds the bones when executed.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ftwist)
   (editor
      (hand
         object
         (class Trans)
         (help
            "The hand bone"))
      (twist2
         object
         (class Trans)
         (help
            "The twist2 bone"))
      (offset
         float
         (help
            "Usually -90 for right hand, 90 for left hand"))
      (length_scale
         float
         (help
            "Non-zero to stretch twist2 bone if the hand stretches.  Gh2 was .5, RB is .38")))
   (types))
(CharHair
   (description
      "Hair physics, deals with strands of hair")
   (allowed_dirs RndDir)
   (superclasses CharPollable)
   (ext hair)
   (editor
      (stiffness
         float
         (range 0 1)
         (help
            "stiffness of each strand"))
      (torsion
         float
         (range 0 1)
         (help
            "rotational stiffness of each strand"))
      (inertia
         float
         (range 0 1)
         (help
            "Inertia of the hair, zero means none"))
      (gravity
         float
         (range 0 10)
         (help
            "Gravity of the hair, one is normal"))
      (weight
         float
         (range 0 1)
         (help
            "Gravity of the hair, one is normal"))
      (friction
         float
         (range 0 1)
         (help
            "Hair friction against each other"))
      (min_slack
         float
         (help
            "If using sides, determines how far in it could go"))
      (max_slack
         float
         (help
            "If using sides, determines how far out it could go"))
      (strands
         (array
            (struct
               (root
                  object
                  (class Trans)
                  (help
                     "The root Trans for the hair strand")
                  (refresh strands))
               (angle
                  float
                  (help
                     "Angle in degrees of starting flip"))
               (points
                  (array
                     (struct
                        (bone
                           object
                           (class Trans)
                           (read_only TRUE)
                           (help
                              "hair bone we set the transform of"))
                        (length
                           float
                           (help
                              "the length of this strand bone"))
                        (radius
                           float
                           (help
                              "collision radius"))
                        (outer_radius
                           float
                           (help
                              "if > radius, is the distance the hair bone should start aligning itself with the collision primitive, so that once touching it, it will be totally flattened against it."))
                        (collides
                           (array
                              object
                              (class CharCollide))
                           (help
                              "things to collide against"))
                        (side_length
                           float
                           (help
                              "if >= 0 the base length to the side modified by min_slack and max_slack")))
                     (fixed_size TRUE)))
               (show_spheres
                  bool
                  (help
                     "show the points as spheres"))
               (show_collide
                  bool
                  (help
                     "show the collision shapes"))
               (show_pose
                  bool
                  (help
                     "Show the original pose when hilit, good for adjusting angle to match the pose")))))
      (simulate
         bool
         (help
            "Simulate physics or not")
         (no_test))
      (wind
         object
         (class Wind)
         (help
            "wind object to use"))
      (set_cloth
         script
         (script
            {$this set_cloth TRUE})
         (help
            "Sets this as cloth, all sides true."))
      (unset_cloth
         script
         (script
            {$this set_cloth FALSE})
         (help
            "Sets this as cloth, all sides true."))
      (hookup
         script
         (script
            {$this hookup})
         (help
            "Re-hookup the hair to the collision volumes"))
      (freeze_pose
         script
         (script
            {$this freeze_pose})
         (help
            "freeze the current pose for resetting")))
   (types))
(CharIKFoot
   (description
      "Remedial foot skate ik, not yet ready for prime time.")
   (allowed_dirs Character)
   (superclasses CharIKHand)
   (ext ikfoot)
   (editor
      (other
         object
         (class CharIKFoot)
         (help
            "the other foot ik"))
      (data
         object
         (class Trans)
         (help
            "which bone to use to get the IK data from"))
      (data_index
         int
         (help
            "Which element index to use (x=0, y=1, z=2)"))
      #ifndef _SHIP
      (show
         int
         (help
            "one to show")
         (no_test))
      (analyze
         script
         (script
            {do
               ($drv
                  {find_obj
                     {$this dir}
                     "main.drv"})
               ($clip '')
               {if
                  ($drv)
                  {{{$this dir}
                        find
                        bone.servo}
                     set
                     move_self
                     FALSE}
                  {$this set weight 0}
                  {set
                     $clip
                     {$drv first_clip}}
                  {$this analyze $clip}}})
         (help
            "analyze this clip\n"))
      #endif)
   (types))
(CharIKHand
   (description
      "Pins a hand bone to another RndTransformable, bending the elbow to make it reach.  Optionally aligns orientations and stretches")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikhand)
   (editor
      (hand
         object
         (class Trans)
         (help
            "The hand to be moved, must be child of elbow"))
      (finger
         object
         (class Trans)
         (help
            "If non null, will be the thing that actually hits the target, the hand will be moved into such a location as to make it hit.  You probably always want to turn on orientation in this case, as otherwise, the hand will be in a somewhat random orientation, which will probably mean that the finger will miss the mark."))
      (targets
         (array
            object
            (class Trans))
         (help
            "Where to move the hand to"))
      (orientation
         bool
         (help
            "Orient the hand to the dest"))
      (stretch
         bool
         (help
            "Stretch the hand to the dest"))
      (scalable
         bool
         (help
            "Recalculate bone length every frame, needed for bones which scale"))
      (move_elbow
         bool
         (help
            "Moves the elbow and shoulder to position the hand, if false, just teleports the hand"))
      (elbow_swing
         float
         (help
            "Range to swing the elbow in radians to hit target, better looking suggest .7"))
      (always_ik_elbow
         bool
         (help
            "Turn this on to do IK calcs even if weight is 0"))
      (constrain_wrist
         bool
         (help
            "Constrain the wrist rotation to be believable"))
      (wrist_radians
         float
         (help
            "Constrain wrist rotation to this angle (in radians)")))
   (types))
(CharIKHead
   (description
      "Puts a head bone into a position, doing IK on the spine to achieve it.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikhead)
   (editor
      (head
         object
         (class Trans)
         (help
            "The head bone which will be moved to the target"))
      (spine
         object
         (class Trans)
         (help
            "The first spine bone in the chain to be moved"))
      (mouth
         object
         (class Trans)
         (help
            "If non null, will be the thing that actually hits the target"))
      (target
         object
         (class Trans)
         (help
            "The target to hit"))
      (target_radius
         float
         (help
            "allowable head movement relative to the target"))
      (head_mat
         float
         (help
            "how much to blend the original world space head matrix in"))
      (offset
         object
         (class Trans)
         (help
            "Another bone to get the same world space delta"))
      (offset_scale
         VECTOR3
         (help
            "World space axis scaling to apply to delta before applying to offset bone.")))
   (types))
(CharIKMidi
   (description
      "Moves an RndTransformable (bone) to another RndTransformable (spot) over time, blending from where it was relative to the parent of the spot.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ikmidi)
   (editor
      (bone
         object
         (class Trans)
         (help
            "The bone to move"))
      (cur_spot
         object
         (class Trans)
         (help
            "Spot to go to, zero indexed")
         (no_test))
      (anim_blend_weightable
         object
         (class CharWeightable)
         (help
            "Weightable to change animation between frets"))
      (anim_blend_max
         float
         (help
            "Max weight for animation change")))
   (types))
(CharIKRod
   (description
      "<p>Rigs a bone between two other bones and sets the\n        orientation from that.</p>\n        <p>When you set up all the bone pointers, the rig xfm will be\n        computed, an inverse from that to the dst bone will be computed,\n        and everything will come from that. So the dst bone will maintain\n        the exact same position in that pose. That makes it easy to author\n        the bones.</p>")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ikrod)
   (editor
      (left_end
         object
         (class Trans)
         (help
            "Left end of the rod"))
      (right_end
         object
         (class Trans)
         (help
            "Right end of the rod"))
      (dest_pos
         float
         (help
            "Fraction of the way dest is from left (0) to right(1)"))
      (side_axis
         object
         (class Trans)
         (help
            "Take the z axis from this bone rather than from rod end delta"))
      (vertical
         bool
         (help
            "Force the dest to be vertically upright"))
      (dest
         object
         (class Trans)
         (help
            "The bone to set")))
   (types))
(CharIKScale
   (description
      "Rescales a local position of a bone")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikscale)
   (editor
      (dest
         object
         (class Trans)
         (help
            "The bone to be scaled"))
      (scale
         float
         (help
            "Scale to apply"))
      (capture_before
         script
         (script
            {$this capture_before})
         (refresh scale)
         (help
            "Call after posing normally, captures data with which to auto compute scale"))
      (capture_after
         script
         (script
            {$this capture_after})
         (refrest scale)
         (help
            "Call after posing deformed, computes scale based on ratio of capture_before capture to now."))
      (secondary_targets
         (array
            object
            (class Trans))
         (help
            "Apply remainder weight to these targets"))
      (auto_weight
         bool
         (help
            "Automatically determine weight from top & bottom heights"))
      (bottom_height
         float
         (help
            "If dest starts out at or below this height, weight will be 0"))
      (top_height
         float
         (help
            "If dest starts out at or above this height, weight will be 1")))
   (types))
(CharLipSync
   (description
      "A full lipsync animation, basically a changing set of weights for a set of named visemes.  Sampled at 30hz")
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext lipsync)
   (editor
      (frames
         int
         (help
            "how many keyframes")
         (read_only TRUE))
      (duration
         float
         (help
            "duration in seconds")
         (read_only TRUE))
      (visemes
         (array
            string
            (read_only TRUE))
         (help
            "viseme names")
         (read_only TRUE)))
   (types))
(CharLipSyncDriver
   (description
      "Drives lip sync animation")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext lipdrv)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help
            "The CharBones object to add or blend into."))
      (lipsync
         object
         (class CharLipSync)
         (help
            "The lipsync file to use"))
      (clips
         object
         (class CharClipSet)
         (help
            "pointer to CharClipSet object"))
      (song_owner
         object
         (class CharLipSyncDriver)
         (help
            "Will use this song if set, except for blinks")
         (no_test))
      (loop
         bool
         (help
            "should we loop this song, resets on song change")
         (no_test))
      (song_offset
         float
         (help
            "offset within song in seconds, resets on song change")
         (no_test))
      (override_options
         object
         (class CharClipSet)
         (help
            "an optional clipset that provides list of clips to override face with - viseme clipset is used otherwise"))
      (apply_override_additively
         bool
         (help
            "is the override clip applied addtively on top of face mocap?  If false, it will blend."))
      (override_clip
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "default clip to be used as the override - maybe be overriden programatically"))
      (override_weight
         float
         (help
            "weight to blend override clip. this is mostly here for testing, because its likely to be set programatically."))
      (test_clip
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "Test charclip to apply, does nothing else"))
      (test_weight
         float
         (help
            "weight to apply this clip with")))
   (types))
(CharFaceServo
   (description
      "BonesMeshes for facial blending")
   (allowed_dirs Character)
   (superclasses CharPollable CharBonesMeshes)
   (ext faceservo)
   (editor
      (clips
         object
         (class CharClipSet)
         (help
            "pointer to CharClipSet object, must contain Blink and Base visemes")
         (no_test))
      (blink_clip_left
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "Blink clip, used to close the left eye")
         (no_test))
      (blink_clip_left2
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "A second clip that contributes to closing the left eye")
         (no_test))
      (blink_clip_right
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "Blink clip, used to close the right eye")
         (no_test))
      (blink_clip_right2
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "A second clip that contributes to closing the right eye")
         (no_test)))
   (types))
(CharLookAt
   (description
      "Makes a source point at dest by rotating a pivot, points along Y axis of source")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext lookat)
   (editor
      (pivot
         object
         (class Trans)
         (help
            "The thing that pivots"))
      (source
         object
         (class Trans)
         (help
            "If non null, the bone which looks at along its Y axis, otherwise equal to the pivot"))
      (target
         object
         (class Trans)
         (help
            "The thing to look at"))
      (half_time
         float
         (help
            "Seconds of lag when moving the source"))
      (min_yaw
         float
         (help
            "Degrees of min allowable yaw, looking left")
         (range -80 80))
      (max_yaw
         float
         (help
            "Degrees of max allowable yaw, looking right")
         (range -80 80))
      (min_pitch
         float
         (help
            "Degrees of min allowable pitch, looking down")
         (range -80 80))
      (max_pitch
         float
         (help
            "Degrees of max allowable pitch, looking up")
         (range -80 80))
      (min_weight_yaw
         float
         (help
            "Degrees of yaw to start auto-weight, -1 means no auto-weight"))
      (max_weight_yaw
         float
         (help
            "Degrees of yaw to stop auto-weight, must be greater than mMinWeightYaw"))
      (weight_yaw_speed
         float
         (help
            "Max speed in weight/sec that the auto-weight can change"))
      (allow_roll
         bool
         (help
            "If true allows rolling, if false, keeps the local pivot z axis down to prevent rolling.  Eyeballs can't roll, for instance, but heads can."))
      (source_radius
         float
         (help
            "radius in degrees of filtered source motion that's allowed through"))
      (show_range
         bool
         (help
            "Graphically show the extreme ranges of motion")
         (no_test))
      (test_range
         bool
         (help
            "Graphically show range of motion with user specified values")
         (no_test))
      (test_range_pitch
         float
         (help
            "if test_range is on, adjusts current pitch")
         (range 0 1))
      (test_range_yaw
         float
         (help
            "if test_range is on, adjusts current yaw")
         (range 0 1))
      (enable_jitter
         bool
         (help
            "If enabled, high frequency noise is added to pitch and/or yaw each frame")
         (no_test))
      (yaw_jitter_limit
         float
         (help
            "if enable_jitter is on, random noise from [-yaw_jitter_limit, yaw_jitter_limit] (in degrees) is applied to the yaw of the lookat")
         (range 0 10))
      (pitch_jitter_limit
         float
         (help
            "if enable_jitter is on, random noise from [-pitch_jitter_limit, pitch_jitter_limit] (in degrees) is applied to the pitch of the lookat")
         (range 0 10)))
   (types))
(CharMirror
   (description
      "Duplicates or mirrors another character's motions, given\n        the matching bone servo.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext mirr)
   (editor
      (servo
         object
         (class CharServoBone)
         (help
            "The servo to change"))
      (mirror_servo
         object
         (class CharServoBone)
         (help
            "The servo we want to mirror")))
   (types))
(CharNeckTwist
   (description
      "Does all interpolation for the neck.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ntwist)
   (editor
      (head
         object
         (class Trans)
         (help
            "The head bone, must be descendent of neck"))
      (twist
         object
         (class Trans)
         (help
            "The twist bone, neck must be parent of")))
   (types))
(CharPollable
   (description
      "Workhorse unit of the Character system, most Character things inherit from this.")
   (allowed_dirs)
   (superclasses Poll)
   (types))
(CharPollGroup
   (description
      "Group of Charpollable, polled in the order given, use when the automatic CharPollable sorting is not correct or sufficient.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext pgrp)
   (editor
      (polls
         (array
            object
            (class CharPollable))
         (help
            "Ordered list of CharPollables, will be polled in this order.")))
   (types))
(CharPosConstraint
   (description
      "Forces the targets to be within a world space bounding box relative to source.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext const)
   (editor
      (source
         object
         (class Trans)
         (help
            "Bone to be higher than"))
      (targets
         (array
            object
            (class Trans))
         (help
            "Bones to constrain"))
      (box
         BOX
         (help
            "Bounding box, make min > max to ignore that dimension")))
   (types))
(CharServoBone
   (description
      "Sets bone transforms and regulates Character center to a spot.")
   (allowed_dirs Character)
   (superclasses CharPollable CharBonesMeshes)
   (ext servo)
   (editor
      (regulate
         object
         (class Waypoint)
         (help
            "Waypoint to regulate to")
         (no_test))
      (move_self
         bool
         (help
            "Move ourselves around when playing animations")
         (no_test)))
   (types))
(CharSleeve
   (description
      "Animates top and bottom sleeve bones. Both must have the same local xfm when transformed, and the parent bone must point along the X axis.  The local positions of both bones must only have z be non null.")
   (allowed_dirs Character)
   (ext sleeve)
   (editor
      (sleeve
         object
         (class Trans)
         (help
            "The sleeve bone"))
      (top_sleeve
         object
         (class Trans)
         (help
            "The top sleeve bone, has zero range"))
      (inertia
         float
         (help
            "Intertia 0-1, .5 is default")
         (range 0 10000))
      (gravity
         float
         (help
            "Force of gravity, 1 is normal"))
      (range
         float
         (help
            "forward and backward range of the sleeve")
         (range 0 10000))
      (pos_length
         float
         (help
            "how much longer it can stretch than its length")
         (range 0 10000))
      (neg_length
         float
         (help
            "how much negative length it can go")
         (range 0 10000))
      (stiffness
         float
         (help
            "how stiff it is for length and range, 1 is max")
         (range 0 1)))
   (types))
(CharTransCopy
   (description
      "Copies local xfm from one bone to another at poll time")
   (allowed_dirs RndDir)
   (superclasses CharPollable)
   (ext tcopy)
   (editor
      (src
         object
         (class Trans)
         (help
            "Object to copy the local xfm from"))
      (dest
         object
         (class Trans)
         (help
            "Object to copy the local xfm to")))
   (types))
(CharUpperTwist
   (description
      "<p>Does all interpolation for the upperarm, assuming\n        upperArm, upperTwist1 and 2 are under clavicle. Rotation about x is\n        evenly distributed from clavicle->twist1->twist2->upperarm</p>\n        Feeds the bones when executed.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext utwist)
   (editor
      (upper_arm
         object
         (class Trans)
         (help
            "The upper arm bone"))
      (twist1
         object
         (class Trans)
         (help
            "The upper arm twist1 bone"))
      (twist2
         object
         (class Trans)
         (help
            "The upper arm twist2 bone")))
   (types))
(CharWalk
   (description
      "Given a set of turns, walks, and stops, makes a character\n        walk along waypoints, finishing up with a certain facing. There\n        must be looping transitions for the walks, and transitions from\n        turns to walks. Transitions from walks to stops are not needed as\n        you may have to stop on a dime anyway. Instead the beat track is\n        used to align walks and stops, so both have to be beat aligned to\n        2 beats, and the right foot needs to fall on the even beats.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext walk)
   (editor)
   (types))
(CharWeightable
   (description
      "Base class for any object that can have weight set on it,\n        or have a Weightable parent from which it gets that state.")
   (allowed_dirs)
   (editor
      (weight
         float
         (help
            "Weight to blend in by"))
      (weight_owner
         object
         (class CharWeightable)
         (help
            "object to get weight from")
         (no_test)))
   (types))
(CharWeightSetter
   (description
      "Sets its own weight by pushing flags through a driver to\n        see what fraction of them it has.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext weight)
   (editor
      (driver
         object
         (class CharDriver)
         (help
            "The Driver to monitor"))
      (flags
         int
         (help
            "Which clip flags to look for"))
      (base
         object
         (class CharWeightable)
         (help
            "If driver not set, uses this to get base weight"))
      (min_weight
         object
         (class CharWeightSetter)
         (help
            "Use this setter as the minimum possible weight"))
      (offset
         float
         (help
            "Constant offset to apply to the weight."))
      (scale
         float
         (help
            "Constant scale to appyly the weight."))
      (base_weight
         float
         (help
            "The base weight that the real weight is derived from"))
      (beats_per_weight
         float
         (help
            "how many beats it should take to change the weight from 0 to 1")))
   (types))
(OutfitLoader
   (description
      "Loads new outfits into a character by merging, much like a milo file merge.")
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext outfit)
   (editor
      (directory
         file
         (dir TRUE)
         (help
            "Directory to look in."))
      (categories
         (array
            (struct
               (name
                  symbol
                  (read_only TRUE)
                  (help
                     "Name of the category"))
               (selected_outfit
                  symbol
                  (refresh categories)
                  (list
                     {$this
                        prop_handle
                        (categories
                           {elem $milo_prop_path 1}
                           list_outfits)})
                  (post_sync
                     {milo update_objects})
                  (help
                     "Selected outfit"))
               (shown_outfit
                  symbol
                  (read_only TRUE)
                  (help
                     "Shown outfit"))
               (desired_outfit
                  symbol
                  (read_only TRUE)
                  (help
                     "Desired outfit"))
               (path
                  file
                  (dir TRUE)
                  (help
                     "Path to override top level directory, if set.")
                  (read_only TRUE)))
            (header
               [categories
                  {elem $milo_prop_path 1}
                  name]))
         (fixed_size TRUE)
         (help
            "All the outfit categories"))
      (reset
         script
         (script
            {$this reset}
            {$this start_load})
         (help
            "Resets state, needed if you change typedef"))
      (start_load
         script
         (script
            {$this start_load})
         (help
            "Load the current state"))
      (disable_all
         bool
         (help
            "Disables ALL outfitloaders, for debugging ONLY!")
         (no_test))
      (merge_back_obj
         object
         (class Object)
         (help
            "choose an object to merge back into its original milo file")
         (no_test))
      (merge_back
         script
         (script
            {$this merge_back})
         (help
            "Merges merge_back_obj back into its original milo file, good for editing things like hair, and then merging back into its file")))
   (types))
(ClipCollide
   (description
      "Analyzes character clips in a venue")
   (milo_no_save)
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext vv)
   (editor
      (character
         object
         (class Character)
         (help
            "Pointer to the character to move around")
         (no_test))
      (pick_character
         string
         (list
            (""
               ""))
         (help
            "Changes the character to one of the listed ones")
         (no_test))
      (waypoint
         object
         (class Waypoint)
         (help
            "Waypoint to stand at")
         (no_test))
      (position
         symbol
         (list
            (front back left right))
         (help
            "Where in the waypoint to stand")
         (no_test))
      (clip
         object
         (class CharClip)
         (dir_prop clips)
         (list
            {$this list_clips})
         (help
            "Clip to test")
         (no_test))
      (demonstrate
         script
         (help
            "Run the animation")
         (script
            {$this demonstrate})
         (no_test))
      (collide
         script
         (help
            "Run the collision")
         (script
            {$this clear_report}
            {$this collide})
         (refresh pick_report)
         (no_test))
      (test_chars
         script
         (help
            "Test all the characters against all the waypoints in this venue")
         (script
            {$this clear_report}
            {$this test_chars})
         (refresh pick_report)
         (no_test))
      (test_waypoints
         script
         (help
            "Test the current character against all the waypoints in the venue")
         (script
            {$this clear_report}
            {$this test_waypoints})
         (refresh pick_report)
         (no_test))
      (test_clips
         script
         (help
            "Test all clips for the current character and waypoint")
         (script
            {$this clear_report}
            {$this test_clips})
         (refresh pick_report)
         (no_test))
      (pick_report
         string
         (list
            {$this list_report})
         (help
            "Pick a report entry to look at")
         (refresh waypoint position clip)
         (no_test))
      (world_lines
         bool
         (help
            "show red world lines")
         (no_test))
      (move_camera
         bool
         (help
            "move the camera when you pick a report")
         (no_test))
      (mode
         symbol
         (list
            (''))
         (help
            "mode to run in")
         (no_test)))
   (types))
(PatchDir
   (description
      "Directory for tattoo/clothing patches")
   (types))
(PatchLayer
   (description
      "Layer for tattoo/clothing patches")
   (types))
(Waypoint
   (description
      "A waypoint for character movement. Characters walk to\n   these, start themselves out from these, etc.")
   (allowed_dirs ObjectDir)
   (superclasses Trans Draw)
   (ext way)
   (editor
      (flags
         int
         (help
            "Flags for this waypoint, should be a bitfield per app"))
      (radius
         float
         (help
            "Radius within we can stop from a walk, or be tethered to"))
      (y_radius
         float
         (help
            "If positive, makes this shape a box with radius the x axis X half width, and y_radius the Y axis half width"))
      (ang_radius
         float
         (help
            "Angular slop in degrees away from y axis"))
      (strict_radius_delta
         float
         (help
            "how much beyond radius you will never leave, it will forcibly pull you back, ignored if <= 0"))
      (strict_ang_delta
         float
         (help
            "degrees beyond ang radius you can never rotate past, if >= 0"))
      (connections
         (array
            object
            (class Waypoint))
         (help
            "Waypoints we can walk to"))
      (show_graph
         bool
         (help
            "Display the waypoint graph connections")))
   (types))